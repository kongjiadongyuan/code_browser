<dec f='linux/include/linux/clk.h' l='464' type='long clk_round_rate(struct clk * clk, unsigned long rate)'/>
<doc f='linux/include/linux/clk.h' l='443'>/**
 * clk_round_rate - adjust a rate to the exact rate a clock can provide
 * @clk: clock source
 * @rate: desired clock rate in Hz
 *
 * This answers the question &quot;if I were to pass @rate to clk_set_rate(),
 * what clock rate would I end up with?&quot; without changing the hardware
 * in any way.  In other words:
 *
 *   rate = clk_round_rate(clk, r);
 *
 * and:
 *
 *   clk_set_rate(clk, r);
 *   rate = clk_get_rate(clk);
 *
 * are equivalent except the former does not modify the clock hardware
 * in any way.
 *
 * Returns rounded clock rate in Hz, or negative errno.
 */</doc>
<def f='linux/drivers/clk/clk.c' l='990' ll='1010' type='long clk_round_rate(struct clk * clk, unsigned long rate)'/>
<dec f='linux/drivers/clk/clk.c' l='1011' type='long clk_round_rate(struct clk * , unsigned long )'/>
<use f='linux/drivers/clk/clk.c' l='1011' c='clk_round_rate'/>
<use f='linux/drivers/clk/clk.c' l='1011' u='a'/>
<use f='linux/drivers/clk/clk.c' l='1011' u='a'/>
<doc f='linux/drivers/clk/clk.c' l='981'>/**
 * clk_round_rate - round the given rate for a clk
 * @clk: the clk for which we are rounding a rate
 * @rate: the rate which is to be rounded
 *
 * Takes in a rate as input and rounds it to a rate that the clk can actually
 * use which is then returned.  If clk doesn&apos;t support round_rate operation
 * then the parent rate is returned.
 */</doc>
