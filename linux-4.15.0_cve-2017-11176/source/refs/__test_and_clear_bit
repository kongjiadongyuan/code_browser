<def f='linux/arch/x86/include/asm/bitops.h' l='285' ll='294' type='bool __test_and_clear_bit(long nr, volatile unsigned long * addr)'/>
<use f='linux/include/asm-generic/bitops/le.h' l='95' u='c' c='__test_and_clear_bit_le'/>
<doc f='linux/arch/x86/include/asm/bitops.h' l='269'>/**
 * __test_and_clear_bit - Clear a bit and return its old value
 * @nr: Bit to clear
 * @addr: Address to count from
 *
 * This operation is non-atomic and can be reordered.
 * If two examples of this operation race, one can appear to succeed
 * but actually fail.  You must protect multiple accesses with a lock.
 *
 * Note: the operation is performed atomically with respect to
 * the local CPU, but not other CPUs. Portable code should not
 * rely on this behaviour.
 * KVM relies on this behaviour on x86 for modifying memory that is also
 * accessed from a hypervisor on the same CPU if running in a VM: don&apos;t change
 * this without also updating arch/x86/kernel/kvm.c
 */</doc>
<use f='linux/arch/x86/events/core.c' l='1348' u='c' c='x86_pmu_stop'/>
<use f='linux/arch/x86/events/core.c' l='1452' u='c' c='x86_pmu_handle_irq'/>
<use f='linux/arch/x86/events/intel/core.c' l='2273' u='c' c='intel_pmu_handle_irq'/>
<use f='linux/arch/x86/events/intel/core.c' l='2282' u='c' c='intel_pmu_handle_irq'/>
<use f='linux/arch/x86/events/intel/p4.c' l='1014' u='c' c='p4_pmu_handle_irq'/>
<use f='linux/arch/x86/events/intel/uncore.c' l='482' u='c' c='uncore_pmu_event_stop'/>
<use f='linux/drivers/gpu/drm/i915/i915_sw_fence.c' l='270' u='c' c='__i915_sw_fence_clear_checked_bit'/>
<use f='linux/drivers/input/ff-memless.c' l='376' u='c' c='ml_get_combo_effect'/>
<use f='linux/drivers/input/input.c' l='920' u='c' c='input_set_keycode'/>
<use f='linux/fs/nfs/nfs4client.c' l='217' u='c' c='nfs4_destroy_callback'/>
<use f='linux/fs/nfs/nfs4client.c' l='223' u='c' c='nfs4_shutdown_client'/>
<use f='linux/fs/nfs/nfs4client.c' l='227' u='c' c='nfs4_shutdown_client'/>
<use f='linux/kernel/time/timer.c' l='1372' u='c' c='__collect_expired_timers'/>
<use f='linux/mm/mmap.c' l='3491' u='c' c='vm_unlock_anon_vma'/>
<use f='linux/net/rfkill/input.c' l='127' u='c' c='rfkill_op_handler'/>
<use f='linux/net/rfkill/input.c' l='128' u='c' c='rfkill_op_handler'/>
