<dec f='linux/include/keys/asymmetric-type.h' l='79' type='struct key * find_asymmetric_key(struct key * keyring, const struct asymmetric_key_id * id_0, const struct asymmetric_key_id * id_1, bool partial)'/>
<def f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='49' ll='126' type='struct key * find_asymmetric_key(struct key * keyring, const struct asymmetric_key_id * id_0, const struct asymmetric_key_id * id_1, bool partial)'/>
<dec f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='127' type='struct key * find_asymmetric_key(struct key * , const struct asymmetric_key_id * , const struct asymmetric_key_id * , bool )'/>
<use f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='127' c='find_asymmetric_key'/>
<use f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='127' u='a'/>
<use f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='127' u='a'/>
<doc f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='38'>/**
 * find_asymmetric_key - Find a key by ID.
 * @keyring: The keys to search.
 * @id_0: The first ID to look for or NULL.
 * @id_1: The second ID to look for or NULL.
 * @partial: Use partial match if true, exact if false.
 *
 * Find a key in the given keyring by identifier.  The preferred identifier is
 * the id_0 and the fallback identifier is the id_1.  If both are given, the
 * lookup is by the former, but the latter must also match.
 */</doc>
<use f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='54' u='c' c='pkcs7_validate_trust_one'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='86' u='c' c='pkcs7_validate_trust_one'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='103' u='c' c='pkcs7_validate_trust_one'/>
<use f='linux/crypto/asymmetric_keys/restrict.c' l='101' u='c' c='restrict_link_by_signature'/>
<use f='linux/crypto/asymmetric_keys/restrict.c' l='153' u='c' c='key_or_keyring_common'/>
<use f='linux/crypto/asymmetric_keys/restrict.c' l='199' u='c' c='key_or_keyring_common'/>
