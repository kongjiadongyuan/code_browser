<dec f='linux/include/linux/skbuff.h' l='1031' type='struct sk_buff * skb_copy(const struct sk_buff * skb, gfp_t priority)'/>
<use f='linux/include/linux/skbuff.h' l='1541' u='c' c='skb_unshare'/>
<use f='linux/drivers/net/ethernet/broadcom/tg3.c' l='7796' u='c' c='tigon3_dma_hwbug_workaround'/>
<use f='linux/kernel/audit.c' l='766' u='c' c='kauditd_send_multicast_skb'/>
<def f='linux/net/core/skbuff.c' l='1338' ll='1357' type='struct sk_buff * skb_copy(const struct sk_buff * skb, gfp_t gfp_mask)'/>
<dec f='linux/net/core/skbuff.c' l='1358' type='struct sk_buff * skb_copy(const struct sk_buff * , gfp_t )'/>
<use f='linux/net/core/skbuff.c' l='1358' c='skb_copy'/>
<use f='linux/net/core/skbuff.c' l='1358' u='a'/>
<use f='linux/net/core/skbuff.c' l='1358' u='a'/>
<use f='linux/net/core/skbuff.c' l='4111' u='c' c='skb_cow_data'/>
<doc f='linux/net/core/skbuff.c' l='1321'>/**
 *	skb_copy	-	create private copy of an sk_buff
 *	@skb: buffer to copy
 *	@gfp_mask: allocation priority
 *
 *	Make a copy of both an &amp;sk_buff and its data. This is used when the
 *	caller wishes to modify the data and needs a private copy of the
 *	data to alter. Returns %NULL on failure or the pointer to the buffer
 *	on success. The returned buffer has a reference count of 1.
 *
 *	As by-product this function converts non-linear &amp;sk_buff to linear
 *	one, so that &amp;sk_buff becomes completely private and caller is allowed
 *	to modify all the data of returned buffer. This means that this
 *	function is not recommended for use in circumstances when only
 *	header is going to be modified. Use pskb_copy() instead.
 */</doc>
<use f='linux/net/ipv4/tcp_output.c' l='3169' u='c' c='tcp_send_synack'/>
<use f='linux/net/ipv6/icmp.c' l='623' u='c' c='ip6_err_gen_icmpv6_unreach'/>
<use f='linux/net/mac80211/cfg.c' l='3271' u='c' c='ieee80211_attach_ack_skb'/>
<use f='linux/net/mac80211/rx.c' l='236' u='c' c='ieee80211_handle_mu_mimo_mon'/>
<use f='linux/net/mac80211/rx.c' l='2291' u='c' c='ieee80211_deliver_skb'/>
<use f='linux/net/mac80211/rx.c' l='4030' u='c' c='ieee80211_invoke_fast_rx'/>
<use f='linux/net/mac80211/rx.c' l='4101' u='c' c='ieee80211_prepare_and_rx_handle'/>
<use f='linux/net/mac80211/tdls.c' l='1046' u='c' c='ieee80211_tdls_prep_mgmt_packet'/>
<use f='linux/net/mac80211/tx.c' l='4354' u='c' c='ieee80211_beacon_get_tim'/>
