<dec f='linux/include/linux/netfilter/x_tables.h' l='421' type='bool xt_percpu_counter_alloc(struct xt_percpu_counter_alloc_state * state, struct xt_counters * counter)'/>
<use f='linux/net/ipv4/netfilter/ip_tables.c' l='539' u='c' c='find_check_entry'/>
<use f='linux/net/ipv6/netfilter/ip6_tables.c' l='559' u='c' c='find_check_entry'/>
<def f='linux/net/netfilter/x_tables.c' l='1695' ll='1716' type='bool xt_percpu_counter_alloc(struct xt_percpu_counter_alloc_state * state, struct xt_counters * counter)'/>
<dec f='linux/net/netfilter/x_tables.c' l='1717' type='bool xt_percpu_counter_alloc(struct xt_percpu_counter_alloc_state * , struct xt_counters * )'/>
<use f='linux/net/netfilter/x_tables.c' l='1717' c='xt_percpu_counter_alloc'/>
<use f='linux/net/netfilter/x_tables.c' l='1717' u='a'/>
<use f='linux/net/netfilter/x_tables.c' l='1717' u='a'/>
<doc f='linux/net/netfilter/x_tables.c' l='1675'>/**
 * xt_percpu_counter_alloc - allocate x_tables rule counter
 *
 * @state: pointer to xt_percpu allocation state
 * @counter: pointer to counter struct inside the ip(6)/arpt_entry struct
 *
 * On SMP, the packet counter [ ip(6)t_entry-&gt;counters.pcnt ] will then
 * contain the address of the real (percpu) counter.
 *
 * Rule evaluation needs to use xt_get_this_cpu_counter() helper
 * to fetch the real percpu counter.
 *
 * To speed up allocation and improve data locality, a 4kb block is
 * allocated.
 *
 * xt_percpu_counter_alloc_state contains the base address of the
 * allocated page and the current sub-offset.
 *
 * returns false on error.
 */</doc>
