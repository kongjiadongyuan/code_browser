<dec f='linux/include/net/net_namespace.h' l='339' type='int register_pernet_device(struct pernet_operations * )'/>
<use f='linux/net/core/dev.c' l='8863' u='c' c='net_dev_init'/>
<use f='linux/net/core/dev.c' l='8866' u='c' c='net_dev_init'/>
<def f='linux/net/core/net_namespace.c' l='1038' ll='1047' type='int register_pernet_device(struct pernet_operations * ops)'/>
<dec f='linux/net/core/net_namespace.c' l='1048' type='int register_pernet_device(struct pernet_operations * )'/>
<use f='linux/net/core/net_namespace.c' l='1048' c='register_pernet_device'/>
<use f='linux/net/core/net_namespace.c' l='1048' u='a'/>
<use f='linux/net/core/net_namespace.c' l='1048' u='a'/>
<doc f='linux/net/core/net_namespace.c' l='1019'>/**
 *      register_pernet_device - register a network namespace device
 *	@ops:  pernet operations structure for the subsystem
 *
 *	Register a device which has init and exit functions
 *	that are called when network namespaces are created and
 *	destroyed respectively.
 *
 *	When registered all network namespace init functions are
 *	called for every existing network namespace.  Allowing kernel
 *	modules to have a race free view of the set of network namespaces.
 *
 *	When a new network namespace is created all of the init
 *	methods are called in the order in which they were registered.
 *
 *	When a network namespace is destroyed all of the exit methods
 *	are called in the reverse of the order with which they were
 *	registered.
 */</doc>
<use f='linux/net/ipv6/sit.c' l='1902' u='c' c='sit_init'/>
<use f='linux/net/wireless/core.c' l='1349' u='c' c='cfg80211_init'/>
