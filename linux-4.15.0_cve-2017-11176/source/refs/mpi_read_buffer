<dec f='linux/include/linux/mpi.h' l='80' type='int mpi_read_buffer(MPI a, uint8_t * buf, unsigned int buf_len, unsigned int * nbytes, int * sign)'/>
<def f='linux/lib/mpi/mpicoder.c' l='143' ll='188' type='int mpi_read_buffer(MPI a, uint8_t * buf, unsigned int buf_len, unsigned int * nbytes, int * sign)'/>
<dec f='linux/lib/mpi/mpicoder.c' l='189' type='int mpi_read_buffer(MPI , uint8_t * , unsigned int , unsigned int * , int * )'/>
<use f='linux/lib/mpi/mpicoder.c' l='189' c='mpi_read_buffer'/>
<use f='linux/lib/mpi/mpicoder.c' l='189' u='a'/>
<use f='linux/lib/mpi/mpicoder.c' l='189' u='a'/>
<use f='linux/lib/mpi/mpicoder.c' l='222' u='c' c='mpi_get_buffer'/>
<doc f='linux/lib/mpi/mpicoder.c' l='129'>/**
 * mpi_read_buffer() - read MPI to a bufer provided by user (msb first)
 *
 * @a:		a multi precision integer
 * @buf:	bufer to which the output will be written to. Needs to be at
 *		leaset mpi_get_size(a) long.
 * @buf_len:	size of the buf.
 * @nbytes:	receives the actual length of the data written on success and
 *		the data to-be-written on -EOVERFLOW in case buf_len was too
 *		small.
 * @sign:	if not NULL, it will be set to the sign of a.
 *
 * Return:	0 on success or error code in case of error
 */</doc>
