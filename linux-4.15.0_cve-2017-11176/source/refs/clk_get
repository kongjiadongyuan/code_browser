<dec f='linux/include/linux/clk.h' l='258' type='struct clk * clk_get(struct device * dev, const char * id)'/>
<doc f='linux/include/linux/clk.h' l='243'>/**
 * clk_get - lookup and obtain a reference to a clock producer.
 * @dev: device for clock &quot;consumer&quot;
 * @id: clock consumer ID
 *
 * Returns a struct clk corresponding to the clock producer, or
 * valid IS_ERR() condition containing errno.  The implementation
 * uses @dev and @id to determine the clock consumer, and thereby
 * the clock producer.  (IOW, @id may be identical strings, but
 * clk_get may return different clock producers depending on @dev.)
 *
 * Drivers must assume that the clock source is not enabled.
 *
 * clk_get should not be called from within interrupt context.
 */</doc>
<use f='linux/drivers/base/power/clock_ops.c' l='64' u='c' c='pm_clk_acquire'/>
<use f='linux/drivers/clk/clk-bulk.c' l='42' u='c' c='clk_bulk_get'/>
<use f='linux/drivers/clk/clk-devres.c' l='25' u='c' c='devm_clk_get'/>
<def f='linux/drivers/clk/clkdev.c' l='197' ll='209' type='struct clk * clk_get(struct device * dev, const char * con_id)'/>
<dec f='linux/drivers/clk/clkdev.c' l='210' type='struct clk * clk_get(struct device * , const char * )'/>
<use f='linux/drivers/clk/clkdev.c' l='210' c='clk_get'/>
<use f='linux/drivers/clk/clkdev.c' l='210' u='a'/>
<use f='linux/drivers/clk/clkdev.c' l='210' u='a'/>
<use f='linux/drivers/clk/clkdev.c' l='367' u='c' c='clk_add_alias'/>
