<def f='linux/include/linux/list.h' l='219' ll='223' type='int list_empty_careful(const struct list_head * head)'/>
<doc f='linux/include/linux/list.h' l='206'>/**
 * list_empty_careful - tests whether a list is empty and not being modified
 * @head: the list to test
 *
 * Description:
 * tests whether a list is empty _and_ checks that no other CPU might be
 * in the process of modifying either member (next or prev)
 *
 * NOTE: using list_empty_careful() without synchronization
 * can only be safe if the only activity that can happen
 * to the list entry is list_del_init(). Eg. it cannot be used
 * if another CPU could re-list_add() it.
 */</doc>
<use f='linux/include/linux/fs.h' l='2304' u='c' c='break_lease'/>
<use f='linux/include/linux/fs.h' l='2318' u='c' c='break_deleg'/>
<use f='linux/include/linux/fs.h' l='2348' u='c' c='break_layout'/>
<use f='linux/block/blk-mq-sched.c' l='193' u='c' c='blk_mq_sched_dispatch_requests'/>
<use f='linux/block/blk-mq.c' l='66' u='c' c='blk_mq_hctx_has_pending'/>
<use f='linux/block/blk-mq.c' l='1033' u='c' c='blk_mq_mark_tag_wait'/>
<use f='linux/block/blk-mq.c' l='1197' u='c' c='blk_mq_dispatch_rq_list'/>
<use f='linux/block/kyber-iosched.c' l='540' u='c' c='kyber_get_domain_token'/>
<use f='linux/block/kyber-iosched.c' l='560' u='c' c='kyber_get_domain_token'/>
<use f='linux/block/kyber-iosched.c' l='660' u='c' c='kyber_has_work'/>
<use f='linux/block/kyber-iosched.c' l='754' u='c' c='kyber_read_waiting_show'/>
<use f='linux/block/kyber-iosched.c' l='754' u='c' c='kyber_sync_write_waiting_show'/>
<use f='linux/block/kyber-iosched.c' l='754' u='c' c='kyber_other_waiting_show'/>
<use f='linux/block/mq-deadline.c' l='446' u='c' c='dd_has_work'/>
<use f='linux/block/mq-deadline.c' l='447' u='c' c='dd_has_work'/>
<use f='linux/block/mq-deadline.c' l='448' u='c' c='dd_has_work'/>
<use f='linux/drivers/leds/led-triggers.c' l='232' u='c' c='led_trigger_unregister'/>
<use f='linux/fs/lockd/svcsubs.c' l='170' u='c' c='nlm_traverse_locks'/>
<use f='linux/fs/lockd/svcsubs.c' l='234' u='c' c='nlm_file_inuse'/>
<use f='linux/fs/locks.c' l='829' u='c' c='posix_test_lock'/>
<use f='linux/fs/locks.c' l='1274' u='c' c='locks_mandatory_locked'/>
<use f='linux/fs/locks.c' l='1572' u='c' c='lease_get_mtime'/>
<use f='linux/fs/locks.c' l='1621' u='c' c='fcntl_getlease'/>
<use f='linux/fs/nfs/pagelist.c' l='915' u='c' c='nfs_can_coalesce_requests'/>
<use f='linux/fs/nfs/pagelist.c' l='916' u='c' c='nfs_can_coalesce_requests'/>
<use f='linux/fs/nfs/write.c' l='1211' u='c' c='nfs_flush_incompatible'/>
<use f='linux/fs/nfs/write.c' l='1212' u='c' c='nfs_flush_incompatible'/>
<use f='linux/fs/nfs/write.c' l='1301' u='c' c='nfs_can_extend_write'/>
<use f='linux/fs/nfs/write.c' l='1302' u='c' c='nfs_can_extend_write'/>
<use f='linux/kernel/sched/swait.c' l='112' u='c' c='finish_swait'/>
<use f='linux/kernel/sched/wait.c' l='367' u='c' c='finish_wait'/>
<use f='linux/mm/shmem.c' l='1043' u='c' c='shmem_setattr'/>
<use f='linux/mm/shmem.c' l='1833' u='c' c='shmem_getpage_gfp'/>
<use f='linux/security/selinux/hooks.c' l='346' u='c' c='inode_free_security'/>
<def f='linux/tools/include/linux/list.h' l='205' ll='209' type='int list_empty_careful(const struct list_head * head)'/>
<doc f='linux/tools/include/linux/list.h' l='192'>/**
 * list_empty_careful - tests whether a list is empty and not being modified
 * @head: the list to test
 *
 * Description:
 * tests whether a list is empty _and_ checks that no other CPU might be
 * in the process of modifying either member (next or prev)
 *
 * NOTE: using list_empty_careful() without synchronization
 * can only be safe if the only activity that can happen
 * to the list entry is list_del_init(). Eg. it cannot be used
 * if another CPU could re-list_add() it.
 */</doc>
