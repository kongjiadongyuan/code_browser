<dec f='linux/include/linux/perf_event.h' l='829' type='void * perf_aux_output_begin(struct perf_output_handle * handle, struct perf_event * event)'/>
<use f='linux/arch/x86/events/intel/bts.c' l='260' u='c' c='bts_event_start'/>
<use f='linux/arch/x86/events/intel/bts.c' l='488' u='c' c='intel_bts_interrupt'/>
<use f='linux/arch/x86/events/intel/pt.c' l='1274' u='c' c='intel_pt_interrupt'/>
<use f='linux/arch/x86/events/intel/pt.c' l='1340' u='c' c='pt_event_start'/>
<def f='linux/kernel/events/ring_buffer.c' l='327' ll='413' type='void * perf_aux_output_begin(struct perf_output_handle * handle, struct perf_event * event)'/>
<dec f='linux/kernel/events/ring_buffer.c' l='414' type='void * perf_aux_output_begin(struct perf_output_handle * , struct perf_event * )'/>
<use f='linux/kernel/events/ring_buffer.c' l='414' c='perf_aux_output_begin'/>
<use f='linux/kernel/events/ring_buffer.c' l='414' u='a'/>
<use f='linux/kernel/events/ring_buffer.c' l='414' u='a'/>
<doc f='linux/kernel/events/ring_buffer.c' l='313'>/*
 * This is called before hardware starts writing to the AUX area to
 * obtain an output handle and make sure there&apos;s room in the buffer.
 * When the capture completes, call perf_aux_output_end() to commit
 * the recorded data to the buffer.
 *
 * The ordering is similar to that of perf_output_{begin,end}, with
 * the exception of (B), which should be taken care of by the pmu
 * driver, since ordering rules will differ depending on hardware.
 *
 * Call this from pmu::start(); see the comment in perf_aux_output_end()
 * about its use in pmu callbacks. Both can also be called from the PMI
 * handler if needed.
 */</doc>
