<dec f='linux/include/linux/signal.h' l='261' type='int sigprocmask(int , sigset_t * , sigset_t * )'/>
<use f='linux/fs/select.c' l='726' u='c' c='do_pselect'/>
<use f='linux/fs/select.c' l='744' u='c' c='do_pselect'/>
<use f='linux/fs/select.c' l='1071' u='c' c='SYSC_ppoll'/>
<use f='linux/fs/select.c' l='1090' u='c' c='SYSC_ppoll'/>
<use f='linux/fs/select.c' l='1325' u='c' c='do_compat_pselect'/>
<use f='linux/fs/select.c' l='1343' u='c' c='do_compat_pselect'/>
<use f='linux/fs/select.c' l='1391' u='c' c='C_SYSC_ppoll'/>
<use f='linux/fs/select.c' l='1410' u='c' c='C_SYSC_ppoll'/>
<dec f='linux/kernel/signal.c' l='2467' type='int sigprocmask(int , sigset_t * , sigset_t * )'/>
<use f='linux/kernel/signal.c' l='2467' c='sigprocmask'/>
<use f='linux/kernel/signal.c' l='2467' u='a'/>
<use f='linux/kernel/signal.c' l='2467' u='a'/>
<def f='linux/kernel/signal.c' l='2536' ll='2561' type='int sigprocmask(int how, sigset_t * set, sigset_t * oldset)'/>
<use f='linux/kernel/signal.c' l='2587' u='c' c='SYSC_rt_sigprocmask'/>
<use f='linux/kernel/signal.c' l='2617' u='c' c='C_SYSC_rt_sigprocmask'/>
<doc f='linux/kernel/signal.c' l='2528'>/*
 * This is also useful for kernel threads that want to temporarily
 * (or permanently) block certain signals.
 *
 * NOTE! Unlike the user-mode sys_sigprocmask(), the kernel
 * interface happily blocks &quot;unblockable&quot; signals like SIGKILL
 * and friends.
 */</doc>
<dec f='include/signal.h' l='229' type='int sigprocmask(int __how, const sigset_t *restrict __set, sigset_t *restrict __oset)'/>
<doc f='include/signal.h' l='228'>/* Get and/or change the set of blocked signals.  */</doc>
