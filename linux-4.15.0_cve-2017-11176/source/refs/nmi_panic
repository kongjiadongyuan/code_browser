<dec f='linux/include/linux/kernel.h' l='294' type='void nmi_panic(struct pt_regs * regs, const char * msg)'/>
<use f='linux/arch/x86/kernel/nmi.c' l='226' u='c' c='pci_serr_error'/>
<use f='linux/arch/x86/kernel/nmi.c' l='251' u='c' c='io_check_error'/>
<use f='linux/arch/x86/kernel/nmi.c' l='300' u='c' c='unknown_nmi_error'/>
<def f='linux/kernel/panic.c' l='112' ll='123' type='void nmi_panic(struct pt_regs * regs, const char * msg)'/>
<dec f='linux/kernel/panic.c' l='124' type='void nmi_panic(struct pt_regs * , const char * )'/>
<use f='linux/kernel/panic.c' l='124' c='nmi_panic'/>
<use f='linux/kernel/panic.c' l='124' u='a'/>
<use f='linux/kernel/panic.c' l='124' u='a'/>
<doc f='linux/kernel/panic.c' l='106'>/*
 * A variant of panic() called from NMI context. We return if we&apos;ve already
 * panicked on this CPU. If another CPU already panicked, loop in
 * nmi_panic_self_stop() which can provide architecture dependent code such
 * as saving register state for crash dump.
 */</doc>
