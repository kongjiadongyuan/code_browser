<dec f='linux/include/linux/cdev.h' l='32' type='int cdev_device_add(struct cdev * cdev, struct device * dev)'/>
<use f='linux/drivers/input/evdev.c' l='1418' u='c' c='evdev_connect'/>
<use f='linux/drivers/rtc/class.c' l='258' u='c' c='rtc_device_register'/>
<use f='linux/drivers/rtc/class.c' l='446' u='c' c='__rtc_register_device'/>
<def f='linux/fs/char_dev.c' l='537' ll='554' type='int cdev_device_add(struct cdev * cdev, struct device * dev)'/>
<dec f='linux/fs/char_dev.c' l='682' type='int cdev_device_add(struct cdev * , struct device * )'/>
<use f='linux/fs/char_dev.c' l='682' c='cdev_device_add'/>
<use f='linux/fs/char_dev.c' l='682' u='a'/>
<use f='linux/fs/char_dev.c' l='682' u='a'/>
<doc f='linux/fs/char_dev.c' l='514'>/**
 * cdev_device_add() - add a char device and it&apos;s corresponding
 *	struct device, linkink
 * @dev: the device structure
 * @cdev: the cdev structure
 *
 * cdev_device_add() adds the char device represented by @cdev to the system,
 * just as cdev_add does. It then adds @dev to the system using device_add
 * The dev_t for the char device will be taken from the struct device which
 * needs to be initialized first. This helper function correctly takes a
 * reference to the parent device so the parent will not get released until
 * all references to the cdev are released.
 *
 * This helper uses dev-&gt;devt for the device number. If it is not set
 * it will not add the cdev and it will be equivalent to device_add.
 *
 * This function should be used whenever the struct cdev and the
 * struct device are members of the same structure whose lifetime is
 * managed by the struct device.
 *
 * NOTE: Callers must assume that userspace was able to open the cdev and
 * can call cdev fops callbacks at any time, even if this function fails.
 */</doc>
