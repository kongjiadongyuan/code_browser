<dec f='linux/include/linux/bio.h' l='386' type='struct bio_set * bioset_create(unsigned int , unsigned int , int flags)'/>
<def f='linux/block/bio.c' l='1921' ll='1965' type='struct bio_set * bioset_create(unsigned int pool_size, unsigned int front_pad, int flags)'/>
<dec f='linux/block/bio.c' l='1966' type='struct bio_set * bioset_create(unsigned int , unsigned int , int )'/>
<use f='linux/block/bio.c' l='1966' c='bioset_create'/>
<use f='linux/block/bio.c' l='1966' u='a'/>
<use f='linux/block/bio.c' l='1966' u='a'/>
<use f='linux/block/bio.c' l='2051' u='c' c='init_bio'/>
<doc f='linux/block/bio.c' l='1901'>/**
 * bioset_create  - Create a bio_set
 * @pool_size:	Number of bio and bio_vecs to cache in the mempool
 * @front_pad:	Number of bytes to allocate in front of the returned bio
 * @flags:	Flags to modify behavior, currently %BIOSET_NEED_BVECS
 *              and %BIOSET_NEED_RESCUER
 *
 * Description:
 *    Set up a bio_set to be used with @bio_alloc_bioset. Allows the caller
 *    to ask for a number of bytes to be allocated in front of the bio.
 *    Front pad allocation is useful for embedding the bio inside
 *    another structure, to avoid allocating extra data to go with the bio.
 *    Note that the bio must be embedded at the END of that structure always,
 *    or things will break badly.
 *    If %BIOSET_NEED_BVECS is set in @flags, a separate pool will be allocated
 *    for allocating iovecs.  This pool is not needed e.g. for bio_clone_fast().
 *    If %BIOSET_NEED_RESCUER is set, a workqueue is created which can be used to
 *    dispatch queued requests when the mempool runs out of space.
 *
 */</doc>
<use f='linux/block/blk-core.c' l='900' u='c' c='blk_alloc_queue_node'/>
<use f='linux/drivers/md/dm-io.c' l='61' u='c' c='dm_io_client_create'/>
<use f='linux/drivers/md/dm.c' l='2768' u='c' c='dm_alloc_md_mempools'/>
<use f='linux/drivers/md/md.c' l='5493' u='c' c='md_run'/>
<use f='linux/drivers/md/md.c' l='5498' u='c' c='md_run'/>
<use f='linux/fs/block_dev.c' l='435' u='c' c='blkdev_init'/>
