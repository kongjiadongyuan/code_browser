<dec f='linux/include/net/ip_tunnels.h' l='275' type='struct ip_tunnel * ip_tunnel_lookup(struct ip_tunnel_net * itn, int link, __be16 flags, __be32 remote, __be32 local, __be32 key)'/>
<def f='linux/net/ipv4/ip_tunnel.c' l='96' ll='186' type='struct ip_tunnel * ip_tunnel_lookup(struct ip_tunnel_net * itn, int link, __be16 flags, __be32 remote, __be32 local, __be32 key)'/>
<dec f='linux/net/ipv4/ip_tunnel.c' l='187' type='struct ip_tunnel * ip_tunnel_lookup(struct ip_tunnel_net * , int , __be16 , __be32 , __be32 , __be32 )'/>
<use f='linux/net/ipv4/ip_tunnel.c' l='187' c='ip_tunnel_lookup'/>
<use f='linux/net/ipv4/ip_tunnel.c' l='187' u='a'/>
<use f='linux/net/ipv4/ip_tunnel.c' l='187' u='a'/>
<doc f='linux/net/ipv4/ip_tunnel.c' l='85'>/* Fallback tunnel: no source, no destination, no key, no options

   Tunnel hash table:
   We require exact key match i.e. if a key is present in packet
   it will match only tunnel with the same key; if it is not present,
   it will match only keyless tunnel.

   All keysless packets, if not matched configured keyless tunnels
   will match fallback tunnel.
   Given src, dst and key, find appropriate for input tunnel.
*/</doc>
