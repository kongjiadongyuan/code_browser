<dec f='linux/include/linux/netdevice.h' l='2457' type='int register_netdevice(struct net_device * dev)'/>
<def f='linux/net/core/dev.c' l='7635' ll='7780' type='int register_netdevice(struct net_device * dev)'/>
<dec f='linux/net/core/dev.c' l='7781' type='int register_netdevice(struct net_device * )'/>
<use f='linux/net/core/dev.c' l='7781' c='register_netdevice'/>
<use f='linux/net/core/dev.c' l='7781' u='a'/>
<use f='linux/net/core/dev.c' l='7781' u='a'/>
<use f='linux/net/core/dev.c' l='7842' u='c' c='register_netdev'/>
<doc f='linux/net/core/dev.c' l='7618'>/**
 *	register_netdevice	- register a network device
 *	@dev: device to register
 *
 *	Take a completed network device structure and add it to the kernel
 *	interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier
 *	chain. 0 is returned on success. A negative errno code is returned
 *	on a failure to set up the device, or if the name is a duplicate.
 *
 *	Callers must hold the rtnl semaphore. You may want
 *	register_netdev() instead of this.
 *
 *	BUGS:
 *	The locking appears insufficient to guarantee two parallel registers
 *	will not get the same name.
 */</doc>
<use f='linux/net/core/rtnetlink.c' l='2828' u='c' c='rtnl_newlink'/>
<use f='linux/net/ipv4/ip_tunnel.c' l='281' u='c' c='__ip_tunnel_create'/>
<use f='linux/net/ipv4/ip_tunnel.c' l='1103' u='c' c='ip_tunnel_newlink'/>
<use f='linux/net/ipv4/ipmr.c' l='558' u='c' c='ipmr_reg_vif'/>
<use f='linux/net/ipv6/sit.c' l='212' u='c' c='ipip6_tunnel_create'/>
<use f='linux/net/mac80211/iface.c' l='1883' u='c' c='ieee80211_if_add'/>
