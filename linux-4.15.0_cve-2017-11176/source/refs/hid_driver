<use f='linux/include/linux/hid.h' l='540'/>
<def f='linux/include/linux/hid.h' l='707' ll='746'/>
<use f='linux/include/linux/hid.h' l='817' c='__hid_register_driver'/>
<use f='linux/include/linux/hid.h' l='824' c='hid_unregister_driver'/>
<use f='linux/drivers/hid/hid-a4tech.c' l='129'/>
<size>280</size>
<doc f='linux/include/linux/hid.h' l='667'>/**
 * struct hid_driver
 * @name: driver name (e.g. &quot;Footech_bar-wheel&quot;)
 * @id_table: which devices is this driver for (must be non-NULL for probe
 * 	      to be called)
 * @dyn_list: list of dynamically added device ids
 * @dyn_lock: lock protecting @dyn_list
 * @probe: new device inserted
 * @remove: device removed (NULL if not a hot-plug capable driver)
 * @report_table: on which reports to call raw_event (NULL means all)
 * @raw_event: if report in report_table, this hook is called (NULL means nop)
 * @usage_table: on which events to call event (NULL means all)
 * @event: if usage in usage_table, this hook is called (NULL means nop)
 * @report: this hook is called after parsing a report (NULL means nop)
 * @report_fixup: called before report descriptor parsing (NULL means nop)
 * @input_mapping: invoked on input registering before mapping an usage
 * @input_mapped: invoked on input registering after mapping an usage
 * @input_configured: invoked just before the device is registered
 * @feature_mapping: invoked on feature registering
 * @suspend: invoked on suspend (NULL means nop)
 * @resume: invoked on resume if device was not reset (NULL means nop)
 * @reset_resume: invoked on resume if device was reset (NULL means nop)
 *
 * probe should return -errno on error, or 0 on success. During probe,
 * input will not be passed to raw_event unless hid_device_io_start is
 * called.
 *
 * raw_event and event should return 0 on no action performed, 1 when no
 * further processing should be done and negative on error
 *
 * input_mapping shall return a negative value to completely ignore this usage
 * (e.g. doubled or invalid usage), zero to continue with parsing of this
 * usage by generic code (no special handling needed) or positive to skip
 * generic parsing (needed special handling which was done in the hook already)
 * input_mapped shall return negative to inform the layer that this usage
 * should not be considered for further processing or zero to notify that
 * no processing was performed and should be done in a generic manner
 * Both these functions may be NULL which means the same behavior as returning
 * zero from them.
 */</doc>
<mbr r='hid_driver::name' o='0' t='char *'/>
<mbr r='hid_driver::id_table' o='64' t='const struct hid_device_id *'/>
<mbr r='hid_driver::dyn_list' o='128' t='struct list_head'/>
<mbr r='hid_driver::dyn_lock' o='256' t='spinlock_t'/>
<mbr r='hid_driver::probe' o='320' t='int (*)(struct hid_device *, const struct hid_device_id *)'/>
<mbr r='hid_driver::remove' o='384' t='void (*)(struct hid_device *)'/>
<mbr r='hid_driver::report_table' o='448' t='const struct hid_report_id *'/>
<mbr r='hid_driver::raw_event' o='512' t='int (*)(struct hid_device *, struct hid_report *, u8 *, int)'/>
<mbr r='hid_driver::usage_table' o='576' t='const struct hid_usage_id *'/>
<mbr r='hid_driver::event' o='640' t='int (*)(struct hid_device *, struct hid_field *, struct hid_usage *, __s32)'/>
<mbr r='hid_driver::report' o='704' t='void (*)(struct hid_device *, struct hid_report *)'/>
<mbr r='hid_driver::report_fixup' o='768' t='__u8 *(*)(struct hid_device *, __u8 *, unsigned int *)'/>
<mbr r='hid_driver::input_mapping' o='832' t='int (*)(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *)'/>
<mbr r='hid_driver::input_mapped' o='896' t='int (*)(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *)'/>
<mbr r='hid_driver::input_configured' o='960' t='int (*)(struct hid_device *, struct hid_input *)'/>
<mbr r='hid_driver::feature_mapping' o='1024' t='void (*)(struct hid_device *, struct hid_field *, struct hid_usage *)'/>
<mbr r='hid_driver::suspend' o='1088' t='int (*)(struct hid_device *, pm_message_t)'/>
<mbr r='hid_driver::resume' o='1152' t='int (*)(struct hid_device *)'/>
<mbr r='hid_driver::reset_resume' o='1216' t='int (*)(struct hid_device *)'/>
<mbr r='hid_driver::driver' o='1280' t='struct device_driver'/>
<use f='linux/drivers/hid/hid-apple.c' l='568'/>
<size>280</size>
<use f='linux/drivers/hid/hid-belkin.c' l='83'/>
<size>280</size>
<use f='linux/drivers/hid/hid-cherry.c' l='66'/>
<size>280</size>
<use f='linux/drivers/hid/hid-chicony.c' l='92'/>
<size>280</size>
<use f='linux/drivers/hid/hid-core.c' l='1260' c='hid_process_event'/>
<use f='linux/drivers/hid/hid-core.c' l='1489' c='hid_report_raw_event'/>
<use f='linux/drivers/hid/hid-core.c' l='1552' c='hid_input_report'/>
<use f='linux/drivers/hid/hid-core.c' l='2417' c='new_id_store'/>
<use f='linux/drivers/hid/hid-core.c' l='2417' macro='1' c='new_id_store'/>
<use f='linux/drivers/hid/hid-core.c' l='2417' macro='1' c='new_id_store'/>
<use f='linux/drivers/hid/hid-core.c' l='2417' macro='1' c='new_id_store'/>
<use f='linux/drivers/hid/hid-core.c' l='2454' c='hid_free_dynids'/>
<use f='linux/drivers/hid/hid-core.c' l='2467' c='hid_match_device'/>
<use f='linux/drivers/hid/hid-core.c' l='2485' c='hid_bus_match'/>
<use f='linux/drivers/hid/hid-core.c' l='2485' macro='1' c='hid_bus_match'/>
<use f='linux/drivers/hid/hid-core.c' l='2485' macro='1' c='hid_bus_match'/>
<use f='linux/drivers/hid/hid-core.c' l='2485' macro='1' c='hid_bus_match'/>
<use f='linux/drivers/hid/hid-core.c' l='2493' c='hid_device_probe'/>
<use f='linux/drivers/hid/hid-core.c' l='2493' macro='1' c='hid_device_probe'/>
<use f='linux/drivers/hid/hid-core.c' l='2493' macro='1' c='hid_device_probe'/>
<use f='linux/drivers/hid/hid-core.c' l='2493' macro='1' c='hid_device_probe'/>
<use f='linux/drivers/hid/hid-core.c' l='2534' c='hid_device_remove'/>
<use f='linux/drivers/hid/hid-core.c' l='3060' c='__hid_register_driver'/>
<use f='linux/drivers/hid/hid-core.c' l='3075' c='hid_unregister_driver'/>
<size>280</size>
<use f='linux/drivers/hid/hid-cypress.c' l='138'/>
<size>280</size>
<use f='linux/drivers/hid/hid-ezkey.c' l='73'/>
<size>280</size>
<use f='linux/drivers/hid/hid-generic.c' l='33'/>
<size>280</size>
<use f='linux/drivers/hid/hid-gyration.c' l='85'/>
<size>280</size>
<use f='linux/drivers/hid/hid-input.c' l='1452' c='report_features'/>
<use f='linux/drivers/hid/hid-input.c' l='1605' c='hidinput_connect'/>
<size>280</size>
<use f='linux/drivers/hid/hid-ite.c' l='49'/>
<size>280</size>
<use f='linux/drivers/hid/hid-kensington.c' l='45'/>
<size>280</size>
<use f='linux/drivers/hid/hid-lg.c' l='889'/>
<size>280</size>
<use f='linux/drivers/hid/hid-microsoft.c' l='288'/>
<size>280</size>
<use f='linux/drivers/hid/hid-monterey.c' l='60'/>
<size>280</size>
<use f='linux/drivers/hid/hid-ntrig.c' l='1021'/>
<size>280</size>
<use f='linux/drivers/hid/hid-petalynx.c' l='99'/>
<size>280</size>
<use f='linux/drivers/hid/hid-pl.c' l='227'/>
<size>280</size>
<use f='linux/drivers/hid/hid-samsung.c' l='192'/>
<size>280</size>
<use f='linux/drivers/hid/hid-sony.c' l='2899'/>
<size>280</size>
<use f='linux/drivers/hid/hid-sunplus.c' l='60'/>
<size>280</size>
<use f='linux/drivers/hid/hid-topseed.c' l='74'/>
<size>280</size>
