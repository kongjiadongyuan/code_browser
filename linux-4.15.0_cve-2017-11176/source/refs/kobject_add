<dec f='linux/include/linux/kobject.h' l='96' type='int kobject_add(struct kobject * kobj, struct kobject * parent, const char * fmt)'/>
<use f='linux/arch/x86/kernel/cpu/mcheck/mce_amd.c' l='1155' u='c' c='__threshold_add_blocks'/>
<use f='linux/arch/x86/kernel/cpu/mcheck/mce_amd.c' l='1161' u='c' c='__threshold_add_blocks'/>
<use f='linux/arch/x86/kernel/cpu/mcheck/mce_amd.c' l='1190' u='c' c='threshold_create_bank'/>
<use f='linux/block/blk-mq-sysfs.c' l='238' u='c' c='blk_mq_register_hctx'/>
<use f='linux/block/blk-mq-sysfs.c' l='243' u='c' c='blk_mq_register_hctx'/>
<use f='linux/block/blk-mq-sysfs.c' l='313' u='c' c='__blk_mq_register_dev'/>
<use f='linux/block/blk-sysfs.c' l='892' u='c' c='blk_register_queue'/>
<use f='linux/block/elevator.c' l='872' u='c' c='elv_register_queue'/>
<use f='linux/drivers/base/core.c' l='1471' u='c' c='class_dir_create_and_add'/>
<use f='linux/drivers/base/core.c' l='1790' u='c' c='device_add'/>
<use f='linux/drivers/firmware/efi/runtime-map.c' l='128' u='c' c='add_sysfs_runtime_map_entry'/>
<use f='linux/drivers/firmware/memmap.c' l='199' u='c' c='add_sysfs_fw_map_entry'/>
<use f='linux/drivers/md/md.c' l='2220' u='c' c='bind_rdev_to_array'/>
<use f='linux/kernel/irq/irqdesc.c' l='274' u='c' c='irq_sysfs_add'/>
<def f='linux/lib/kobject.c' l='394' ll='415' type='int kobject_add(struct kobject * kobj, struct kobject * parent, const char * fmt)'/>
<dec f='linux/lib/kobject.c' l='416' type='int kobject_add(struct kobject * , struct kobject * , const char * )'/>
<use f='linux/lib/kobject.c' l='416' c='kobject_add'/>
<use f='linux/lib/kobject.c' l='416' u='a'/>
<use f='linux/lib/kobject.c' l='416' u='a'/>
<use f='linux/lib/kobject.c' l='755' u='c' c='kobject_create_and_add'/>
<doc f='linux/lib/kobject.c' l='369'>/**
 * kobject_add - the main kobject add function
 * @kobj: the kobject to add
 * @parent: pointer to the parent of the kobject.
 * @fmt: format to name the kobject with.
 *
 * The kobject name is set and added to the kobject hierarchy in this
 * function.
 *
 * If @parent is set, then the parent of the @kobj will be set to it.
 * If @parent is NULL, then the parent of the @kobj will be set to the
 * kobject associated with the kset assigned to this kobject.  If no kset
 * is assigned to the kobject, then the kobject will be located in the
 * root of the sysfs tree.
 *
 * If this function returns an error, kobject_put() must be called to
 * properly clean up the memory associated with the object.
 * Under no instance should the kobject that is passed to this function
 * be directly freed with a call to kfree(), that can leak memory.
 *
 * Note, no &quot;add&quot; uevent will be created with this call, the caller should set
 * up all of the necessary sysfs files for the object and then call
 * kobject_uevent() with the UEVENT_ADD parameter to ensure that
 * userspace is properly notified of this kobject&apos;s creation.
 */</doc>
<use f='linux/sound/hda/hdac_sysfs.c' l='348' u='c' c='add_widget_node'/>
