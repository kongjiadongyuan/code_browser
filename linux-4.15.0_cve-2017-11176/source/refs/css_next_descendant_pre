<dec f='linux/include/linux/cgroup.h' l='133' type='struct cgroup_subsys_state * css_next_descendant_pre(struct cgroup_subsys_state * pos, struct cgroup_subsys_state * css)'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2746' macro='1' u='c' c='cgroup_update_dfl_csses'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2746' macro='1' u='c' c='cgroup_update_dfl_csses'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2829' macro='1' u='c' c='cgroup_save_control'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2829' macro='1' u='c' c='cgroup_save_control'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2848' macro='1' u='c' c='cgroup_propagate_control'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2848' macro='1' u='c' c='cgroup_propagate_control'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2906' macro='1' u='c' c='cgroup_apply_control_enable'/>
<use f='linux/kernel/cgroup/cgroup.c' l='2906' macro='1' u='c' c='cgroup_apply_control_enable'/>
<use f='linux/kernel/cgroup/cgroup.c' l='3605' macro='1' u='c' c='cgroup_apply_cftypes'/>
<use f='linux/kernel/cgroup/cgroup.c' l='3605' macro='1' u='c' c='cgroup_apply_cftypes'/>
<def f='linux/kernel/cgroup/cgroup.c' l='3878' ll='3904' type='struct cgroup_subsys_state * css_next_descendant_pre(struct cgroup_subsys_state * pos, struct cgroup_subsys_state * root)'/>
<doc f='linux/kernel/cgroup/cgroup.c' l='3857'>/**
 * css_next_descendant_pre - find the next descendant for pre-order walk
 * @pos: the current position (%NULL to initiate traversal)
 * @root: css whose descendants to walk
 *
 * To be used by css_for_each_descendant_pre().  Find the next descendant
 * to visit for pre-order traversal of @root&apos;s descendants.  @root is
 * included in the iteration and the first node to be visited.
 *
 * While this function requires cgroup_mutex or RCU read locking, it
 * doesn&apos;t require the whole traversal to be contained in a single critical
 * section.  This function will return the correct next descendant as long
 * as both @pos and @root are accessible and @pos is a descendant of @root.
 *
 * If a subsystem synchronizes -&gt;css_online() and the start of iteration, a
 * css which finished -&gt;css_online() is guaranteed to be visible in the
 * future iterations and will stay visible until the last reference is put.
 * A css which hasn&apos;t finished -&gt;css_online() or already finished
 * -&gt;css_offline() may show up during traversal.  It&apos;s each subsystem&apos;s
 * responsibility to synchronize against on/offlining.
 */</doc>
<use f='linux/kernel/cgroup/cpuset.c' l='577' macro='1' u='c' c='update_domain_attr_tree'/>
<use f='linux/kernel/cgroup/cpuset.c' l='577' macro='1' u='c' c='update_domain_attr_tree'/>
<use f='linux/kernel/cgroup/cpuset.c' l='692' macro='1' u='c' c='generate_sched_domains'/>
<use f='linux/kernel/cgroup/cpuset.c' l='692' macro='1' u='c' c='generate_sched_domains'/>
<use f='linux/kernel/cgroup/cpuset.c' l='902' macro='1' u='c' c='update_cpumasks_hier'/>
<use f='linux/kernel/cgroup/cpuset.c' l='902' macro='1' u='c' c='update_cpumasks_hier'/>
<use f='linux/kernel/cgroup/cpuset.c' l='1155' macro='1' u='c' c='update_nodemasks_hier'/>
<use f='linux/kernel/cgroup/cpuset.c' l='1155' macro='1' u='c' c='update_nodemasks_hier'/>
<use f='linux/kernel/cgroup/cpuset.c' l='2340' macro='1' u='c' c='cpuset_hotplug_workfn'/>
<use f='linux/kernel/cgroup/cpuset.c' l='2340' macro='1' u='c' c='cpuset_hotplug_workfn'/>
<use f='linux/kernel/cgroup/freezer.c' l='396' macro='1' u='c' c='freezer_change_state'/>
<use f='linux/kernel/cgroup/freezer.c' l='396' macro='1' u='c' c='freezer_change_state'/>
