<dec f='linux/include/sound/pcm.h' l='990' type='int snd_pcm_hw_constraint_minmax(struct snd_pcm_runtime * runtime, snd_pcm_hw_param_t var, unsigned int min, unsigned int max)'/>
<use f='linux/include/sound/pcm.h' l='1041' u='c' c='snd_pcm_hw_constraint_single'/>
<def f='linux/sound/core/pcm_lib.c' l='1242' ll='1252' type='int snd_pcm_hw_constraint_minmax(struct snd_pcm_runtime * runtime, snd_pcm_hw_param_t var, unsigned int min, unsigned int max)'/>
<dec f='linux/sound/core/pcm_lib.c' l='1253' type='int snd_pcm_hw_constraint_minmax(struct snd_pcm_runtime * , snd_pcm_hw_param_t , unsigned int , unsigned int )'/>
<use f='linux/sound/core/pcm_lib.c' l='1253' c='snd_pcm_hw_constraint_minmax'/>
<use f='linux/sound/core/pcm_lib.c' l='1253' u='a'/>
<use f='linux/sound/core/pcm_lib.c' l='1253' u='a'/>
<doc f='linux/sound/core/pcm_lib.c' l='1230'>/**
 * snd_pcm_hw_constraint_minmax - apply a min/max range constraint to an interval
 * @runtime: PCM runtime instance
 * @var: hw_params variable to apply the range
 * @min: the minimal value
 * @max: the maximal value
 * 
 * Apply the min/max range constraint to an interval parameter.
 *
 * Return: Positive if the value is changed, zero if it&apos;s not changed, or a
 * negative error code.
 */</doc>
<use f='linux/sound/core/pcm_native.c' l='2284' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux/sound/core/pcm_native.c' l='2289' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux/sound/core/pcm_native.c' l='2294' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux/sound/core/pcm_native.c' l='2299' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux/sound/core/pcm_native.c' l='2304' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux/sound/core/pcm_native.c' l='2317' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux/sound/pci/hda/hda_controller.c' l='625' u='c' c='azx_pcm_open'/>
