<dec f='linux/include/linux/klist.h' l='66' type='struct klist_node * klist_prev(struct klist_iter * i)'/>
<use f='linux/drivers/base/core.c' l='2030' u='c' c='prev_device'/>
<def f='linux/lib/klist.c' l='334' ll='364' type='struct klist_node * klist_prev(struct klist_iter * i)'/>
<dec f='linux/lib/klist.c' l='365' type='struct klist_node * klist_prev(struct klist_iter * )'/>
<use f='linux/lib/klist.c' l='365' c='klist_prev'/>
<use f='linux/lib/klist.c' l='365' u='a'/>
<use f='linux/lib/klist.c' l='365' u='a'/>
<doc f='linux/lib/klist.c' l='326'>/**
 * klist_prev - Ante up prev node in list.
 * @i: Iterator structure.
 *
 * First grab list lock. Decrement the reference count of the previous
 * node, if there was one. Grab the prev node, increment its reference
 * count, drop the lock, and return that prev node.
 */</doc>
