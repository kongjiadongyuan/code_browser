<dec f='linux/include/linux/libata.h' l='1101' type='int sata_link_hardreset(struct ata_link * link, const unsigned long * timing, unsigned long deadline, bool * online, int (*)(struct ata_link *) check_ready)'/>
<use f='linux/drivers/ata/ahci.c' l='690' u='c' c='ahci_vt8251_hardreset'/>
<use f='linux/drivers/ata/ahci.c' l='721' u='c' c='ahci_p5wdh_hardreset'/>
<use f='linux/drivers/ata/ahci.c' l='792' u='c' c='ahci_avn_hardreset'/>
<use f='linux/drivers/ata/libahci.c' l='1549' u='c' c='ahci_do_hardreset'/>
<def f='linux/drivers/ata/libata-core.c' l='4073' ll='4159' type='int sata_link_hardreset(struct ata_link * link, const unsigned long * timing, unsigned long deadline, bool * online, int (*)(struct ata_link *) check_ready)'/>
<use f='linux/drivers/ata/libata-core.c' l='4183' u='c' c='sata_std_hardreset'/>
<dec f='linux/drivers/ata/libata-core.c' l='7266' type='int sata_link_hardreset(struct ata_link * , const unsigned long * , unsigned long , bool * , int (*)(struct ata_link *) )'/>
<use f='linux/drivers/ata/libata-core.c' l='7266' c='sata_link_hardreset'/>
<use f='linux/drivers/ata/libata-core.c' l='7266' u='a'/>
<use f='linux/drivers/ata/libata-core.c' l='7266' u='a'/>
<doc f='linux/drivers/ata/libata-core.c' l='4049'>/**
 *	sata_link_hardreset - reset link via SATA phy reset
 *	@link: link to reset
 *	@timing: timing parameters { interval, duration, timeout } in msec
 *	@deadline: deadline jiffies for the operation
 *	@online: optional out parameter indicating link onlineness
 *	@check_ready: optional callback to check link readiness
 *
 *	SATA phy-reset @link using DET bits of SControl register.
 *	After hardreset, link readiness is waited upon using
 *	ata_wait_ready() if @check_ready is specified.  LLDs are
 *	allowed to not specify @check_ready and wait itself after this
 *	function returns.  Device classification is LLD&apos;s
 *	responsibility.
 *
 *	*@online is set to one iff reset succeeded and @link is online
 *	after reset.
 *
 *	LOCKING:
 *	Kernel thread context (may sleep)
 *
 *	RETURNS:
 *	0 on success, -errno otherwise.
 */</doc>
<use f='linux/drivers/ata/libata-pmp.c' l='862' u='c' c='sata_pmp_eh_handle_disabled_links'/>
<use f='linux/drivers/ata/libata-sff.c' l='2078' u='c' c='sata_sff_hardreset'/>
