<dec f='linux/include/net/cfg80211.h' l='5025' type='struct sk_buff * __cfg80211_alloc_reply_skb(struct wiphy * wiphy, enum nl80211_commands cmd, enum nl80211_attrs attr, int approxlen)'/>
<use f='linux/include/net/cfg80211.h' l='5065' u='c' c='cfg80211_vendor_cmd_alloc_reply_skb'/>
<doc f='linux/include/net/cfg80211.h' l='5005'>/**
 * DOC: Vendor commands
 *
 * Occasionally, there are special protocol or firmware features that
 * can&apos;t be implemented very openly. For this and similar cases, the
 * vendor command functionality allows implementing the features with
 * (typically closed-source) userspace and firmware, using nl80211 as
 * the configuration mechanism.
 *
 * A driver supporting vendor commands must register them as an array
 * in struct wiphy, with handlers for each one, each command has an
 * OUI and sub command ID to identify it.
 *
 * Note that this feature should not be (ab)used to implement protocol
 * features that could openly be shared across drivers. In particular,
 * it must never be required to use vendor commands to implement any
 * &quot;normal&quot; functionality that higher-level userspace like connection
 * managers etc. need.
 */</doc>
<def f='linux/net/wireless/nl80211.c' l='12068' ll='12082' type='struct sk_buff * __cfg80211_alloc_reply_skb(struct wiphy * wiphy, enum nl80211_commands cmd, enum nl80211_attrs attr, int approxlen)'/>
<dec f='linux/net/wireless/nl80211.c' l='12083' type='struct sk_buff * __cfg80211_alloc_reply_skb(struct wiphy * , enum nl80211_commands , enum nl80211_attrs , int )'/>
<use f='linux/net/wireless/nl80211.c' l='12083' c='__cfg80211_alloc_reply_skb'/>
<use f='linux/net/wireless/nl80211.c' l='12083' u='a'/>
<use f='linux/net/wireless/nl80211.c' l='12083' u='a'/>
