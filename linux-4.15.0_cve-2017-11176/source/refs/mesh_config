<def f='linux/include/net/cfg80211.h' l='1398' ll='1427'/>
<use f='linux/include/net/cfg80211.h' l='2985'/>
<use f='linux/include/net/cfg80211.h' l='2988'/>
<use f='linux/include/net/cfg80211.h' l='2990'/>
<size>72</size>
<doc f='linux/include/net/cfg80211.h' l='1328'>/**
 * struct mesh_config - 802.11s mesh configuration
 *
 * These parameters can be changed while the mesh is active.
 *
 * @dot11MeshRetryTimeout: the initial retry timeout in millisecond units used
 *	by the Mesh Peering Open message
 * @dot11MeshConfirmTimeout: the initial retry timeout in millisecond units
 *	used by the Mesh Peering Open message
 * @dot11MeshHoldingTimeout: the confirm timeout in millisecond units used by
 *	the mesh peering management to close a mesh peering
 * @dot11MeshMaxPeerLinks: the maximum number of peer links allowed on this
 *	mesh interface
 * @dot11MeshMaxRetries: the maximum number of peer link open retries that can
 *	be sent to establish a new peer link instance in a mesh
 * @dot11MeshTTL: the value of TTL field set at a source mesh STA
 * @element_ttl: the value of TTL field set at a mesh STA for path selection
 *	elements
 * @auto_open_plinks: whether we should automatically open peer links when we
 *	detect compatible mesh peers
 * @dot11MeshNbrOffsetMaxNeighbor: the maximum number of neighbors to
 *	synchronize to for 11s default synchronization method
 * @dot11MeshHWMPmaxPREQretries: the number of action frames containing a PREQ
 *	that an originator mesh STA can send to a particular path target
 * @path_refresh_time: how frequently to refresh mesh paths in milliseconds
 * @min_discovery_timeout: the minimum length of time to wait until giving up on
 *	a path discovery in milliseconds
 * @dot11MeshHWMPactivePathTimeout: the time (in TUs) for which mesh STAs
 *	receiving a PREQ shall consider the forwarding information from the
 *	root to be valid. (TU = time unit)
 * @dot11MeshHWMPpreqMinInterval: the minimum interval of time (in TUs) during
 *	which a mesh STA can send only one action frame containing a PREQ
 *	element
 * @dot11MeshHWMPperrMinInterval: the minimum interval of time (in TUs) during
 *	which a mesh STA can send only one Action frame containing a PERR
 *	element
 * @dot11MeshHWMPnetDiameterTraversalTime: the interval of time (in TUs) that
 *	it takes for an HWMP information element to propagate across the mesh
 * @dot11MeshHWMPRootMode: the configuration of a mesh STA as root mesh STA
 * @dot11MeshHWMPRannInterval: the interval of time (in TUs) between root
 *	announcements are transmitted
 * @dot11MeshGateAnnouncementProtocol: whether to advertise that this mesh
 *	station has access to a broader network beyond the MBSS. (This is
 *	missnamed in draft 12.0: dot11MeshGateAnnouncementProtocol set to true
 *	only means that the station will announce others it&apos;s a mesh gate, but
 *	not necessarily using the gate announcement protocol. Still keeping the
 *	same nomenclature to be in sync with the spec)
 * @dot11MeshForwarding: whether the Mesh STA is forwarding or non-forwarding
 *	entity (default is TRUE - forwarding entity)
 * @rssi_threshold: the threshold for average signal strength of candidate
 *	station to establish a peer link
 * @ht_opmode: mesh HT protection mode
 *
 * @dot11MeshHWMPactivePathToRootTimeout: The time (in TUs) for which mesh STAs
 *	receiving a proactive PREQ shall consider the forwarding information to
 *	the root mesh STA to be valid.
 *
 * @dot11MeshHWMProotInterval: The interval of time (in TUs) between proactive
 *	PREQs are transmitted.
 * @dot11MeshHWMPconfirmationInterval: The minimum interval of time (in TUs)
 *	during which a mesh STA can send only one Action frame containing
 *	a PREQ element for root path confirmation.
 * @power_mode: The default mesh power save mode which will be the initial
 *	setting for new peer links.
 * @dot11MeshAwakeWindowDuration: The duration in TUs the STA will remain awake
 *	after transmitting its beacon.
 * @plink_timeout: If no tx activity is seen from a STA we&apos;ve established
 *	peering with for longer than this time (in seconds), then remove it
 *	from the STA&apos;s list of peers.  Default is 30 minutes.
 */</doc>
<mbr r='mesh_config::dot11MeshRetryTimeout' o='0' t='u16'/>
<mbr r='mesh_config::dot11MeshConfirmTimeout' o='16' t='u16'/>
<mbr r='mesh_config::dot11MeshHoldingTimeout' o='32' t='u16'/>
<mbr r='mesh_config::dot11MeshMaxPeerLinks' o='48' t='u16'/>
<mbr r='mesh_config::dot11MeshMaxRetries' o='64' t='u8'/>
<mbr r='mesh_config::dot11MeshTTL' o='72' t='u8'/>
<mbr r='mesh_config::element_ttl' o='80' t='u8'/>
<mbr r='mesh_config::auto_open_plinks' o='88' t='bool'/>
<mbr r='mesh_config::dot11MeshNbrOffsetMaxNeighbor' o='96' t='u32'/>
<mbr r='mesh_config::dot11MeshHWMPmaxPREQretries' o='128' t='u8'/>
<mbr r='mesh_config::path_refresh_time' o='160' t='u32'/>
<mbr r='mesh_config::min_discovery_timeout' o='192' t='u16'/>
<mbr r='mesh_config::dot11MeshHWMPactivePathTimeout' o='224' t='u32'/>
<mbr r='mesh_config::dot11MeshHWMPpreqMinInterval' o='256' t='u16'/>
<mbr r='mesh_config::dot11MeshHWMPperrMinInterval' o='272' t='u16'/>
<mbr r='mesh_config::dot11MeshHWMPnetDiameterTraversalTime' o='288' t='u16'/>
<mbr r='mesh_config::dot11MeshHWMPRootMode' o='304' t='u8'/>
<mbr r='mesh_config::dot11MeshHWMPRannInterval' o='320' t='u16'/>
<mbr r='mesh_config::dot11MeshGateAnnouncementProtocol' o='336' t='bool'/>
<mbr r='mesh_config::dot11MeshForwarding' o='344' t='bool'/>
<mbr r='mesh_config::rssi_threshold' o='352' t='s32'/>
<mbr r='mesh_config::ht_opmode' o='384' t='u16'/>
<mbr r='mesh_config::dot11MeshHWMPactivePathToRootTimeout' o='416' t='u32'/>
<mbr r='mesh_config::dot11MeshHWMProotInterval' o='448' t='u16'/>
<mbr r='mesh_config::dot11MeshHWMPconfirmationInterval' o='464' t='u16'/>
<mbr r='mesh_config::power_mode' o='480' t='enum nl80211_mesh_power_mode'/>
<mbr r='mesh_config::dot11MeshAwakeWindowDuration' o='512' t='u16'/>
<mbr r='mesh_config::plink_timeout' o='544' t='u32'/>
<use f='linux/net/mac80211/ieee80211_i.h' l='676'/>
<size>72</size>
<use f='linux/net/wireless/core.h' l='300'/>
<use f='linux/net/wireless/core.h' l='305' c='__cfg80211_join_mesh'/>
<use f='linux/net/wireless/core.h' l='309' c='cfg80211_join_mesh'/>
<use f='linux/net/wireless/trace.h' l='957' c='trace_rdev_return_int_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='957' c='trace_rdev_return_int_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='957' c='trace_rdev_return_int_mesh_config_rcuidle'/>
<use f='linux/net/wireless/trace.h' l='957' c='trace_rdev_return_int_mesh_config_rcuidle'/>
<use f='linux/net/wireless/trace.h' l='957' c='register_trace_rdev_return_int_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='957' c='register_trace_prio_rdev_return_int_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='957' c='unregister_trace_rdev_return_int_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='957' c='check_trace_callback_type_rdev_return_int_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='975' c='trace_rdev_update_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='975' c='trace_rdev_update_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='975' c='trace_rdev_update_mesh_config_rcuidle'/>
<use f='linux/net/wireless/trace.h' l='975' c='trace_rdev_update_mesh_config_rcuidle'/>
<use f='linux/net/wireless/trace.h' l='975' c='register_trace_rdev_update_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='975' c='register_trace_prio_rdev_update_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='975' c='unregister_trace_rdev_update_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='975' c='check_trace_callback_type_rdev_update_mesh_config'/>
<use f='linux/net/wireless/trace.h' l='995' c='trace_rdev_join_mesh'/>
<use f='linux/net/wireless/trace.h' l='995' c='trace_rdev_join_mesh'/>
<use f='linux/net/wireless/trace.h' l='995' c='trace_rdev_join_mesh_rcuidle'/>
<use f='linux/net/wireless/trace.h' l='995' c='trace_rdev_join_mesh_rcuidle'/>
<use f='linux/net/wireless/trace.h' l='995' c='register_trace_rdev_join_mesh'/>
<use f='linux/net/wireless/trace.h' l='995' c='register_trace_prio_rdev_join_mesh'/>
<use f='linux/net/wireless/trace.h' l='995' c='unregister_trace_rdev_join_mesh'/>
<use f='linux/net/wireless/trace.h' l='995' c='check_trace_callback_type_rdev_join_mesh'/>
<use f='linux/net/wireless/rdev-ops.h' l='308' c='rdev_get_mesh_config'/>
<use f='linux/net/wireless/rdev-ops.h' l='320' c='rdev_update_mesh_config'/>
<use f='linux/net/wireless/rdev-ops.h' l='331' c='rdev_join_mesh'/>
<size>72</size>
<use f='linux/net/wireless/mesh.c' l='53'/>
<use f='linux/net/wireless/mesh.c' l='100' c='__cfg80211_join_mesh'/>
<use f='linux/net/wireless/mesh.c' l='204' c='cfg80211_join_mesh'/>
<size>72</size>
<use f='linux/net/wireless/nl80211.c' l='5730' c='nl80211_get_mesh_config'/>
<use f='linux/net/wireless/nl80211.c' l='5935' c='nl80211_parse_mesh_config'/>
<use f='linux/net/wireless/nl80211.c' l='6158' c='nl80211_update_mesh_config'/>
<use f='linux/net/wireless/nl80211.c' l='9981' c='nl80211_join_mesh'/>
<size>72</size>
