<dec f='linux/include/linux/leds.h' l='157' type='void led_blink_set(struct led_classdev * led_cdev, unsigned long * delay_on, unsigned long * delay_off)'/>
<doc f='linux/include/linux/leds.h' l='142'>/**
 * led_blink_set - set blinking with software fallback
 * @led_cdev: the LED to start blinking
 * @delay_on: the time it should be on (in ms)
 * @delay_off: the time it should ble off (in ms)
 *
 * This function makes the LED blink, attempting to use the
 * hardware acceleration if possible, but falling back to
 * software blinking if there is no hardware blinking or if
 * the LED refuses the passed values.
 *
 * Note that if software blinking is active, simply calling
 * led_cdev-&gt;brightness_set() will not stop the blinking,
 * use led_classdev_brightness_set() instead.
 */</doc>
<def f='linux/drivers/leds/led-core.c' l='185' ll='196' type='void led_blink_set(struct led_classdev * led_cdev, unsigned long * delay_on, unsigned long * delay_off)'/>
<dec f='linux/drivers/leds/led-core.c' l='197' type='void led_blink_set(struct led_classdev * , unsigned long * , unsigned long * )'/>
<use f='linux/drivers/leds/led-core.c' l='197' c='led_blink_set'/>
<use f='linux/drivers/leds/led-core.c' l='197' u='a'/>
<use f='linux/drivers/leds/led-core.c' l='197' u='a'/>
<use f='linux/drivers/leds/led-triggers.c' l='314' u='c' c='led_trigger_blink_setup'/>
<use f='linux/net/mac80211/led.c' l='281' u='c' c='tpt_trig_timer'/>
