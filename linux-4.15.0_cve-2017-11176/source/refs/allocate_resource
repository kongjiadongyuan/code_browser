<dec f='linux/include/linux/ioport.h' l='184' type='int allocate_resource(struct resource * root, struct resource * new, resource_size_t size, resource_size_t min, resource_size_t max, resource_size_t align, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t) alignf, void * alignf_data)'/>
<use f='linux/drivers/pci/bus.c' l='202' u='c' c='pci_bus_alloc_from_region'/>
<use f='linux/drivers/pcmcia/rsrc_nonstatic.c' l='706' u='c' c='__nonstatic_find_io_region'/>
<use f='linux/drivers/pcmcia/rsrc_nonstatic.c' l='839' u='c' c='nonstatic_find_mem_region'/>
<use f='linux/drivers/pcmcia/yenta_socket.c' l='657' u='c' c='yenta_search_one_res'/>
<def f='linux/kernel/resource.c' l='742' ll='775' type='int allocate_resource(struct resource * root, struct resource * new, resource_size_t size, resource_size_t min, resource_size_t max, resource_size_t align, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t) alignf, void * alignf_data)'/>
<dec f='linux/kernel/resource.c' l='777' type='int allocate_resource(struct resource * , struct resource * , resource_size_t , resource_size_t , resource_size_t , resource_size_t , resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t) , void * )'/>
<use f='linux/kernel/resource.c' l='777' c='allocate_resource'/>
<use f='linux/kernel/resource.c' l='777' u='a'/>
<use f='linux/kernel/resource.c' l='777' u='a'/>
<doc f='linux/kernel/resource.c' l='730'>/**
 * allocate_resource - allocate empty slot in the resource tree given range &amp; alignment.
 * 	The resource will be reallocated with a new size if it was already allocated
 * @root: root resource descriptor
 * @new: resource descriptor desired by caller
 * @size: requested resource region size
 * @min: minimum boundary to allocate
 * @max: maximum boundary to allocate
 * @align: alignment requested, in bytes
 * @alignf: alignment function, optional, called if not NULL
 * @alignf_data: arbitrary data to pass to the @alignf function
 */</doc>
