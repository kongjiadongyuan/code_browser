<dec f='linux/include/linux/idr.h' l='134' type='int idr_alloc_cyclic(struct idr * , void * entry, int start, int end, gfp_t )'/>
<use f='linux/fs/kernfs/dir.c' l='640' u='c' c='__kernfs_new_node'/>
<use f='linux/fs/notify/inotify/inotify_user.c' l='352' u='c' c='inotify_add_to_idr'/>
<use f='linux/kernel/cgroup/cgroup.c' l='1216' u='c' c='cgroup_init_root_id'/>
<use f='linux/kernel/pid.c' l='180' u='c' c='alloc_pid'/>
<def f='linux/lib/idr.c' l='49' ll='64' type='int idr_alloc_cyclic(struct idr * idr, void * ptr, int start, int end, gfp_t gfp)'/>
<dec f='linux/lib/idr.c' l='65' type='int idr_alloc_cyclic(struct idr * , void * , int , int , gfp_t )'/>
<use f='linux/lib/idr.c' l='65' c='idr_alloc_cyclic'/>
<use f='linux/lib/idr.c' l='65' u='a'/>
<use f='linux/lib/idr.c' l='65' u='a'/>
<doc f='linux/lib/idr.c' l='37'>/**
 * idr_alloc_cyclic - allocate new idr entry in a cyclical fashion
 * @idr: idr handle
 * @ptr: pointer to be associated with the new id
 * @start: the minimum id (inclusive)
 * @end: the maximum id (exclusive)
 * @gfp: memory allocation flags
 *
 * Allocates an ID larger than the last ID allocated if one is available.
 * If not, it will attempt to allocate the smallest ID that is larger or
 * equal to @start.
 */</doc>
