<def f='linux/include/linux/interrupt.h' l='537' ll='544'/>
<use f='linux/include/linux/interrupt.h' l='539'/>
<use f='linux/include/linux/interrupt.h' l='560' c='tasklet_trylock'/>
<use f='linux/include/linux/interrupt.h' l='565' c='tasklet_unlock'/>
<use f='linux/include/linux/interrupt.h' l='571' c='tasklet_unlock_wait'/>
<use f='linux/include/linux/interrupt.h' l='581' c='__tasklet_schedule'/>
<use f='linux/include/linux/interrupt.h' l='583' c='tasklet_schedule'/>
<use f='linux/include/linux/interrupt.h' l='589' c='__tasklet_hi_schedule'/>
<use f='linux/include/linux/interrupt.h' l='591' c='tasklet_hi_schedule'/>
<use f='linux/include/linux/interrupt.h' l='597' c='tasklet_disable_nosync'/>
<use f='linux/include/linux/interrupt.h' l='603' c='tasklet_disable'/>
<use f='linux/include/linux/interrupt.h' l='610' c='tasklet_enable'/>
<use f='linux/include/linux/interrupt.h' l='616' c='tasklet_kill'/>
<use f='linux/include/linux/interrupt.h' l='617' c='tasklet_kill_immediate'/>
<use f='linux/include/linux/interrupt.h' l='618' c='tasklet_init'/>
<use f='linux/include/linux/interrupt.h' l='623'/>
<size>40</size>
<doc f='linux/include/linux/interrupt.h' l='517'>/* Tasklets --- multithreaded analogue of BHs.

   Main feature differing them of generic softirqs: tasklet
   is running only on one CPU simultaneously.

   Main feature differing them of BHs: different tasklets
   may be run simultaneously on different CPUs.

   Properties:
   * If tasklet_schedule() is called, then tasklet is guaranteed
     to be executed on some cpu at least once after this.
   * If the tasklet is already scheduled, but its execution is still not
     started, it will be executed only once.
   * If this tasklet is already running on another CPU (or schedule is called
     from tasklet itself), it is rescheduled for later.
   * Tasklet is strictly serialized wrt itself, but not
     wrt another tasklets. If client needs some intertask synchronization,
     he makes it with spinlocks.
 */</doc>
<mbr r='tasklet_struct::next' o='0' t='struct tasklet_struct *'/>
<mbr r='tasklet_struct::state' o='64' t='unsigned long'/>
<mbr r='tasklet_struct::count' o='128' t='atomic_t'/>
<mbr r='tasklet_struct::func' o='192' t='void (*)(unsigned long)'/>
<mbr r='tasklet_struct::data' o='256' t='unsigned long'/>
<use f='linux/drivers/dma/dw/regs.h' l='304'/>
<size>40</size>
<use f='linux/drivers/dma/virt-dma.h' l='26'/>
<size>40</size>
<use f='linux/drivers/gpu/drm/i915/intel_ringbuffer.h' l='200'/>
<size>40</size>
<use f='linux/include/linux/kbd_kern.h' l='9'/>
<size>40</size>
<use f='linux/drivers/tty/vt/keyboard.c' l='1202' macro='1'/>
<size>40</size>
<use f='linux/include/linux/usb/hcd.h' l='71'/>
<size>40</size>
<use f='linux/kernel/softirq.c' l='456'/>
<use f='linux/kernel/softirq.c' l='457'/>
<use f='linux/kernel/softirq.c' l='463' c='__tasklet_schedule'/>
<use f='linux/kernel/softirq.c' l='476' c='__tasklet_hi_schedule'/>
<use f='linux/kernel/softirq.c' l='491' c='tasklet_action'/>
<use f='linux/kernel/softirq.c' l='500' c='tasklet_action'/>
<use f='linux/kernel/softirq.c' l='527' c='tasklet_hi_action'/>
<use f='linux/kernel/softirq.c' l='536' c='tasklet_hi_action'/>
<use f='linux/kernel/softirq.c' l='561' c='tasklet_init'/>
<use f='linux/kernel/softirq.c' l='572' c='tasklet_kill'/>
<use f='linux/kernel/softirq.c' l='684' c='tasklet_kill_immediate'/>
<use f='linux/kernel/softirq.c' l='686' c='tasklet_kill_immediate'/>
<size>40</size>
<use f='linux/include/linux/dccp.h' l='304'/>
<size>40</size>
<use f='linux/net/ipv4/tcp_output.c' l='770'/>
<size>40</size>
<use f='linux/net/mac80211/ieee80211_i.h' l='1204'/>
<use f='linux/net/mac80211/ieee80211_i.h' l='1224'/>
<size>40</size>
<use f='linux/net/xfrm/xfrm_input.c' l='24'/>
<size>40</size>
<use f='linux/include/sound/timer.h' l='92'/>
<size>40</size>
