<dec f='linux/include/linux/sched/jobctl.h' l='35' type='void task_clear_jobctl_pending(struct task_struct * task, unsigned long mask)'/>
<use f='linux/fs/coredump.c' l='323' u='c' c='zap_process'/>
<use f='linux/kernel/ptrace.c' l='132' u='c' c='__ptrace_unlink'/>
<def f='linux/kernel/signal.c' l='308' ll='319' type='void task_clear_jobctl_pending(struct task_struct * task, unsigned long mask)'/>
<use f='linux/kernel/signal.c' l='344' u='c' c='task_participate_group_stop'/>
<use f='linux/kernel/signal.c' l='835' u='c' c='prepare_signal'/>
<use f='linux/kernel/signal.c' l='952' u='c' c='complete_signal'/>
<use f='linux/kernel/signal.c' l='1221' u='c' c='zap_other_threads'/>
<use f='linux/kernel/signal.c' l='1854' u='c' c='ptrace_stop'/>
<use f='linux/kernel/signal.c' l='1856' u='c' c='ptrace_stop'/>
<doc f='linux/kernel/signal.c' l='293'>/**
 * task_clear_jobctl_pending - clear jobctl pending bits
 * @task: target task
 * @mask: pending bits to clear
 *
 * Clear @mask from @task-&gt;jobctl.  @mask must be subset of
 * %JOBCTL_PENDING_MASK.  If %JOBCTL_STOP_PENDING is being cleared, other
 * STOP bits are cleared together.
 *
 * If clearing of @mask leaves no stop or trap pending, this function calls
 * task_clear_jobctl_trapping().
 *
 * CONTEXT:
 * Must be called with @task-&gt;sighand-&gt;siglock held.
 */</doc>
