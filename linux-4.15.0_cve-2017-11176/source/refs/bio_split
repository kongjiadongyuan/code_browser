<dec f='linux/include/linux/bio.h' l='364' type='struct bio * bio_split(struct bio * bio, int sectors, gfp_t gfp, struct bio_set * bs)'/>
<use f='linux/include/linux/bio.h' l='383' u='c' c='bio_next_split'/>
<def f='linux/block/bio.c' l='1821' ll='1844' type='struct bio * bio_split(struct bio * bio, int sectors, gfp_t gfp, struct bio_set * bs)'/>
<dec f='linux/block/bio.c' l='1845' type='struct bio * bio_split(struct bio * , int , gfp_t , struct bio_set * )'/>
<use f='linux/block/bio.c' l='1845' c='bio_split'/>
<use f='linux/block/bio.c' l='1845' u='a'/>
<use f='linux/block/bio.c' l='1845' u='a'/>
<doc f='linux/block/bio.c' l='1807'>/**
 * bio_split - split a bio
 * @bio:	bio to split
 * @sectors:	number of sectors to split from the front of @bio
 * @gfp:	gfp mask
 * @bs:		bio set to allocate from
 *
 * Allocates and returns a new bio which represents @sectors from the start of
 * @bio, and updates @bio to represent the remaining sectors.
 *
 * Unless this is a discard request the newly allocated bio will point
 * to @bio&apos;s bi_io_vec; it is the caller&apos;s responsibility to ensure that
 * @bio is not freed before the split.
 */</doc>
<use f='linux/block/blk-merge.c' l='55' u='c' c='blk_bio_discard_split'/>
<use f='linux/block/blk-merge.c' l='69' u='c' c='blk_bio_write_zeroes_split'/>
<use f='linux/block/blk-merge.c' l='85' u='c' c='blk_bio_write_same_split'/>
<use f='linux/block/blk-merge.c' l='172' u='c' c='blk_bio_segment_split'/>
<use f='linux/block/bounce.c' l='215' u='c' c='__blk_queue_bounce'/>
