<dec f='linux/include/linux/pm_runtime.h' l='39' type='int __pm_runtime_idle(struct device * dev, int rpmflags)'/>
<use f='linux/include/linux/pm_runtime.h' l='185' u='c' c='pm_runtime_idle'/>
<use f='linux/include/linux/pm_runtime.h' l='205' u='c' c='pm_request_idle'/>
<use f='linux/include/linux/pm_runtime.h' l='230' u='c' c='pm_runtime_put'/>
<use f='linux/include/linux/pm_runtime.h' l='241' u='c' c='pm_runtime_put_sync'/>
<def f='linux/drivers/base/power/runtime.c' l='965' ll='982' type='int __pm_runtime_idle(struct device * dev, int rpmflags)'/>
<dec f='linux/drivers/base/power/runtime.c' l='983' type='int __pm_runtime_idle(struct device * , int )'/>
<use f='linux/drivers/base/power/runtime.c' l='983' c='__pm_runtime_idle'/>
<use f='linux/drivers/base/power/runtime.c' l='983' u='a'/>
<use f='linux/drivers/base/power/runtime.c' l='983' u='a'/>
<doc f='linux/drivers/base/power/runtime.c' l='953'>/**
 * __pm_runtime_idle - Entry point for runtime idle operations.
 * @dev: Device to send idle notification for.
 * @rpmflags: Flag bits.
 *
 * If the RPM_GET_PUT flag is set, decrement the device&apos;s usage count and
 * return immediately if it is larger than zero.  Then carry out an idle
 * notification, either synchronous or asynchronous.
 *
 * This routine may be called in atomic context if the RPM_ASYNC flag is set,
 * or if pm_runtime_irq_safe() has been called.
 */</doc>
