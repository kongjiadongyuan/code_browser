<def f='linux/include/crypto/acompress.h' l='52' ll='58'/>
<use f='linux/include/crypto/acompress.h' l='85'/>
<use f='linux/include/crypto/acompress.h' l='86'/>
<use f='linux/include/crypto/acompress.h' l='112' c='crypto_alloc_acomp'/>
<use f='linux/include/crypto/acompress.h' l='115' c='crypto_acomp_tfm'/>
<use f='linux/include/crypto/acompress.h' l='125' c='__crypto_acomp_tfm'/>
<use f='linux/include/crypto/acompress.h' l='127' c='__crypto_acomp_tfm'/>
<use f='linux/include/crypto/acompress.h' l='127' c='__crypto_acomp_tfm'/>
<use f='linux/include/crypto/acompress.h' l='127' c='__crypto_acomp_tfm'/>
<use f='linux/include/crypto/acompress.h' l='130' c='crypto_acomp_alg'/>
<use f='linux/include/crypto/acompress.h' l='135' c='crypto_acomp_reqsize'/>
<use f='linux/include/crypto/acompress.h' l='141' c='acomp_request_set_tfm'/>
<use f='linux/include/crypto/acompress.h' l='146' c='crypto_acomp_reqtfm'/>
<use f='linux/include/crypto/acompress.h' l='156' c='crypto_free_acomp'/>
<use f='linux/include/crypto/acompress.h' l='177' c='acomp_request_alloc'/>
<use f='linux/include/crypto/acompress.h' l='248' c='crypto_acomp_compress'/>
<use f='linux/include/crypto/acompress.h' l='264' c='crypto_acomp_decompress'/>
<use f='linux/include/crypto/internal/acompress.h' l='26' c='acomp_tfm_ctx'/>
<use f='linux/include/crypto/internal/acompress.h' l='37' c='acomp_alg_name'/>
<use f='linux/include/crypto/internal/acompress.h' l='42' c='__acomp_request_alloc'/>
<use f='linux/crypto/acompress.c' l='63' c='crypto_acomp_exit_tfm'/>
<use f='linux/crypto/acompress.c' l='71' c='crypto_acomp_init_tfm'/>
<use f='linux/crypto/acompress.c' l='111'/>
<use f='linux/crypto/acompress.c' l='111'/>
<use f='linux/crypto/acompress.c' l='114' c='crypto_alloc_acomp'/>
<use f='linux/crypto/acompress.c' l='121' c='acomp_request_alloc'/>
<use f='linux/crypto/acompress.c' l='136' c='acomp_request_free'/>
<size>96</size>
<doc f='linux/include/crypto/acompress.h' l='41'>/**
 * struct crypto_acomp - user-instantiated objects which encapsulate
 * algorithms and core processing logic
 *
 * @compress:		Function performs a compress operation
 * @decompress:		Function performs a de-compress operation
 * @dst_free:		Frees destination buffer if allocated inside the
 *			algorithm
 * @reqsize:		Context size for (de)compression requests
 * @base:		Common crypto API algorithm data structure
 */</doc>
<mbr r='crypto_acomp::compress' o='0' t='int (*)(struct acomp_req *)'/>
<mbr r='crypto_acomp::decompress' o='64' t='int (*)(struct acomp_req *)'/>
<mbr r='crypto_acomp::dst_free' o='128' t='void (*)(struct scatterlist *)'/>
<mbr r='crypto_acomp::reqsize' o='192' t='unsigned int'/>
<mbr r='crypto_acomp::base' o='256' t='struct crypto_tfm'/>
<use f='linux/crypto/scompress.c' l='192' c='scomp_acomp_comp_decomp'/>
<use f='linux/crypto/scompress.c' l='259' c='crypto_init_scomp_ops_async'/>
<use f='linux/crypto/scompress.c' l='285' c='crypto_acomp_scomp_alloc_ctx'/>
<use f='linux/crypto/scompress.c' l='304' c='crypto_acomp_scomp_free_ctx'/>
<size>96</size>
