<dec f='linux/drivers/gpu/drm/i915/intel_drv.h' l='1463' type='void hsw_enable_pc8(struct drm_i915_private * dev_priv)'/>
<use f='linux/drivers/gpu/drm/i915/i915_drv.c' l='1611' u='c' c='i915_drm_suspend_late'/>
<use f='linux/drivers/gpu/drm/i915/i915_drv.c' l='2534' u='c' c='intel_runtime_suspend'/>
<def f='linux/drivers/gpu/drm/i915/intel_display.c' l='8872' ll='8886' type='void hsw_enable_pc8(struct drm_i915_private * dev_priv)'/>
<doc f='linux/drivers/gpu/drm/i915/intel_display.c' l='8849'>/*
 * Package states C8 and deeper are really deep PC states that can only be
 * reached when all the devices on the system allow it, so even if the graphics
 * device allows PC8+, it doesn&apos;t mean the system will actually get to these
 * states. Our driver only allows PC8+ when going into runtime PM.
 *
 * The requirements for PC8+ are that all the outputs are disabled, the power
 * well is disabled and most interrupts are disabled, and these are also
 * requirements for runtime PM. When these conditions are met, we manually do
 * the other conditions: disable the interrupts, clocks and switch LCPLL refclk
 * to Fclk. If we&apos;re in PC8+ and we get an non-hotplug interrupt, we can hard
 * hang the machine.
 *
 * When we really reach PC8 or deeper states (not just when we allow it) we lose
 * the state of some registers, so when we come back from PC8+ we need to
 * restore this state. We don&apos;t get into PC8+ if we&apos;re not in RC6, so we don&apos;t
 * need to take care of the registers kept by RC6. Notice that this happens even
 * if we don&apos;t put the device in PCI D3 state (which is what currently happens
 * because of the runtime PM support).
 *
 * For more, read &quot;Display Sequences for Package C8&quot; on the hardware
 * documentation.
 */</doc>
