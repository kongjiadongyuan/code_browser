<dec f='linux/sound/pci/hda/hda_local.h' l='144' type='int __snd_hda_add_vmaster(struct hda_codec * codec, char * name, unsigned int * tlv, const char *const * slaves, const char * suffix, bool init_slave_vol, struct snd_kcontrol ** ctl_ret)'/>
<def f='linux/sound/pci/hda/hda_codec.c' l='1905' ll='1947' type='int __snd_hda_add_vmaster(struct hda_codec * codec, char * name, unsigned int * tlv, const char *const * slaves, const char * suffix, bool init_slave_vol, struct snd_kcontrol ** ctl_ret)'/>
<dec f='linux/sound/pci/hda/hda_codec.c' l='1948' type='int __snd_hda_add_vmaster(struct hda_codec * , char * , unsigned int * , const char *const * , const char * , bool , struct snd_kcontrol ** )'/>
<use f='linux/sound/pci/hda/hda_codec.c' l='1948' c='__snd_hda_add_vmaster'/>
<use f='linux/sound/pci/hda/hda_codec.c' l='1948' u='a'/>
<use f='linux/sound/pci/hda/hda_codec.c' l='1948' u='a'/>
<doc f='linux/sound/pci/hda/hda_codec.c' l='1886'>/**
 * __snd_hda_add_vmaster - create a virtual master control and add slaves
 * @codec: HD-audio codec
 * @name: vmaster control name
 * @tlv: TLV data (optional)
 * @slaves: slave control names (optional)
 * @suffix: suffix string to each slave name (optional)
 * @init_slave_vol: initialize slaves to unmute/0dB
 * @ctl_ret: store the vmaster kcontrol in return
 *
 * Create a virtual master control with the given name.  The TLV data
 * must be either NULL or a valid data.
 *
 * @slaves is a NULL-terminated array of strings, each of which is a
 * slave control name.  All controls with these names are assigned to
 * the new virtual master control.
 *
 * This function returns zero if successful or a negative error code.
 */</doc>
