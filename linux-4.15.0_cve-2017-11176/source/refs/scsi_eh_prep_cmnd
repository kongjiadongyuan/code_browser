<dec f='linux/include/scsi/scsi_eh.h' l='48' type='void scsi_eh_prep_cmnd(struct scsi_cmnd * scmd, struct scsi_eh_save * ses, unsigned char * cmnd, int cmnd_size, unsigned int sense_bytes)'/>
<def f='linux/drivers/scsi/scsi_error.c' l='927' ll='988' type='void scsi_eh_prep_cmnd(struct scsi_cmnd * scmd, struct scsi_eh_save * ses, unsigned char * cmnd, int cmnd_size, unsigned int sense_bytes)'/>
<dec f='linux/drivers/scsi/scsi_error.c' l='989' type='void scsi_eh_prep_cmnd(struct scsi_cmnd * , struct scsi_eh_save * , unsigned char * , int , unsigned int )'/>
<use f='linux/drivers/scsi/scsi_error.c' l='989' c='scsi_eh_prep_cmnd'/>
<use f='linux/drivers/scsi/scsi_error.c' l='989' u='a'/>
<use f='linux/drivers/scsi/scsi_error.c' l='989' u='a'/>
<use f='linux/drivers/scsi/scsi_error.c' l='1041' u='c' c='scsi_send_eh_cmnd'/>
<doc f='linux/drivers/scsi/scsi_error.c' l='913'>/**
 * scsi_eh_prep_cmnd  - Save a scsi command info as part of error recovery
 * @scmd:       SCSI command structure to hijack
 * @ses:        structure to save restore information
 * @cmnd:       CDB to send. Can be NULL if no new cmnd is needed
 * @cmnd_size:  size in bytes of @cmnd (must be &lt;= BLK_MAX_CDB)
 * @sense_bytes: size of sense data to copy. or 0 (if != 0 @cmnd is ignored)
 *
 * This function is used to save a scsi command information before re-execution
 * as part of the error recovery process.  If @sense_bytes is 0 the command
 * sent must be one that does not transfer any data.  If @sense_bytes != 0
 * @cmnd is ignored and this functions sets up a REQUEST_SENSE command
 * and cmnd buffers to read @sense_bytes into @scmd-&gt;sense_buffer.
 */</doc>
<use f='linux/drivers/usb/storage/transport.c' l='710' u='c' c='usb_stor_invoke_transport'/>
