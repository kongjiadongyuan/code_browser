<dec f='linux/include/linux/kernel.h' l='455' type='int vscnprintf(char * buf, size_t size, const char * fmt, struct __va_list_tag * args)'/>
<dec f='linux/tools/include/linux/kernel.h' l='102' type='int vscnprintf(char * buf, size_t size, const char * fmt, struct __va_list_tag * args)'/>
<use f='linux/drivers/ata/libata-eh.c' l='181' u='c' c='__ata_ehi_pushv_desc'/>
<use f='linux/drivers/clk/clkdev.c' l='270' u='c' c='vclkdev_alloc'/>
<use f='linux/drivers/gpu/drm/i915/i915_irq.c' l='2846' u='c' c='i915_handle_error'/>
<use f='linux/drivers/scsi/scsi_logging.c' l='115' u='c' c='sdev_prefix_printk'/>
<use f='linux/drivers/scsi/scsi_logging.c' l='140' u='c' c='scmd_printk'/>
<use f='linux/kernel/crash_core.c' l='358' u='c' c='vmcoreinfo_append_str'/>
<use f='linux/kernel/printk/printk.c' l='1709' u='c' c='vprintk_emit'/>
<use f='linux/kernel/printk/printk.c' l='1879' u='c' c='early_printk'/>
<use f='linux/kernel/printk/printk_safe.c' l='103' u='c' c='printk_safe_log_store'/>
<use f='linux/kernel/trace/blktrace.c' l='180' u='c' c='__trace_note_message'/>
<use f='linux/kernel/trace/trace.c' l='2988' u='c' c='__trace_array_vprintk'/>
<def f='linux/lib/vsprintf.c' l='2381' ll='2392' type='int vscnprintf(char * buf, size_t size, const char * fmt, struct __va_list_tag * args)'/>
<dec f='linux/lib/vsprintf.c' l='2393' type='int vscnprintf(char * , size_t , const char * , struct __va_list_tag * )'/>
<use f='linux/lib/vsprintf.c' l='2393' c='vscnprintf'/>
<use f='linux/lib/vsprintf.c' l='2393' u='a'/>
<use f='linux/lib/vsprintf.c' l='2393' u='a'/>
<use f='linux/lib/vsprintf.c' l='2439' u='c' c='scnprintf'/>
<doc f='linux/lib/vsprintf.c' l='2366'>/**
 * vscnprintf - Format a string and place it in a buffer
 * @buf: The buffer to place the result into
 * @size: The size of the buffer, including the trailing null space
 * @fmt: The format string to use
 * @args: Arguments for the format string
 *
 * The return value is the number of characters which have been written into
 * the @buf not including the trailing &apos;\0&apos;. If @size is == 0 the function
 * returns 0.
 *
 * If you&apos;re not already dealing with a va_list consider using scnprintf().
 *
 * See the vsnprintf() documentation for format string extensions over C99.
 */</doc>
