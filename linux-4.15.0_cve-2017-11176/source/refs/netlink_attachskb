<dec f='linux/include/linux/netlink.h' l='134' type='int netlink_attachskb(struct sock * sk, struct sk_buff * skb, long * timeo, struct sock * ssk)'/>
<use f='linux/ipc/mqueue.c' l='1272' u='c' c='do_mq_notify'/>
<def f='linux/net/netlink/af_netlink.c' l='1175' ll='1213' type='int netlink_attachskb(struct sock * sk, struct sk_buff * skb, long * timeo, struct sock * ssk)'/>
<use f='linux/net/netlink/af_netlink.c' l='1310' u='c' c='netlink_unicast'/>
<doc f='linux/net/netlink/af_netlink.c' l='1165'>/*
 * Attach a skb to a netlink socket.
 * The caller must hold a reference to the destination socket. On error, the
 * reference is dropped. The skb is not send to the destination, just all
 * all error checks are performed and memory in the queue is reserved.
 * Return values:
 * &lt; 0: error. skb freed, reference to sock dropped.
 * 0: continue
 * 1: repeat lookup - reference dropped while waiting for socket memory.
 */</doc>
