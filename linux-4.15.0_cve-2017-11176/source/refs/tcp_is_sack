<def f='linux/include/net/tcp.h' l='1068' ll='1071' type='int tcp_is_sack(const struct tcp_sock * tp)'/>
<use f='linux/include/net/tcp.h' l='1075' u='c' c='tcp_is_reno'/>
<doc f='linux/include/net/tcp.h' l='1061'>/* These functions determine how the current flow behaves in respect of SACK
 * handling. SACK is negotiated with the peer, and therefore it can vary
 * between different flows.
 *
 * tcp_is_sack - SACK enabled
 * tcp_is_reno - No SACK
 */</doc>
<use f='linux/net/ipv4/tcp.c' l='2965' u='c' c='tcp_get_info'/>
<use f='linux/net/ipv4/tcp_input.c' l='2151' u='c' c='tcp_mark_head_lost'/>
<use f='linux/net/ipv4/tcp_input.c' l='2180' u='c' c='tcp_mark_head_lost'/>
<use f='linux/net/ipv4/tcp_input.c' l='2402' u='c' c='tcp_try_undo_loss'/>
<use f='linux/net/ipv4/tcp_input.c' l='3076' u='c' c='tcp_clean_rtx_queue'/>
<use f='linux/net/ipv4/tcp_input.c' l='3174' u='c' c='tcp_clean_rtx_queue'/>
<use f='linux/net/ipv4/tcp_input.c' l='3538' u='c' c='tcp_ack'/>
<use f='linux/net/ipv4/tcp_input.c' l='4056' u='c' c='tcp_fin'/>
<use f='linux/net/ipv4/tcp_input.c' l='4089' u='c' c='tcp_dsack_set'/>
<use f='linux/net/ipv4/tcp_input.c' l='4124' u='c' c='tcp_send_dupack'/>
<use f='linux/net/ipv4/tcp_input.c' l='4394' u='c' c='tcp_data_queue_ofo'/>
<use f='linux/net/ipv4/tcp_input.c' l='4491' u='c' c='tcp_data_queue_ofo'/>
<use f='linux/net/ipv4/tcp_input.c' l='5220' u='c' c='tcp_validate_incoming'/>
<use f='linux/net/ipv4/tcp_output.c' l='2446' u='c' c='tcp_schedule_loss_probe'/>
<use f='linux/net/ipv4/tcp_timer.c' l='475' u='c' c='tcp_retransmit_timer'/>
<use f='linux/net/ipv4/tcp_timer.c' l='483' u='c' c='tcp_retransmit_timer'/>
