<dec f='linux/include/net/cfg80211.h' l='3927' type='struct wiphy * wiphy_new_nm(const struct cfg80211_ops * ops, int sizeof_priv, const char * requested_name)'/>
<use f='linux/include/net/cfg80211.h' l='3945' u='c' c='wiphy_new'/>
<doc f='linux/include/net/cfg80211.h' l='3913'>/**
 * wiphy_new_nm - create a new wiphy for use with cfg80211
 *
 * @ops: The configuration operations for this device
 * @sizeof_priv: The size of the private area to allocate
 * @requested_name: Request a particular name.
 *	NULL is valid value, and means use the default phy%d naming.
 *
 * Create a new wiphy and associate the given operations with it.
 * @sizeof_priv bytes are allocated for private use.
 *
 * Return: A pointer to the new wiphy. This pointer must be
 * assigned to each netdev&apos;s ieee80211_ptr for proper operation.
 */</doc>
<use f='linux/net/mac80211/main.c' l='528' u='c' c='ieee80211_alloc_hw_nm'/>
<def f='linux/net/wireless/core.c' l='380' ll='525' type='struct wiphy * wiphy_new_nm(const struct cfg80211_ops * ops, int sizeof_priv, const char * requested_name)'/>
<dec f='linux/net/wireless/core.c' l='526' type='struct wiphy * wiphy_new_nm(const struct cfg80211_ops * , int , const char * )'/>
<use f='linux/net/wireless/core.c' l='526' c='wiphy_new_nm'/>
<use f='linux/net/wireless/core.c' l='526' u='a'/>
<use f='linux/net/wireless/core.c' l='526' u='a'/>
<doc f='linux/net/wireless/core.c' l='378'>/* exported functions */</doc>
