<def f='linux/include/linux/rhashtable.h' l='825' ll='836' type='int rhashtable_insert_fast(struct rhashtable * ht, struct rhash_head * obj, const struct rhashtable_params params)'/>
<doc f='linux/include/linux/rhashtable.h' l='809'>/**
 * rhashtable_insert_fast - insert object into hash table
 * @ht:		hash table
 * @obj:	pointer to hash head inside object
 * @params:	hash table parameters
 *
 * Will take a per bucket spinlock to protect against mutual mutations
 * on the same bucket. Multiple insertions may occur in parallel unless
 * they map to the same bucket lock.
 *
 * It is safe to call this function from atomic context.
 *
 * Will trigger an automatic deferred table resizing if the size grows
 * beyond the watermark indicated by grow_decision() which can be passed
 * to rhashtable_init().
 */</doc>
<use f='linux/ipc/util.c' l='273' u='c' c='ipc_addid'/>
<use f='linux/net/sched/act_api.c' l='1307' u='c' c='tcf_action_egdev_get'/>
