<def f='linux/include/linux/rhashtable.h' l='1124' ll='1129' type='int rhashtable_remove_fast(struct rhashtable * ht, struct rhash_head * obj, const struct rhashtable_params params)'/>
<doc f='linux/include/linux/rhashtable.h' l='1109'>/**
 * rhashtable_remove_fast - remove object from hash table
 * @ht:		hash table
 * @obj:	pointer to hash head inside object
 * @params:	hash table parameters
 *
 * Since the hash chain is single linked, the removal operation needs to
 * walk the bucket chain upon removal. The removal operation is thus
 * considerable slow if the hash table is not correctly sized.
 *
 * Will automatically shrink the table via rhashtable_expand() if the
 * shrink_decision function specified at rhashtable_init() returns true.
 *
 * Returns zero on success, -ENOENT if the entry could not be found.
 */</doc>
<use f='linux/ipc/util.c' l='416' u='c' c='ipc_kht_remove'/>
<use f='linux/net/netlink/af_netlink.c' l='578' u='c' c='netlink_remove'/>
<use f='linux/net/sched/act_api.c' l='1322' u='c' c='tcf_action_egdev_put'/>
