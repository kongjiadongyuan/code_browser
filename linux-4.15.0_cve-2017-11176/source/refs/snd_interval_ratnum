<dec f='linux/include/sound/pcm.h' l='979' type='int snd_interval_ratnum(struct snd_interval * i, unsigned int rats_count, const struct snd_ratnum * rats, unsigned int * nump, unsigned int * denp)'/>
<def f='linux/sound/core/pcm_lib.c' l='785' ll='889' type='int snd_interval_ratnum(struct snd_interval * i, unsigned int rats_count, const struct snd_ratnum * rats, unsigned int * nump, unsigned int * denp)'/>
<dec f='linux/sound/core/pcm_lib.c' l='890' type='int snd_interval_ratnum(struct snd_interval * , unsigned int , const struct snd_ratnum * , unsigned int * , unsigned int * )'/>
<use f='linux/sound/core/pcm_lib.c' l='890' c='snd_interval_ratnum'/>
<use f='linux/sound/core/pcm_lib.c' l='890' u='a'/>
<use f='linux/sound/core/pcm_lib.c' l='890' u='a'/>
<use f='linux/sound/core/pcm_lib.c' l='1322' u='c' c='snd_pcm_hw_rule_ratnums'/>
<doc f='linux/sound/core/pcm_lib.c' l='774'>/**
 * snd_interval_ratnum - refine the interval value
 * @i: interval to refine
 * @rats_count: number of ratnum_t 
 * @rats: ratnum_t array
 * @nump: pointer to store the resultant numerator
 * @denp: pointer to store the resultant denominator
 *
 * Return: Positive if the value is changed, zero if it&apos;s not changed, or a
 * negative error code.
 */</doc>
