<dec f='linux/include/linux/thermal.h' l='459' type='struct thermal_cooling_device * thermal_cooling_device_register(char * , void * , const struct thermal_cooling_device_ops * )'/>
<use f='linux/drivers/acpi/acpi_video.c' l='1767' u='c' c='acpi_video_dev_register_backlight'/>
<use f='linux/drivers/acpi/fan.c' l='362' u='c' c='acpi_fan_probe'/>
<use f='linux/drivers/acpi/processor_driver.c' l='167' u='c' c='acpi_pss_perf_init'/>
<use f='linux/drivers/power/supply/power_supply_core.c' l='803' u='c' c='psy_register_cooler'/>
<def f='linux/drivers/thermal/thermal_core.c' l='1016' ll='1021' type='struct thermal_cooling_device * thermal_cooling_device_register(char * type, void * devdata, const struct thermal_cooling_device_ops * ops)'/>
<dec f='linux/drivers/thermal/thermal_core.c' l='1022' type='struct thermal_cooling_device * thermal_cooling_device_register(char * , void * , const struct thermal_cooling_device_ops * )'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1022' c='thermal_cooling_device_register'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1022' u='a'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1022' u='a'/>
<doc f='linux/drivers/thermal/thermal_core.c' l='1003'>/**
 * thermal_cooling_device_register() - register a new thermal cooling device
 * @type:	the thermal cooling device type.
 * @devdata:	device private data.
 * @ops:		standard thermal cooling devices callbacks.
 *
 * This interface function adds a new thermal cooling device (fan/processor/...)
 * to /sys/class/thermal/ folder as cooling_device[0-*]. It tries to bind itself
 * to all the thermal zone devices registered at the same time.
 *
 * Return: a pointer to the created struct thermal_cooling_device or an
 * ERR_PTR. Caller must check return value with IS_ERR*() helpers.
 */</doc>
