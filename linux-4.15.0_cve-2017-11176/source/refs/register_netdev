<dec f='linux/include/linux/netdevice.h' l='3744' type='int register_netdev(struct net_device * dev)'/>
<use f='linux/drivers/net/ethernet/broadcom/tg3.c' l='17913' u='c' c='tg3_init_one'/>
<use f='linux/drivers/net/ethernet/intel/e100.c' l='2959' u='c' c='e100_probe'/>
<use f='linux/drivers/net/ethernet/intel/e1000/e1000_main.c' l='1225' u='c' c='e1000_probe'/>
<use f='linux/drivers/net/ethernet/intel/e1000e/netdev.c' l='7354' u='c' c='e1000_probe'/>
<use f='linux/drivers/net/ethernet/marvell/sky2.c' l='5056' u='c' c='sky2_probe'/>
<use f='linux/drivers/net/ethernet/marvell/sky2.c' l='5073' u='c' c='sky2_probe'/>
<use f='linux/drivers/net/ethernet/nvidia/forcedeth.c' l='6017' u='c' c='nv_probe'/>
<use f='linux/drivers/net/ethernet/realtek/8139too.c' l='1039' u='c' c='rtl8139_init_one'/>
<use f='linux/drivers/net/ethernet/realtek/r8169.c' l='8702' u='c' c='rtl_init_one'/>
<use f='linux/drivers/net/loopback.c' l='214' u='c' c='loopback_net_init'/>
<def f='linux/net/core/dev.c' l='7837' ll='7845' type='int register_netdev(struct net_device * dev)'/>
<dec f='linux/net/core/dev.c' l='7846' type='int register_netdev(struct net_device * )'/>
<use f='linux/net/core/dev.c' l='7846' c='register_netdev'/>
<use f='linux/net/core/dev.c' l='7846' u='a'/>
<use f='linux/net/core/dev.c' l='7846' u='a'/>
<doc f='linux/net/core/dev.c' l='7824'>/**
 *	register_netdev	- register a network device
 *	@dev: device to register
 *
 *	Take a completed network device structure and add it to the kernel
 *	interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier
 *	chain. 0 is returned on success. A negative errno code is returned
 *	on a failure to set up the device, or if the name is a duplicate.
 *
 *	This is a wrapper around register_netdevice that takes the rtnl semaphore
 *	and expands the device name if you passed a format string to
 *	alloc_netdev.
 */</doc>
<use f='linux/net/ipv6/sit.c' l='1845' u='c' c='sit_init_net'/>
