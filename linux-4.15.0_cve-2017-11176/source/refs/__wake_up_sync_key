<dec f='linux/include/linux/wait.h' l='191' type='void __wake_up_sync_key(struct wait_queue_head * wq_head, unsigned int mode, int nr, void * key)'/>
<use f='linux/fs/pipe.c' l='335' macro='1' u='c' c='pipe_read'/>
<use f='linux/fs/pipe.c' l='344' macro='1' u='c' c='pipe_read'/>
<use f='linux/fs/pipe.c' l='471' macro='1' u='c' c='pipe_write'/>
<use f='linux/fs/pipe.c' l='482' macro='1' u='c' c='pipe_write'/>
<use f='linux/fs/pipe.c' l='576' macro='1' u='c' c='pipe_release'/>
<use f='linux/kernel/exit.c' l='1492' u='c' c='__wake_up_parent'/>
<def f='linux/kernel/sched/wait.c' l='192' ll='204' type='void __wake_up_sync_key(struct wait_queue_head * wq_head, unsigned int mode, int nr_exclusive, void * key)'/>
<dec f='linux/kernel/sched/wait.c' l='205' type='void __wake_up_sync_key(struct wait_queue_head * , unsigned int , int , void * )'/>
<use f='linux/kernel/sched/wait.c' l='205' c='__wake_up_sync_key'/>
<use f='linux/kernel/sched/wait.c' l='205' u='a'/>
<use f='linux/kernel/sched/wait.c' l='205' u='a'/>
<use f='linux/kernel/sched/wait.c' l='212' u='c' c='__wake_up_sync'/>
<doc f='linux/kernel/sched/wait.c' l='175'>/**
 * __wake_up_sync_key - wake up threads blocked on a waitqueue.
 * @wq_head: the waitqueue
 * @mode: which threads
 * @nr_exclusive: how many wake-one or wake-many threads to wake up
 * @key: opaque value to be passed to wakeup targets
 *
 * The sync wakeup differs that the waker knows that it will schedule
 * away soon, so while the target thread will be woken up, it will not
 * be migrated to another CPU - ie. the two threads are &apos;synchronized&apos;
 * with each other. This can prevent needless bouncing between CPUs.
 *
 * On UP it can prevent extra preemption.
 *
 * It may be assumed that this function implies a write memory barrier before
 * changing the task state if and only if any tasks are woken up.
 */</doc>
<use f='linux/net/core/sock.c' l='2624' macro='1' u='c' c='sock_def_readable'/>
<use f='linux/net/core/sock.c' l='2642' macro='1' u='c' c='sock_def_write_space'/>
<use f='linux/net/unix/af_unix.c' l='456' macro='1' u='c' c='unix_write_space'/>
<use f='linux/net/unix/af_unix.c' l='2131' macro='1' u='c' c='unix_dgram_recvmsg'/>
