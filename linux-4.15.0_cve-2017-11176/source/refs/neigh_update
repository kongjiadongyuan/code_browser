<dec f='linux/include/net/neighbour.h' l='319' type='int neigh_update(struct neighbour * neigh, const u8 * lladdr, u8 new, u32 flags, u32 nlmsg_pid)'/>
<def f='linux/net/core/neighbour.c' l='1110' ll='1277' type='int neigh_update(struct neighbour * neigh, const u8 * lladdr, u8 new, u32 flags, u32 nlmsg_pid)'/>
<dec f='linux/net/core/neighbour.c' l='1278' type='int neigh_update(struct neighbour * , const u8 * , u8 , u32 , u32 )'/>
<use f='linux/net/core/neighbour.c' l='1278' c='neigh_update'/>
<use f='linux/net/core/neighbour.c' l='1278' u='a'/>
<use f='linux/net/core/neighbour.c' l='1278' u='a'/>
<use f='linux/net/core/neighbour.c' l='1304' u='c' c='neigh_event_ns'/>
<use f='linux/net/core/neighbour.c' l='1682' u='c' c='neigh_delete'/>
<use f='linux/net/core/neighbour.c' l='1780' u='c' c='neigh_add'/>
<doc f='linux/net/core/neighbour.c' l='1091'>/* Generic update routine.
   -- lladdr is new lladdr or NULL, if it is not supplied.
   -- new    is new state.
   -- flags
	NEIGH_UPDATE_F_OVERRIDE allows to override existing lladdr,
				if it is different.
	NEIGH_UPDATE_F_WEAK_OVERRIDE will suspect existing &quot;connected&quot;
				lladdr instead of overriding it
				if it is different.
	NEIGH_UPDATE_F_ADMIN	means that the change is administrative.

	NEIGH_UPDATE_F_OVERRIDE_ISROUTER allows to override existing
				NTF_ROUTER flag.
	NEIGH_UPDATE_F_ISROUTER	indicates if the neighbour is known as
				a router.

   Caller MUST hold reference count on the entry.
 */</doc>
<use f='linux/net/ipv4/arp.c' l='913' u='c' c='arp_process'/>
<use f='linux/net/ipv4/arp.c' l='1072' u='c' c='arp_req_set'/>
<use f='linux/net/ipv4/arp.c' l='1125' u='c' c='arp_invalidate'/>
<use f='linux/net/ipv6/ndisc.c' l='748' u='c' c='ndisc_update'/>
