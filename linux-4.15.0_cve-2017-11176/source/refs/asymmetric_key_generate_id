<dec f='linux/include/keys/asymmetric-type.h' l='69' type='struct asymmetric_key_id * asymmetric_key_generate_id(const void * val_1, size_t len_1, const void * val_2, size_t len_2)'/>
<def f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='138' ll='153' type='struct asymmetric_key_id * asymmetric_key_generate_id(const void * val_1, size_t len_1, const void * val_2, size_t len_2)'/>
<dec f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='154' type='struct asymmetric_key_id * asymmetric_key_generate_id(const void * , size_t , const void * , size_t )'/>
<use f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='154' c='asymmetric_key_generate_id'/>
<use f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='154' u='a'/>
<use f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='154' u='a'/>
<doc f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='129'>/**
 * asymmetric_key_generate_id: Construct an asymmetric key ID
 * @val_1: First binary blob
 * @len_1: Length of first binary blob
 * @val_2: Second binary blob
 * @len_2: Length of second binary blob
 *
 * Construct an asymmetric key ID from a pair of binary blobs.
 */</doc>
<use f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='659' u='c' c='pkcs7_note_signed_info'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='664' u='c' c='pkcs7_note_signed_info'/>
<use f='linux/crypto/asymmetric_keys/x509_cert_parser.c' l='118' u='c' c='x509_cert_parse'/>
<use f='linux/crypto/asymmetric_keys/x509_cert_parser.c' l='446' u='c' c='x509_process_extension'/>
<use f='linux/crypto/asymmetric_keys/x509_cert_parser.c' l='590' u='c' c='x509_akid_note_kid'/>
<use f='linux/crypto/asymmetric_keys/x509_cert_parser.c' l='629' u='c' c='x509_akid_note_serial'/>
