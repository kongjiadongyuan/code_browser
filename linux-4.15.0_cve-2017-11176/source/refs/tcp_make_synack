<dec f='linux/include/net/tcp.h' l='434' type='struct sk_buff * tcp_make_synack(const struct sock * sk, struct dst_entry * dst, struct request_sock * req, struct tcp_fastopen_cookie * foc, enum tcp_synack_type synack_type)'/>
<use f='linux/net/ipv4/tcp_ipv4.c' l='878' u='c' c='tcp_v4_send_synack'/>
<def f='linux/net/ipv4/tcp_output.c' l='3197' ll='3289' type='struct sk_buff * tcp_make_synack(const struct sock * sk, struct dst_entry * dst, struct request_sock * req, struct tcp_fastopen_cookie * foc, enum tcp_synack_type synack_type)'/>
<dec f='linux/net/ipv4/tcp_output.c' l='3290' type='struct sk_buff * tcp_make_synack(const struct sock * , struct dst_entry * , struct request_sock * , struct tcp_fastopen_cookie * , enum tcp_synack_type )'/>
<use f='linux/net/ipv4/tcp_output.c' l='3290' c='tcp_make_synack'/>
<use f='linux/net/ipv4/tcp_output.c' l='3290' u='a'/>
<use f='linux/net/ipv4/tcp_output.c' l='3290' u='a'/>
<doc f='linux/net/ipv4/tcp_output.c' l='3188'>/**
 * tcp_make_synack - Prepare a SYN-ACK.
 * sk: listener socket
 * dst: dst entry attached to the SYNACK
 * req: request_sock pointer
 *
 * Allocate one skb and build a SYNACK packet.
 * @dst is consumed : Caller should not use it again.
 */</doc>
<use f='linux/net/ipv6/tcp_ipv6.c' l='477' u='c' c='tcp_v6_send_synack'/>
