<dec f='linux/include/linux/libata.h' l='1095' type='int sata_link_debounce(struct ata_link * link, const unsigned long * params, unsigned long deadline)'/>
<def f='linux/drivers/ata/libata-core.c' l='3817' ll='3863' type='int sata_link_debounce(struct ata_link * link, const unsigned long * params, unsigned long deadline)'/>
<use f='linux/drivers/ata/libata-core.c' l='3921' u='c' c='sata_link_resume'/>
<dec f='linux/drivers/ata/libata-core.c' l='7262' type='int sata_link_debounce(struct ata_link * , const unsigned long * , unsigned long )'/>
<use f='linux/drivers/ata/libata-core.c' l='7262' c='sata_link_debounce'/>
<use f='linux/drivers/ata/libata-core.c' l='7262' u='a'/>
<use f='linux/drivers/ata/libata-core.c' l='7262' u='a'/>
<doc f='linux/drivers/ata/libata-core.c' l='3795'>/**
 *	sata_link_debounce - debounce SATA phy status
 *	@link: ATA link to debounce SATA phy status for
 *	@params: timing parameters { interval, duration, timeout } in msec
 *	@deadline: deadline jiffies for the operation
 *
 *	Make sure SStatus of @link reaches stable state, determined by
 *	holding the same value where DET is not 1 for @duration polled
 *	every @interval, before @timeout.  Timeout constraints the
 *	beginning of the stable state.  Because DET gets stuck at 1 on
 *	some controllers after hot unplugging, this functions waits
 *	until timeout then returns 0 if DET is stable at 1.
 *
 *	@timeout is further limited by @deadline.  The sooner of the
 *	two is used.
 *
 *	LOCKING:
 *	Kernel thread context (may sleep)
 *
 *	RETURNS:
 *	0 on success, -errno on failure.
 */</doc>
