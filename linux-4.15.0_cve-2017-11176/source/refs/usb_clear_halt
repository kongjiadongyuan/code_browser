<dec f='linux/include/linux/usb.h' l='1791' type='int usb_clear_halt(struct usb_device * dev, int pipe)'/>
<doc f='linux/include/linux/usb.h' l='1790'>/* wrappers that also update important state inside usbcore */</doc>
<use f='linux/drivers/hid/usbhid/hid-core.c' l='124' u='c' c='hid_reset'/>
<use f='linux/drivers/usb/core/devio.c' l='1280' u='c' c='proc_clearhalt'/>
<def f='linux/drivers/usb/core/message.c' l='1021' ll='1053' type='int usb_clear_halt(struct usb_device * dev, int pipe)'/>
<dec f='linux/drivers/usb/core/message.c' l='1054' type='int usb_clear_halt(struct usb_device * , int )'/>
<use f='linux/drivers/usb/core/message.c' l='1054' c='usb_clear_halt'/>
<use f='linux/drivers/usb/core/message.c' l='1054' u='a'/>
<use f='linux/drivers/usb/core/message.c' l='1054' u='a'/>
<use f='linux/drivers/usb/core/message.c' l='1430' u='c' c='usb_set_interface'/>
<doc f='linux/drivers/usb/core/message.c' l='998'>/**
 * usb_clear_halt - tells device to clear endpoint halt/stall condition
 * @dev: device whose endpoint is halted
 * @pipe: endpoint &quot;pipe&quot; being cleared
 * Context: !in_interrupt ()
 *
 * This is used to clear halt conditions for bulk and interrupt endpoints,
 * as reported by URB completion status.  Endpoints that are halted are
 * sometimes referred to as being &quot;stalled&quot;.  Such endpoints are unable
 * to transmit or receive data until the halt status is cleared.  Any URBs
 * queued for such an endpoint should normally be unlinked by the driver
 * before clearing the halt condition, as described in sections 5.7.5
 * and 5.8.5 of the USB 2.0 spec.
 *
 * Note that control and isochronous endpoints don&apos;t halt, although control
 * endpoints report &quot;protocol stall&quot; (for unsupported requests) using the
 * same status code used to report a true stall.
 *
 * This call is synchronous, and may not be used in an interrupt context.
 *
 * Return: Zero on success, or else the status code returned by the
 * underlying usb_control_msg() call.
 */</doc>
