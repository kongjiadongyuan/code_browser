<dec f='linux/drivers/gpu/drm/i915/intel_guc.h' l='117' type='struct i915_vma * intel_guc_allocate_vma(struct intel_guc * guc, u32 size)'/>
<use f='linux/drivers/gpu/drm/i915/i915_guc_submission.c' l='790' u='c' c='guc_client_alloc'/>
<use f='linux/drivers/gpu/drm/i915/i915_guc_submission.c' l='914' u='c' c='guc_ads_create'/>
<use f='linux/drivers/gpu/drm/i915/i915_guc_submission.c' l='984' u='c' c='i915_guc_submission_init'/>
<def f='linux/drivers/gpu/drm/i915/intel_guc.c' l='331' ll='358' type='struct i915_vma * intel_guc_allocate_vma(struct intel_guc * guc, u32 size)'/>
<doc f='linux/drivers/gpu/drm/i915/intel_guc.c' l='318'>/**
 * intel_guc_allocate_vma() - Allocate a GGTT VMA for GuC usage
 * @guc:	the guc
 * @size:	size of area to allocate (both virtual space and memory)
 *
 * This is a wrapper to create an object for use with the GuC. In order to
 * use it inside the GuC, an object needs to be pinned lifetime, so we allocate
 * both some backing storage and a range inside the Global GTT. We must pin
 * it in the GGTT somewhere other than than [0, GUC_WOPCM_TOP) because that
 * range is reserved inside GuC.
 *
 * Return:	A i915_vma if successful, otherwise an ERR_PTR.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_guc_ct.c' l='146' u='c' c='ctch_init'/>
<use f='linux/drivers/gpu/drm/i915/intel_guc_log.c' l='555' u='c' c='intel_guc_log_create'/>
