<dec f='linux/include/scsi/scsi_host.h' l='920' type='int scsi_host_set_state(struct Scsi_Host * , enum scsi_host_state )'/>
<def f='linux/drivers/scsi/hosts.c' l='66' ll='150' type='int scsi_host_set_state(struct Scsi_Host * shost, enum scsi_host_state state)'/>
<dec f='linux/drivers/scsi/hosts.c' l='151' type='int scsi_host_set_state(struct Scsi_Host * , enum scsi_host_state )'/>
<use f='linux/drivers/scsi/hosts.c' l='151' c='scsi_host_set_state'/>
<use f='linux/drivers/scsi/hosts.c' l='151' u='a'/>
<use f='linux/drivers/scsi/hosts.c' l='151' u='a'/>
<use f='linux/drivers/scsi/hosts.c' l='163' u='c' c='scsi_remove_host'/>
<use f='linux/drivers/scsi/hosts.c' l='164' u='c' c='scsi_remove_host'/>
<use f='linux/drivers/scsi/hosts.c' l='178' u='c' c='scsi_remove_host'/>
<use f='linux/drivers/scsi/hosts.c' l='179' u='c' c='scsi_remove_host'/>
<use f='linux/drivers/scsi/hosts.c' l='254' u='c' c='scsi_add_host_with_dma'/>
<doc f='linux/drivers/scsi/hosts.c' l='58'>/**
 *	scsi_host_set_state - Take the given host through the host state model.
 *	@shost:	scsi host to change the state of.
 *	@state:	state to change to.
 *
 *	Returns zero if unsuccessful or an error if the requested
 *	transition is illegal.
 **/</doc>
<use f='linux/drivers/scsi/scsi_error.c' l='87' u='c' c='scsi_schedule_eh'/>
<use f='linux/drivers/scsi/scsi_error.c' l='88' u='c' c='scsi_schedule_eh'/>
<use f='linux/drivers/scsi/scsi_error.c' l='248' u='c' c='scsi_eh_scmd_add'/>
<use f='linux/drivers/scsi/scsi_error.c' l='249' u='c' c='scsi_eh_scmd_add'/>
<use f='linux/drivers/scsi/scsi_error.c' l='1987' u='c' c='scsi_restart_operations'/>
<use f='linux/drivers/scsi/scsi_error.c' l='1988' u='c' c='scsi_restart_operations'/>
<use f='linux/drivers/scsi/scsi_error.c' l='1989' u='c' c='scsi_restart_operations'/>
<use f='linux/drivers/scsi/scsi_error.c' l='2012' u='c' c='scsi_restart_operations'/>
<use f='linux/drivers/scsi/scsi_error.c' l='2013' u='c' c='scsi_restart_operations'/>
<use f='linux/drivers/scsi/scsi_sysfs.c' l='215' u='c' c='store_shost_state'/>
