<dec f='linux/include/linux/workqueue.h' l='438' type='struct workqueue_attrs * alloc_workqueue_attrs(gfp_t gfp_mask)'/>
<def f='linux/kernel/workqueue.c' l='3152' ll='3167' type='struct workqueue_attrs * alloc_workqueue_attrs(gfp_t gfp_mask)'/>
<use f='linux/kernel/workqueue.c' l='3238' u='c' c='init_worker_pool'/>
<use f='linux/kernel/workqueue.c' l='3662' u='c' c='apply_wqattrs_prepare'/>
<use f='linux/kernel/workqueue.c' l='3663' u='c' c='apply_wqattrs_prepare'/>
<use f='linux/kernel/workqueue.c' l='3977' u='c' c='__alloc_workqueue_key'/>
<use f='linux/kernel/workqueue.c' l='5109' u='c' c='wq_sysfs_prep_attrs'/>
<use f='linux/kernel/workqueue.c' l='5531' u='c' c='wq_numa_init'/>
<use f='linux/kernel/workqueue.c' l='5605' u='c' c='workqueue_init_early'/>
<use f='linux/kernel/workqueue.c' l='5614' u='c' c='workqueue_init_early'/>
<doc f='linux/kernel/workqueue.c' l='3143'>/**
 * alloc_workqueue_attrs - allocate a workqueue_attrs
 * @gfp_mask: allocation mask to use
 *
 * Allocate a new workqueue_attrs, initialize with default settings and
 * return it.
 *
 * Return: The allocated new workqueue_attr on success. %NULL on failure.
 */</doc>
