<dec f='linux/include/acpi/acpixf.h' l='752' type='acpi_status acpi_finish_gpe(acpi_handle gpe_device, u32 gpe_number)'/>
<def f='linux/drivers/acpi/acpica/evxfgpe.c' l='671' ll='694' type='acpi_status acpi_finish_gpe(acpi_handle gpe_device, u32 gpe_number)'/>
<dec f='linux/drivers/acpi/acpica/evxfgpe.c' l='696' type='acpi_status acpi_finish_gpe(acpi_handle , u32 )'/>
<use f='linux/drivers/acpi/acpica/evxfgpe.c' l='696' c='acpi_finish_gpe'/>
<use f='linux/drivers/acpi/acpica/evxfgpe.c' l='696' u='a'/>
<use f='linux/drivers/acpi/acpica/evxfgpe.c' l='696' u='a'/>
<doc f='linux/drivers/acpi/acpica/evxfgpe.c' l='655'>/*******************************************************************************
 *
 * FUNCTION:    acpi_finish_gpe
 *
 * PARAMETERS:  gpe_device          - Namespace node for the GPE Block
 *                                    (NULL for FADT defined GPEs)
 *              gpe_number          - GPE level within the GPE block
 *
 * RETURN:      Status
 *
 * DESCRIPTION: Clear and conditionally reenable a GPE. This completes the GPE
 *              processing. Intended for use by asynchronous host-installed
 *              GPE handlers. The GPE is only reenabled if the enable_for_run bit
 *              is set in the GPE info.
 *
 ******************************************************************************/</doc>
