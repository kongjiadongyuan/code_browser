<def f='linux/arch/x86/include/asm/atomic64_64.h' l='200' ll='208' type='bool atomic64_add_unless(atomic64_t * v, long a, long u)'/>
<use f='linux/include/asm-generic/atomic-long.h' l='241' macro='1' u='c' c='atomic_long_add_unless'/>
<doc f='linux/arch/x86/include/asm/atomic64_64.h' l='191'>/**
 * atomic64_add_unless - add unless the number is a given value
 * @v: pointer of type atomic64_t
 * @a: the amount to add to v...
 * @u: ...unless v is equal to u.
 *
 * Atomically adds @a to @v, so long as it was not @u.
 * Returns the old value of @v.
 */</doc>
<use f='linux/include/linux/percpu-refcount.h' l='217' macro='1' u='c' c='percpu_ref_tryget'/>
<use f='linux/include/linux/percpu-refcount.h' l='251' macro='1' u='c' c='percpu_ref_tryget_live'/>
<def f='linux/arch/x86/include/asm/atomic64_32.h' l='286' ll='294' type='int atomic64_add_unless(atomic64_t * v, long long a, long long u)'/>
<doc f='linux/arch/x86/include/asm/atomic64_32.h' l='277'>/**
 * atomic64_add_unless - add unless the number is a given value
 * @v: pointer of type atomic64_t
 * @a: the amount to add to v...
 * @u: ...unless v is equal to u.
 *
 * Atomically adds @a to @v, so long as it was not @u.
 * Returns non-zero if the add was done, zero otherwise.
 */</doc>
<use f='linux/fs/file.c' l='698' macro='1' u='c' c='__fget'/>
<use f='linux/kernel/acct.c' l='155' macro='1' u='c' c='acct_get'/>
<use f='linux/kernel/events/core.c' l='5131' macro='1' u='c' c='perf_mmap_close'/>
<use f='linux/kernel/events/core.c' l='10751' macro='1' u='c' c='inherit_event'/>
<use f='linux/kernel/fork.c' l='1007' macro='1' u='c' c='get_mm_exe_file'/>
