<dec f='linux/fs/ext4/ext4.h' l='2499' type='int ext4_orphan_add(handle_t * , struct inode * )'/>
<use f='linux/fs/ext4/inline.c' l='605' u='c' c='ext4_convert_inline_data_to_extent'/>
<use f='linux/fs/ext4/inline.c' l='1957' u='c' c='ext4_inline_data_truncate'/>
<use f='linux/fs/ext4/inode.c' l='1336' u='c' c='ext4_write_begin'/>
<use f='linux/fs/ext4/inode.c' l='1429' u='c' c='ext4_write_end'/>
<use f='linux/fs/ext4/inode.c' l='1544' u='c' c='ext4_journalled_write_end'/>
<use f='linux/fs/ext4/inode.c' l='3508' u='c' c='ext4_iomap_begin'/>
<use f='linux/fs/ext4/inode.c' l='3678' u='c' c='ext4_direct_IO_write'/>
<use f='linux/fs/ext4/inode.c' l='4447' u='c' c='ext4_truncate'/>
<use f='linux/fs/ext4/inode.c' l='5463' u='c' c='ext4_setattr'/>
<use f='linux/fs/ext4/migrate.c' l='492' u='c' c='ext4_ext_migrate'/>
<use f='linux/fs/ext4/namei.c' l='2519' u='c' c='ext4_tmpfile'/>
<def f='linux/fs/ext4/namei.c' l='2746' ll='2821' type='int ext4_orphan_add(handle_t * handle, struct inode * inode)'/>
<use f='linux/fs/ext4/namei.c' l='2968' u='c' c='ext4_rmdir'/>
<use f='linux/fs/ext4/namei.c' l='3040' u='c' c='ext4_unlink'/>
<use f='linux/fs/ext4/namei.c' l='3155' u='c' c='ext4_symlink'/>
<use f='linux/fs/ext4/namei.c' l='3670' u='c' c='ext4_rename'/>
<doc f='linux/fs/ext4/namei.c' l='2734'>/*
 * ext4_orphan_add() links an unlinked or truncated inode into a list of
 * such inodes, starting at the superblock, in case we crash before the
 * file is closed/deleted, or in case the inode truncate spans multiple
 * transactions and the last transaction is not recovered after a crash.
 *
 * At filesystem recovery time, we walk this list deleting unlinked
 * inodes and truncating linked inodes in ext4_orphan_cleanup().
 *
 * Orphan list manipulation functions must be called under i_mutex unless
 * we are just creating the inode or deleting it.
 */</doc>
<use f='linux/fs/ext4/xattr.c' l='1044' u='c' c='ext4_xattr_inode_update_ref'/>
