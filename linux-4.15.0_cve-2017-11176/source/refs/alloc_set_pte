<dec f='linux/include/linux/mm.h' l='688' type='int alloc_set_pte(struct vm_fault * vmf, struct mem_cgroup * memcg, struct page * page)'/>
<use f='linux/mm/filemap.c' l='2681' u='c' c='filemap_map_pages'/>
<def f='linux/mm/memory.c' l='3387' ll='3435' type='int alloc_set_pte(struct vm_fault * vmf, struct mem_cgroup * memcg, struct page * page)'/>
<use f='linux/mm/memory.c' l='3471' u='c' c='finish_fault'/>
<doc f='linux/mm/memory.c' l='3373'>/**
 * alloc_set_pte - setup new PTE entry for given page and add reverse page
 * mapping. If needed, the fucntion allocates page table or use pre-allocated.
 *
 * @vmf: fault environment
 * @memcg: memcg to charge page (only for private mappings)
 * @page: page to map
 *
 * Caller must take care of unlocking vmf-&gt;ptl, if vmf-&gt;pte is non-NULL on
 * return.
 *
 * Target users are page handler itself and implementations of
 * vm_ops-&gt;map_pages.
 */</doc>
