<def f='linux/include/linux/jump_label.h' l='191' ll='194' type='int static_key_count(struct static_key * key)'/>
<use f='linux/include/linux/jump_label.h' l='203' u='c' c='static_key_false'/>
<use f='linux/include/linux/jump_label.h' l='210' u='c' c='static_key_true'/>
<use f='linux/arch/x86/include/asm/string_64.h' l='140' macro='1' u='c' c='memcpy_mcsafe'/>
<use f='linux/kernel/cgroup/cgroup.c' l='232' macro='1' u='c' c='cgroup_ssid_enabled'/>
<use f='linux/kernel/cgroup/cpuset.c' l='594' u='c' c='nr_cpusets'/>
<def f='linux/kernel/jump_label.c' l='70' ll='79' type='int static_key_count(struct static_key * key)'/>
<dec f='linux/kernel/jump_label.c' l='80' type='int static_key_count(struct static_key * )'/>
<use f='linux/kernel/jump_label.c' l='80' c='static_key_count'/>
<use f='linux/kernel/jump_label.c' l='80' u='a'/>
<use f='linux/kernel/jump_label.c' l='80' u='a'/>
<use f='linux/kernel/jump_label.c' l='356' macro='1' u='c' c='jump_label_type'/>
<doc f='linux/kernel/jump_label.c' l='61'>/*
 * There are similar definitions for the !HAVE_JUMP_LABEL case in jump_label.h.
 * The use of &apos;atomic_read()&apos; requires atomic.h and its problematic for some
 * kernel headers such as kernel.h and others. Since static_key_count() is not
 * used in the branch statements as it is for the !HAVE_JUMP_LABEL case its ok
 * to have it be a function here. Similarly, for &apos;static_key_enable()&apos; and
 * &apos;static_key_disable()&apos;, which require bug.h. This should allow jump_label.h
 * to be included from most/all places for HAVE_JUMP_LABEL.
 */</doc>
<use f='linux/kernel/tracepoint.c' l='200' macro='1' u='c' c='tracepoint_add_func'/>
<use f='linux/kernel/tracepoint.c' l='222' macro='1' u='c' c='tracepoint_add_func'/>
<use f='linux/kernel/tracepoint.c' l='249' macro='1' u='c' c='tracepoint_remove_func'/>
<use f='linux/kernel/tracepoint.c' l='252' macro='1' u='c' c='tracepoint_remove_func'/>
<use f='linux/lib/once.c' l='17' macro='1' u='c' c='once_deferred'/>
