<dec f='linux/include/linux/jiffies.h' l='437' type='unsigned long timeval_to_jiffies(const struct timeval * value)'/>
<def f='linux/kernel/time/time.c' l='668' ll='673' type='unsigned long timeval_to_jiffies(const struct timeval * value)'/>
<dec f='linux/kernel/time/time.c' l='674' type='unsigned long timeval_to_jiffies(const struct timeval * )'/>
<use f='linux/kernel/time/time.c' l='674' c='timeval_to_jiffies'/>
<use f='linux/kernel/time/time.c' l='674' u='a'/>
<use f='linux/kernel/time/time.c' l='674' u='a'/>
<doc f='linux/kernel/time/time.c' l='652'>/*
 * We could use a similar algorithm to timespec_to_jiffies (with a
 * different multiplier for usec instead of nsec). But this has a
 * problem with rounding: we can&apos;t exactly add TICK_NSEC - 1 to the
 * usec value, since it&apos;s not necessarily integral.
 *
 * We could instead round in the intermediate scaled representation
 * (i.e. in units of 1/2^(large scale) jiffies) but that&apos;s also
 * perilous: the scaling introduces a small positive error, which
 * combined with a division-rounding-upward (i.e. adding 2^(scale) - 1
 * units to the intermediate before shifting) leads to accidental
 * overflow and overestimates.
 *
 * At the cost of one additional multiplication by a constant, just
 * use the timespec implementation.
 */</doc>
