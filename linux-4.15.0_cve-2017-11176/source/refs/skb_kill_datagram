<dec f='linux/include/linux/skbuff.h' l='3265' type='int skb_kill_datagram(struct sock * sk, struct sk_buff * skb, unsigned int flags)'/>
<def f='linux/net/core/datagram.c' l='402' ll='410' type='int skb_kill_datagram(struct sock * sk, struct sk_buff * skb, unsigned int flags)'/>
<dec f='linux/net/core/datagram.c' l='411' type='int skb_kill_datagram(struct sock * , struct sk_buff * , unsigned int )'/>
<use f='linux/net/core/datagram.c' l='411' c='skb_kill_datagram'/>
<use f='linux/net/core/datagram.c' l='411' u='a'/>
<use f='linux/net/core/datagram.c' l='411' u='a'/>
<doc f='linux/net/core/datagram.c' l='381'>/**
 *	skb_kill_datagram - Free a datagram skbuff forcibly
 *	@sk: socket
 *	@skb: datagram skbuff
 *	@flags: MSG\_ flags
 *
 *	This function frees a datagram skbuff that was received by
 *	skb_recv_datagram.  The flags argument must match the one
 *	used for skb_recv_datagram.
 *
 *	If the MSG_PEEK flag is set, and the packet is still on the
 *	receive queue of the socket, it will be taken off the queue
 *	before it is freed.
 *
 *	This function currently only disables BH when acquiring the
 *	sk_receive_queue lock.  Therefore it must not be used in a
 *	context where that lock is acquired in an IRQ context.
 *
 *	It returns 0 if the packet was removed by us.
 */</doc>
<use f='linux/net/ipv6/raw.c' l='533' u='c' c='rawv6_recvmsg'/>
