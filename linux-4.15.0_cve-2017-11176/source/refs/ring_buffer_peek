<dec f='linux/include/linux/ring_buffer.h' l='119' type='struct ring_buffer_event * ring_buffer_peek(struct ring_buffer * buffer, int cpu, u64 * ts, unsigned long * lost_events)'/>
<dec f='linux/kernel/trace/ring_buffer.c' l='3750' type='struct ring_buffer_event * ring_buffer_peek(struct ring_buffer * , int , u64 * , unsigned long * )'/>
<use f='linux/kernel/trace/ring_buffer.c' l='3750' c='ring_buffer_peek'/>
<use f='linux/kernel/trace/ring_buffer.c' l='3750' u='a'/>
<use f='linux/kernel/trace/ring_buffer.c' l='3750' u='a'/>
<def f='linux/kernel/trace/ring_buffer.c' l='3874' ll='3899' type='struct ring_buffer_event * ring_buffer_peek(struct ring_buffer * buffer, int cpu, u64 * ts, unsigned long * lost_events)'/>
<doc f='linux/kernel/trace/ring_buffer.c' l='3864'>/**
 * ring_buffer_peek - peek at the next event to be read
 * @buffer: The ring buffer to read
 * @cpu: The cpu to peak at
 * @ts: The timestamp counter of this event.
 * @lost_events: a variable to store if events were lost (may be NULL)
 *
 * This will return the event that will be read next, but does
 * not consume the data.
 */</doc>
<use f='linux/kernel/trace/trace.c' l='3076' u='c' c='peek_next_entry'/>
