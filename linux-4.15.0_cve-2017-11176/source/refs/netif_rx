<dec f='linux/include/linux/netdevice.h' l='3281' type='int netif_rx(struct sk_buff * skb)'/>
<use f='linux/drivers/net/loopback.c' l='91' u='c' c='loopback_xmit'/>
<def f='linux/net/core/dev.c' l='4109' ll='4114' type='int netif_rx(struct sk_buff * skb)'/>
<dec f='linux/net/core/dev.c' l='4115' type='int netif_rx(struct sk_buff * )'/>
<use f='linux/net/core/dev.c' l='4115' c='netif_rx'/>
<use f='linux/net/core/dev.c' l='4115' u='a'/>
<use f='linux/net/core/dev.c' l='4115' u='a'/>
<doc f='linux/net/core/dev.c' l='4094'>/**
 *	netif_rx	-	post buffer to the network code
 *	@skb: buffer to post
 *
 *	This function receives a packet from a device driver and queues it for
 *	the upper (protocol) levels to process.  It always succeeds. The buffer
 *	may be dropped during processing for congestion control or by the
 *	protocol layers.
 *
 *	return values:
 *	NET_RX_SUCCESS	(no congestion)
 *	NET_RX_DROP     (packet was dropped)
 *
 */</doc>
<use f='linux/net/core/filter.c' l='1690' u='c' c='__bpf_rx_skb_no_mac'/>
<use f='linux/net/core/gro_cells.c' l='18' u='c' c='gro_cells_receive'/>
<use f='linux/net/ipv4/ipmr.c' l='611' u='c' c='__pim_rcv'/>
<use f='linux/net/ipv6/exthdrs.c' l='406' u='c' c='ipv6_srh_rcv'/>
<use f='linux/net/ipv6/sit.c' l='687' u='c' c='ipip6_rcv'/>
<use f='linux/net/mac80211/status.c' l='677' u='c' c='ieee80211_tx_monitor'/>
<use f='linux/net/mac80211/status.c' l='686' u='c' c='ieee80211_tx_monitor'/>
