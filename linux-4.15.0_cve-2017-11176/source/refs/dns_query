<dec f='linux/include/linux/dns_resolver.h' l='29' type='int dns_query(const char * type, const char * name, size_t namelen, const char * options, char ** _result, time64_t * _expiry)'/>
<use f='linux/fs/nfs/dns_resolve.c' l='25' u='c' c='nfs_dns_resolve_name'/>
<def f='linux/net/dns_resolver/dns_query.c' l='71' ll='167' type='int dns_query(const char * type, const char * name, size_t namelen, const char * options, char ** _result, time64_t * _expiry)'/>
<dec f='linux/net/dns_resolver/dns_query.c' l='168' type='int dns_query(const char * , const char * , size_t , const char * , char ** , time64_t * )'/>
<use f='linux/net/dns_resolver/dns_query.c' l='168' c='dns_query'/>
<use f='linux/net/dns_resolver/dns_query.c' l='168' u='a'/>
<use f='linux/net/dns_resolver/dns_query.c' l='168' u='a'/>
<doc f='linux/net/dns_resolver/dns_query.c' l='49'>/**
 * dns_query - Query the DNS
 * @type: Query type (or NULL for straight host-&gt;IP lookup)
 * @name: Name to look up
 * @namelen: Length of name
 * @options: Request options (or NULL if no options)
 * @_result: Where to place the returned data.
 * @_expiry: Where to store the result expiry time (or NULL)
 *
 * The data will be returned in the pointer at *result, and the caller is
 * responsible for freeing it.
 *
 * The description should be of the form &quot;[&lt;query_type&gt;:]&lt;domain_name&gt;&quot;, and
 * the options need to be appropriate for the query type requested.  If no
 * query_type is given, then the query is a straight hostname to IP address
 * lookup.
 *
 * The DNS resolution lookup is performed by upcalling to userspace by way of
 * requesting a key of type dns_resolver.
 *
 * Returns the size of the result on success, -ve error code otherwise.
 */</doc>
