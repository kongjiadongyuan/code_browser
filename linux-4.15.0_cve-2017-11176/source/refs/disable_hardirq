<dec f='linux/include/linux/interrupt.h' l='214' type='bool disable_hardirq(unsigned int irq)'/>
<use f='linux/drivers/net/ethernet/intel/e1000/e1000_main.c' l='5261' u='c' c='e1000_netpoll'/>
<use f='linux/drivers/net/ethernet/intel/e1000e/netdev.c' l='6769' u='c' c='e1000_intr_msix'/>
<use f='linux/drivers/net/ethernet/intel/e1000e/netdev.c' l='6775' u='c' c='e1000_intr_msix'/>
<use f='linux/drivers/net/ethernet/intel/e1000e/netdev.c' l='6781' u='c' c='e1000_intr_msix'/>
<use f='linux/drivers/net/ethernet/intel/e1000e/netdev.c' l='6806' u='c' c='e1000_netpoll'/>
<use f='linux/drivers/net/ethernet/intel/e1000e/netdev.c' l='6811' u='c' c='e1000_netpoll'/>
<def f='linux/kernel/irq/manage.c' l='511' ll='517' type='bool disable_hardirq(unsigned int irq)'/>
<dec f='linux/kernel/irq/manage.c' l='518' type='bool disable_hardirq(unsigned int )'/>
<use f='linux/kernel/irq/manage.c' l='518' c='disable_hardirq'/>
<use f='linux/kernel/irq/manage.c' l='518' u='a'/>
<use f='linux/kernel/irq/manage.c' l='518' u='a'/>
<doc f='linux/kernel/irq/manage.c' l='494'>/**
 *	disable_hardirq - disables an irq and waits for hardirq completion
 *	@irq: Interrupt to disable
 *
 *	Disable the selected interrupt line.  Enables and Disables are
 *	nested.
 *	This function waits for any pending hard IRQ handlers for this
 *	interrupt to complete before returning. If you use this function while
 *	holding a resource the hard IRQ handler may need you will deadlock.
 *
 *	When used to optimistically disable an interrupt from atomic context
 *	the return value must be checked.
 *
 *	Returns: false if a threaded handler is active.
 *
 *	This function may be called - with care - from IRQ context.
 */</doc>
