<dec f='linux/include/linux/sunrpc/addr.h' l='20' type='size_t rpc_uaddr2sockaddr(struct net * , const char * , const size_t , struct sockaddr * , const size_t )'/>
<def f='linux/net/sunrpc/addr.c' l='313' ll='356' type='size_t rpc_uaddr2sockaddr(struct net * net, const char * uaddr, const size_t uaddr_len, struct sockaddr * sap, const size_t salen)'/>
<dec f='linux/net/sunrpc/addr.c' l='357' type='size_t rpc_uaddr2sockaddr(struct net * , const char * , const size_t , struct sockaddr * , const size_t )'/>
<use f='linux/net/sunrpc/addr.c' l='357' c='rpc_uaddr2sockaddr'/>
<use f='linux/net/sunrpc/addr.c' l='357' u='a'/>
<use f='linux/net/sunrpc/addr.c' l='357' u='a'/>
<doc f='linux/net/sunrpc/addr.c' l='299'>/**
 * rpc_uaddr2sockaddr - convert a universal address to a socket address.
 * @net: applicable network namespace
 * @uaddr: C string containing universal address to convert
 * @uaddr_len: length of universal address string
 * @sap: buffer into which to plant socket address
 * @salen: size of buffer
 *
 * @uaddr does not have to be &apos;\0&apos;-terminated, but kstrtou8() and
 * rpc_pton() require proper string termination to be successful.
 *
 * Returns the size of the socket address if successful; otherwise
 * zero is returned.
 */</doc>
<use f='linux/net/sunrpc/rpcb_clnt.c' l='979' u='c' c='rpcb_dec_getaddr'/>
