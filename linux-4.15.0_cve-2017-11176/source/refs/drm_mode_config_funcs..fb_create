<dec f='linux/include/drm/drm_mode_config.h' l='70' type='struct drm_framebuffer *(*)(struct drm_device *, struct drm_file *, const struct drm_mode_fb_cmd2 *)'/>
<offset>0</offset>
<doc f='linux/include/drm/drm_mode_config.h' l='47'>/**
	 * @fb_create:
	 *
	 * Create a new framebuffer object. The core does basic checks on the
	 * requested metadata, but most of that is left to the driver. See
	 * &amp;struct drm_mode_fb_cmd2 for details.
	 *
	 * If the parameters are deemed valid and the backing storage objects in
	 * the underlying memory manager all exist, then the driver allocates
	 * a new &amp;drm_framebuffer structure, subclassed to contain
	 * driver-specific information (like the internal native buffer object
	 * references). It also needs to fill out all relevant metadata, which
	 * should be done by calling drm_helper_mode_fill_fb_struct().
	 *
	 * The initialization is finalized by calling drm_framebuffer_init(),
	 * which registers the framebuffer and makes it accessible to other
	 * threads.
	 *
	 * RETURNS:
	 *
	 * A new framebuffer with an initial reference count of 1 or a negative
	 * error code encoded with ERR_PTR().
	 */</doc>
<use f='linux/drivers/gpu/drm/drm_framebuffer.c' l='298' u='r' c='drm_internal_framebuffer_create'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='14111' u='w'/>
