<def f='linux/include/keys/user-type.h' l='31' ll='35'/>
<use f='linux/include/keys/user-type.h' l='51' c='user_key_payload_rcu'/>
<use f='linux/include/keys/user-type.h' l='53' c='user_key_payload_rcu'/>
<use f='linux/include/keys/user-type.h' l='56' c='user_key_payload_locked'/>
<use f='linux/include/keys/user-type.h' l='58' c='user_key_payload_locked'/>
<use f='linux/fs/nfs/nfs4idmap.c' l='300' c='nfs_idmap_get_key'/>
<size>24</size>
<doc f='linux/include/keys/user-type.h' l='21'>/*
 * the payload for a key of type &quot;user&quot; or &quot;logon&quot;
 * - once filled in and attached to a key:
 *   - the payload struct is invariant may not be changed, only replaced
 *   - the payload must be read with RCU procedures or with the key semaphore
 *     held
 *   - the payload may only be replaced with the key semaphore write-locked
 * - the key&apos;s data length is the size of the actual data, not including the
 *   payload wrapper
 */</doc>
<mbr r='user_key_payload::rcu' o='0' t='struct callback_head'/>
<mbr r='user_key_payload::datalen' o='128' t='unsigned short'/>
<mbr r='user_key_payload::data' o='144' t='char [0]'/>
<use f='linux/net/dns_resolver/dns_key.c' l='63' c='dns_resolver_preparse'/>
<size>24</size>
<use f='linux/net/dns_resolver/dns_query.c' l='75' c='dns_query'/>
<size>24</size>
<use f='linux/security/keys/user_defined.c' l='65' c='user_preparse'/>
<use f='linux/security/keys/user_defined.c' l='95' c='user_free_payload_rcu'/>
<use f='linux/security/keys/user_defined.c' l='97' c='user_free_payload_rcu'/>
<use f='linux/security/keys/user_defined.c' l='97' c='user_free_payload_rcu'/>
<use f='linux/security/keys/user_defined.c' l='97' c='user_free_payload_rcu'/>
<use f='linux/security/keys/user_defined.c' l='107' c='user_update'/>
<use f='linux/security/keys/user_defined.c' l='134' c='user_revoke'/>
<use f='linux/security/keys/user_defined.c' l='152' c='user_destroy'/>
<use f='linux/security/keys/user_defined.c' l='177' c='user_read'/>
<size>24</size>
