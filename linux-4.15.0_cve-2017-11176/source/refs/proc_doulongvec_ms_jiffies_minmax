<dec f='linux/include/linux/sysctl.h' l='65' type='int proc_doulongvec_ms_jiffies_minmax(struct ctl_table * table, int , void * , size_t * , loff_t * )'/>
<use f='linux/fs/proc/proc_sysctl.c' l='1111' u='r' c='sysctl_check_table'/>
<def f='linux/kernel/sysctl.c' l='2830' ll='2836' type='int proc_doulongvec_ms_jiffies_minmax(struct ctl_table * table, int write, void * buffer, size_t * lenp, loff_t * ppos)'/>
<dec f='linux/kernel/sysctl.c' l='3224' type='int proc_doulongvec_ms_jiffies_minmax(struct ctl_table * , int , void * , size_t * , loff_t * )'/>
<use f='linux/kernel/sysctl.c' l='3224' c='proc_doulongvec_ms_jiffies_minmax'/>
<use f='linux/kernel/sysctl.c' l='3224' u='a'/>
<use f='linux/kernel/sysctl.c' l='3224' u='a'/>
<doc f='linux/kernel/sysctl.c' l='2813'>/**
 * proc_doulongvec_ms_jiffies_minmax - read a vector of millisecond values with min/max values
 * @table: the sysctl table
 * @write: %TRUE if this is a write to the sysctl file
 * @buffer: the user buffer
 * @lenp: the size of the user buffer
 * @ppos: file position
 *
 * Reads/writes up to table-&gt;maxlen/sizeof(unsigned long) unsigned long
 * values from/to the user buffer, treated as an ASCII string. The values
 * are treated as milliseconds, and converted to jiffies when they are stored.
 *
 * This routine will ensure the values are within the range specified by
 * table-&gt;extra1 (min) and table-&gt;extra2 (max).
 *
 * Returns 0 on success.
 */</doc>
