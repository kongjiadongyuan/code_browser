<dec f='linux/fs/nfs/internal.h' l='255' type='int nfs_generic_pgio(struct nfs_pageio_descriptor * , struct nfs_pgio_header * )'/>
<def f='linux/fs/nfs/pagelist.c' l='734' ll='795' type='int nfs_generic_pgio(struct nfs_pageio_descriptor * desc, struct nfs_pgio_header * hdr)'/>
<dec f='linux/fs/nfs/pagelist.c' l='796' type='int nfs_generic_pgio(struct nfs_pageio_descriptor * , struct nfs_pgio_header * )'/>
<use f='linux/fs/nfs/pagelist.c' l='796' c='nfs_generic_pgio'/>
<use f='linux/fs/nfs/pagelist.c' l='796' u='a'/>
<use f='linux/fs/nfs/pagelist.c' l='796' u='a'/>
<use f='linux/fs/nfs/pagelist.c' l='809' u='c' c='nfs_generic_pg_pgios'/>
<doc f='linux/fs/nfs/pagelist.c' l='726'>/*
 * Create an RPC task for the given read or write request and kick it.
 * The page must have been locked by the caller.
 *
 * It may happen that the page we&apos;re passed is not marked dirty.
 * This is the case if nfs_updatepage detects a conflicting request
 * that has been written but not committed.
 */</doc>
