<dec f='linux/include/linux/jbd2.h' l='1351' type='int jbd2_journal_start_reserved(handle_t * handle, unsigned int type, unsigned int line_no)'/>
<use f='linux/fs/ext4/ext4_jbd2.c' l='130' u='c' c='__ext4_journal_start_reserved'/>
<def f='linux/fs/jbd2/transaction.c' l='511' ll='544' type='int jbd2_journal_start_reserved(handle_t * handle, unsigned int type, unsigned int line_no)'/>
<dec f='linux/fs/jbd2/transaction.c' l='545' type='int jbd2_journal_start_reserved(handle_t * , unsigned int , unsigned int )'/>
<use f='linux/fs/jbd2/transaction.c' l='545' c='jbd2_journal_start_reserved'/>
<use f='linux/fs/jbd2/transaction.c' l='545' u='a'/>
<use f='linux/fs/jbd2/transaction.c' l='545' u='a'/>
<doc f='linux/fs/jbd2/transaction.c' l='497'>/**
 * int jbd2_journal_start_reserved() - start reserved handle
 * @handle: handle to start
 * @type: for handle statistics
 * @line_no: for handle statistics
 *
 * Start handle that has been previously reserved with jbd2_journal_reserve().
 * This attaches @handle to the running transaction (or creates one if there&apos;s
 * not transaction running). Unlike jbd2_journal_start() this function cannot
 * block on journal commit, checkpointing, or similar stuff. It can block on
 * memory allocation or frozen journal though.
 *
 * Return 0 on success, non-zero on error - handle is freed in that case.
 */</doc>
