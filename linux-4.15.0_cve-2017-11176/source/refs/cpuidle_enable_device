<dec f='linux/include/linux/cpuidle.h' l='153' type='int cpuidle_enable_device(struct cpuidle_device * dev)'/>
<use f='linux/drivers/acpi/processor_idle.c' l='1362' u='c' c='acpi_processor_hotplug'/>
<use f='linux/drivers/acpi/processor_idle.c' l='1415' u='c' c='acpi_processor_power_state_has_changed'/>
<def f='linux/drivers/cpuidle/cpuidle.c' l='380' ll='423' type='int cpuidle_enable_device(struct cpuidle_device * dev)'/>
<dec f='linux/drivers/cpuidle/cpuidle.c' l='425' type='int cpuidle_enable_device(struct cpuidle_device * )'/>
<use f='linux/drivers/cpuidle/cpuidle.c' l='425' c='cpuidle_enable_device'/>
<use f='linux/drivers/cpuidle/cpuidle.c' l='425' u='a'/>
<use f='linux/drivers/cpuidle/cpuidle.c' l='425' u='a'/>
<use f='linux/drivers/cpuidle/cpuidle.c' l='525' u='c' c='cpuidle_register_device'/>
<doc f='linux/drivers/cpuidle/cpuidle.c' l='373'>/**
 * cpuidle_enable_device - enables idle PM for a CPU
 * @dev: the CPU
 *
 * This function must be called between cpuidle_pause_and_lock and
 * cpuidle_resume_and_unlock when used externally.
 */</doc>
<use f='linux/drivers/cpuidle/governor.c' l='61' u='c' c='cpuidle_switch_governor'/>
