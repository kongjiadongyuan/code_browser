<dec f='linux/include/net/cfg80211.h' l='517' type='int cfg80211_chandef_dfs_required(struct wiphy * wiphy, const struct cfg80211_chan_def * chandef, enum nl80211_iftype iftype)'/>
<doc f='linux/include/net/cfg80211.h' l='509'>/**
 * cfg80211_chandef_dfs_required - checks if radar detection is required
 * @wiphy: the wiphy to validate against
 * @chandef: the channel definition to check
 * @iftype: the interface type as specified in &amp;enum nl80211_iftype
 * Returns:
 *	1 if radar detection is required, 0 if it is not, &lt; 0 on error
 */</doc>
<use f='linux/net/mac80211/chan.c' l='1569' u='c' c='ieee80211_vif_use_channel'/>
<use f='linux/net/mac80211/ibss.c' l='290' u='c' c='__ieee80211_sta_join_ibss'/>
<use f='linux/net/mac80211/ibss.c' l='774' u='c' c='ieee80211_ibss_csa_mark_radar'/>
<use f='linux/net/mac80211/ibss.c' l='873' u='c' c='ieee80211_ibss_process_chanswitch'/>
<use f='linux/net/mac80211/ibss.c' l='1761' u='c' c='ieee80211_ibss_join'/>
<def f='linux/net/wireless/chan.c' l='330' ll='384' type='int cfg80211_chandef_dfs_required(struct wiphy * wiphy, const struct cfg80211_chan_def * chandef, enum nl80211_iftype iftype)'/>
<dec f='linux/net/wireless/chan.c' l='385' type='int cfg80211_chandef_dfs_required(struct wiphy * , const struct cfg80211_chan_def * , enum nl80211_iftype )'/>
<use f='linux/net/wireless/chan.c' l='385' c='cfg80211_chandef_dfs_required'/>
<use f='linux/net/wireless/chan.c' l='385' u='a'/>
<use f='linux/net/wireless/chan.c' l='385' u='a'/>
<use f='linux/net/wireless/chan.c' l='932' u='c' c='_cfg80211_reg_can_beacon'/>
<use f='linux/net/wireless/chan.c' l='1034' u='c' c='cfg80211_get_chan_state'/>
<use f='linux/net/wireless/chan.c' l='1047' u='c' c='cfg80211_get_chan_state'/>
<use f='linux/net/wireless/mesh.c' l='178' u='c' c='__cfg80211_join_mesh'/>
<use f='linux/net/wireless/nl80211.c' l='7539' u='c' c='nl80211_start_radar_detection'/>
<use f='linux/net/wireless/nl80211.c' l='7713' u='c' c='nl80211_channel_switch'/>
<use f='linux/net/wireless/nl80211.c' l='12288' u='c' c='nl80211_tdls_channel_switch'/>
