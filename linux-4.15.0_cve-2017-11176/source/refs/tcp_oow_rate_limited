<dec f='linux/include/net/tcp.h' l='1392' type='bool tcp_oow_rate_limited(struct net * net, const struct sk_buff * skb, int mib_idx, u32 * last_oow_ack_time)'/>
<def f='linux/net/ipv4/tcp_input.c' l='3364' ll='3373' type='bool tcp_oow_rate_limited(struct net * net, const struct sk_buff * skb, int mib_idx, u32 * last_oow_ack_time)'/>
<use f='linux/net/ipv4/tcp_input.c' l='5176' u='c' c='tcp_validate_incoming'/>
<use f='linux/net/ipv4/tcp_input.c' l='5196' u='c' c='tcp_validate_incoming'/>
<doc f='linux/net/ipv4/tcp_input.c' l='3357'>/* Return true if we&apos;re currently rate-limiting out-of-window ACKs and
 * thus shouldn&apos;t send a dupack right now. We rate-limit dupacks in
 * response to out-of-window SYNs or ACKs to mitigate ACK loops or DoS
 * attacks that send repeated SYNs or ACKs for the same connection. To
 * do this, we do not send a duplicate SYNACK or ACK if the remote
 * endpoint is sending out-of-window SYNs or pure ACKs at a high rate.
 */</doc>
<use f='linux/net/ipv4/tcp_minisocks.c' l='47' u='c' c='tcp_timewait_check_oow_rate_limit'/>
<use f='linux/net/ipv4/tcp_minisocks.c' l='633' u='c' c='tcp_check_req'/>
<use f='linux/net/ipv4/tcp_minisocks.c' l='723' u='c' c='tcp_check_req'/>
