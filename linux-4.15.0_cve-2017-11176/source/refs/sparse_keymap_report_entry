<dec f='linux/include/linux/input/sparse-keymap.h' l='55' type='void sparse_keymap_report_entry(struct input_dev * dev, const struct key_entry * ke, unsigned int value, bool autorelease)'/>
<def f='linux/drivers/input/sparse-keymap.c' l='238' ll='261' type='void sparse_keymap_report_entry(struct input_dev * dev, const struct key_entry * ke, unsigned int value, bool autorelease)'/>
<dec f='linux/drivers/input/sparse-keymap.c' l='262' type='void sparse_keymap_report_entry(struct input_dev * , const struct key_entry * , unsigned int , bool )'/>
<use f='linux/drivers/input/sparse-keymap.c' l='262' c='sparse_keymap_report_entry'/>
<use f='linux/drivers/input/sparse-keymap.c' l='262' u='a'/>
<use f='linux/drivers/input/sparse-keymap.c' l='262' u='a'/>
<use f='linux/drivers/input/sparse-keymap.c' l='285' u='c' c='sparse_keymap_report_event'/>
<use f='linux/drivers/input/sparse-keymap.c' l='293' u='c' c='sparse_keymap_report_event'/>
<doc f='linux/drivers/input/sparse-keymap.c' l='226'>/**
 * sparse_keymap_report_entry - report event corresponding to given key entry
 * @dev: Input device for which event should be reported
 * @ke: key entry describing event
 * @value: Value that should be reported (ignored by %KE_SW entries)
 * @autorelease: Signals whether release event should be emitted for %KE_KEY
 *	entries right after reporting press event, ignored by all other
 *	entries
 *
 * This function is used to report input event described by given
 * &amp;struct key_entry.
 */</doc>
