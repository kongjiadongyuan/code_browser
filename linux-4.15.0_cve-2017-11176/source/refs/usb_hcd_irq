<dec f='linux/include/linux/usb/hcd.h' l='487' type='irqreturn_t usb_hcd_irq(int irq, void * __hcd)'/>
<doc f='linux/include/linux/usb/hcd.h' l='486'>/* generic bus glue, needed for host controllers that don&apos;t use PCI */</doc>
<use f='linux/drivers/usb/core/hcd-pci.c' l='332' u='c' c='usb_hcd_pci_remove'/>
<def f='linux/drivers/usb/core/hcd.c' l='2430' ll='2443' type='irqreturn_t usb_hcd_irq(int irq, void * __hcd)'/>
<dec f='linux/drivers/usb/core/hcd.c' l='2444' type='irqreturn_t usb_hcd_irq(int , void * )'/>
<use f='linux/drivers/usb/core/hcd.c' l='2444' c='usb_hcd_irq'/>
<use f='linux/drivers/usb/core/hcd.c' l='2444' u='a'/>
<use f='linux/drivers/usb/core/hcd.c' l='2444' u='a'/>
<use f='linux/drivers/usb/core/hcd.c' l='2675' u='a' c='usb_hcd_request_irqs'/>
<doc f='linux/drivers/usb/core/hcd.c' l='2420'>/**
 * usb_hcd_irq - hook IRQs to HCD framework (bus glue)
 * @irq: the IRQ being raised
 * @__hcd: pointer to the HCD whose IRQ is being signaled
 *
 * If the controller isn&apos;t HALTed, calls the driver&apos;s irq handler.
 * Checks whether the controller is now dead.
 *
 * Return: %IRQ_HANDLED if the IRQ was handled. %IRQ_NONE otherwise.
 */</doc>
