<dec f='linux/include/net/cfg80211.h' l='505' type='bool cfg80211_chandef_usable(struct wiphy * wiphy, const struct cfg80211_chan_def * chandef, u32 prohibited_flags)'/>
<doc f='linux/include/net/cfg80211.h' l='498'>/**
 * cfg80211_chandef_usable - check if secondary channels can be used
 * @wiphy: the wiphy to validate against
 * @chandef: the channel definition to check
 * @prohibited_flags: the regulatory channel flags that must not be set
 * Return: %true if secondary channels are usable. %false otherwise.
 */</doc>
<use f='linux/net/mac80211/chan.c' l='1688' u='c' c='ieee80211_vif_change_bandwidth'/>
<use f='linux/net/mac80211/mlme.c' l='276' u='c' c='ieee80211_determine_chantype'/>
<use f='linux/net/mac80211/mlme.c' l='1115' u='c' c='ieee80211_sta_process_chanswitch'/>
<def f='linux/net/wireless/chan.c' l='718' ll='815' type='bool cfg80211_chandef_usable(struct wiphy * wiphy, const struct cfg80211_chan_def * chandef, u32 prohibited_flags)'/>
<dec f='linux/net/wireless/chan.c' l='816' type='bool cfg80211_chandef_usable(struct wiphy * , const struct cfg80211_chan_def * , u32 )'/>
<use f='linux/net/wireless/chan.c' l='816' c='cfg80211_chandef_usable'/>
<use f='linux/net/wireless/chan.c' l='816' u='a'/>
<use f='linux/net/wireless/chan.c' l='816' u='a'/>
<use f='linux/net/wireless/chan.c' l='938' u='c' c='_cfg80211_reg_can_beacon'/>
<use f='linux/net/wireless/nl80211.c' l='2165' u='c' c='nl80211_parse_chandef'/>
<use f='linux/net/wireless/reg.c' l='1987' u='c' c='reg_wdev_chan_valid'/>
