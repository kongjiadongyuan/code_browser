<dec f='linux/include/linux/backlight.h' l='133' type='struct backlight_device * backlight_device_register(const char * name, struct device * dev, void * devdata, const struct backlight_ops * ops, const struct backlight_properties * props)'/>
<use f='linux/drivers/acpi/acpi_video.c' l='1749' u='c' c='acpi_video_dev_register_backlight'/>
<use f='linux/drivers/gpu/drm/i915/intel_panel.c' l='1277' u='c' c='intel_backlight_device_register'/>
<use f='linux/drivers/platform/x86/eeepc-laptop.c' l='1162' u='c' c='eeepc_backlight_init'/>
<def f='linux/drivers/video/backlight/backlight.c' l='331' ll='394' type='struct backlight_device * backlight_device_register(const char * name, struct device * parent, void * devdata, const struct backlight_ops * ops, const struct backlight_properties * props)'/>
<dec f='linux/drivers/video/backlight/backlight.c' l='395' type='struct backlight_device * backlight_device_register(const char * , struct device * , void * , const struct backlight_ops * , const struct backlight_properties * )'/>
<use f='linux/drivers/video/backlight/backlight.c' l='395' c='backlight_device_register'/>
<use f='linux/drivers/video/backlight/backlight.c' l='395' u='a'/>
<use f='linux/drivers/video/backlight/backlight.c' l='395' u='a'/>
<use f='linux/drivers/video/backlight/backlight.c' l='521' u='c' c='devm_backlight_device_register'/>
<doc f='linux/drivers/video/backlight/backlight.c' l='318'>/**
 * backlight_device_register - create and register a new object of
 *   backlight_device class.
 * @name: the name of the new object(must be the same as the name of the
 *   respective framebuffer device).
 * @parent: a pointer to the parent device
 * @devdata: an optional pointer to be stored for private driver use. The
 *   methods may retrieve it by using bl_get_data(bd).
 * @ops: the backlight operations structure.
 *
 * Creates and registers new backlight device. Returns either an
 * ERR_PTR() or a pointer to the newly allocated device.
 */</doc>
