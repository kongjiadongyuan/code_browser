<dec f='linux/include/linux/migrate.h' l='69' type='int migrate_pages(struct list_head * l, new_page_t * new, free_page_t * free, unsigned long private, enum migrate_mode mode, int reason)'/>
<use f='linux/mm/compaction.c' l='1613' u='c' c='compact_zone'/>
<use f='linux/mm/mempolicy.c' l='989' u='c' c='migrate_to_node'/>
<use f='linux/mm/mempolicy.c' l='1240' u='c' c='do_mbind'/>
<def f='linux/mm/migrate.c' l='1378' ll='1444' type='int migrate_pages(struct list_head * from, new_page_t * get_new_page, free_page_t * put_new_page, unsigned long private, enum migrate_mode mode, int reason)'/>
<use f='linux/mm/migrate.c' l='1576' u='c' c='do_move_page_to_node_array'/>
<doc f='linux/mm/migrate.c' l='1357'>/*
 * migrate_pages - migrate the pages specified in a list, to the free pages
 *		   supplied as the target for the page migration
 *
 * @from:		The list of pages to be migrated.
 * @get_new_page:	The function used to allocate free pages to be used
 *			as the target of the page migration.
 * @put_new_page:	The function used to free target pages if migration
 *			fails, or NULL if no special handling is necessary.
 * @private:		Private data to be passed on to get_new_page()
 * @mode:		The migration mode that specifies the constraints for
 *			page migration, if any.
 * @reason:		The reason for page migration.
 *
 * The function returns after 10 attempts or if no pages are movable any more
 * because the list has become empty or no retryable pages exist any more.
 * The caller should call putback_movable_pages() to return pages to the LRU
 * or free list only if ret != 0.
 *
 * Returns the number of pages that were not migrated, or an error code.
 */</doc>
