<def f='linux/include/linux/freezer.h' l='107' ll='110' type='void freezer_do_not_count()'/>
<use f='linux/include/linux/freezer.h' l='171' u='c' c='freezable_schedule'/>
<use f='linux/include/linux/freezer.h' l='179' u='c' c='freezable_schedule_unsafe'/>
<use f='linux/include/linux/freezer.h' l='191' u='c' c='freezable_schedule_timeout'/>
<use f='linux/include/linux/freezer.h' l='204' u='c' c='freezable_schedule_timeout_interruptible'/>
<use f='linux/include/linux/freezer.h' l='214' u='c' c='freezable_schedule_timeout_killable'/>
<use f='linux/include/linux/freezer.h' l='224' u='c' c='freezable_schedule_timeout_killable_unsafe'/>
<use f='linux/include/linux/freezer.h' l='238' u='c' c='freezable_schedule_hrtimeout_range'/>
<doc f='linux/include/linux/freezer.h' l='96'>/**
 * freezer_do_not_count - tell freezer to ignore %current
 *
 * Tell freezers to ignore the current task when determining whether the
 * target frozen state is reached.  IOW, the current task will be
 * considered frozen enough by freezers.
 *
 * The caller shouldn&apos;t do anything which isn&apos;t allowed for a frozen task
 * until freezer_cont() is called.  Usually, freezer[_do_not]_count() pair
 * wrap a scheduling operation and nothing much else.
 */</doc>
<use f='linux/fs/coredump.c' l='430' u='c' c='coredump_wait'/>
<use f='linux/kernel/fork.c' l='1101' u='c' c='wait_for_vfork_done'/>
