<dec f='linux/include/linux/bootmem.h' l='83' type='void * __alloc_bootmem(unsigned long size, unsigned long align, unsigned long goal)'/>
<use f='linux/arch/x86/kernel/acpi/boot.c' l='929' macro='1' u='c' c='acpi_parse_hpet'/>
<use f='linux/arch/x86/kernel/apic/io_apic.c' l='2588' macro='1' u='c' c='ioapic_setup_resources'/>
<use f='linux/arch/x86/kernel/apic/io_apic.c' l='2631' macro='1' u='c' c='io_apic_init_mappings'/>
<use f='linux/arch/x86/kernel/e820.c' l='1077' macro='1' u='c' c='e820__reserve_resources'/>
<use f='linux/arch/x86/mm/init_64.c' l='189' macro='1' u='c' c='spp_getpage'/>
<use f='linux/init/main.c' l='751' macro='1' u='c' c='initcall_blacklist'/>
<use f='linux/init/main.c' l='752' macro='1' u='c' c='initcall_blacklist'/>
<def f='linux/mm/nobootmem.c' l='297' ll='303' type='void * __alloc_bootmem(unsigned long size, unsigned long align, unsigned long goal)'/>
<doc f='linux/mm/nobootmem.c' l='284'>/**
 * __alloc_bootmem - allocate boot memory
 * @size: size of the request in bytes
 * @align: alignment of the region
 * @goal: preferred starting address of the region
 *
 * The goal is dropped if it can not be satisfied and the allocation will
 * fall back to memory below @goal.
 *
 * Allocation may happen on any node in the system.
 *
 * The function panics if the request can not be satisfied.
 */</doc>
