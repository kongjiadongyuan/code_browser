<use f='linux/include/linux/seccomp.h' l='29'/>
<def f='linux/kernel/seccomp.c' l='62' ll='67'/>
<use f='linux/kernel/seccomp.c' l='65'/>
<use f='linux/kernel/seccomp.c' l='187' c='seccomp_run_filters'/>
<use f='linux/kernel/seccomp.c' l='192' c='seccomp_run_filters'/>
<use f='linux/kernel/seccomp.c' l='246' c='is_ancestor'/>
<use f='linux/kernel/seccomp.c' l='247' c='is_ancestor'/>
<use f='linux/kernel/seccomp.c' l='359' c='seccomp_prepare_filter'/>
<use f='linux/kernel/seccomp.c' l='361' c='seccomp_prepare_filter'/>
<use f='linux/kernel/seccomp.c' l='404' c='seccomp_prepare_user_filter'/>
<use f='linux/kernel/seccomp.c' l='408' c='seccomp_prepare_user_filter'/>
<use f='linux/kernel/seccomp.c' l='436' c='seccomp_attach_filter'/>
<use f='linux/kernel/seccomp.c' l='439' c='seccomp_attach_filter'/>
<use f='linux/kernel/seccomp.c' l='477' c='__get_seccomp_filter'/>
<use f='linux/kernel/seccomp.c' l='486' c='get_seccomp_filter'/>
<use f='linux/kernel/seccomp.c' l='492' c='seccomp_filter_free'/>
<use f='linux/kernel/seccomp.c' l='500' c='__put_seccomp_filter'/>
<use f='linux/kernel/seccomp.c' l='504' c='__put_seccomp_filter'/>
<use f='linux/kernel/seccomp.c' l='653' c='__seccomp_filter'/>
<use f='linux/kernel/seccomp.c' l='848' c='seccomp_set_mode_filter'/>
<size>24</size>
<doc f='linux/kernel/seccomp.c' l='41'>/**
 * struct seccomp_filter - container for seccomp BPF programs
 *
 * @usage: reference count to manage the object lifetime.
 *         get/put helpers should be used when accessing an instance
 *         outside of a lifetime-guarded section.  In general, this
 *         is only needed for handling filters shared across tasks.
 * @log: true if all actions except for SECCOMP_RET_ALLOW should be logged
 * @prev: points to a previously installed, or inherited, filter
 * @prog: the BPF program to evaluate
 *
 * seccomp_filter objects are organized in a tree linked via the @prev
 * pointer.  For any task, it appears to be a singly-linked list starting
 * with current-&gt;seccomp.filter, the most recently attached or inherited filter.
 * However, multiple filters may share a @prev node, by way of fork(), which
 * results in a unidirectional tree existing in memory.  This is similar to
 * how namespaces work.
 *
 * seccomp_filter objects should never be modified after being attached
 * to a task_struct (other than @usage).
 */</doc>
<mbr r='seccomp_filter::usage' o='0' t='refcount_t'/>
<mbr r='seccomp_filter::log' o='32' t='bool'/>
<mbr r='seccomp_filter::prev' o='64' t='struct seccomp_filter *'/>
<mbr r='seccomp_filter::prog' o='128' t='struct bpf_prog *'/>
