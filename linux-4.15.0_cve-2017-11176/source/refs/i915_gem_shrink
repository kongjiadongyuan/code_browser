<dec f='linux/drivers/gpu/drm/i915/i915_drv.h' l='3892' type='unsigned long i915_gem_shrink(struct drm_i915_private * dev_priv, unsigned long target, unsigned long * nr_scanned, unsigned int flags)'/>
<doc f='linux/drivers/gpu/drm/i915/i915_drv.h' l='3891'>/* i915_gem_shrinker.c */</doc>
<use f='linux/drivers/gpu/drm/i915/i915_debugfs.c' l='4234' u='c' c='i915_drop_caches_set'/>
<use f='linux/drivers/gpu/drm/i915/i915_debugfs.c' l='4237' u='c' c='i915_drop_caches_set'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='2408' u='c' c='i915_gem_object_get_pages_gtt'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='5196' u='c' c='i915_gem_freeze_late'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_gtt.c' l='2315' u='c' c='i915_gem_gtt_prepare_pages'/>
<def f='linux/drivers/gpu/drm/i915/i915_gem_shrinker.c' l='144' ll='277' type='unsigned long i915_gem_shrink(struct drm_i915_private * dev_priv, unsigned long target, unsigned long * nr_scanned, unsigned int flags)'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_shrinker.c' l='298' u='c' c='i915_gem_shrink_all'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_shrinker.c' l='360' u='c' c='i915_gem_shrinker_scan'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_shrinker.c' l='367' u='c' c='i915_gem_shrinker_scan'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_shrinker.c' l='374' u='c' c='i915_gem_shrinker_scan'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_shrinker.c' l='474' u='c' c='i915_gem_shrinker_vmap'/>
<doc f='linux/drivers/gpu/drm/i915/i915_gem_shrinker.c' l='119'>/**
 * i915_gem_shrink - Shrink buffer object caches
 * @dev_priv: i915 device
 * @target: amount of memory to make available, in pages
 * @nr_scanned: optional output for number of pages scanned (incremental)
 * @flags: control flags for selecting cache types
 *
 * This function is the main interface to the shrinker. It will try to release
 * up to @target pages of main memory backing storage from buffer objects.
 * Selection of the specific caches can be done with @flags. This is e.g. useful
 * when purgeable objects should be removed from caches preferentially.
 *
 * Note that it&apos;s not guaranteed that released amount is actually available as
 * free system memory - the pages might still be in-used to due to other reasons
 * (like cpu mmaps) or the mm core has reused them before we could grab them.
 * Therefore code that needs to explicitly shrink buffer objects caches (e.g. to
 * avoid deadlocks in memory reclaim) must fall back to i915_gem_shrink_all().
 *
 * Also note that any kind of pinning (both per-vma address space pins and
 * backing storage pins at the buffer object level) result in the shrinker code
 * having to skip the object.
 *
 * Returns:
 * The number of pages of backing storage actually released.
 */</doc>
