<def f='linux/kernel/futex.c' l='239' ll='249'/>
<use f='linux/kernel/futex.c' l='251'/>
<use f='linux/kernel/futex.c' l='744' c='futex_top_waiter'/>
<use f='linux/kernel/futex.c' l='747' c='futex_top_waiter'/>
<use f='linux/kernel/futex.c' l='1252' c='lookup_pi_state'/>
<use f='linux/kernel/futex.c' l='1306' c='futex_lock_pi_atomic'/>
<use f='linux/kernel/futex.c' l='1382' c='__unqueue_futex'/>
<use f='linux/kernel/futex.c' l='1401' c='mark_wake_futex'/>
<use f='linux/kernel/futex.c' l='1536' c='futex_wake'/>
<use f='linux/kernel/futex.c' l='1536' c='futex_wake'/>
<use f='linux/kernel/futex.c' l='1638' c='futex_wake_op'/>
<use f='linux/kernel/futex.c' l='1638' c='futex_wake_op'/>
<use f='linux/kernel/futex.c' l='1733' c='requeue_futex'/>
<use f='linux/kernel/futex.c' l='1767' c='requeue_pi_wake_futex'/>
<use f='linux/kernel/futex.c' l='1809' c='futex_proxy_trylock_atomic'/>
<use f='linux/kernel/futex.c' l='1878' c='futex_requeue'/>
<use f='linux/kernel/futex.c' l='1878' c='futex_requeue'/>
<use f='linux/kernel/futex.c' l='2159' c='queue_lock'/>
<use f='linux/kernel/futex.c' l='2190' c='__queue_me'/>
<use f='linux/kernel/futex.c' l='2221' c='queue_me'/>
<use f='linux/kernel/futex.c' l='2239' c='unqueue_me'/>
<use f='linux/kernel/futex.c' l='2288' c='unqueue_me_pi'/>
<use f='linux/kernel/futex.c' l='2300' c='fixup_pi_state_owner'/>
<use f='linux/kernel/futex.c' l='2469' c='fixup_owner'/>
<use f='linux/kernel/futex.c' l='2521' c='futex_wait_queue_me'/>
<use f='linux/kernel/futex.c' l='2571' c='futex_wait_setup'/>
<use f='linux/kernel/futex.c' l='2635' c='futex_wait'/>
<use f='linux/kernel/futex.c' l='2736' c='futex_lock_pi'/>
<use f='linux/kernel/futex.c' l='2918' c='futex_unlock_pi'/>
<use f='linux/kernel/futex.c' l='3052' c='handle_early_requeue_pi_wakeup'/>
<use f='linux/kernel/futex.c' l='3132' c='futex_wait_requeue_pi'/>
<size>112</size>
<doc f='linux/kernel/futex.c' l='217'>/**
 * struct futex_q - The hashed futex queue entry, one per waiting task
 * @list:		priority-sorted list of tasks waiting on this futex
 * @task:		the task waiting on the futex
 * @lock_ptr:		the hash bucket lock
 * @key:		the key the futex is hashed on
 * @pi_state:		optional priority inheritance state
 * @rt_waiter:		rt_waiter storage for use with requeue_pi
 * @requeue_pi_key:	the requeue_pi target futex key
 * @bitset:		bitset for the optional bitmasked wakeup
 *
 * We use this hashed waitqueue, instead of a normal wait_queue_entry_t, so
 * we can wake only the relevant ones (hashed queues may be shared).
 *
 * A futex_q has a woken state, just like tasks have TASK_RUNNING.
 * It is considered woken when plist_node_empty(&amp;q-&gt;list) || q-&gt;lock_ptr == 0.
 * The order of wakeup is always to make the first condition true, then
 * the second.
 *
 * PI futexes are typically woken before they are removed from the hash list via
 * the rt_mutex code. See unqueue_me_pi().
 */</doc>
