<def f='linux/include/net/mac80211.h' l='959' ll='963'/>
<dec f='linux/include/net/mac80211.h' l='4228' type='void ieee80211_tx_status(struct ieee80211_hw * hw, struct sk_buff * skb)'/>
<use f='linux/include/net/mac80211.h' l='4246' c='ieee80211_tx_status_ext'/>
<use f='linux/include/net/mac80211.h' l='4268' c='ieee80211_tx_status_noskb'/>
<use f='linux/include/net/mac80211.h' l='4292' u='c' c='ieee80211_tx_status_ni'/>
<use f='linux/include/net/mac80211.h' l='5569'/>
<size>24</size>
<doc f='linux/include/net/mac80211.h' l='952'>/**
 * struct ieee80211_tx_status - extended tx staus info for rate control
 *
 * @sta: Station that the packet was transmitted for
 * @info: Basic tx status information
 * @skb: Packet skb (can be NULL if not provided by the driver)
 */</doc>
<doc f='linux/include/net/mac80211.h' l='4212'>/**
 * ieee80211_tx_status - transmit status callback
 *
 * Call this function for all transmitted frames after they have been
 * transmitted. It is permissible to not call this function for
 * multicast frames but this can affect statistics.
 *
 * This function may not be called in IRQ context. Calls to this function
 * for a single hardware must be synchronized against each other. Calls
 * to this function, ieee80211_tx_status_ni() and ieee80211_tx_status_irqsafe()
 * may not be mixed for a single hardware. Must not run concurrently with
 * ieee80211_rx() or ieee80211_rx_ni().
 *
 * @hw: the hardware the frame was transmitted by
 * @skb: the frame that was transmitted, owned by mac80211 after this call
 */</doc>
<mbr r='ieee80211_tx_status::sta' o='0' t='struct ieee80211_sta *'/>
<mbr r='ieee80211_tx_status::info' o='64' t='struct ieee80211_tx_info *'/>
<mbr r='ieee80211_tx_status::skb' o='128' t='struct sk_buff *'/>
<use f='linux/net/mac80211/rate.h' l='33' c='rate_control_tx_status'/>
<size>24</size>
<use f='linux/net/mac80211/main.c' l='232' u='c' c='ieee80211_tasklet_handler'/>
<use f='linux/net/mac80211/rate.c' l='67' c='rate_control_tx_status'/>
<size>24</size>
<use f='linux/net/mac80211/rc80211_minstrel.c' l='267' c='minstrel_tx_status'/>
<size>24</size>
<use f='linux/net/mac80211/rc80211_minstrel_ht.c' l='681' c='minstrel_ht_tx_status'/>
<size>24</size>
<use f='linux/net/mac80211/status.c' l='694' c='__ieee80211_tx_status'/>
<def f='linux/net/mac80211/status.c' l='891' ll='915' type='void ieee80211_tx_status(struct ieee80211_hw * hw, struct sk_buff * skb)'/>
<use f='linux/net/mac80211/status.c' l='895' c='ieee80211_tx_status'/>
<dec f='linux/net/mac80211/status.c' l='916' type='void ieee80211_tx_status(struct ieee80211_hw * , struct sk_buff * )'/>
<use f='linux/net/mac80211/status.c' l='916' c='ieee80211_tx_status'/>
<use f='linux/net/mac80211/status.c' l='916' u='a'/>
<use f='linux/net/mac80211/status.c' l='916' u='a'/>
<use f='linux/net/mac80211/status.c' l='919' c='ieee80211_tx_status_ext'/>
<size>24</size>
