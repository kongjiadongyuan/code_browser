<def f='linux/include/linux/cred.h' l='242' ll='247' type='const struct cred * get_cred(const struct cred * cred)'/>
<doc f='linux/include/linux/cred.h' l='229'>/**
 * get_cred - Get a reference on a set of credentials
 * @cred: The credentials to reference
 *
 * Get a reference on the specified set of credentials.  The caller must
 * release the reference.
 *
 * This is used to deal with a committed set of credentials.  Although the
 * pointer is const, this will temporarily discard the const and increment the
 * usage count.  The purpose of this is to attempt to catch at compile time the
 * accidental alteration of a set of credentials that should be considered
 * immutable.
 */</doc>
<use f='linux/drivers/usb/core/devio.c' l='604' u='c' c='async_completed'/>
<use f='linux/drivers/usb/core/devio.c' l='1015' macro='1' u='c' c='usbdev_open'/>
<use f='linux/drivers/usb/core/devio.c' l='1731' macro='1' u='c' c='proc_do_submiturb'/>
<use f='linux/fs/file_table.c' l='128' u='c' c='get_empty_filp'/>
<use f='linux/kernel/cred.c' l='334' u='c' c='copy_creds'/>
<use f='linux/kernel/cred.c' l='335' u='c' c='copy_creds'/>
<use f='linux/kernel/cred.c' l='374' u='c' c='copy_creds'/>
<use f='linux/kernel/cred.c' l='440' u='c' c='commit_creds'/>
<use f='linux/kernel/cred.c' l='531' u='c' c='override_creds'/>
<use f='linux/kernel/cred.c' l='609' u='c' c='prepare_kernel_cred'/>
<use f='linux/kernel/ptrace.c' l='69' u='c' c='__ptrace_link'/>
<use f='linux/net/unix/af_unix.c' l='591' macro='1' u='c' c='init_peercred'/>
<use f='linux/net/unix/af_unix.c' l='600' u='c' c='copy_peercred'/>
<use f='linux/security/keys/process_keys.c' l='547' macro='1' u='c' c='lookup_user_key'/>
<use f='linux/security/keys/request_key.c' l='117' macro='1' u='c' c='call_sbin_request_key'/>
<use f='linux/security/keys/request_key_auth.c' l='187' u='c' c='request_key_auth_new'/>
<use f='linux/security/keys/request_key_auth.c' l='194' u='c' c='request_key_auth_new'/>
