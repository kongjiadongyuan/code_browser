<dec f='linux/include/drm/drm_rect.h' l='177' type='bool drm_rect_clip_scaled(struct drm_rect * src, struct drm_rect * dst, const struct drm_rect * clip, int hscale, int vscale)'/>
<use f='linux/drivers/gpu/drm/drm_plane_helper.c' l='168' u='c' c='drm_plane_helper_check_state'/>
<def f='linux/drivers/gpu/drm/drm_rect.c' l='68' ll='96' type='bool drm_rect_clip_scaled(struct drm_rect * src, struct drm_rect * dst, const struct drm_rect * clip, int hscale, int vscale)'/>
<dec f='linux/drivers/gpu/drm/drm_rect.c' l='97' type='bool drm_rect_clip_scaled(struct drm_rect * , struct drm_rect * , const struct drm_rect * , int , int )'/>
<use f='linux/drivers/gpu/drm/drm_rect.c' l='97' c='drm_rect_clip_scaled'/>
<use f='linux/drivers/gpu/drm/drm_rect.c' l='97' u='a'/>
<use f='linux/drivers/gpu/drm/drm_rect.c' l='97' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_rect.c' l='53'>/**
 * drm_rect_clip_scaled - perform a scaled clip operation
 * @src: source window rectangle
 * @dst: destination window rectangle
 * @clip: clip rectangle
 * @hscale: horizontal scaling factor
 * @vscale: vertical scaling factor
 *
 * Clip rectangle @dst by rectangle @clip. Clip rectangle @src by the
 * same amounts multiplied by @hscale and @vscale.
 *
 * RETURNS:
 * %true if rectangle @dst is still visible after being clipped,
 * %false otherwise
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_sprite.c' l='929' u='c' c='intel_check_sprite_plane'/>
