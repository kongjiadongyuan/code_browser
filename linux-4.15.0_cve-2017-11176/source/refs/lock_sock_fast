<dec f='linux/include/net/sock.h' l='1473' type='bool lock_sock_fast(struct sock * sk)'/>
<use f='linux/net/core/datagram.c' l='345' u='c' c='__skb_free_datagram_locked'/>
<def f='linux/net/core/sock.c' l='2804' ll='2824' type='bool lock_sock_fast(struct sock * sk)'/>
<dec f='linux/net/core/sock.c' l='2825' type='bool lock_sock_fast(struct sock * )'/>
<use f='linux/net/core/sock.c' l='2825' c='lock_sock_fast'/>
<use f='linux/net/core/sock.c' l='2825' u='a'/>
<use f='linux/net/core/sock.c' l='2825' u='a'/>
<doc f='linux/net/core/sock.c' l='2791'>/**
 * lock_sock_fast - fast version of lock_sock
 * @sk: socket
 *
 * This version should be used for very small section, where process wont block
 * return false if fast path is taken:
 *
 *   sk_lock.slock locked, owned = 0, BH disabled
 *
 * return true if slow path is taken:
 *
 *   sk_lock.slock unlocked, owned = 1, BH enabled
 */</doc>
<use f='linux/net/ipv4/tcp.c' l='611' u='c' c='tcp_ioctl'/>
<use f='linux/net/ipv4/tcp.c' l='2956' u='c' c='tcp_get_info'/>
<use f='linux/net/ipv4/udp.c' l='1390' u='c' c='skb_consume_udp'/>
<use f='linux/net/ipv4/udp.c' l='2300' u='c' c='udp_destroy_sock'/>
