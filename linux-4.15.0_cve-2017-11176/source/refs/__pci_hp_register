<dec f='linux/include/linux/pci_hotplug.h' l='118' type='int __pci_hp_register(struct hotplug_slot * slot, struct pci_bus * pbus, int nr, const char * name, struct module * owner, const char * mod_name)'/>
<def f='linux/drivers/pci/hotplug/pci_hotplug_core.c' l='418' ll='460' type='int __pci_hp_register(struct hotplug_slot * slot, struct pci_bus * bus, int devnr, const char * name, struct module * owner, const char * mod_name)'/>
<dec f='linux/drivers/pci/hotplug/pci_hotplug_core.c' l='461' type='int __pci_hp_register(struct hotplug_slot * , struct pci_bus * , int , const char * , struct module * , const char * )'/>
<use f='linux/drivers/pci/hotplug/pci_hotplug_core.c' l='461' c='__pci_hp_register'/>
<use f='linux/drivers/pci/hotplug/pci_hotplug_core.c' l='461' u='a'/>
<use f='linux/drivers/pci/hotplug/pci_hotplug_core.c' l='461' u='a'/>
<doc f='linux/drivers/pci/hotplug/pci_hotplug_core.c' l='404'>/**
 * __pci_hp_register - register a hotplug_slot with the PCI hotplug subsystem
 * @bus: bus this slot is on
 * @slot: pointer to the &amp;struct hotplug_slot to register
 * @devnr: device number
 * @name: name registered with kobject core
 * @owner: caller module owner
 * @mod_name: caller module name
 *
 * Registers a hotplug slot with the pci hotplug subsystem, which will allow
 * userspace interaction to the slot.
 *
 * Returns 0 if successful, anything else for an error.
 */</doc>
<use f='linux/drivers/platform/x86/eeepc-laptop.c' l='766' macro='1' u='c' c='eeepc_setup_pci_hotplug'/>
