<dec f='linux/include/crypto/public_key.h' l='53' type='int restrict_link_by_signature(struct key * dest_keyring, const struct key_type * type, const union key_payload * payload, struct key * trust_keyring)'/>
<use f='linux/certs/system_keyring.c' l='41' u='c' c='restrict_link_by_builtin_trusted'/>
<def f='linux/crypto/asymmetric_keys/restrict.c' l='74' ll='113' type='int restrict_link_by_signature(struct key * dest_keyring, const struct key_type * type, const union key_payload * payload, struct key * trust_keyring)'/>
<doc f='linux/crypto/asymmetric_keys/restrict.c' l='57'>/**
 * restrict_link_by_signature - Restrict additions to a ring of public keys
 * @dest_keyring: Keyring being linked to.
 * @type: The type of key being added.
 * @payload: The payload of the new key.
 * @trust_keyring: A ring of keys that can be used to vouch for the new cert.
 *
 * Check the new certificate against the ones in the trust keyring.  If one of
 * those is the signing key and validates the new certificate, then mark the
 * new certificate as being trusted.
 *
 * Returns 0 if the new certificate was accepted, -ENOKEY if we couldn&apos;t find a
 * matching parent certificate in the trusted list, -EKEYREJECTED if the
 * signature check fails or the key is blacklisted, -ENOPKG if the signature
 * uses unsupported crypto, or some other error if there is a matching
 * certificate but the signature check cannot be performed.
 */</doc>
