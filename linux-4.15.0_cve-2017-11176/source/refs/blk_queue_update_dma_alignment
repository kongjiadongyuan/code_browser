<dec f='linux/include/linux/blkdev.h' l='1208' type='void blk_queue_update_dma_alignment(struct request_queue * , int )'/>
<def f='linux/block/blk-settings.c' l='851' ll='857' type='void blk_queue_update_dma_alignment(struct request_queue * q, int mask)'/>
<dec f='linux/block/blk-settings.c' l='858' type='void blk_queue_update_dma_alignment(struct request_queue * , int )'/>
<use f='linux/block/blk-settings.c' l='858' c='blk_queue_update_dma_alignment'/>
<use f='linux/block/blk-settings.c' l='858' u='a'/>
<use f='linux/block/blk-settings.c' l='858' u='a'/>
<doc f='linux/block/blk-settings.c' l='837'>/**
 * blk_queue_update_dma_alignment - update dma length and memory alignment
 * @q:     the request queue for the device
 * @mask:  alignment mask
 *
 * description:
 *    update required memory and length alignment for direct dma transactions.
 *    If the requested alignment is larger than the current alignment, then
 *    the current queue alignment is updated to the new value, otherwise it
 *    is left alone.  The design of this is to allow multiple objects
 *    (driver, device, transport etc) to set their respective
 *    alignments without having them interfere.
 *
 **/</doc>
<use f='linux/drivers/ata/libata-scsi.c' l='1310' u='c' c='ata_scsi_dev_config'/>
<use f='linux/drivers/usb/storage/scsiglue.c' l='95' u='c' c='slave_alloc'/>
