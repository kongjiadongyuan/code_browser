<dec f='linux/include/linux/key.h' l='273' type='struct key * request_key(struct key_type * type, const char * description, const char * callout_info)'/>
<use f='linux/fs/nfs/nfs4idmap.c' l='280' u='c' c='nfs_idmap_request_key'/>
<use f='linux/net/dns_resolver/dns_query.c' l='125' u='c' c='dns_query'/>
<def f='linux/security/keys/request_key.c' l='645' ll='665' type='struct key * request_key(struct key_type * type, const char * description, const char * callout_info)'/>
<dec f='linux/security/keys/request_key.c' l='666' type='struct key * request_key(struct key_type * , const char * , const char * )'/>
<use f='linux/security/keys/request_key.c' l='666' c='request_key'/>
<use f='linux/security/keys/request_key.c' l='666' u='a'/>
<use f='linux/security/keys/request_key.c' l='666' u='a'/>
<doc f='linux/security/keys/request_key.c' l='631'>/**
 * request_key - Request a key and wait for construction
 * @type: Type of key.
 * @description: The searchable description of the key.
 * @callout_info: The data to pass to the instantiation upcall (or NULL).
 *
 * As for request_key_and_link() except that it does not add the returned key
 * to a keyring if found, new keys are always allocated in the user&apos;s quota,
 * the callout_info must be a NUL-terminated string and no auxiliary data can
 * be passed.
 *
 * Furthermore, it then works as wait_for_key_construction() to wait for the
 * completion of keys undergoing construction with a non-interruptible wait.
 */</doc>
