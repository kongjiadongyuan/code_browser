<dec f='linux/include/crypto/pkcs7.h' l='41' type='int pkcs7_verify(struct pkcs7_message * pkcs7, enum key_being_used_for usage)'/>
<use f='linux/certs/system_keyring.c' l='227' u='c' c='verify_pkcs7_signature'/>
<doc f='linux/include/crypto/pkcs7.h' l='38'>/*
 * pkcs7_verify.c
 */</doc>
<def f='linux/crypto/asymmetric_keys/pkcs7_verify.c' l='376' ll='443' type='int pkcs7_verify(struct pkcs7_message * pkcs7, enum key_being_used_for usage)'/>
<dec f='linux/crypto/asymmetric_keys/pkcs7_verify.c' l='444' type='int pkcs7_verify(struct pkcs7_message * , enum key_being_used_for )'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_verify.c' l='444' c='pkcs7_verify'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_verify.c' l='444' u='a'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_verify.c' l='444' u='a'/>
<doc f='linux/crypto/asymmetric_keys/pkcs7_verify.c' l='346'>/**
 * pkcs7_verify - Verify a PKCS#7 message
 * @pkcs7: The PKCS#7 message to be verified
 * @usage: The use to which the key is being put
 *
 * Verify a PKCS#7 message is internally consistent - that is, the data digest
 * matches the digest in the AuthAttrs and any signature in the message or one
 * of the X.509 certificates it carries that matches another X.509 cert in the
 * message can be verified.
 *
 * This does not look to match the contents of the PKCS#7 message against any
 * external public keys.
 *
 * Returns, in order of descending priority:
 *
 *  (*) -EKEYREJECTED if a key was selected that had a usage restriction at
 *      odds with the specified usage, or:
 *
 *  (*) -EKEYREJECTED if a signature failed to match for which we found an
 *	appropriate X.509 certificate, or:
 *
 *  (*) -EBADMSG if some part of the message was invalid, or:
 *
 *  (*) 0 if a signature chain passed verification, or:
 *
 *  (*) -EKEYREJECTED if a blacklisted key was encountered, or:
 *
 *  (*) -ENOPKG if none of the signature chains are verifiable because suitable
 *	crypto modules couldn&apos;t be found.
 */</doc>
