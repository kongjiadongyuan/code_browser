<dec f='linux/include/linux/gfp.h' l='516' type='void * alloc_pages_exact(size_t size, gfp_t gfp_mask)'/>
<use f='linux/kernel/crash_core.c' l='388' u='c' c='crash_save_vmcoreinfo_init'/>
<use f='linux/kernel/profile.c' l='121' u='c' c='profile_init'/>
<def f='linux/mm/page_alloc.c' l='4462' ll='4469' type='void * alloc_pages_exact(size_t size, gfp_t gfp_mask)'/>
<dec f='linux/mm/page_alloc.c' l='4470' type='void * alloc_pages_exact(size_t , gfp_t )'/>
<use f='linux/mm/page_alloc.c' l='4470' c='alloc_pages_exact'/>
<use f='linux/mm/page_alloc.c' l='4470' u='a'/>
<use f='linux/mm/page_alloc.c' l='4470' u='a'/>
<use f='linux/mm/page_alloc.c' l='7409' u='c' c='alloc_large_system_hash'/>
<doc f='linux/mm/page_alloc.c' l='4449'>/**
 * alloc_pages_exact - allocate an exact number physically-contiguous pages.
 * @size: the number of bytes to allocate
 * @gfp_mask: GFP flags for the allocation
 *
 * This function is similar to alloc_pages(), except that it allocates the
 * minimum number of pages to satisfy the request.  alloc_pages() can only
 * allocate memory in power-of-two pages.
 *
 * This function is also limited by MAX_ORDER.
 *
 * Memory allocated by this function must be released by free_pages_exact().
 */</doc>
