<dec f='linux/include/linux/cpuidle.h' l='146' type='int cpuidle_register(struct cpuidle_driver * drv, const struct cpumask *const coupled_cpus)'/>
<def f='linux/drivers/cpuidle/cpuidle.c' l='601' ll='637' type='int cpuidle_register(struct cpuidle_driver * drv, const struct cpumask *const coupled_cpus)'/>
<dec f='linux/drivers/cpuidle/cpuidle.c' l='638' type='int cpuidle_register(struct cpuidle_driver * , const struct cpumask *const )'/>
<use f='linux/drivers/cpuidle/cpuidle.c' l='638' c='cpuidle_register'/>
<use f='linux/drivers/cpuidle/cpuidle.c' l='638' u='a'/>
<use f='linux/drivers/cpuidle/cpuidle.c' l='638' u='a'/>
<doc f='linux/drivers/cpuidle/cpuidle.c' l='590'>/**
 * cpuidle_register: registers the driver and the cpu devices with the
 * coupled_cpus passed as parameter. This function is used for all common
 * initialization pattern there are in the arch specific drivers. The
 * devices is globally defined in this file.
 *
 * @drv         : a valid pointer to a struct cpuidle_driver
 * @coupled_cpus: a cpumask for the coupled states
 *
 * Returns 0 on success, &lt; 0 otherwise
 */</doc>
