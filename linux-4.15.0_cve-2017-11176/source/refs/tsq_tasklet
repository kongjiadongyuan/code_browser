<def f='linux/net/ipv4/tcp_output.c' l='769' ll='772'/>
<use f='linux/net/ipv4/tcp_output.c' l='773'/>
<use f='linux/net/ipv4/tcp_output.c' l='800' c='tcp_tasklet_func'/>
<use f='linux/net/ipv4/tcp_output.c' l='800' c='tcp_tasklet_func'/>
<use f='linux/net/ipv4/tcp_output.c' l='890' c='tcp_tasklet_init'/>
<use f='linux/net/ipv4/tcp_output.c' l='926' c='tcp_wfree'/>
<use f='linux/net/ipv4/tcp_output.c' l='961' c='tcp_pace_kick'/>
<size>56</size>
<doc f='linux/net/ipv4/tcp_output.c' l='755'>/* TCP SMALL QUEUES (TSQ)
 *
 * TSQ goal is to keep small amount of skbs per tcp flow in tx queues (qdisc+dev)
 * to reduce RTT and bufferbloat.
 * We do this using a special skb destructor (tcp_wfree).
 *
 * Its important tcp_wfree() can be replaced by sock_wfree() in the event skb
 * needs to be reallocated in a driver.
 * The invariant being skb-&gt;truesize subtracted from sk-&gt;sk_wmem_alloc
 *
 * Since transmit from skb destructor is forbidden, we use a tasklet
 * to process all sockets that eventually need to send more skbs.
 * We use one tasklet per cpu, with its own queue of sockets.
 */</doc>
