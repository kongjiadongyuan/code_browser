<dec f='linux/include/linux/completion.h' l='111' type='long wait_for_completion_interruptible_timeout(struct completion * x, unsigned long timeout)'/>
<use f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='1635' u='c' c='stall_checks'/>
<use f='linux/drivers/usb/storage/transport.c' l='169' u='c' c='usb_stor_msg_common'/>
<def f='linux/kernel/sched/completion.c' l='225' ll='230' type='long wait_for_completion_interruptible_timeout(struct completion * x, unsigned long timeout)'/>
<dec f='linux/kernel/sched/completion.c' l='231' type='long wait_for_completion_interruptible_timeout(struct completion * , unsigned long )'/>
<use f='linux/kernel/sched/completion.c' l='231' c='wait_for_completion_interruptible_timeout'/>
<use f='linux/kernel/sched/completion.c' l='231' u='a'/>
<use f='linux/kernel/sched/completion.c' l='231' u='a'/>
<doc f='linux/kernel/sched/completion.c' l='214'>/**
 * wait_for_completion_interruptible_timeout: - waits for completion (w/(to,intr))
 * @x:  holds the state of this particular completion
 * @timeout:  timeout value in jiffies
 *
 * This waits for either a completion of a specific task to be signaled or for a
 * specified timeout to expire. It is interruptible. The timeout is in jiffies.
 *
 * Return: -ERESTARTSYS if interrupted, 0 if timed out, positive (at least 1,
 * or number of jiffies left till timeout) if completed.
 */</doc>
<use f='linux/net/sunrpc/cache.c' l='607' u='c' c='cache_wait_req'/>
