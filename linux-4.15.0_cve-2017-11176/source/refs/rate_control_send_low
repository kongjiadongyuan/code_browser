<dec f='linux/include/net/mac80211.h' l='5608' type='bool rate_control_send_low(struct ieee80211_sta * sta, void * priv_sta, struct ieee80211_tx_rate_control * txrc)'/>
<doc f='linux/include/net/mac80211.h' l='5590'>/**
 * rate_control_send_low - helper for drivers for management/no-ack frames
 *
 * Rate control algorithms that agree to use the lowest rate to
 * send management frames and NO_ACK data with the respective hw
 * retries should use this in the beginning of their mac80211 get_rate
 * callback. If true is returned the rate control can simply return.
 * If false is returned we guarantee that sta and sta and priv_sta is
 * not null.
 *
 * Rate control algorithms wishing to do more intelligent selection of
 * rate for multicast/broadcast frames may choose to not use this.
 *
 * @sta: &amp;struct ieee80211_sta pointer to the target destination. Note
 * 	that this may be null.
 * @priv_sta: private rate control structure. This may be null.
 * @txrc: rate control information we sholud populate for mac80211.
 */</doc>
<def f='linux/net/mac80211/rate.c' l='372' ll='407' type='bool rate_control_send_low(struct ieee80211_sta * pubsta, void * priv_sta, struct ieee80211_tx_rate_control * txrc)'/>
<dec f='linux/net/mac80211/rate.c' l='408' type='bool rate_control_send_low(struct ieee80211_sta * , void * , struct ieee80211_tx_rate_control * )'/>
<use f='linux/net/mac80211/rate.c' l='408' c='rate_control_send_low'/>
<use f='linux/net/mac80211/rate.c' l='408' u='a'/>
<use f='linux/net/mac80211/rate.c' l='408' u='a'/>
<use f='linux/net/mac80211/rc80211_minstrel.c' l='350' u='c' c='minstrel_get_rate'/>
<use f='linux/net/mac80211/rc80211_minstrel_ht.c' l='1044' u='c' c='minstrel_ht_get_rate'/>
