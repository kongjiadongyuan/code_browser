<dec f='linux/include/linux/cpufreq.h' l='164' type='struct cpufreq_policy * cpufreq_cpu_get(unsigned int cpu)'/>
<def f='linux/drivers/cpufreq/cpufreq.c' l='236' ll='257' type='struct cpufreq_policy * cpufreq_cpu_get(unsigned int cpu)'/>
<dec f='linux/drivers/cpufreq/cpufreq.c' l='258' type='struct cpufreq_policy * cpufreq_cpu_get(unsigned int )'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='258' c='cpufreq_cpu_get'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='258' u='a'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='258' u='a'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='1496' u='c' c='cpufreq_quick_get'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='1514' u='c' c='cpufreq_quick_get_max'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='1564' u='c' c='cpufreq_get'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='2185' u='c' c='cpufreq_get_policy'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='2303' u='c' c='cpufreq_update_policy'/>
<doc f='linux/drivers/cpufreq/cpufreq.c' l='223'>/**
 * cpufreq_cpu_get: returns policy for a cpu and marks it busy.
 *
 * @cpu: cpu to find policy for.
 *
 * This returns policy for &apos;cpu&apos;, returns NULL if it doesn&apos;t exist.
 * It also increments the kobject reference count to mark it busy and so would
 * require a corresponding call to cpufreq_cpu_put() to decrement it back.
 * If corresponding call cpufreq_cpu_put() isn&apos;t made, the policy wouldn&apos;t be
 * freed as that depends on the kobj count.
 *
 * Return: A valid policy on success, otherwise NULL on failure.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_pm.c' l='6852' u='c' c='gen6_update_ring_freq'/>
