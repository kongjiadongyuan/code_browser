<def f='linux/arch/x86/include/asm/orc_types.h' l='85' ll='91'/>
<size>6</size>
<doc f='linux/arch/x86/include/asm/orc_types.h' l='77'>/*
 * This struct is more or less a vastly simplified version of the DWARF Call
 * Frame Information standard.  It contains only the necessary parts of DWARF
 * CFI, simplified for ease of access by the in-kernel unwinder.  It tells the
 * unwinder how to find the previous SP and BP (and sometimes entry regs) on
 * the stack for a given code address.  Each instance of the struct corresponds
 * to one or more code locations.
 */</doc>
<mbr r='orc_entry::sp_offset' o='0' t='s16'/>
<mbr r='orc_entry::bp_offset' o='16' t='s16'/>
<mbr r='orc_entry::sp_reg' o='32' t='unsigned int'/>
<mbr r='orc_entry::bp_reg' o='36' t='unsigned int'/>
<mbr r='orc_entry::type' o='40' t='unsigned int'/>
<use f='linux/arch/x86/include/asm/module.h' l='12'/>
<size>6</size>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='15'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='16'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='20'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='30' c='__orc_find'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='30' c='__orc_find'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='60' c='orc_module_find'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='111' c='orc_ftrace_find'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='117' c='orc_find'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='119' c='orc_find'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='165' c='orc_sort_swap'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='165' c='orc_sort_swap'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='166' c='orc_sort_swap'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='185' c='orc_sort_cmp'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='210' c='unwind_module_init'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='239' c='unwind_init'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='243' c='unwind_init'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='244' c='unwind_init'/>
<use f='linux/arch/x86/kernel/unwind_orc.c' l='358' c='unwind_next_frame'/>
<size>6</size>
<def f='linux/tools/objtool/arch/x86/include/asm/orc_types.h' l='85' ll='91'/>
<use f='linux/tools/objtool/check.h' l='56'/>
<size>6</size>
<doc f='linux/tools/objtool/arch/x86/include/asm/orc_types.h' l='77'>/*
 * This struct is more or less a vastly simplified version of the DWARF Call
 * Frame Information standard.  It contains only the necessary parts of DWARF
 * CFI, simplified for ease of access by the in-kernel unwinder.  It tells the
 * unwinder how to find the previous SP and BP (and sometimes entry regs) on
 * the stack for a given code address.  Each instance of the struct corresponds
 * to one or more code locations.
 */</doc>
<mbr r='orc_entry::sp_offset' o='0' t='s16'/>
<mbr r='orc_entry::bp_offset' o='16' t='s16'/>
<mbr r='orc_entry::sp_reg' o='32' t='unsigned int'/>
<mbr r='orc_entry::bp_reg' o='36' t='unsigned int'/>
<mbr r='orc_entry::type' o='40' t='unsigned int'/>
<use f='linux/tools/objtool/orc_dump.c' l='77' c='orc_dump'/>
<size>6</size>
<use f='linux/tools/objtool/orc_gen.c' l='30' c='create_orc'/>
<use f='linux/tools/objtool/orc_gen.c' l='96' c='create_orc_entry'/>
<use f='linux/tools/objtool/orc_gen.c' l='98' c='create_orc_entry'/>
<use f='linux/tools/objtool/orc_gen.c' l='107' c='create_orc_entry'/>
<use f='linux/tools/objtool/orc_gen.c' l='135' c='create_orc_sections'/>
<use f='linux/tools/objtool/orc_gen.c' l='157' c='create_orc_sections'/>
<use f='linux/tools/objtool/orc_gen.c' l='182' c='create_orc_sections'/>
<use f='linux/tools/objtool/orc_gen.c' l='193' c='create_orc_sections'/>
<size>6</size>
