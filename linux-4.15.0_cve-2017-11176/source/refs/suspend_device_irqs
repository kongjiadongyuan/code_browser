<dec f='linux/include/linux/interrupt.h' l='223' type='void suspend_device_irqs()'/>
<doc f='linux/include/linux/interrupt.h' l='222'>/* The following three functions are for the core kernel use only. */</doc>
<use f='linux/drivers/base/power/main.c' l='1184' u='c' c='dpm_noirq_begin'/>
<def f='linux/kernel/irq/pm.c' l='118' ll='136' type='void suspend_device_irqs()'/>
<dec f='linux/kernel/irq/pm.c' l='137' type='void suspend_device_irqs()'/>
<use f='linux/kernel/irq/pm.c' l='137' c='suspend_device_irqs'/>
<use f='linux/kernel/irq/pm.c' l='137' u='a'/>
<use f='linux/kernel/irq/pm.c' l='137' u='a'/>
<doc f='linux/kernel/irq/pm.c' l='102'>/**
 * suspend_device_irqs - disable all currently enabled interrupt lines
 *
 * During system-wide suspend or hibernation device drivers need to be
 * prevented from receiving interrupts and this function is provided
 * for this purpose.
 *
 * So we disable all interrupts and mark them IRQS_SUSPENDED except
 * for those which are unused, those which are marked as not
 * suspendable via an interrupt request with the flag IRQF_NO_SUSPEND
 * set and those which are marked as active wakeup sources.
 *
 * The active wakeup sources are handled by the flow handler entry
 * code which checks for the IRQD_WAKEUP_ARMED flag, suspends the
 * interrupt and notifies the pm core about the wakeup.
 */</doc>
