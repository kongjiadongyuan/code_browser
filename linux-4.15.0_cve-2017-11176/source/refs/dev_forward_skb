<dec f='linux/include/linux/netdevice.h' l='3336' type='int dev_forward_skb(struct net_device * dev, struct sk_buff * skb)'/>
<def f='linux/net/core/dev.c' l='1868' ll='1871' type='int dev_forward_skb(struct net_device * dev, struct sk_buff * skb)'/>
<dec f='linux/net/core/dev.c' l='1872' type='int dev_forward_skb(struct net_device * , struct sk_buff * )'/>
<use f='linux/net/core/dev.c' l='1872' c='dev_forward_skb'/>
<use f='linux/net/core/dev.c' l='1872' u='a'/>
<use f='linux/net/core/dev.c' l='1872' u='a'/>
<doc f='linux/net/core/dev.c' l='1850'>/**
 * dev_forward_skb - loopback an skb to another netif
 *
 * @dev: destination network device
 * @skb: buffer to forward
 *
 * return values:
 *	NET_RX_SUCCESS	(no congestion)
 *	NET_RX_DROP     (packet was dropped, but freed)
 *
 * dev_forward_skb can be used for injecting an skb from the
 * start_xmit function of one device into the receive queue
 * of another device.
 *
 * The receiving device may be in another namespace, so
 * we have to clear all information in the skb that could
 * impact namespace isolation.
 */</doc>
<use f='linux/net/core/filter.c' l='1680' u='c' c='__bpf_rx_skb'/>
