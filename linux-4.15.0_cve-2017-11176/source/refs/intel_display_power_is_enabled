<dec f='linux/drivers/gpu/drm/i915/intel_drv.h' l='1778' type='bool intel_display_power_is_enabled(struct drm_i915_private * dev_priv, enum intel_display_power_domain domain)'/>
<use f='linux/drivers/gpu/drm/i915/i915_irq.c' l='3151' u='c' c='gen8_irq_reset'/>
<use f='linux/drivers/gpu/drm/i915/i915_irq.c' l='3622' u='c' c='gen8_de_irq_postinstall'/>
<use f='linux/drivers/gpu/drm/i915/intel_ddi.c' l='2542' u='c' c='intel_ddi_is_audio_enabled'/>
<def f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='225' ll='238' type='bool intel_display_power_is_enabled(struct drm_i915_private * dev_priv, enum intel_display_power_domain domain)'/>
<doc f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='208'>/**
 * intel_display_power_is_enabled - check for a power domain
 * @dev_priv: i915 device instance
 * @domain: power domain to check
 *
 * This function can be used to check the hw power domain state. It is mostly
 * used in hardware state readout functions. Everywhere else code should rely
 * upon explicit power domain reference counting to ensure that the hardware
 * block is powered up before accessing it.
 *
 * Callers must hold the relevant modesetting locks to ensure that concurrent
 * threads can&apos;t disable the power well while the caller tries to read a few
 * registers.
 *
 * Returns:
 * True when the power domain is enabled, false otherwise.
 */</doc>
