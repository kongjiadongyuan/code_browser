<def f='linux/include/linux/dcache.h' l='467' ll='470' type='bool d_really_is_negative(const struct dentry * dentry)'/>
<doc f='linux/include/linux/dcache.h' l='452'>/**
 * d_really_is_negative - Determine if a dentry is really negative (ignoring fallthroughs)
 * @dentry: The dentry in question
 *
 * Returns true if the dentry represents either an absent name or a name that
 * doesn&apos;t map to an inode (ie. -&gt;d_inode is NULL).  The dentry could represent
 * a true miss, a whiteout that isn&apos;t represented by a 0,0 chardev or a
 * fallthrough marker in an opaque directory.
 *
 * Note!  (1) This should be used *only* by a filesystem to examine its own
 * dentries.  It should not be used to look at some other filesystem&apos;s
 * dentries.  (2) It should also be used in combination with d_inode() to get
 * the inode.  (3) The dentry may have something attached to -&gt;d_lower and the
 * type field of the flags may be set to something other than miss or whiteout.
 */</doc>
<use f='linux/fs/autofs4/root.c' l='243' u='c' c='autofs4_lookup_expiring'/>
<use f='linux/fs/autofs4/waitq.c' l='382' u='c' c='autofs4_wait'/>
<use f='linux/fs/debugfs/inode.c' l='795' u='c' c='debugfs_rename'/>
<use f='linux/fs/debugfs/inode.c' l='795' u='c' c='debugfs_rename'/>
<use f='linux/fs/debugfs/inode.c' l='798' u='c' c='debugfs_rename'/>
<use f='linux/fs/kernfs/kernfs-internal.h' l='75' u='c' c='kernfs_dentry_node'/>
<use f='linux/fs/kernfs/dir.c' l='566' u='c' c='kernfs_dop_revalidate'/>
<use f='linux/fs/kernfs/dir.c' l='615' u='c' c='kernfs_node_from_dentry'/>
<use f='linux/fs/nfs/dir.c' l='384' u='c' c='nfs_same_file'/>
<use f='linux/fs/nfs/nfs4proc.c' l='2792' u='c' c='_nfs4_open_and_get_state'/>
<use f='linux/fs/quota/dquot.c' l='2509' u='c' c='dquot_quota_on_mount'/>
<use f='linux/ipc/mqueue.c' l='820' u='c' c='do_mq_open'/>
<use f='linux/net/sunrpc/rpc_pipe.c' l='657' u='c' c='__rpc_lookup_create_exclusive'/>
<use f='linux/net/sunrpc/rpc_pipe.c' l='682' u='c' c='__rpc_depopulate'/>
