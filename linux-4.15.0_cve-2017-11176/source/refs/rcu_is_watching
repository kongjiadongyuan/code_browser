<dec f='linux/include/linux/rcutree.h' l='95' type='bool rcu_is_watching()'/>
<use f='linux/kernel/extable.c' l='140' u='c' c='kernel_text_address'/>
<def f='linux/kernel/rcu/tree.c' l='1155' ll='1163' type='bool rcu_is_watching()'/>
<dec f='linux/kernel/rcu/tree.c' l='1164' type='bool rcu_is_watching()'/>
<use f='linux/kernel/rcu/tree.c' l='1164' c='rcu_is_watching'/>
<use f='linux/kernel/rcu/tree.c' l='1164' u='a'/>
<use f='linux/kernel/rcu/tree.c' l='1164' u='a'/>
<use f='linux/kernel/rcu/tree.c' l='3036' u='c' c='__call_rcu_core'/>
<use f='linux/kernel/rcu/tree.c' l='3135' u='c' c='__call_rcu'/>
<doc f='linux/kernel/rcu/tree.c' l='1147'>/**
 * rcu_is_watching - see if RCU thinks that the current CPU is idle
 *
 * Return true if RCU is watching the running CPU, which means that this
 * CPU can safely enter RCU read-side critical sections.  In other words,
 * if the current CPU is in its idle loop and is neither in an interrupt
 * or NMI handler, return true.
 */</doc>
<use f='linux/kernel/trace/trace.c' l='2678' u='c' c='__trace_stack'/>
