<dec f='linux/include/linux/blkdev.h' l='995' type='int blk_rq_map_kern(struct request_queue * , struct request * , void * , unsigned int , gfp_t )'/>
<def f='linux/block/blk-map.c' l='215' ll='253' type='int blk_rq_map_kern(struct request_queue * q, struct request * rq, void * kbuf, unsigned int len, gfp_t gfp_mask)'/>
<dec f='linux/block/blk-map.c' l='254' type='int blk_rq_map_kern(struct request_queue * , struct request * , void * , unsigned int , gfp_t )'/>
<use f='linux/block/blk-map.c' l='254' c='blk_rq_map_kern'/>
<use f='linux/block/blk-map.c' l='254' u='a'/>
<use f='linux/block/blk-map.c' l='254' u='a'/>
<doc f='linux/block/blk-map.c' l='202'>/**
 * blk_rq_map_kern - map kernel data to a request, for passthrough requests
 * @q:		request queue where request should be inserted
 * @rq:		request to fill
 * @kbuf:	the kernel buffer
 * @len:	length of user data
 * @gfp_mask:	memory allocation flags
 *
 * Description:
 *    Data will be mapped directly if possible. Otherwise a bounce
 *    buffer is used. Can be called multiple times to append multiple
 *    buffers.
 */</doc>
<use f='linux/block/scsi_ioctl.c' l='503' u='c' c='sg_scsi_ioctl'/>
<use f='linux/drivers/scsi/scsi_lib.c' l='262' u='c' c='scsi_execute'/>
