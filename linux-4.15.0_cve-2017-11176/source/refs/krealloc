<dec f='linux/include/linux/slab.h' l='164' type='void * krealloc(const void * , size_t , gfp_t )'/>
<use f='linux/block/bio.c' l='101' u='c' c='bio_find_or_create_slab'/>
<use f='linux/drivers/base/regmap/regcache-rbtree.c' l='292' u='c' c='regcache_rbtree_insert_to_block'/>
<use f='linux/drivers/base/regmap/regcache-rbtree.c' l='299' u='c' c='regcache_rbtree_insert_to_block'/>
<use f='linux/drivers/base/regmap/regmap.c' l='2913' u='c' c='regmap_register_patch'/>
<use f='linux/drivers/dma-buf/reservation.c' l='91' u='c' c='reservation_object_reserve_shared'/>
<use f='linux/drivers/dma-buf/reservation.c' l='393' u='c' c='reservation_object_get_fences_rcu'/>
<use f='linux/drivers/dma-buf/reservation.c' l='397' u='c' c='reservation_object_get_fences_rcu'/>
<use f='linux/drivers/dma-buf/sync_file.c' l='281' u='c' c='sync_file_merge'/>
<use f='linux/drivers/gpu/drm/drm_atomic.c' l='1023' u='c' c='drm_atomic_get_private_obj_state'/>
<use f='linux/drivers/gpu/drm/drm_atomic.c' l='1084' u='c' c='drm_atomic_get_connector_state'/>
<use f='linux/drivers/gpu/drm/drm_atomic.c' l='2106' u='c' c='prepare_crtc_signaling'/>
<use f='linux/drivers/gpu/drm/drm_bufs.c' l='805' u='c' c='drm_legacy_addbufs_agp'/>
<use f='linux/drivers/gpu/drm/drm_bufs.c' l='1004' u='c' c='drm_legacy_addbufs_pci'/>
<use f='linux/drivers/gpu/drm/drm_bufs.c' l='1168' u='c' c='drm_legacy_addbufs_sg'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='1592' u='c' c='drm_do_get_edid'/>
<use f='linux/drivers/gpu/drm/drm_fb_helper.c' l='129' u='c' c='__drm_fb_helper_add_one_connector'/>
<use f='linux/drivers/iommu/iommu.c' l='1959' u='c' c='iommu_fwspec_add_ids'/>
<use f='linux/fs/coredump.c' l='68' u='c' c='expand_corename'/>
<use f='linux/fs/xattr.c' l='290' u='c' c='vfs_getxattr_alloc'/>
<use f='linux/kernel/params.c' l='633' u='c' c='add_sysfs_param'/>
<use f='linux/kernel/params.c' l='642' u='c' c='add_sysfs_param'/>
<use f='linux/kernel/trace/trace.c' l='7461' u='c' c='create_trace_option_files'/>
<def f='linux/mm/slab_common.c' l='1445' ll='1459' type='void * krealloc(const void * p, size_t new_size, gfp_t flags)'/>
<dec f='linux/mm/slab_common.c' l='1460' type='void * krealloc(const void * , size_t , gfp_t )'/>
<use f='linux/mm/slab_common.c' l='1460' c='krealloc'/>
<use f='linux/mm/slab_common.c' l='1460' u='a'/>
<use f='linux/mm/slab_common.c' l='1460' u='a'/>
<doc f='linux/mm/slab_common.c' l='1434'>/**
 * krealloc - reallocate memory. The contents will remain unchanged.
 * @p: object to reallocate memory for.
 * @new_size: how many bytes of memory are required.
 * @flags: the type of memory to allocate.
 *
 * The contents of the object pointed to are preserved up to the
 * lesser of the new and old sizes.  If @p is %NULL, krealloc()
 * behaves exactly like kmalloc().  If @new_size is 0 and @p is not a
 * %NULL pointer, the object pointed to is freed.
 */</doc>
<use f='linux/net/netlink/af_netlink.c' l='924' u='c' c='netlink_realloc_groups'/>
<use f='linux/net/netlink/genetlink.c' l='164' u='c' c='genl_allocate_reserve_groups'/>
<use f='linux/sound/hda/array.c' l='29' u='c' c='snd_array_new'/>
