<dec f='linux/include/linux/writeback.h' l='368' type='int write_cache_pages(struct address_space * mapping, struct writeback_control * wbc, writepage_t writepage, void * data)'/>
<use f='linux/fs/ext4/inode.c' l='2745' u='c' c='ext4_writepages'/>
<use f='linux/fs/mpage.c' l='716' u='c' c='mpage_writepages'/>
<use f='linux/fs/nfs/write.c' l='723' u='c' c='nfs_writepages'/>
<def f='linux/mm/page-writeback.c' l='2153' ll='2290' type='int write_cache_pages(struct address_space * mapping, struct writeback_control * wbc, writepage_t writepage, void * data)'/>
<dec f='linux/mm/page-writeback.c' l='2291' type='int write_cache_pages(struct address_space * , struct writeback_control * , writepage_t , void * )'/>
<use f='linux/mm/page-writeback.c' l='2291' c='write_cache_pages'/>
<use f='linux/mm/page-writeback.c' l='2291' u='a'/>
<use f='linux/mm/page-writeback.c' l='2291' u='a'/>
<use f='linux/mm/page-writeback.c' l='2325' u='c' c='generic_writepages'/>
<doc f='linux/mm/page-writeback.c' l='2131'>/**
 * write_cache_pages - walk the list of dirty pages of the given address space and write all of them.
 * @mapping: address space structure to write
 * @wbc: subtract the number of written pages from *@wbc-&gt;nr_to_write
 * @writepage: function called for each page
 * @data: data passed to writepage function
 *
 * If a page is already under I/O, write_cache_pages() skips it, even
 * if it&apos;s dirty.  This is desirable behaviour for memory-cleaning writeback,
 * but it is INCORRECT for data-integrity system calls such as fsync().  fsync()
 * and msync() need to guarantee that all the data which was dirty at the time
 * the call was made get new I/O started against them.  If wbc-&gt;sync_mode is
 * WB_SYNC_ALL then we were called for data integrity and we must wait for
 * existing IO to complete.
 *
 * To avoid livelocks (when other process dirties new pages), we first tag
 * pages which should be written back with TOWRITE tag and only then start
 * writing them. For data-integrity sync we have to be careful so that we do
 * not miss some pages (e.g., because some other process has cleared TOWRITE
 * tag we set). The rule we follow is that TOWRITE tag can be cleared only
 * by the process clearing the DIRTY tag (and submitting the page for IO).
 */</doc>
