<def f='linux/drivers/cpufreq/intel_pstate.c' l='274' ll='283'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='285'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='1559'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='1568'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='1578'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='1588'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='1598'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='2134' c='copy_cpu_funcs'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='2285' c='intel_pstate_init'/>
<size>64</size>
<doc f='linux/drivers/cpufreq/intel_pstate.c' l='261'>/**
 * struct pstate_funcs - Per CPU model specific callbacks
 * @get_max:		Callback to get maximum non turbo effective P state
 * @get_max_physical:	Callback to get maximum non turbo physical P state
 * @get_min:		Callback to get minimum P state
 * @get_turbo:		Callback to get turbo P state
 * @get_scaling:	Callback to get frequency scaling factor
 * @get_val:		Callback to convert P state to actual MSR write value
 * @get_vid:		Callback to get VID data for Atom platforms
 *
 * Core and Atom CPU models have different way to get P State limits. This
 * structure is used to store those callbacks.
 */</doc>
