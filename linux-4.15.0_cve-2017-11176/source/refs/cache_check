<dec f='linux/include/linux/sunrpc/cache.h' l='207' type='int cache_check(struct cache_detail * detail, struct cache_head * h, struct cache_req * rqstp)'/>
<use f='linux/net/sunrpc/auth_gss/svcauth_gss.c' l='579' u='c' c='gss_svc_searchbyctx'/>
<use f='linux/net/sunrpc/auth_gss/svcauth_gss.c' l='1138' u='c' c='svcauth_gss_legacy_init'/>
<def f='linux/net/sunrpc/cache.c' l='253' ll='299' type='int cache_check(struct cache_detail * detail, struct cache_head * h, struct cache_req * rqstp)'/>
<dec f='linux/net/sunrpc/cache.c' l='300' type='int cache_check(struct cache_detail * , struct cache_head * , struct cache_req * )'/>
<use f='linux/net/sunrpc/cache.c' l='300' c='cache_check'/>
<use f='linux/net/sunrpc/cache.c' l='300' u='a'/>
<use f='linux/net/sunrpc/cache.c' l='300' u='a'/>
<use f='linux/net/sunrpc/cache.c' l='1374' u='c' c='c_show'/>
<doc f='linux/net/sunrpc/cache.c' l='239'>/*
 * This is the generic cache management routine for all
 * the authentication caches.
 * It checks the currency of a cache item and will (later)
 * initiate an upcall to fill it if needed.
 *
 *
 * Returns 0 if the cache_head can be used, or cache_puts it and returns
 * -EAGAIN if upcall is pending and request has been queued
 * -ETIMEDOUT if upcall failed or request could not be queue or
 *           upcall completed but item is still invalid (implying that
 *           the cache item has been replaced with a newer one).
 * -ENOENT if cache entry was negative
 */</doc>
<use f='linux/net/sunrpc/svcauth_unix.c' l='640' u='c' c='unix_gid_find'/>
<use f='linux/net/sunrpc/svcauth_unix.c' l='692' u='c' c='svcauth_unix_set_client'/>
