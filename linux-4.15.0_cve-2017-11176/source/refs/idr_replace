<dec f='linux/include/linux/idr.h' l='139' type='void * idr_replace(struct idr * , void * , int id)'/>
<use f='linux/drivers/gpu/drm/drm_auth.c' l='90' u='c' c='drm_authmagic'/>
<use f='linux/drivers/gpu/drm/drm_context.c' l='246' u='c' c='drm_legacy_setsareactx'/>
<use f='linux/drivers/gpu/drm/drm_drv.c' l='243' u='c' c='drm_minor_register'/>
<use f='linux/drivers/gpu/drm/drm_drv.c' l='265' u='c' c='drm_minor_unregister'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='288' u='c' c='drm_gem_handle_delete'/>
<use f='linux/drivers/gpu/drm/drm_mode_object.c' l='81' u='c' c='drm_mode_object_register'/>
<use f='linux/drivers/md/dm.c' l='1776' u='c' c='alloc_dev'/>
<use f='linux/drivers/md/dm.c' l='2124' u='c' c='__dm_destroy'/>
<use f='linux/fs/nfs/nfs4client.c' l='452' u='c' c='nfs4_swap_callback_idents'/>
<use f='linux/fs/nfs/nfs4client.c' l='455' u='c' c='nfs4_swap_callback_idents'/>
<use f='linux/kernel/cgroup/cgroup.c' l='312' u='c' c='cgroup_idr_replace'/>
<use f='linux/kernel/pid.c' l='211' u='c' c='alloc_pid'/>
<def f='linux/lib/idr.c' l='152' ll='158' type='void * idr_replace(struct idr * idr, void * ptr, int id)'/>
<dec f='linux/lib/idr.c' l='159' type='void * idr_replace(struct idr * , void * , int )'/>
<use f='linux/lib/idr.c' l='159' c='idr_replace'/>
<use f='linux/lib/idr.c' l='159' u='a'/>
<use f='linux/lib/idr.c' l='159' u='a'/>
<doc f='linux/lib/idr.c' l='138'>/**
 * idr_replace - replace pointer for given id
 * @idr: idr handle
 * @ptr: New pointer to associate with the ID
 * @id: Lookup key
 *
 * Replace the pointer registered with an ID and return the old value.
 * This function can be called under the RCU read lock concurrently with
 * idr_alloc() and idr_remove() (as long as the ID being removed is not
 * the one being replaced!).
 *
 * Returns: the old value on success.  %-ENOENT indicates that @id was not
 * found.  %-EINVAL indicates that @id or @ptr were not valid.
 */</doc>
