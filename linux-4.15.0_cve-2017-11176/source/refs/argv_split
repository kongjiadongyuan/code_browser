<dec f='linux/include/linux/string.h' l='173' type='char ** argv_split(gfp_t gfp, const char * str, int * argcp)'/>
<use f='linux/fs/coredump.c' l='640' u='c' c='do_coredump'/>
<use f='linux/kernel/reboot.c' l='428' u='c' c='run_cmd'/>
<use f='linux/kernel/trace/trace.c' l='8281' u='c' c='trace_run_command'/>
<def f='linux/lib/argv_split.c' l='60' ll='94' type='char ** argv_split(gfp_t gfp, const char * str, int * argcp)'/>
<dec f='linux/lib/argv_split.c' l='95' type='char ** argv_split(gfp_t , const char * , int * )'/>
<use f='linux/lib/argv_split.c' l='95' c='argv_split'/>
<use f='linux/lib/argv_split.c' l='95' u='a'/>
<use f='linux/lib/argv_split.c' l='95' u='a'/>
<doc f='linux/lib/argv_split.c' l='43'>/**
 * argv_split - split a string at whitespace, returning an argv
 * @gfp: the GFP mask used to allocate memory
 * @str: the string to be split
 * @argcp: returned argument count
 *
 * Returns an array of pointers to strings which are split out from
 * @str.  This is performed by strictly splitting on white-space; no
 * quote processing is performed.  Multiple whitespace characters are
 * considered to be a single argument separator.  The returned array
 * is always NULL-terminated.  Returns NULL on memory allocation
 * failure.
 *
 * The source string at `str&apos; may be undergoing concurrent alteration via
 * userspace sysctl activity (at least).  The argv_split() implementation
 * attempts to handle this gracefully by taking a local copy to work on.
 */</doc>
