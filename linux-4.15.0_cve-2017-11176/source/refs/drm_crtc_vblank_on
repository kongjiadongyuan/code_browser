<dec f='linux/include/drm/drm_vblank.h' l='181' type='void drm_crtc_vblank_on(struct drm_crtc * crtc)'/>
<def f='linux/drivers/gpu/drm/drm_vblank.c' l='1204' ll='1233' type='void drm_crtc_vblank_on(struct drm_crtc * crtc)'/>
<dec f='linux/drivers/gpu/drm/drm_vblank.c' l='1234' type='void drm_crtc_vblank_on(struct drm_crtc * )'/>
<use f='linux/drivers/gpu/drm/drm_vblank.c' l='1234' c='drm_crtc_vblank_on'/>
<use f='linux/drivers/gpu/drm/drm_vblank.c' l='1234' u='a'/>
<use f='linux/drivers/gpu/drm/drm_vblank.c' l='1234' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_vblank.c' l='1194'>/**
 * drm_crtc_vblank_on - enable vblank events on a CRTC
 * @crtc: CRTC in question
 *
 * This functions restores the vblank interrupt state captured with
 * drm_crtc_vblank_off() again and is generally called when enabling @crtc. Note
 * that calls to drm_crtc_vblank_on() and drm_crtc_vblank_off() can be
 * unbalanced and so can also be unconditionally called in driver load code to
 * reflect the current hardware state of the crtc.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='5321' u='c' c='ironlake_crtc_enable'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='5443' u='c' c='haswell_crtc_enable'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='5733' u='c' c='valleyview_crtc_enable'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='5792' u='c' c='i9xx_crtc_enable'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='14785' u='c' c='intel_sanitize_crtc'/>
