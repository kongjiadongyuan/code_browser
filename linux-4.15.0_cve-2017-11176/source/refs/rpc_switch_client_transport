<dec f='linux/include/linux/sunrpc/clnt.h' l='153' type='int rpc_switch_client_transport(struct rpc_clnt * , struct xprt_create * , const struct rpc_timeout * )'/>
<use f='linux/fs/nfs/nfs4client.c' l='1212' u='c' c='nfs4_update_server'/>
<def f='linux/net/sunrpc/clnt.c' l='691' ll='759' type='int rpc_switch_client_transport(struct rpc_clnt * clnt, struct xprt_create * args, const struct rpc_timeout * timeout)'/>
<dec f='linux/net/sunrpc/clnt.c' l='760' type='int rpc_switch_client_transport(struct rpc_clnt * , struct xprt_create * , const struct rpc_timeout * )'/>
<use f='linux/net/sunrpc/clnt.c' l='760' c='rpc_switch_client_transport'/>
<use f='linux/net/sunrpc/clnt.c' l='760' u='a'/>
<use f='linux/net/sunrpc/clnt.c' l='760' u='a'/>
<doc f='linux/net/sunrpc/clnt.c' l='676'>/**
 * rpc_switch_client_transport: switch the RPC transport on the fly
 * @clnt: pointer to a struct rpc_clnt
 * @args: pointer to the new transport arguments
 * @timeout: pointer to the new timeout parameters
 *
 * This function allows the caller to switch the RPC transport for the
 * rpc_clnt structure &apos;clnt&apos; to allow it to connect to a mirrored NFS
 * server, for instance.  It assumes that the caller has ensured that
 * there are no active RPC tasks by using some form of locking.
 *
 * Returns zero if &quot;clnt&quot; is now using the new xprt.  Otherwise a
 * negative errno is returned, and &quot;clnt&quot; continues to use the old
 * xprt.
 */</doc>
