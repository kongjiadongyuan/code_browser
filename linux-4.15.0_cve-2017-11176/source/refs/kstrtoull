<dec f='linux/include/linux/kernel.h' l='313' type='int kstrtoull(const char * s, unsigned int base, unsigned long long * res)'/>
<use f='linux/include/linux/kernel.h' l='340' u='c' c='kstrtoul'/>
<use f='linux/include/linux/kernel.h' l='379' u='c' c='kstrtou64'/>
<use f='linux/block/kyber-iosched.c' l='682' u='c' c='kyber_read_lat_store'/>
<use f='linux/block/kyber-iosched.c' l='682' u='c' c='kyber_write_lat_store'/>
<use f='linux/drivers/cpuidle/sysfs.c' l='267' u='c' c='store_state_disable'/>
<use f='linux/drivers/md/md.c' l='3010' u='c' c='offset_store'/>
<use f='linux/drivers/md/md.c' l='3038' u='c' c='new_offset_store'/>
<use f='linux/drivers/md/md.c' l='3105' u='c' c='strict_blocks_to_sectors'/>
<use f='linux/drivers/md/md.c' l='3213' u='c' c='recovery_start_store'/>
<use f='linux/drivers/md/md.c' l='3279' u='c' c='ppl_sector_store'/>
<use f='linux/drivers/md/md.c' l='4024' u='c' c='resync_start_store'/>
<use f='linux/drivers/md/md.c' l='4770' u='c' c='min_sync_store'/>
<use f='linux/drivers/md/md.c' l='4815' u='c' c='max_sync_store'/>
<use f='linux/drivers/md/md.c' l='4859' u='c' c='suspend_lo_store'/>
<use f='linux/drivers/md/md.c' l='4896' u='c' c='suspend_hi_store'/>
<use f='linux/drivers/md/md.c' l='4938' u='c' c='reshape_position_store'/>
<use f='linux/fs/ext4/sysfs.c' l='103' u='c' c='reserved_clusters_store'/>
<use f='linux/kernel/cgroup/cgroup.c' l='3433' u='c' c='cgroup_file_write'/>
<use f='linux/kernel/params.c' l='246' u='c' c='param_set_ullong'/>
<use f='linux/kernel/trace/blktrace.c' l='1820' u='c' c='sysfs_blk_trace_attr_store'/>
<use f='linux/kernel/trace/blktrace.c' l='1827' u='c' c='sysfs_blk_trace_attr_store'/>
<use f='linux/kernel/trace/trace_events_filter.c' l='1072' u='c' c='init_pred'/>
<def f='linux/lib/kstrtox.c' l='121' ll='126' type='int kstrtoull(const char * s, unsigned int base, unsigned long long * res)'/>
<dec f='linux/lib/kstrtox.c' l='127' type='int kstrtoull(const char * , unsigned int , unsigned long long * )'/>
<use f='linux/lib/kstrtox.c' l='127' c='kstrtoull'/>
<use f='linux/lib/kstrtox.c' l='127' u='a'/>
<use f='linux/lib/kstrtox.c' l='127' u='a'/>
<use f='linux/lib/kstrtox.c' l='158' u='c' c='kstrtoll'/>
<use f='linux/lib/kstrtox.c' l='175' u='c' c='_kstrtoul'/>
<use f='linux/lib/kstrtox.c' l='222' u='c' c='kstrtouint'/>
<use f='linux/lib/kstrtox.c' l='268' u='c' c='kstrtou16'/>
<use f='linux/lib/kstrtox.c' l='298' u='c' c='kstrtou8'/>
<use f='linux/lib/kstrtox.c' l='401' u='c' c='kstrtoull_from_user'/>
<doc f='linux/lib/kstrtox.c' l='105'>/**
 * kstrtoull - convert a string to an unsigned long long
 * @s: The start of the string. The string must be null-terminated, and may also
 *  include a single newline before its terminating null. The first character
 *  may also be a plus sign, but not a minus sign.
 * @base: The number base to use. The maximum supported base is 16. If base is
 *  given as 0, then the base of the string is automatically detected with the
 *  conventional semantics - If it begins with 0x the number will be parsed as a
 *  hexadecimal (case insensitive), if it otherwise begins with 0, it will be
 *  parsed as an octal number. Otherwise it will be parsed as a decimal.
 * @res: Where to write the result of the conversion on success.
 *
 * Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error.
 * Used as a replacement for the obsolete simple_strtoull. Return code must
 * be checked.
 */</doc>
<use f='linux/lib/parser.c' l='177' u='c' c='match_u64int'/>
