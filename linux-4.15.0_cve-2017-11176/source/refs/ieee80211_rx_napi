<dec f='linux/include/net/mac80211.h' l='4001' type='void ieee80211_rx_napi(struct ieee80211_hw * hw, struct ieee80211_sta * sta, struct sk_buff * skb, struct napi_struct * napi)'/>
<use f='linux/include/net/mac80211.h' l='4026' u='c' c='ieee80211_rx'/>
<doc f='linux/include/net/mac80211.h' l='3979'>/**
 * ieee80211_rx_napi - receive frame from NAPI context
 *
 * Use this function to hand received frames to mac80211. The receive
 * buffer in @skb must start with an IEEE 802.11 header. In case of a
 * paged @skb is used, the driver is recommended to put the ieee80211
 * header of the frame on the linear part of the @skb to avoid memory
 * allocation and/or memcpy by the stack.
 *
 * This function may not be called in IRQ context. Calls to this function
 * for a single hardware must be synchronized against each other. Calls to
 * this function, ieee80211_rx_ni() and ieee80211_rx_irqsafe() may not be
 * mixed for a single hardware. Must not run concurrently with
 * ieee80211_tx_status() or ieee80211_tx_status_ni().
 *
 * This function must be called with BHs disabled.
 *
 * @hw: the hardware this frame came in on
 * @sta: the station the frame was received from, or %NULL
 * @skb: the buffer to receive, owned by mac80211 after this call
 * @napi: the NAPI context
 */</doc>
<def f='linux/net/mac80211/rx.c' l='4247' ll='4361' type='void ieee80211_rx_napi(struct ieee80211_hw * hw, struct ieee80211_sta * pubsta, struct sk_buff * skb, struct napi_struct * napi)'/>
<dec f='linux/net/mac80211/rx.c' l='4362' type='void ieee80211_rx_napi(struct ieee80211_hw * , struct ieee80211_sta * , struct sk_buff * , struct napi_struct * )'/>
<use f='linux/net/mac80211/rx.c' l='4362' c='ieee80211_rx_napi'/>
<use f='linux/net/mac80211/rx.c' l='4362' u='a'/>
<use f='linux/net/mac80211/rx.c' l='4362' u='a'/>
<doc f='linux/net/mac80211/rx.c' l='4243'>/*
 * This is the receive path handler. It is called by a low level driver when an
 * 802.11 MPDU is received from the hardware.
 */</doc>
