<dec f='linux/include/linux/transport_class.h' l='96' type='int transport_class_register(struct transport_class * )'/>
<use f='linux/drivers/ata/libata-transport.c' l='782' u='c' c='libata_transport_init'/>
<use f='linux/drivers/ata/libata-transport.c' l='785' u='c' c='libata_transport_init'/>
<use f='linux/drivers/ata/libata-transport.c' l='788' u='c' c='libata_transport_init'/>
<def f='linux/drivers/base/transport_class.c' l='48' ll='51' type='int transport_class_register(struct transport_class * tclass)'/>
<dec f='linux/drivers/base/transport_class.c' l='52' type='int transport_class_register(struct transport_class * )'/>
<use f='linux/drivers/base/transport_class.c' l='52' c='transport_class_register'/>
<use f='linux/drivers/base/transport_class.c' l='52' u='a'/>
<use f='linux/drivers/base/transport_class.c' l='52' u='a'/>
<doc f='linux/drivers/base/transport_class.c' l='34'>/**
 * transport_class_register - register an initial transport class
 *
 * @tclass:	a pointer to the transport class structure to be initialised
 *
 * The transport class contains an embedded class which is used to
 * identify it.  The caller should initialise this structure with
 * zeros and then generic class must have been initialised with the
 * actual transport class unique name.  There&apos;s a macro
 * DECLARE_TRANSPORT_CLASS() to do this (declared classes still must
 * be registered).
 *
 * Returns 0 on success or error on failure.
 */</doc>
<use f='linux/drivers/scsi/scsi_transport_spi.c' l='1610' u='c' c='spi_transport_init'/>
<use f='linux/drivers/scsi/scsi_transport_spi.c' l='1614' u='c' c='spi_transport_init'/>
