<dec f='linux/include/linux/mm.h' l='1460' type='void __cancel_dirty_page(struct page * page)'/>
<use f='linux/include/linux/mm.h' l='1465' u='c' c='cancel_dirty_page'/>
<def f='linux/mm/page-writeback.c' l='2609' ll='2629' type='void __cancel_dirty_page(struct page * page)'/>
<dec f='linux/mm/page-writeback.c' l='2630' type='void __cancel_dirty_page(struct page * )'/>
<use f='linux/mm/page-writeback.c' l='2630' c='__cancel_dirty_page'/>
<use f='linux/mm/page-writeback.c' l='2630' u='a'/>
<use f='linux/mm/page-writeback.c' l='2630' u='a'/>
<doc f='linux/mm/page-writeback.c' l='2596'>/*
 * This cancels just the dirty bit on the kernel page itself, it does NOT
 * actually remove dirty bits on any mmap&apos;s that may be around. It also
 * leaves the page tagged dirty, so any sync activity will still find it on
 * the dirty lists, and in particular, clear_page_dirty_for_io() will still
 * look at the dirty bits in the VM.
 *
 * Doing this should *normally* only ever be done when a page is truncated,
 * and is not actually mapped anywhere at all. However, fs/buffer.c does
 * this when it notices that somebody has cleaned out all the buffers on a
 * page without actually doing it through the VM. Can you say &quot;ext3 is
 * horribly ugly&quot;? Thought you could.
 */</doc>
