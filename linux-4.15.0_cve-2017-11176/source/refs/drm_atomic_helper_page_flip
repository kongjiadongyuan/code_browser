<dec f='linux/include/drm/drm_atomic_helper.h' l='127' type='int drm_atomic_helper_page_flip(struct drm_crtc * crtc, struct drm_framebuffer * fb, struct drm_pending_vblank_event * event, uint32_t flags, struct drm_modeset_acquire_ctx * ctx)'/>
<def f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3128' ll='3152' type='int drm_atomic_helper_page_flip(struct drm_crtc * crtc, struct drm_framebuffer * fb, struct drm_pending_vblank_event * event, uint32_t flags, struct drm_modeset_acquire_ctx * ctx)'/>
<dec f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3153' type='int drm_atomic_helper_page_flip(struct drm_crtc * , struct drm_framebuffer * , struct drm_pending_vblank_event * , uint32_t , struct drm_modeset_acquire_ctx * )'/>
<use f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3153' c='drm_atomic_helper_page_flip'/>
<use f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3153' u='a'/>
<use f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3153' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3111'>/**
 * drm_atomic_helper_page_flip - execute a legacy page flip
 * @crtc: DRM crtc
 * @fb: DRM framebuffer
 * @event: optional DRM event to signal upon completion
 * @flags: flip flags for non-vblank sync&apos;ed updates
 * @ctx: lock acquisition context
 *
 * Provides a default &amp;drm_crtc_funcs.page_flip implementation
 * using the atomic driver interface.
 *
 * Returns:
 * Returns 0 on success, negative errno numbers on failure.
 *
 * See also:
 * drm_atomic_helper_page_flip_target()
 */</doc>
<use f='linux/drivers/gpu/drm/drm_simple_kms_helper.c' l='84'/>
<use f='linux/drivers/gpu/drm/drm_simple_kms_helper.c' l='84'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='12571'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='12571'/>
