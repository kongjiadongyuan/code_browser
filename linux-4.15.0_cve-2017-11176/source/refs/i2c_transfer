<dec f='linux/include/linux/i2c.h' l='73' type='int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg * msgs, int num)'/>
<doc f='linux/include/linux/i2c.h' l='71'>/* Transfer num messages.
 */</doc>
<use f='linux/drivers/base/regmap/regmap-i2c.c' l='167' u='c' c='regmap_i2c_gather_write'/>
<use f='linux/drivers/base/regmap/regmap-i2c.c' l='195' u='c' c='regmap_i2c_read'/>
<use f='linux/drivers/gpu/drm/drm_dp_dual_mode_helper.c' l='79' u='c' c='drm_dp_dual_mode_read'/>
<use f='linux/drivers/gpu/drm/drm_dp_dual_mode_helper.c' l='123' u='c' c='drm_dp_dual_mode_write'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='1490' u='c' c='drm_do_probe_ddc_edid'/>
<use f='linux/drivers/gpu/drm/drm_scdc_helper.c' l='71' u='c' c='drm_scdc_read'/>
<use f='linux/drivers/gpu/drm/drm_scdc_helper.c' l='114' u='c' c='drm_scdc_write'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ch7017.c' l='184' u='c' c='ch7017_read'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ch7017.c' l='196' u='c' c='ch7017_write'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ch7xxx.c' l='160' u='c' c='ch7xxx_readb'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ch7xxx.c' l='188' u='c' c='ch7xxx_writeb'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ivch.c' l='220' u='c' c='ivch_read'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ivch.c' l='250' u='c' c='ivch_write'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ns2501.c' l='417' u='c' c='ns2501_readb'/>
<use f='linux/drivers/gpu/drm/i915/dvo_ns2501.c' l='453' u='c' c='ns2501_writeb'/>
<use f='linux/drivers/gpu/drm/i915/dvo_sil164.c' l='93' u='c' c='sil164_readb'/>
<use f='linux/drivers/gpu/drm/i915/dvo_sil164.c' l='120' u='c' c='sil164_writeb'/>
<use f='linux/drivers/gpu/drm/i915/dvo_tfp410.c' l='118' u='c' c='tfp410_readb'/>
<use f='linux/drivers/gpu/drm/i915/dvo_tfp410.c' l='145' u='c' c='tfp410_writeb'/>
<use f='linux/drivers/gpu/drm/i915/intel_sdvo.c' l='280' u='c' c='intel_sdvo_read_byte'/>
<use f='linux/drivers/gpu/drm/i915/intel_sdvo.c' l='500' u='c' c='__intel_sdvo_write_cmd'/>
<use f='linux/drivers/i2c/i2c-core-acpi.c' l='447' u='c' c='acpi_gsb_i2c_read_bytes'/>
<use f='linux/drivers/i2c/i2c-core-acpi.c' l='477' u='c' c='acpi_gsb_i2c_write_bytes'/>
<def f='linux/drivers/i2c/i2c-core-base.c' l='1926' ll='1975' type='int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg * msgs, int num)'/>
<dec f='linux/drivers/i2c/i2c-core-base.c' l='1976' type='int i2c_transfer(struct i2c_adapter * , struct i2c_msg * , int )'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='1976' c='i2c_transfer'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='1976' u='a'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='1976' u='a'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='1997' u='c' c='i2c_master_send'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='2027' u='c' c='i2c_master_recv'/>
<doc f='linux/drivers/i2c/i2c-core-base.c' l='1914'>/**
 * i2c_transfer - execute a single or combined I2C message
 * @adap: Handle to I2C bus
 * @msgs: One or more messages to execute before STOP is issued to
 *	terminate the operation; each message begins with a START.
 * @num: Number of messages to be executed.
 *
 * Returns negative errno, else the number of messages executed.
 *
 * Note that there is no requirement that each message be sent to
 * the same slave address, although that is the most common model.
 */</doc>
<use f='linux/drivers/i2c/i2c-core-smbus.c' l='435' u='c' c='i2c_smbus_xfer_emulated'/>
