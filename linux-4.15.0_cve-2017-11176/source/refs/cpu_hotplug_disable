<dec f='linux/include/linux/cpu.h' l='105' type='void cpu_hotplug_disable()'/>
<use f='linux/drivers/acpi/processor_driver.c' l='271' u='c' c='acpi_processor_start'/>
<use f='linux/drivers/pci/pci-driver.c' l='346' u='c' c='pci_call_probe'/>
<def f='linux/kernel/cpu.c' l='325' ll='330' type='void cpu_hotplug_disable()'/>
<dec f='linux/kernel/cpu.c' l='331' type='void cpu_hotplug_disable()'/>
<use f='linux/kernel/cpu.c' l='331' c='cpu_hotplug_disable'/>
<use f='linux/kernel/cpu.c' l='331' u='a'/>
<use f='linux/kernel/cpu.c' l='331' u='a'/>
<use f='linux/kernel/cpu.c' l='1192' u='c' c='cpu_hotplug_pm_callback'/>
<doc f='linux/kernel/cpu.c' l='318'>/*
 * Wait for currently running CPU hotplug operations to complete (if any) and
 * disable future CPU hotplug (from sysfs). The &apos;cpu_add_remove_lock&apos; protects
 * the &apos;cpu_hotplug_disabled&apos; flag. The same lock is also acquired by the
 * hotplug path before performing hotplug operations. So acquiring that lock
 * guarantees mutual exclusion from any currently running hotplug operations.
 */</doc>
<use f='linux/kernel/reboot.c' l='220' u='c' c='migrate_to_reboot_cpu'/>
