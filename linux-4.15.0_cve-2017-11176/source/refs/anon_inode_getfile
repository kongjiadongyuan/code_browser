<dec f='linux/include/linux/anon_inodes.h' l='14' type='struct file * anon_inode_getfile(const char * name, const struct file_operations * fops, void * priv, int flags)'/>
<use f='linux/drivers/dma-buf/dma-buf.c' l='438' u='c' c='dma_buf_export'/>
<use f='linux/drivers/dma-buf/sync_file.c' l='39' u='c' c='sync_file_alloc'/>
<use f='linux/drivers/gpu/drm/drm_syncobj.c' l='381' u='c' c='drm_syncobj_get_fd'/>
<def f='linux/fs/anon_inodes.c' l='70' ll='120' type='struct file * anon_inode_getfile(const char * name, const struct file_operations * fops, void * priv, int flags)'/>
<dec f='linux/fs/anon_inodes.c' l='121' type='struct file * anon_inode_getfile(const char * , const struct file_operations * , void * , int )'/>
<use f='linux/fs/anon_inodes.c' l='121' c='anon_inode_getfile'/>
<use f='linux/fs/anon_inodes.c' l='121' u='a'/>
<use f='linux/fs/anon_inodes.c' l='121' u='a'/>
<use f='linux/fs/anon_inodes.c' l='150' u='c' c='anon_inode_getfd'/>
<doc f='linux/fs/anon_inodes.c' l='54'>/**
 * anon_inode_getfile - creates a new file instance by hooking it up to an
 *                      anonymous inode, and a dentry that describe the &quot;class&quot;
 *                      of the file
 *
 * @name:    [in]    name of the &quot;class&quot; of the new file
 * @fops:    [in]    file operations for the new file
 * @priv:    [in]    private data for the new file (will be file&apos;s private_data)
 * @flags:   [in]    flags
 *
 * Creates a new file by hooking it on a single inode. This is useful for files
 * that do not need to have a full-fledged inode in order to operate correctly.
 * All the files created with anon_inode_getfile() will share a single inode,
 * hence saving memory and avoiding code duplication for the file/inode/dentry
 * setup.  Returns the newly created file* or an error pointer.
 */</doc>
<use f='linux/fs/eventfd.c' l='450' u='c' c='eventfd_file_create'/>
<use f='linux/fs/eventpoll.c' l='1962' u='c' c='SYSC_epoll_create1'/>
<use f='linux/kernel/events/core.c' l='10095' u='c' c='SYSC_perf_event_open'/>
