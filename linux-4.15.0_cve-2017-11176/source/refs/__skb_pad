<dec f='linux/include/linux/skbuff.h' l='1050' type='int __skb_pad(struct sk_buff * skb, int pad, bool free_on_error)'/>
<use f='linux/include/linux/skbuff.h' l='1065' u='c' c='skb_pad'/>
<use f='linux/include/linux/skbuff.h' l='2955' u='c' c='__skb_put_padto'/>
<def f='linux/net/core/skbuff.c' l='1621' ll='1653' type='int __skb_pad(struct sk_buff * skb, int pad, bool free_on_error)'/>
<dec f='linux/net/core/skbuff.c' l='1654' type='int __skb_pad(struct sk_buff * , int , bool )'/>
<use f='linux/net/core/skbuff.c' l='1654' c='__skb_pad'/>
<use f='linux/net/core/skbuff.c' l='1654' u='a'/>
<use f='linux/net/core/skbuff.c' l='1654' u='a'/>
<doc f='linux/net/core/skbuff.c' l='1607'>/**
 *	__skb_pad		-	zero pad the tail of an skb
 *	@skb: buffer to pad
 *	@pad: space to pad
 *	@free_on_error: free buffer on error
 *
 *	Ensure that a buffer is followed by a padding area that is zero
 *	filled. Used by network drivers which may DMA or transfer data
 *	beyond the buffer end onto the wire.
 *
 *	May return error in out of memory cases. The skb is freed on error
 *	if @free_on_error is true.
 */</doc>
