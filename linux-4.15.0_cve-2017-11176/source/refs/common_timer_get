<dec f='linux/kernel/time/posix-timers.h' l='37' type='void common_timer_get(struct k_itimer * timr, struct itimerspec * cur_setting)'/>
<use f='linux/kernel/time/alarmtimer.c' l='816'/>
<use f='linux/kernel/time/alarmtimer.c' l='816'/>
<def f='linux/kernel/time/posix-timers.c' l='670' ll='718' type='void common_timer_get(struct k_itimer * timr, struct itimerspec * cur_setting)'/>
<use f='linux/kernel/time/posix-timers.c' l='842' u='c' c='common_timer_set'/>
<use f='linux/kernel/time/posix-timers.c' l='1264'/>
<use f='linux/kernel/time/posix-timers.c' l='1264'/>
<use f='linux/kernel/time/posix-timers.c' l='1279'/>
<use f='linux/kernel/time/posix-timers.c' l='1279'/>
<use f='linux/kernel/time/posix-timers.c' l='1309'/>
<use f='linux/kernel/time/posix-timers.c' l='1309'/>
<use f='linux/kernel/time/posix-timers.c' l='1324'/>
<use f='linux/kernel/time/posix-timers.c' l='1324'/>
<doc f='linux/kernel/time/posix-timers.c' l='654'>/*
 * Get the time remaining on a POSIX.1b interval timer.  This function
 * is ALWAYS called with spin_lock_irq on the timer, thus it must not
 * mess with irq.
 *
 * We have a couple of messes to clean up here.  First there is the case
 * of a timer that has a requeue pending.  These timers should appear to
 * be in the timer list with an expiry as if we were to requeue them
 * now.
 *
 * The second issue is the SIGEV_NONE timer which may be active but is
 * not really ever put in the timer list (to save system resources).
 * This timer may be expired, and if so, we will do it here.  Otherwise
 * it is the same as a requeue pending timer WRT to what we should
 * report.
 */</doc>
