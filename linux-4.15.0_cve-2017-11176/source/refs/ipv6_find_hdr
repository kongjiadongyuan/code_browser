<dec f='linux/include/net/ipv6.h' l='999' type='int ipv6_find_hdr(const struct sk_buff * skb, unsigned int * offset, int target, unsigned short * fragoff, int * fragflg)'/>
<doc f='linux/include/net/ipv6.h' l='998'>/* find specified header and get offset to it */</doc>
<def f='linux/net/ipv6/exthdrs_core.c' l='185' ll='280' type='int ipv6_find_hdr(const struct sk_buff * skb, unsigned int * offset, int target, unsigned short * fragoff, int * flags)'/>
<dec f='linux/net/ipv6/exthdrs_core.c' l='281' type='int ipv6_find_hdr(const struct sk_buff * , unsigned int * , int , unsigned short * , int * )'/>
<use f='linux/net/ipv6/exthdrs_core.c' l='281' c='ipv6_find_hdr'/>
<use f='linux/net/ipv6/exthdrs_core.c' l='281' u='a'/>
<use f='linux/net/ipv6/exthdrs_core.c' l='281' u='a'/>
<doc f='linux/net/ipv6/exthdrs_core.c' l='159'>/*
 * find the offset to specified header or the protocol number of last header
 * if target &lt; 0. &quot;last header&quot; is transport protocol header, ESP, or
 * &quot;No next header&quot;.
 *
 * Note that *offset is used as input/output parameter. an if it is not zero,
 * then it must be a valid offset to an inner IPv6 header. This can be used
 * to explore inner IPv6 header, eg. ICMPv6 error messages.
 *
 * If target header is found, its offset is set in *offset and return protocol
 * number. Otherwise, return -1.
 *
 * If the first fragment doesn&apos;t contain the final protocol header or
 * NEXTHDR_NONE it is considered invalid.
 *
 * Note that non-1st fragment is special case that &quot;the protocol number
 * of last header&quot; is &quot;next header&quot; field in Fragment header. In this case,
 * *offset is meaningless and fragment offset is stored in *fragoff if fragoff
 * isn&apos;t NULL.
 *
 * if flags is not NULL and it&apos;s a fragment, then the frag flag
 * IP6_FH_F_FRAG will be set. If it&apos;s an AH header, the
 * IP6_FH_F_AUTH flag is set and target &lt; 0, then this function will
 * stop at the AH header. If IP6_FH_F_SKIP_RH flag was passed, then this
 * function will skip all those routing headers, where segements_left was 0.
 */</doc>
<use f='linux/net/ipv6/netfilter/ip6_tables.c' l='86' u='c' c='ip6_packet_match'/>
