<dec f='linux/include/linux/usb.h' l='1769' type='int usb_get_descriptor(struct usb_device * dev, unsigned char desctype, unsigned char descindex, void * buf, int size)'/>
<doc f='linux/include/linux/usb.h' l='1768'>/* wrappers around usb_control_msg() for the most common standard requests */</doc>
<use f='linux/drivers/usb/core/config.c' l='837' u='c' c='usb_get_configuration'/>
<use f='linux/drivers/usb/core/config.c' l='867' u='c' c='usb_get_configuration'/>
<use f='linux/drivers/usb/core/config.c' l='936' u='c' c='usb_get_bos_descriptor'/>
<use f='linux/drivers/usb/core/config.c' l='964' u='c' c='usb_get_bos_descriptor'/>
<use f='linux/drivers/usb/core/hub.c' l='4692' u='c' c='check_highspeed'/>
<use f='linux/drivers/usb/core/hub.c' l='5382' u='c' c='descriptors_changed'/>
<def f='linux/drivers/usb/core/message.c' l='631' ll='654' type='int usb_get_descriptor(struct usb_device * dev, unsigned char type, unsigned char index, void * buf, int size)'/>
<dec f='linux/drivers/usb/core/message.c' l='655' type='int usb_get_descriptor(struct usb_device * , unsigned char , unsigned char , void * , int )'/>
<use f='linux/drivers/usb/core/message.c' l='655' c='usb_get_descriptor'/>
<use f='linux/drivers/usb/core/message.c' l='655' u='a'/>
<use f='linux/drivers/usb/core/message.c' l='655' u='a'/>
<use f='linux/drivers/usb/core/message.c' l='911' u='c' c='usb_get_device_descriptor'/>
<doc f='linux/drivers/usb/core/message.c' l='609'>/**
 * usb_get_descriptor - issues a generic GET_DESCRIPTOR request
 * @dev: the device whose descriptor is being retrieved
 * @type: the descriptor type (USB_DT_*)
 * @index: the number of the descriptor
 * @buf: where to put the descriptor
 * @size: how big is &quot;buf&quot;?
 * Context: !in_interrupt ()
 *
 * Gets a USB descriptor.  Convenience functions exist to simplify
 * getting some types of descriptors.  Use
 * usb_get_string() or usb_string() for USB_DT_STRING.
 * Device (USB_DT_DEVICE) and configuration descriptors (USB_DT_CONFIG)
 * are part of the device structure.
 * In addition to a number of USB-standard descriptors, some
 * devices also use class-specific or vendor-specific descriptors.
 *
 * This call is synchronous, and may not be used in an interrupt context.
 *
 * Return: The number of bytes received on success, or else the status code
 * returned by the underlying usb_control_msg() call.
 */</doc>
