<dec f='linux/include/linux/interrupt.h' l='215' type='void disable_irq(unsigned int irq)'/>
<use f='linux/include/linux/interrupt.h' l='381' u='c' c='disable_irq_lockdep'/>
<use f='linux/arch/x86/kernel/hpet.c' l='542' u='c' c='hpet_setup_irq'/>
<use f='linux/drivers/ata/libahci.c' l='2543' u='c' c='ahci_host_activate_multi_irqs'/>
<use f='linux/drivers/gpu/drm/i915/i915_drv.c' l='1894' u='c' c='i915_reset'/>
<use f='linux/drivers/net/ethernet/nvidia/forcedeth.c' l='1095' u='c' c='nv_disable_irq'/>
<use f='linux/drivers/net/ethernet/nvidia/forcedeth.c' l='1097' u='c' c='nv_disable_irq'/>
<use f='linux/drivers/net/ethernet/nvidia/forcedeth.c' l='1099' u='c' c='nv_disable_irq'/>
<use f='linux/drivers/net/ethernet/nvidia/forcedeth.c' l='1100' u='c' c='nv_disable_irq'/>
<use f='linux/drivers/net/ethernet/nvidia/forcedeth.c' l='1101' u='c' c='nv_disable_irq'/>
<use f='linux/drivers/net/ethernet/realtek/8139too.c' l='2227' u='c' c='rtl8139_poll_controller'/>
<use f='linux/drivers/net/phy/phy.c' l='770' u='c' c='phy_change'/>
<def f='linux/kernel/irq/manage.c' l='487' ll='491' type='void disable_irq(unsigned int irq)'/>
<dec f='linux/kernel/irq/manage.c' l='492' type='void disable_irq(unsigned int )'/>
<use f='linux/kernel/irq/manage.c' l='492' c='disable_irq'/>
<use f='linux/kernel/irq/manage.c' l='492' u='a'/>
<use f='linux/kernel/irq/manage.c' l='492' u='a'/>
<doc f='linux/kernel/irq/manage.c' l='475'>/**
 *	disable_irq - disable an irq and wait for completion
 *	@irq: Interrupt to disable
 *
 *	Disable the selected interrupt line.  Enables and Disables are
 *	nested.
 *	This function waits for any pending IRQ handlers for this interrupt
 *	to complete before returning. If you use this function while
 *	holding a resource the IRQ handler may need you will deadlock.
 *
 *	This function may be called - with care - from IRQ context.
 */</doc>
