<def f='linux/include/linux/fscrypt.h' l='199' ll='206' type='int fscrypt_prepare_link(struct dentry * old_dentry, struct inode * dir, struct dentry * dentry)'/>
<doc f='linux/include/linux/fscrypt.h' l='181'>/**
 * fscrypt_prepare_link - prepare to link an inode into a possibly-encrypted directory
 * @old_dentry: an existing dentry for the inode being linked
 * @dir: the target directory
 * @dentry: negative dentry for the target filename
 *
 * A new link can only be added to an encrypted directory if the directory&apos;s
 * encryption key is available --- since otherwise we&apos;d have no way to encrypt
 * the filename.  Therefore, we first set up the directory&apos;s encryption key (if
 * not already done) and return an error if it&apos;s unavailable.
 *
 * We also verify that the link will not violate the constraint that all files
 * in an encrypted directory tree use the same encryption policy.
 *
 * Return: 0 on success, -ENOKEY if the directory&apos;s encryption key is missing,
 * -EPERM if the link would result in an inconsistent encryption policy, or
 * another -errno code.
 */</doc>
<use f='linux/fs/ext4/namei.c' l='3220' u='c' c='ext4_link'/>
