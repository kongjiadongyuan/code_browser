<dec f='linux/drivers/usb/core/usb.h' l='84' type='int usb_port_suspend(struct usb_device * dev, pm_message_t msg)'/>
<use f='linux/drivers/usb/core/generic.c' l='217' u='c' c='generic_suspend'/>
<use f='linux/drivers/usb/core/hub.c' l='2316' u='c' c='usb_enumerate_device'/>
<def f='linux/drivers/usb/core/hub.c' l='3128' ll='3226' type='int usb_port_suspend(struct usb_device * udev, pm_message_t msg)'/>
<doc f='linux/drivers/usb/core/hub.c' l='3080'>/*
 * usb_port_suspend - suspend a usb device&apos;s upstream port
 * @udev: device that&apos;s no longer in active use, not a root hub
 * Context: must be able to sleep; device not locked; pm locks held
 *
 * Suspends a USB device that isn&apos;t in active use, conserving power.
 * Devices may wake out of a suspend, if anything important happens,
 * using the remote wakeup mechanism.  They may also be taken out of
 * suspend by the host, using usb_port_resume().  It&apos;s also routine
 * to disconnect devices while they are suspended.
 *
 * This only affects the USB hardware for a device; its interfaces
 * (and, for hubs, child devices) must already have been suspended.
 *
 * Selective port suspend reduces power; most suspended devices draw
 * less than 500 uA.  It&apos;s also used in OTG, along with remote wakeup.
 * All devices below the suspended port are also suspended.
 *
 * Devices leave suspend state when the host wakes them up.  Some devices
 * also support &quot;remote wakeup&quot;, where the device can activate the USB
 * tree above them to deliver data, such as a keypress or packet.  In
 * some cases, this wakes the USB host.
 *
 * Suspending OTG devices may trigger HNP, if that&apos;s been enabled
 * between a pair of dual-role devices.  That will change roles, such
 * as from A-Host to A-Peripheral or from B-Host back to B-Peripheral.
 *
 * Devices on USB hub ports have only one &quot;suspend&quot; state, corresponding
 * to ACPI D2, &quot;may cause the device to lose some context&quot;.
 * State transitions include:
 *
 *   - suspend, resume ... when the VBUS power link stays live
 *   - suspend, disconnect ... VBUS lost
 *
 * Once VBUS drop breaks the circuit, the port it&apos;s using has to go through
 * normal re-enumeration procedures, starting with enabling VBUS power.
 * Other than re-initializing the hub (plug/unplug, except for root hubs),
 * Linux (2.6) currently has NO mechanisms to initiate that:  no hub_wq
 * timer, no SRP, no requests through sysfs.
 *
 * If Runtime PM isn&apos;t enabled or used, non-SuperSpeed devices may not get
 * suspended until their bus goes into global suspend (i.e., the root
 * hub is suspended).  Nevertheless, we change @udev-&gt;state to
 * USB_STATE_SUSPENDED as this is the device&apos;s &quot;logical&quot; state.  The actual
 * upstream port setting is stored in @udev-&gt;port_is_suspended.
 *
 * Returns 0 on success, else negative errno.
 */</doc>
