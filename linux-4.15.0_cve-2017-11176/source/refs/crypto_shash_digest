<dec f='linux/include/crypto/hash.h' l='830' type='int crypto_shash_digest(struct shash_desc * desc, const u8 * data, unsigned int len, u8 * out)'/>
<doc f='linux/include/crypto/hash.h' l='816'>/**
 * crypto_shash_digest() - calculate message digest for buffer
 * @desc: see crypto_shash_final()
 * @data: see crypto_shash_update()
 * @len: see crypto_shash_update()
 * @out: see crypto_shash_final()
 *
 * This function is a &quot;short-hand&quot; for the function calls of crypto_shash_init,
 * crypto_shash_update and crypto_shash_final. The parameters have the same
 * meaning as discussed for those separate three functions.
 *
 * Return: 0 if the message digest creation was successful; &lt; 0 if an error
 *	   occurred
 */</doc>
<use f='linux/crypto/asymmetric_keys/pkcs7_verify.c' l='62' u='c' c='pkcs7_digest'/>
<use f='linux/crypto/asymmetric_keys/x509_public_key.c' l='82' u='c' c='x509_get_sig_params'/>
<use f='linux/crypto/hmac.c' l='66' u='c' c='hmac_setkey'/>
<def f='linux/crypto/shash.c' l='184' ll='198' type='int crypto_shash_digest(struct shash_desc * desc, const u8 * data, unsigned int len, u8 * out)'/>
<dec f='linux/crypto/shash.c' l='199' type='int crypto_shash_digest(struct shash_desc * , const u8 * , unsigned int , u8 * )'/>
<use f='linux/crypto/shash.c' l='199' c='crypto_shash_digest'/>
<use f='linux/crypto/shash.c' l='199' u='a'/>
<use f='linux/crypto/shash.c' l='199' u='a'/>
<use f='linux/crypto/shash.c' l='300' u='c' c='shash_ahash_digest'/>
<use f='linux/net/mac80211/fils_aead.c' l='38' u='c' c='aes_s2v'/>
<use f='linux/net/mac80211/fils_aead.c' l='43' u='c' c='aes_s2v'/>
