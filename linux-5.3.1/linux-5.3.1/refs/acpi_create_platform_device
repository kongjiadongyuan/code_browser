<dec f='linux-5.3.1/include/linux/acpi.h' l='617' type='struct platform_device * acpi_create_platform_device(struct acpi_device * , struct property_entry * )'/>
<use f='linux-5.3.1/drivers/acpi/acpi_apd.c' l='193' u='c' c='acpi_apd_create_device'/>
<use f='linux-5.3.1/drivers/acpi/acpi_apd.c' l='211' u='c' c='acpi_apd_create_device'/>
<def f='linux-5.3.1/drivers/acpi/acpi_platform.c' l='61' ll='131' type='struct platform_device * acpi_create_platform_device(struct acpi_device * adev, struct property_entry * properties)'/>
<dec f='linux-5.3.1/drivers/acpi/acpi_platform.c' l='132' type='struct platform_device * acpi_create_platform_device(struct acpi_device * , struct property_entry * )'/>
<use f='linux-5.3.1/drivers/acpi/acpi_platform.c' l='132' c='acpi_create_platform_device'/>
<use f='linux-5.3.1/drivers/acpi/acpi_platform.c' l='132' u='a'/>
<doc f='linux-5.3.1/drivers/acpi/acpi_platform.c' l='50'>/**
 * acpi_create_platform_device - Create platform device for ACPI device node
 * @adev: ACPI device node to create a platform device for.
 * @properties: Optional collection of build-in properties.
 *
 * Check if the given @adev can be represented as a platform device and, if
 * that&apos;s the case, create and register a platform device, populate its common
 * resources and returns a pointer to it.  Otherwise, return %NULL.
 *
 * Name of the platform device will be the same as @adev&apos;s.
 */</doc>
<use f='linux-5.3.1/drivers/acpi/dptf/int340x_thermal.c' l='34' u='c' c='int340x_thermal_handler_attach'/>
<use f='linux-5.3.1/drivers/acpi/dptf/int340x_thermal.c' l='38' u='c' c='int340x_thermal_handler_attach'/>
<use f='linux-5.3.1/drivers/acpi/scan.c' l='1894' u='c' c='acpi_default_enumeration'/>
