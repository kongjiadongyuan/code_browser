<use f='linux-5.3.1/include/drm/drm_atomic_state_helper.h' l='75' c='__drm_atomic_helper_private_obj_duplicate_state'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='210'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='217'/>
<def f='linux-5.3.1/include/drm/drm_atomic.h' l='243' ll='267'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='294'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='447' c='drm_atomic_private_obj_init'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='450' c='drm_atomic_private_obj_fini'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='454' c='drm_atomic_get_private_obj_state'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='457' c='drm_atomic_get_old_private_obj_state'/>
<use f='linux-5.3.1/include/drm/drm_atomic.h' l='460' c='drm_atomic_get_new_private_obj_state'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic.c' l='205' c='drm_atomic_state_default_clear'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic.c' l='718' c='drm_atomic_private_obj_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic.c' l='739' c='drm_atomic_private_obj_fini'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic.c' l='762' c='drm_atomic_get_private_obj_state'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic.c' l='816' c='drm_atomic_get_old_private_obj_state'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic.c' l='838' c='drm_atomic_get_new_private_obj_state'/>
<size>88</size>
<doc f='linux-5.3.1/include/drm/drm_atomic.h' l='221'>/**
 * struct drm_private_obj - base struct for driver private atomic object
 *
 * A driver private object is initialized by calling
 * drm_atomic_private_obj_init() and cleaned up by calling
 * drm_atomic_private_obj_fini().
 *
 * Currently only tracks the state update functions and the opaque driver
 * private state itself, but in the future might also track which
 * &amp;drm_modeset_lock is required to duplicate and update this object&apos;s state.
 *
 * All private objects must be initialized before the DRM device they are
 * attached to is registered to the DRM subsystem (call to drm_dev_register())
 * and should stay around until this DRM device is unregistered (call to
 * drm_dev_unregister()). In other words, private objects lifetime is tied
 * to the DRM device lifetime. This implies that:
 *
 * 1/ all calls to drm_atomic_private_obj_init() must be done before calling
 *    drm_dev_register()
 * 2/ all calls to drm_atomic_private_obj_fini() must be done after calling
 *    drm_dev_unregister()
 */</doc>
<mbr r='drm_private_obj::head' o='0' t='struct list_head'/>
<mbr r='drm_private_obj::lock' o='128' t='struct drm_modeset_lock'/>
<mbr r='drm_private_obj::state' o='576' t='struct drm_private_state *'/>
<mbr r='drm_private_obj::funcs' o='640' t='const struct drm_private_state_funcs *'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='2675' c='drm_atomic_helper_swap_state'/>
<size>88</size>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_state_helper.c' l='496' c='__drm_atomic_helper_private_obj_duplicate_state'/>
<size>88</size>
<use f='linux-5.3.1/include/drm/drm_dp_mst_helper.h' l='453'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3645' c='drm_dp_mst_duplicate_state'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3684' c='drm_dp_mst_destroy_state'/>
<size>88</size>
<use f='linux-5.3.1/drivers/gpu/drm/drm_modeset_lock.c' l='398' c='drm_modeset_lock_all_ctx'/>
<size>88</size>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.h' l='1682'/>
<size>88</size>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_bw.c' l='390' c='intel_bw_duplicate_state'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_bw.c' l='403' c='intel_bw_destroy_state'/>
<size>88</size>
