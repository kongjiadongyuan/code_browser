<dec f='linux-5.3.1/include/drm/drm_mm.h' l='402' type='int drm_mm_reserve_node(struct drm_mm * mm, struct drm_mm_node * node)'/>
<doc f='linux-5.3.1/include/drm/drm_mm.h' l='399'>/*
 * Basic range manager support (drm_mm.c)
 */</doc>
<def f='linux-5.3.1/drivers/gpu/drm/drm_mm.c' l='400' ll='440' type='int drm_mm_reserve_node(struct drm_mm * mm, struct drm_mm_node * node)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_mm.c' l='441' type='int drm_mm_reserve_node(struct drm_mm * , struct drm_mm_node * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_mm.c' l='441' c='drm_mm_reserve_node'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_mm.c' l='441' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_mm.c' l='386'>/**
 * drm_mm_reserve_node - insert an pre-initialized node
 * @mm: drm_mm allocator to insert @node into
 * @node: drm_mm_node to insert
 *
 * This functions inserts an already set-up &amp;drm_mm_node into the allocator,
 * meaning that start, size and color must be set by the caller. All other
 * fields must be cleared to 0. This is useful to initialize the allocator with
 * preallocated objects which must be set-up before the range allocator can be
 * set-up, e.g. when taking over a firmware framebuffer.
 *
 * Returns:
 * 0 on success, -ENOSPC if there&apos;s no hole where @node is.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_stolen.c' l='639' u='c' c='i915_gem_object_create_stolen_for_preallocated'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_gem_gtt.c' l='3963' u='c' c='i915_gem_gtt_reserve'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_gem_gtt.c' l='3972' u='c' c='i915_gem_gtt_reserve'/>
