<dec f='linux-5.3.1/include/linux/sched/jobctl.h' l='36' type='void task_clear_jobctl_trapping(struct task_struct * task)'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='138' u='c' c='__ptrace_unlink'/>
<def f='linux-5.3.1/kernel/signal.c' l='313' ll='320' type='void task_clear_jobctl_trapping(struct task_struct * task)'/>
<use f='linux-5.3.1/kernel/signal.c' l='347' u='c' c='task_clear_jobctl_pending'/>
<use f='linux-5.3.1/kernel/signal.c' l='2181' u='c' c='ptrace_stop'/>
<doc f='linux-5.3.1/kernel/signal.c' l='301'>/**
 * task_clear_jobctl_trapping - clear jobctl trapping bit
 * @task: target task
 *
 * If JOBCTL_TRAPPING is set, a ptracer is waiting for us to enter TRACED.
 * Clear it and wake up the ptracer.  Note that we don&apos;t need any further
 * locking.  @task-&gt;siglock guarantees that @task-&gt;parent points to the
 * ptracer.
 *
 * CONTEXT:
 * Must be called with @task-&gt;sighand-&gt;siglock held.
 */</doc>
