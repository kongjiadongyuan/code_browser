<dec f='linux-5.3.1/include/linux/inetdevice.h' l='173' type='struct net_device * __ip_dev_find(struct net * net, __be32 addr, bool devref)'/>
<use f='linux-5.3.1/include/linux/inetdevice.h' l='176' u='c' c='ip_dev_find'/>
<def f='linux-5.3.1/net/ipv4/devinet.c' l='150' ll='177' type='struct net_device * __ip_dev_find(struct net * net, __be32 addr, bool devref)'/>
<dec f='linux-5.3.1/net/ipv4/devinet.c' l='178' type='struct net_device * __ip_dev_find(struct net * , __be32 , bool )'/>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='178' c='__ip_dev_find'/>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='178' u='a'/>
<doc f='linux-5.3.1/net/ipv4/devinet.c' l='142'>/**
 * __ip_dev_find - find the first device with a given source address.
 * @net: the net namespace
 * @addr: the source address
 * @devref: if true, take a reference on the found device
 *
 * If a caller uses devref=false, it should be protected by RCU, or RTNL
 */</doc>
<use f='linux-5.3.1/net/ipv4/igmp.c' l='1821' u='c' c='ip_mc_find_dev'/>
<use f='linux-5.3.1/net/ipv4/route.c' l='2492' u='c' c='ip_route_output_key_hash_rcu'/>
<use f='linux-5.3.1/net/ipv4/route.c' l='2517' u='c' c='ip_route_output_key_hash_rcu'/>
