<dec f='linux-5.3.1/include/drm/drm_damage_helper.h' l='70' type='int drm_atomic_helper_dirtyfb(struct drm_framebuffer * fb, struct drm_file * file_priv, unsigned int flags, unsigned int color, struct drm_clip_rect * clips, unsigned int num_clips)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='160' ll='248' type='int drm_atomic_helper_dirtyfb(struct drm_framebuffer * fb, struct drm_file * file_priv, unsigned int flags, unsigned int color, struct drm_clip_rect * clips, unsigned int num_clips)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='249' type='int drm_atomic_helper_dirtyfb(struct drm_framebuffer * , struct drm_file * , unsigned int , unsigned int , struct drm_clip_rect * , unsigned int )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='249' c='drm_atomic_helper_dirtyfb'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='249' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='140'>/**
 * drm_atomic_helper_dirtyfb - Helper for dirtyfb.
 * @fb: DRM framebuffer.
 * @file_priv: Drm file for the ioctl call.
 * @flags: Dirty fb annotate flags.
 * @color: Color for annotate fill.
 * @clips: Dirty region.
 * @num_clips: Count of clip in clips.
 *
 * A helper to implement &amp;drm_framebuffer_funcs.dirty using damage interface
 * during plane update. If num_clips is 0 then this helper will do a full plane
 * update. This is the same behaviour expected by DIRTFB IOCTL.
 *
 * Note that this helper is blocking implementation. This is what current
 * drivers and userspace expect in their DIRTYFB IOCTL implementation, as a way
 * to rate-limit userspace and make sure its rendering doesn&apos;t get ahead of
 * uploading new data too much.
 *
 * Return: Zero on success, negative errno on failure.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='234'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='234'/>
