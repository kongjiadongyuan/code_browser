<dec f='linux-5.3.1/include/net/inet_connection_sock.h' l='159' type='struct sock * inet_csk_clone_lock(const struct sock * sk, const struct request_sock * req, const gfp_t priority)'/>
<def f='linux-5.3.1/net/ipv4/inet_connection_sock.c' l='781' ll='816' type='struct sock * inet_csk_clone_lock(const struct sock * sk, const struct request_sock * req, const gfp_t priority)'/>
<dec f='linux-5.3.1/net/ipv4/inet_connection_sock.c' l='817' type='struct sock * inet_csk_clone_lock(const struct sock * , const struct request_sock * , const gfp_t )'/>
<use f='linux-5.3.1/net/ipv4/inet_connection_sock.c' l='817' c='inet_csk_clone_lock'/>
<use f='linux-5.3.1/net/ipv4/inet_connection_sock.c' l='817' u='a'/>
<doc f='linux-5.3.1/net/ipv4/inet_connection_sock.c' l='773'>/**
 *	inet_csk_clone_lock - clone an inet socket, and lock its clone
 *	@sk: the socket to clone
 *	@req: request_sock
 *	@priority: for allocation (%GFP_KERNEL, %GFP_ATOMIC, etc)
 *
 *	Caller must unlock socket even in error path (bh_unlock_sock(newsk))
 */</doc>
<use f='linux-5.3.1/net/ipv4/tcp_minisocks.c' l='459' u='c' c='tcp_create_openreq_child'/>
