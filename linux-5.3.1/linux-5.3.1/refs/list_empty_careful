<def f='linux-5.3.1/include/linux/list.h' l='284' ll='288' type='int list_empty_careful(const struct list_head * head)'/>
<use f='linux-5.3.1/include/linux/fs.h' l='2401' u='c' c='break_lease'/>
<use f='linux-5.3.1/include/linux/fs.h' l='2415' u='c' c='break_deleg'/>
<use f='linux-5.3.1/include/linux/fs.h' l='2445' u='c' c='break_layout'/>
<doc f='linux-5.3.1/include/linux/list.h' l='271'>/**
 * list_empty_careful - tests whether a list is empty and not being modified
 * @head: the list to test
 *
 * Description:
 * tests whether a list is empty _and_ checks that no other CPU might be
 * in the process of modifying either member (next or prev)
 *
 * NOTE: using list_empty_careful() without synchronization
 * can only be safe if the only activity that can happen
 * to the list entry is list_del_init(). Eg. it cannot be used
 * if another CPU could re-list_add() it.
 */</doc>
<use f='linux-5.3.1/block/blk-mq-sched.c' l='187' u='c' c='blk_mq_sched_dispatch_requests'/>
<use f='linux-5.3.1/block/blk-mq-sched.c' l='338' u='c' c='__blk_mq_sched_bio_merge'/>
<use f='linux-5.3.1/block/blk-mq.c' l='68' u='c' c='blk_mq_hctx_has_pending'/>
<use f='linux-5.3.1/block/blk-mq.c' l='1120' u='c' c='blk_mq_mark_tag_wait'/>
<use f='linux-5.3.1/block/blk-mq.c' l='1329' u='c' c='blk_mq_dispatch_rq_list'/>
<use f='linux-5.3.1/block/kyber-iosched.c' l='719' u='c' c='kyber_get_domain_token'/>
<use f='linux-5.3.1/block/kyber-iosched.c' l='739' u='c' c='kyber_get_domain_token'/>
<use f='linux-5.3.1/block/kyber-iosched.c' l='851' u='c' c='kyber_has_work'/>
<use f='linux-5.3.1/block/kyber-iosched.c' l='947' u='c' c='kyber_read_waiting_show'/>
<use f='linux-5.3.1/block/kyber-iosched.c' l='947' u='c' c='kyber_write_waiting_show'/>
<use f='linux-5.3.1/block/kyber-iosched.c' l='947' u='c' c='kyber_discard_waiting_show'/>
<use f='linux-5.3.1/block/kyber-iosched.c' l='947' u='c' c='kyber_other_waiting_show'/>
<use f='linux-5.3.1/block/mq-deadline.c' l='583' u='c' c='dd_has_work'/>
<use f='linux-5.3.1/block/mq-deadline.c' l='584' u='c' c='dd_has_work'/>
<use f='linux-5.3.1/block/mq-deadline.c' l='585' u='c' c='dd_has_work'/>
<use f='linux-5.3.1/drivers/leds/led-triggers.c' l='266' u='c' c='led_trigger_unregister'/>
<use f='linux-5.3.1/fs/aio.c' l='1425' u='c' c='aio_complete_rw'/>
<use f='linux-5.3.1/fs/eventpoll.c' l='380' u='c' c='ep_events_available'/>
<use f='linux-5.3.1/fs/lockd/svcsubs.c' l='171' u='c' c='nlm_traverse_locks'/>
<use f='linux-5.3.1/fs/lockd/svcsubs.c' l='235' u='c' c='nlm_file_inuse'/>
<use f='linux-5.3.1/fs/locks.c' l='935' u='c' c='posix_test_lock'/>
<use f='linux-5.3.1/fs/locks.c' l='1390' u='c' c='locks_mandatory_locked'/>
<use f='linux-5.3.1/fs/locks.c' l='1696' u='c' c='lease_get_mtime'/>
<use f='linux-5.3.1/fs/locks.c' l='1742' u='c' c='fcntl_getlease'/>
<use f='linux-5.3.1/fs/nfs/pagelist.c' l='937' u='c' c='nfs_can_coalesce_requests'/>
<use f='linux-5.3.1/fs/nfs/pagelist.c' l='938' u='c' c='nfs_can_coalesce_requests'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='1217' u='c' c='nfs_flush_incompatible'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='1218' u='c' c='nfs_flush_incompatible'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='1325' u='c' c='nfs_can_extend_write'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='1326' u='c' c='nfs_can_extend_write'/>
<use f='linux-5.3.1/kernel/sched/swait.c' l='126' u='c' c='finish_swait'/>
<use f='linux-5.3.1/kernel/sched/wait.c' l='362' u='c' c='finish_wait'/>
<use f='linux-5.3.1/mm/shmem.c' l='1053' u='c' c='shmem_setattr'/>
<use f='linux-5.3.1/mm/shmem.c' l='1890' u='c' c='shmem_getpage_gfp'/>
<use f='linux-5.3.1/security/selinux/hooks.c' l='348' u='c' c='inode_free_security'/>
<def f='linux-5.3.1/tools/include/linux/list.h' l='205' ll='209' type='int list_empty_careful(const struct list_head * head)'/>
<doc f='linux-5.3.1/tools/include/linux/list.h' l='192'>/**
 * list_empty_careful - tests whether a list is empty and not being modified
 * @head: the list to test
 *
 * Description:
 * tests whether a list is empty _and_ checks that no other CPU might be
 * in the process of modifying either member (next or prev)
 *
 * NOTE: using list_empty_careful() without synchronization
 * can only be safe if the only activity that can happen
 * to the list entry is list_del_init(). Eg. it cannot be used
 * if another CPU could re-list_add() it.
 */</doc>
