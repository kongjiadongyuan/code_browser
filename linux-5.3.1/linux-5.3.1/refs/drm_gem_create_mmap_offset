<dec f='linux-5.3.1/include/drm/drm_gem.h' l='377' type='int drm_gem_create_mmap_offset(struct drm_gem_object * obj)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='329' u='c' c='drm_gem_dumb_map_offset'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='515' ll='518' type='int drm_gem_create_mmap_offset(struct drm_gem_object * obj)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='519' type='int drm_gem_create_mmap_offset(struct drm_gem_object * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='519' c='drm_gem_create_mmap_offset'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='519' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='501'>/**
 * drm_gem_create_mmap_offset - create a fake mmap offset for an object
 * @obj: obj in question
 *
 * GEM memory mapping works by handing back to userspace a fake mmap offset
 * it can use in a subsequent mmap(2) call.  The DRM core code then looks
 * up the object based on the offset and sets up the various memory mapping
 * structures.
 *
 * This routine allocates and attaches a fake offset for @obj.
 *
 * Drivers can call drm_gem_free_mmap_offset() before freeing @obj to release
 * the fake offset again.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_mman.c' l='439' u='c' c='create_mmap_offset'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_mman.c' l='452' u='c' c='create_mmap_offset'/>
