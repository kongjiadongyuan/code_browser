<dec f='linux-5.3.1/include/linux/capability.h' l='251' type='bool capable_wrt_inode_uidgid(const struct inode * inode, int cap)'/>
<use f='linux-5.3.1/fs/attr.c' l='26' u='c' c='chown_ok'/>
<use f='linux-5.3.1/fs/attr.c' l='39' u='c' c='chgrp_ok'/>
<use f='linux-5.3.1/fs/attr.c' l='95' u='c' c='setattr_prepare'/>
<use f='linux-5.3.1/fs/attr.c' l='199' u='c' c='setattr_copy'/>
<use f='linux-5.3.1/fs/inode.c' l='2053' u='c' c='inode_init_owner'/>
<use f='linux-5.3.1/fs/namei.c' l='346' u='c' c='generic_permission'/>
<use f='linux-5.3.1/fs/namei.c' l='349' u='c' c='generic_permission'/>
<use f='linux-5.3.1/fs/namei.c' l='359' u='c' c='generic_permission'/>
<use f='linux-5.3.1/fs/namei.c' l='367' u='c' c='generic_permission'/>
<use f='linux-5.3.1/fs/namei.c' l='2764' u='c' c='__check_sticky'/>
<use f='linux-5.3.1/fs/posix_acl.c' l='656' u='c' c='posix_acl_update_mode'/>
<def f='linux-5.3.1/kernel/capability.c' l='502' ll='507' type='bool capable_wrt_inode_uidgid(const struct inode * inode, int cap)'/>
<dec f='linux-5.3.1/kernel/capability.c' l='508' type='bool capable_wrt_inode_uidgid(const struct inode * , int )'/>
<use f='linux-5.3.1/kernel/capability.c' l='508' c='capable_wrt_inode_uidgid'/>
<use f='linux-5.3.1/kernel/capability.c' l='508' u='a'/>
<doc f='linux-5.3.1/kernel/capability.c' l='493'>/**
 * capable_wrt_inode_uidgid - Check nsown_capable and uid and gid mapped
 * @inode: The inode in question
 * @cap: The capability in question
 *
 * Return true if the current task has the given capability targeted at
 * its own user namespace and that the given inode&apos;s uid and gid are
 * mapped into the current user namespace.
 */</doc>
<use f='linux-5.3.1/security/commoncap.c' l='492' u='c' c='cap_convert_nscap'/>
<use f='linux-5.3.1/security/commoncap.c' l='958' u='c' c='cap_inode_removexattr'/>
