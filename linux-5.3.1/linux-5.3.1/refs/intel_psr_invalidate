<dec f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_psr.h' l='24' type='void intel_psr_invalidate(struct drm_i915_private * dev_priv, unsigned int frontbuffer_bits, enum fb_op_origin origin)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_frontbuffer.c' l='80' u='c' c='__intel_fb_obj_invalidate'/>
<def f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_psr.c' l='1138' ll='1160' type='void intel_psr_invalidate(struct drm_i915_private * dev_priv, unsigned int frontbuffer_bits, enum fb_op_origin origin)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_psr.c' l='1125'>/**
 * intel_psr_invalidate - Invalidade PSR
 * @dev_priv: i915 device
 * @frontbuffer_bits: frontbuffer plane tracking bits
 * @origin: which operation caused the invalidate
 *
 * Since the hardware frontbuffer tracking has gaps we need to integrate
 * with the software frontbuffer tracking. This function gets called every
 * time frontbuffer rendering starts and a buffer gets dirtied. PSR must be
 * disabled if the frontbuffer mask contains a buffer relevant to PSR.
 *
 * Dirty frontbuffers relevant to PSR are tracked in busy_frontbuffer_bits.&quot;
 */</doc>
