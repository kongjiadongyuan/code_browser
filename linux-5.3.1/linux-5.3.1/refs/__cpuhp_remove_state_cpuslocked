<dec f='linux-5.3.1/include/linux/cpuhotplug.h' l='321' type='void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke)'/>
<use f='linux-5.3.1/include/linux/cpuhotplug.h' l='347' u='c' c='cpuhp_remove_state_nocalls_cpuslocked'/>
<def f='linux-5.3.1/kernel/cpu.c' l='1856' ll='1891' type='void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke)'/>
<dec f='linux-5.3.1/kernel/cpu.c' l='1892' type='void __cpuhp_remove_state_cpuslocked(enum cpuhp_state , bool )'/>
<use f='linux-5.3.1/kernel/cpu.c' l='1892' c='__cpuhp_remove_state_cpuslocked'/>
<use f='linux-5.3.1/kernel/cpu.c' l='1892' u='a'/>
<use f='linux-5.3.1/kernel/cpu.c' l='1897' u='c' c='__cpuhp_remove_state'/>
<doc f='linux-5.3.1/kernel/cpu.c' l='1846'>/**
 * __cpuhp_remove_state_cpuslocked - Remove the callbacks for an hotplug machine state
 * @state:	The state to remove
 * @invoke:	If true, the teardown function is invoked for cpus where
 *		cpu state &gt;= @state
 *
 * The caller needs to hold cpus read locked while calling this function.
 * The teardown callback is currently not allowed to fail. Think
 * about module removal!
 */</doc>
