<def f='linux-5.3.1/include/linux/jhash.h' l='70' ll='107' type='u32 jhash(const void * key, u32 length, u32 initval)'/>
<doc f='linux-5.3.1/include/linux/jhash.h' l='60'>/* jhash - hash an arbitrary key
 * @k: sequence of bytes as key
 * @length: the length of the key
 * @initval: the previous hash, or an arbitray value
 *
 * The generic version, hashes an arbitrary sequence of bytes.
 * No alignment or length assumptions are made about the input key.
 *
 * Returns the hash value of the key. The result depends on endianness.
 */</doc>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='140' u='c' c='rht_key_get_hash'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='149' u='c' c='rht_key_get_hash'/>
<use f='linux-5.3.1/kernel/workqueue.c' l='3384' u='c' c='wqattrs_hash'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='1041' u='r' c='rhashtable_init'/>
<use f='linux-5.3.1/include/net/udp.h' l='226' u='c' c='udp_flow_src_port'/>
<use f='linux-5.3.1/net/ipv4/cipso_ipv4.c' l='151' u='c' c='cipso_v4_map_cache_hash'/>
<use f='linux-5.3.1/net/ipv4/tcp_cong.c' l='81' u='c' c='tcp_register_congestion_control'/>
<use f='linux-5.3.1/net/ipv6/calipso.c' l='117' u='c' c='calipso_map_cache_hash'/>
<use f='linux-5.3.1/net/ipv6/route.c' l='1478' u='c' c='rt6_exception_hash'/>
