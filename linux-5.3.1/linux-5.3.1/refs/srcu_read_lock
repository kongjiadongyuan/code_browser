<def f='linux-5.3.1/include/linux/srcu.h' l='150' ll='157' type='int srcu_read_lock(struct srcu_struct * ssp)'/>
<doc f='linux-5.3.1/include/linux/srcu.h' l='133'>/**
 * srcu_read_lock - register a new reader for an SRCU-protected structure.
 * @ssp: srcu_struct in which to register the new reader.
 *
 * Enter an SRCU read-side critical section.  Note that SRCU read-side
 * critical sections may be nested.  However, it is illegal to
 * call anything that waits on an SRCU grace period for the same
 * srcu_struct, whether directly or indirectly.  Please note that
 * one way to indirectly wait on an SRCU grace period is to acquire
 * a mutex that is held elsewhere while calling synchronize_srcu() or
 * synchronize_srcu_expedited().
 *
 * Note that srcu_read_lock() and the matching srcu_read_unlock() must
 * occur in the same context, for example, it is illegal to invoke
 * srcu_read_unlock() in an irq handler if the matching srcu_read_lock()
 * was invoked in process context.
 */</doc>
<use f='linux-5.3.1/block/blk-mq.c' l='635' u='c' c='hctx_lock'/>
<use f='linux-5.3.1/drivers/base/core.c' l='64' u='c' c='device_links_read_lock'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='333' u='c' c='device_wakeup_arm_wake_irqs'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='349' u='c' c='device_wakeup_disarm_wake_irqs'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='802' u='c' c='pm_print_active_wakeup_sources'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='1032' u='c' c='wakeup_sources_stats_seq_start'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_drv.c' l='469' u='c' c='drm_dev_enter'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gt/intel_reset.c' l='1426' u='c' c='i915_reset_trylock'/>
<use f='linux-5.3.1/drivers/md/dm.c' l='706' u='c' c='dm_get_live_table'/>
<use f='linux-5.3.1/fs/notify/fsnotify.c' l='351' u='c' c='fsnotify'/>
<use f='linux-5.3.1/fs/notify/mark.c' l='355' u='c' c='fsnotify_finish_user_wait'/>
<use f='linux-5.3.1/fs/notify/mark.c' l='520' u='c' c='fsnotify_grab_connector'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='1671' u='c' c='__dquot_alloc_space'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='1732' u='c' c='dquot_alloc_inode'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='1778' u='c' c='dquot_claim_space_nodirty'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='1820' u='c' c='dquot_reclaim_space_nodirty'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='1867' u='c' c='__dquot_free_space'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='1914' u='c' c='dquot_free_inode'/>
<use f='linux-5.3.1/kernel/events/core.c' l='10131' u='c' c='perf_init_event'/>
<use f='linux-5.3.1/kernel/notifier.c' l='499' u='c' c='__srcu_notifier_call_chain'/>
<use f='linux-5.3.1/kernel/rcu/srcutree.c' l='852' u='c' c='__call_srcu'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='57' u='c' c='__mmu_notifier_release'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='108' u='c' c='__mmu_notifier_clear_flush_young'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='125' u='c' c='__mmu_notifier_clear_young'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='141' u='c' c='__mmu_notifier_test_young'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='160' u='c' c='__mmu_notifier_change_pte'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='174' u='c' c='__mmu_notifier_invalidate_range_start'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='198' u='c' c='__mmu_notifier_invalidate_range_end'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='230' u='c' c='__mmu_notifier_invalidate_range'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='348' u='c' c='mmu_notifier_unregister'/>
<use f='linux-5.3.1/net/core/netpoll.c' l='206' u='c' c='netpoll_poll_disable'/>
