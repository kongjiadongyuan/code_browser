<dec f='linux-5.3.1/include/linux/pm_domain.h' l='368' type='void dev_pm_domain_detach(struct device * dev, bool power_off)'/>
<use f='linux-5.3.1/drivers/base/platform.c' l='623' u='c' c='platform_drv_probe'/>
<use f='linux-5.3.1/drivers/base/platform.c' l='648' u='c' c='platform_drv_remove'/>
<def f='linux-5.3.1/drivers/base/power/common.c' l='183' ll='187' type='void dev_pm_domain_detach(struct device * dev, bool power_off)'/>
<dec f='linux-5.3.1/drivers/base/power/common.c' l='188' type='void dev_pm_domain_detach(struct device * , bool )'/>
<use f='linux-5.3.1/drivers/base/power/common.c' l='188' c='dev_pm_domain_detach'/>
<use f='linux-5.3.1/drivers/base/power/common.c' l='188' u='a'/>
<doc f='linux-5.3.1/drivers/base/power/common.c' l='170'>/**
 * dev_pm_domain_detach - Detach a device from its PM domain.
 * @dev: Device to detach.
 * @power_off: Used to indicate whether we should power off the device.
 *
 * This functions will reverse the actions from dev_pm_domain_attach() and
 * dev_pm_domain_attach_by_id(), thus it detaches @dev from its PM domain.
 * Typically it should be invoked during the remove phase, either from
 * subsystem level code or from drivers.
 *
 * Callers must ensure proper synchronization of this function with power
 * management callbacks.
 */</doc>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='402' u='c' c='i2c_device_probe'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='424' u='c' c='i2c_device_remove'/>
