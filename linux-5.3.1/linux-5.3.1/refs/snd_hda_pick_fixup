<dec f='linux-5.3.1/sound/pci/hda/hda_local.h' l='358' type='void snd_hda_pick_fixup(struct hda_codec * codec, const struct hda_model_fixup * models, const struct snd_pci_quirk * quirk, const struct hda_fixup * fixlist)'/>
<def f='linux-5.3.1/sound/pci/hda/hda_auto_parser.c' l='967' ll='1035' type='void snd_hda_pick_fixup(struct hda_codec * codec, const struct hda_model_fixup * models, const struct snd_pci_quirk * quirk, const struct hda_fixup * fixlist)'/>
<dec f='linux-5.3.1/sound/pci/hda/hda_auto_parser.c' l='1036' type='void snd_hda_pick_fixup(struct hda_codec * , const struct hda_model_fixup * , const struct snd_pci_quirk * , const struct hda_fixup * )'/>
<use f='linux-5.3.1/sound/pci/hda/hda_auto_parser.c' l='1036' c='snd_hda_pick_fixup'/>
<use f='linux-5.3.1/sound/pci/hda/hda_auto_parser.c' l='1036' u='a'/>
<doc f='linux-5.3.1/sound/pci/hda/hda_auto_parser.c' l='952'>/**
 * snd_hda_pick_fixup - Pick up a fixup matching with PCI/codec SSID or model string
 * @codec: the HDA codec
 * @models: NULL-terminated model string list
 * @quirk: zero-terminated PCI/codec SSID quirk list
 * @fixlist: the fixup list
 *
 * Pick up a fixup entry matching with the given model string or SSID.
 * If a fixup was already set beforehand, the function doesn&apos;t do anything.
 * When a special model string &quot;nofixup&quot; is given, also no fixup is applied.
 *
 * The function tries to find the matching model name at first, if given.
 * If nothing matched, try to look up the PCI SSID.
 * If still nothing matched, try to look up the codec SSID.
 */</doc>
