<def f='linux-5.3.1/include/linux/rculist.h' l='154' ll='160' type='void hlist_del_init_rcu(struct hlist_node * n)'/>
<use f='linux-5.3.1/include/linux/hashtable.h' l='116' u='c' c='hash_del_rcu'/>
<doc f='linux-5.3.1/include/linux/rculist.h' l='134'>/**
 * hlist_del_init_rcu - deletes entry from hash list with re-initialization
 * @n: the element to delete from the hash list.
 *
 * Note: list_unhashed() on the node return true after this. It is
 * useful for RCU based read lockfree traversal if the writer side
 * must know if the list entry is still hashed or already unhashed.
 *
 * In particular, it means that we can not poison the forward pointers
 * that may still be used for walking the hash list and we can only
 * zero the pprev pointer so list_unhashed() will return true after
 * this.
 *
 * The caller must take whatever precautions are necessary (such as
 * holding appropriate locks) to avoid racing with another
 * list-mutation primitive, such as hlist_add_head_rcu() or
 * hlist_del_rcu(), running on this same list.  However, it is
 * perfectly legal to run concurrently with the _rcu list-traversal
 * primitives, such as hlist_for_each_entry_rcu().
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_hashtab.c' l='189' u='c' c='drm_ht_remove_key'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_hashtab.c' l='197' u='c' c='drm_ht_remove_item'/>
<use f='linux-5.3.1/fs/namespace.c' l='810' u='c' c='unhash_mnt'/>
<use f='linux-5.3.1/fs/namespace.c' l='865' u='c' c='mnt_change_mountpoint'/>
<use f='linux-5.3.1/fs/notify/mark.c' l='248' u='c' c='fsnotify_put_mark'/>
<use f='linux-5.3.1/fs/proc/proc_sysctl.c' l='284' u='c' c='proc_sys_prune_dcache'/>
<use f='linux-5.3.1/fs/proc/proc_sysctl.c' l='517' u='c' c='proc_sys_evict_inode'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='79' u='c' c='__mmu_notifier_release'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='362' u='c' c='mmu_notifier_unregister'/>
<use f='linux-5.3.1/mm/mmu_notifier.c' l='389' u='c' c='mmu_notifier_unregister_no_release'/>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='139' u='c' c='inet_hash_remove'/>
<use f='linux-5.3.1/net/ipv4/inet_hashtables.c' l='223' u='c' c='inet_unhash2'/>
<use f='linux-5.3.1/net/ipv4/ip_tunnel.c' l='208' u='c' c='ip_tunnel_del'/>
<use f='linux-5.3.1/net/ipv4/udp.c' l='1867' u='c' c='udp_lib_unhash'/>
<use f='linux-5.3.1/net/ipv4/udp.c' l='1900' u='c' c='udp_lib_rehash'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='1266' u='c' c='ipv6_del_addr'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='3757' u='c' c='addrconf_ifdown'/>
<use f='linux-5.3.1/net/ipv6/anycast.c' l='229' u='c' c='ipv6_del_acaddr_hash'/>
<use f='linux-5.3.1/net/sunrpc/cache.c' l='106' u='c' c='sunrpc_cache_add_entry'/>
<use f='linux-5.3.1/net/sunrpc/cache.c' l='463' u='c' c='cache_clean'/>
<use f='linux-5.3.1/net/sunrpc/cache.c' l='534' u='c' c='cache_purge'/>
<use f='linux-5.3.1/net/sunrpc/cache.c' l='1888' u='c' c='sunrpc_cache_unhash'/>
