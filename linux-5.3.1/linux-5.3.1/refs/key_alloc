<dec f='linux-5.3.1/include/linux/key.h' l='257' type='struct key * key_alloc(struct key_type * type, const char * desc, kuid_t uid, kgid_t gid, const struct cred * cred, key_perm_t perm, unsigned long flags, struct key_restriction * restrict_link)'/>
<def f='linux-5.3.1/security/keys/key.c' l='224' ll='355' type='struct key * key_alloc(struct key_type * type, const char * desc, kuid_t uid, kgid_t gid, const struct cred * cred, key_perm_t perm, unsigned long flags, struct key_restriction * restrict_link)'/>
<dec f='linux-5.3.1/security/keys/key.c' l='356' type='struct key * key_alloc(struct key_type * , const char * , kuid_t , kgid_t , const struct cred * , key_perm_t , unsigned long , struct key_restriction * )'/>
<use f='linux-5.3.1/security/keys/key.c' l='356' c='key_alloc'/>
<use f='linux-5.3.1/security/keys/key.c' l='356' u='a'/>
<use f='linux-5.3.1/security/keys/key.c' l='924' u='c' c='key_create_or_update'/>
<doc f='linux-5.3.1/security/keys/key.c' l='191'>/**
 * key_alloc - Allocate a key of the specified type.
 * @type: The type of key to allocate.
 * @desc: The key description to allow the key to be searched out.
 * @uid: The owner of the new key.
 * @gid: The group ID for the new key&apos;s group permissions.
 * @cred: The credentials specifying UID namespace.
 * @perm: The permissions mask of the new key.
 * @flags: Flags specifying quota properties.
 * @restrict_link: Optional link restriction for new keyrings.
 *
 * Allocate a key of the specified type with the attributes given.  The key is
 * returned in an uninstantiated state and the caller needs to instantiate the
 * key before returning.
 *
 * The restrict_link structure (if not NULL) will be freed when the
 * keyring is destroyed, so it must be dynamically allocated.
 *
 * The user&apos;s key count quota is updated to reflect the creation of the key and
 * the user&apos;s key data quota has the default for the key type reserved.  The
 * instantiation function should amend this as necessary.  If insufficient
 * quota is available, -EDQUOT will be returned.
 *
 * The LSM security modules can prevent a key being created, in which case
 * -EACCES will be returned.
 *
 * Returns a pointer to the new key if successful and an error code otherwise.
 *
 * Note that the caller needs to ensure the key type isn&apos;t uninstantiated.
 * Internally this can be done by locking key_types_sem.  Externally, this can
 * be done by either never unregistering the key type, or making sure
 * key_alloc() calls don&apos;t race with module unloading.
 */</doc>
<use f='linux-5.3.1/security/keys/keyring.c' l='530' u='c' c='keyring_alloc'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='392' u='c' c='construct_alloc_key'/>
<use f='linux-5.3.1/security/keys/request_key_auth.c' l='217' u='c' c='request_key_auth_new'/>
