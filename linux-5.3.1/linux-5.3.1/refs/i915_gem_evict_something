<dec f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.h' l='2629' type='int i915_gem_evict_something(struct i915_address_space * vm, u64 min_size, u64 alignment, unsigned int cache_level, u64 start, u64 end, unsigned int flags)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.h' l='2628'>/* i915_gem_evict.c */</doc>
<def f='linux-5.3.1/drivers/gpu/drm/i915/i915_gem_evict.c' l='95' ll='251' type='int i915_gem_evict_something(struct i915_address_space * vm, u64 min_size, u64 alignment, unsigned int cache_level, u64 start, u64 end, unsigned int flags)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/i915_gem_evict.c' l='72'>/**
 * i915_gem_evict_something - Evict vmas to make room for binding a new one
 * @vm: address space to evict from
 * @min_size: size of the desired free space
 * @alignment: alignment constraint of the desired free space
 * @cache_level: cache_level for the desired space
 * @start: start (inclusive) of the range from which to evict objects
 * @end: end (exclusive) of the range from which to evict objects
 * @flags: additional flags to control the eviction algorithm
 *
 * This function will try to evict vmas until a free space satisfying the
 * requirements is found. Callers must check first whether any such hole exists
 * already before calling this function.
 *
 * This function is used by the object/vma binding code.
 *
 * Since this function is only used to free up virtual address space it only
 * ignores pinned vmas, and not object where the backing storage itself is
 * pinned. Hence obj-&gt;pages_pin_count does not protect against eviction.
 *
 * To clarify: This is for freeing up virtual address space, not for freeing
 * memory in e.g. the shrinker.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_gem_gtt.c' l='4125' u='c' c='i915_gem_gtt_insert'/>
