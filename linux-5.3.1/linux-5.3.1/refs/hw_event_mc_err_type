<def f='linux-5.3.1/include/linux/edac.h' l='121' ll='127'/>
<doc f='linux-5.3.1/include/linux/edac.h' l='100'>/**
 * enum hw_event_mc_err_type - type of the detected error
 *
 * @HW_EVENT_ERR_CORRECTED:	Corrected Error - Indicates that an ECC
 *				corrected error was detected
 * @HW_EVENT_ERR_UNCORRECTED:	Uncorrected Error - Indicates an error that
 *				can&apos;t be corrected by ECC, but it is not
 *				fatal (maybe it is on an unused memory area,
 *				or the memory controller could recover from
 *				it for example, by re-trying the operation).
 * @HW_EVENT_ERR_DEFERRED:	Deferred Error - Indicates an uncorrectable
 *				error whose handling is not urgent. This could
 *				be due to hardware data poisoning where the
 *				system can continue operation until the poisoned
 *				data is consumed. Preemptive measures may also
 *				be taken, e.g. offlining pages, etc.
 * @HW_EVENT_ERR_FATAL:		Fatal Error - Uncorrected error that could not
 *				be recovered.
 * @HW_EVENT_ERR_INFO:		Informational - The CPER spec defines a forth
 *				type of error: informational logs.
 */</doc>
<use f='linux-5.3.1/drivers/edac/edac_mc.h' l='223' c='edac_raw_mc_handle_error'/>
<use f='linux-5.3.1/drivers/edac/edac_mc.h' l='245' c='edac_mc_handle_error'/>
<use f='linux-5.3.1/drivers/edac/edac_mc.c' l='1053' c='edac_raw_mc_handle_error'/>
<use f='linux-5.3.1/drivers/edac/edac_mc.c' l='1082' c='edac_mc_handle_error'/>
