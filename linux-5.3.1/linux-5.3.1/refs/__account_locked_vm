<dec f='linux-5.3.1/include/linux/mm.h' l='1564' type='int __account_locked_vm(struct mm_struct * mm, unsigned long pages, bool inc, struct task_struct * task, bool bypass_rlim)'/>
<def f='linux-5.3.1/mm/util.c' l='319' ll='347' type='int __account_locked_vm(struct mm_struct * mm, unsigned long pages, bool inc, struct task_struct * task, bool bypass_rlim)'/>
<dec f='linux-5.3.1/mm/util.c' l='348' type='int __account_locked_vm(struct mm_struct * , unsigned long , bool , struct task_struct * , bool )'/>
<use f='linux-5.3.1/mm/util.c' l='348' c='__account_locked_vm'/>
<use f='linux-5.3.1/mm/util.c' l='348' u='a'/>
<use f='linux-5.3.1/mm/util.c' l='370' u='c' c='account_locked_vm'/>
<doc f='linux-5.3.1/mm/util.c' l='304'>/**
 * __account_locked_vm - account locked pages to an mm&apos;s locked_vm
 * @mm:          mm to account against
 * @pages:       number of pages to account
 * @inc:         %true if @pages should be considered positive, %false if not
 * @task:        task used to check RLIMIT_MEMLOCK
 * @bypass_rlim: %true if checking RLIMIT_MEMLOCK should be skipped
 *
 * Assumes @task and @mm are valid (i.e. at least one reference on each), and
 * that mmap_sem is held as writer.
 *
 * Return:
 * * 0       on success
 * * -ENOMEM if RLIMIT_MEMLOCK would be exceeded.
 */</doc>
