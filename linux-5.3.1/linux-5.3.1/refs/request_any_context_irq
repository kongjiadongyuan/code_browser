<dec f='linux-5.3.1/include/linux/interrupt.h' l='151' type='int request_any_context_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char * name, void * dev_id)'/>
<use f='linux-5.3.1/kernel/irq/devres.c' l='114' u='c' c='devm_request_any_context_irq'/>
<def f='linux-5.3.1/kernel/irq/manage.c' l='2078' ll='2099' type='int request_any_context_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char * name, void * dev_id)'/>
<dec f='linux-5.3.1/kernel/irq/manage.c' l='2100' type='int request_any_context_irq(unsigned int , irq_handler_t , unsigned long , const char * , void * )'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='2100' c='request_any_context_irq'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='2100' u='a'/>
<doc f='linux-5.3.1/kernel/irq/manage.c' l='2061'>/**
 *	request_any_context_irq - allocate an interrupt line
 *	@irq: Interrupt line to allocate
 *	@handler: Function to be called when the IRQ occurs.
 *		  Threaded handler for threaded interrupts.
 *	@flags: Interrupt type flags
 *	@name: An ascii name for the claiming device
 *	@dev_id: A cookie passed back to the handler function
 *
 *	This call allocates interrupt resources and enables the
 *	interrupt line and IRQ handling. It selects either a
 *	hardirq or threaded handling method depending on the
 *	context.
 *
 *	On failure, it returns a negative value. On success,
 *	it returns either IRQC_IS_HARDIRQ or IRQC_IS_NESTED.
 */</doc>
