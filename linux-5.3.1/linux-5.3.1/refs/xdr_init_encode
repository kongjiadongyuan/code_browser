<dec f='linux-5.3.1/include/linux/sunrpc/xdr.h' l='250' type='void xdr_init_encode(struct xdr_stream * xdr, struct xdr_buf * buf, __be32 * p, struct rpc_rqst * rqst)'/>
<use f='linux-5.3.1/fs/nfs/callback_xdr.c' l='941' u='c' c='nfs4_callback_compound'/>
<use f='linux-5.3.1/net/sunrpc/clnt.c' l='1866' u='c' c='rpc_xdr_encode'/>
<def f='linux-5.3.1/net/sunrpc/xdr.c' l='523' ll='547' type='void xdr_init_encode(struct xdr_stream * xdr, struct xdr_buf * buf, __be32 * p, struct rpc_rqst * rqst)'/>
<dec f='linux-5.3.1/net/sunrpc/xdr.c' l='548' type='void xdr_init_encode(struct xdr_stream * , struct xdr_buf * , __be32 * , struct rpc_rqst * )'/>
<use f='linux-5.3.1/net/sunrpc/xdr.c' l='548' c='xdr_init_encode'/>
<use f='linux-5.3.1/net/sunrpc/xdr.c' l='548' u='a'/>
<doc f='linux-5.3.1/net/sunrpc/xdr.c' l='509'>/**
 * xdr_init_encode - Initialize a struct xdr_stream for sending data.
 * @xdr: pointer to xdr_stream struct
 * @buf: pointer to XDR buffer in which to encode data
 * @p: current pointer inside XDR buffer
 * @rqst: pointer to controlling rpc_rqst, for debugging
 *
 * Note: at the moment the RPC client only passes the length of our
 *	 scratch buffer in the xdr_buf&apos;s header kvec. Previously this
 *	 meant we needed to call xdr_adjust_iovec() after encoding the
 *	 data. With the new scheme, the xdr_stream manages the details
 *	 of the buffer length, and takes care of adjusting the kvec
 *	 length for us.
 */</doc>
