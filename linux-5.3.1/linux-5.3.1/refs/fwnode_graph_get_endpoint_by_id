<dec f='linux-5.3.1/include/linux/property.h' l='367' type='struct fwnode_handle * fwnode_graph_get_endpoint_by_id(const struct fwnode_handle * fwnode, u32 port, u32 endpoint, unsigned long flags)'/>
<def f='linux-5.3.1/drivers/base/property.c' l='1030' ll='1082' type='struct fwnode_handle * fwnode_graph_get_endpoint_by_id(const struct fwnode_handle * fwnode, u32 port, u32 endpoint, unsigned long flags)'/>
<dec f='linux-5.3.1/drivers/base/property.c' l='1083' type='struct fwnode_handle * fwnode_graph_get_endpoint_by_id(const struct fwnode_handle * , u32 , u32 , unsigned long )'/>
<use f='linux-5.3.1/drivers/base/property.c' l='1083' c='fwnode_graph_get_endpoint_by_id'/>
<use f='linux-5.3.1/drivers/base/property.c' l='1083' u='a'/>
<doc f='linux-5.3.1/drivers/base/property.c' l='1010'>/**
 * fwnode_graph_get_endpoint_by_id - get endpoint by port and endpoint numbers
 * @fwnode: parent fwnode_handle containing the graph
 * @port: identifier of the port node
 * @endpoint: identifier of the endpoint node under the port node
 * @flags: fwnode lookup flags
 *
 * Return the fwnode handle of the local endpoint corresponding the port and
 * endpoint IDs or NULL if not found.
 *
 * If FWNODE_GRAPH_ENDPOINT_NEXT is passed in @flags and the specified endpoint
 * has not been found, look for the closest endpoint ID greater than the
 * specified one and return the endpoint that corresponds to it, if present.
 *
 * Do not return endpoints that belong to disabled devices, unless
 * FWNODE_GRAPH_DEVICE_DISABLED is passed in @flags.
 *
 * The returned endpoint needs to be released by calling fwnode_handle_put() on
 * it when it is not needed any more.
 */</doc>
