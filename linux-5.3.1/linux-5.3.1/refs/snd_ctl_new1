<dec f='linux-5.3.1/include/sound/control.h' l='109' type='struct snd_kcontrol * snd_ctl_new1(const struct snd_kcontrol_new * kcontrolnew, void * private_data)'/>
<def f='linux-5.3.1/sound/core/control.c' l='228' ll='278' type='struct snd_kcontrol * snd_ctl_new1(const struct snd_kcontrol_new * ncontrol, void * private_data)'/>
<dec f='linux-5.3.1/sound/core/control.c' l='279' type='struct snd_kcontrol * snd_ctl_new1(const struct snd_kcontrol_new * , void * )'/>
<use f='linux-5.3.1/sound/core/control.c' l='279' c='snd_ctl_new1'/>
<use f='linux-5.3.1/sound/core/control.c' l='279' u='a'/>
<doc f='linux-5.3.1/sound/core/control.c' l='217'>/**
 * snd_ctl_new1 - create a control instance from the template
 * @ncontrol: the initialization record
 * @private_data: the private data to set
 *
 * Allocates a new struct snd_kcontrol instance and initialize from the given
 * template.  When the access field of ncontrol is 0, it&apos;s assumed as
 * READWRITE access. When the count field is 0, it&apos;s assumes as one.
 *
 * Return: The pointer of the newly generated instance, or %NULL on failure.
 */</doc>
<use f='linux-5.3.1/sound/core/ctljack.c' l='67' u='c' c='snd_kctl_jack_new'/>
<use f='linux-5.3.1/sound/core/pcm_lib.c' l='2445' u='c' c='snd_pcm_add_chmap_ctls'/>
<use f='linux-5.3.1/sound/core/vmaster.c' l='408' u='c' c='snd_ctl_make_virtual_master'/>
<use f='linux-5.3.1/sound/pci/hda/hda_codec.c' l='2050' u='c' c='snd_hda_add_vmaster_hook'/>
<use f='linux-5.3.1/sound/pci/hda/hda_codec.c' l='2467' u='c' c='snd_hda_create_dig_out_ctls'/>
<use f='linux-5.3.1/sound/pci/hda/hda_codec.c' l='2592' u='c' c='snd_hda_create_spdif_share_sw'/>
<use f='linux-5.3.1/sound/pci/hda/hda_codec.c' l='2693' u='c' c='snd_hda_create_spdif_in_ctls'/>
<use f='linux-5.3.1/sound/pci/hda/hda_codec.c' l='3335' u='c' c='snd_hda_add_new_ctls'/>
