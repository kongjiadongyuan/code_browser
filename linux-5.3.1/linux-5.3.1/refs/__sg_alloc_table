<dec f='linux-5.3.1/include/linux/scatterlist.h' l='272' type='int __sg_alloc_table(struct sg_table * , unsigned int , unsigned int , struct scatterlist * , unsigned int , gfp_t , sg_alloc_fn * )'/>
<def f='linux-5.3.1/lib/scatterlist.c' l='266' ll='341' type='int __sg_alloc_table(struct sg_table * table, unsigned int nents, unsigned int max_ents, struct scatterlist * first_chunk, unsigned int nents_first_chunk, gfp_t gfp_mask, sg_alloc_fn * alloc_fn)'/>
<dec f='linux-5.3.1/lib/scatterlist.c' l='342' type='int __sg_alloc_table(struct sg_table * , unsigned int , unsigned int , struct scatterlist * , unsigned int , gfp_t , sg_alloc_fn * )'/>
<use f='linux-5.3.1/lib/scatterlist.c' l='342' c='__sg_alloc_table'/>
<use f='linux-5.3.1/lib/scatterlist.c' l='342' u='a'/>
<use f='linux-5.3.1/lib/scatterlist.c' l='359' u='c' c='sg_alloc_table'/>
<doc f='linux-5.3.1/lib/scatterlist.c' l='245'>/**
 * __sg_alloc_table - Allocate and initialize an sg table with given allocator
 * @table:	The sg table header to use
 * @nents:	Number of entries in sg list
 * @max_ents:	The maximum number of entries the allocator returns per call
 * @nents_first_chunk: Number of entries int the (preallocated) first
 * 	scatterlist chunk, 0 means no such preallocated chunk provided by user
 * @gfp_mask:	GFP allocation mask
 * @alloc_fn:	Allocator to use
 *
 * Description:
 *   This function returns a @table @nents long. The allocator is
 *   defined to return scatterlist chunks of maximum size @max_ents.
 *   Thus if @nents is bigger than @max_ents, the scatterlists will be
 *   chained in units of @max_ents.
 *
 * Notes:
 *   If this function returns non-0 (eg failure), the caller must call
 *   __sg_free_table() to cleanup any leftover allocations.
 *
 **/</doc>
<use f='linux-5.3.1/lib/sg_pool.c' l='132' u='c' c='sg_alloc_table_chained'/>
