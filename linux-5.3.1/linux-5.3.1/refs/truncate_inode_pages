<dec f='linux-5.3.1/include/linux/mm.h' l='2429' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<doc f='linux-5.3.1/include/linux/mm.h' l='2428'>/* truncate.c */</doc>
<use f='linux-5.3.1/fs/block_dev.c' l='86' u='c' c='kill_bdev'/>
<use f='linux-5.3.1/fs/ext4/truncate.h' l='19' u='c' c='ext4_truncate_failed_write'/>
<use f='linux-5.3.1/fs/ext4/ioctl.c' l='160' u='c' c='swap_inode_boot_loader'/>
<use f='linux-5.3.1/fs/ext4/ioctl.c' l='161' u='c' c='swap_inode_boot_loader'/>
<use f='linux-5.3.1/fs/ext4/super.c' l='2685' u='c' c='ext4_orphan_cleanup'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='709' u='c' c='dquot_quota_sync'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='2266' u='c' c='dquot_disable'/>
<def f='linux-5.3.1/mm/truncate.c' l='474' ll='477' type='void truncate_inode_pages(struct address_space * mapping, loff_t lstart)'/>
<dec f='linux-5.3.1/mm/truncate.c' l='478' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<use f='linux-5.3.1/mm/truncate.c' l='478' c='truncate_inode_pages'/>
<use f='linux-5.3.1/mm/truncate.c' l='478' u='a'/>
<use f='linux-5.3.1/mm/truncate.c' l='527' u='c' c='truncate_inode_pages_final'/>
<use f='linux-5.3.1/mm/truncate.c' l='805' u='c' c='truncate_pagecache'/>
<doc f='linux-5.3.1/mm/truncate.c' l='462'>/**
 * truncate_inode_pages - truncate *all* the pages from an offset
 * @mapping: mapping to truncate
 * @lstart: offset from which to truncate
 *
 * Called under (and serialised by) inode-&gt;i_mutex.
 *
 * Note: When this function returns, there can be a page in the process of
 * deletion (inside __delete_from_page_cache()) in the specified range.  Thus
 * mapping-&gt;nrpages can be non-zero when this function returns even after
 * truncation of the whole mapping.
 */</doc>
