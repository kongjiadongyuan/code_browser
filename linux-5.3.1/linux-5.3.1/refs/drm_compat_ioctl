<dec f='linux-5.3.1/include/drm/drm_ioctl.h' l='170' type='long drm_compat_ioctl(struct file * filp, unsigned int cmd, unsigned long arg)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_ioc32.c' l='971' ll='998' type='long drm_compat_ioctl(struct file * filp, unsigned int cmd, unsigned long arg)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_ioc32.c' l='999' type='long drm_compat_ioctl(struct file * , unsigned int , unsigned long )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioc32.c' l='999' c='drm_compat_ioctl'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioc32.c' l='999' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_ioc32.c' l='957'>/**
 * drm_compat_ioctl - 32bit IOCTL compatibility handler for DRM drivers
 * @filp: file this ioctl is called on
 * @cmd: ioctl cmd number
 * @arg: user argument
 *
 * Compatibility handler for 32 bit userspace running on 64 kernels. All actual
 * IOCTL handling is forwarded to drm_ioctl(), while marshalling structures as
 * appropriate. Note that this only handles DRM core IOCTLs, if the driver has
 * botched IOCTL itself, it must handle those by wrapping this function.
 *
 * Returns:
 * Zero on success, negative error code on failure.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_ioc32.c' l='85' u='c' c='i915_compat_ioctl'/>
