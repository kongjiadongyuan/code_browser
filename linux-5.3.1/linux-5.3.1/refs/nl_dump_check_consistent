<def f='linux-5.3.1/include/net/netlink.h' l='1019' ll='1026' type='void nl_dump_check_consistent(struct netlink_callback * cb, struct nlmsghdr * nlh)'/>
<doc f='linux-5.3.1/include/net/netlink.h' l='1004'>/**
 * nl_dump_check_consistent - check if sequence is consistent and advertise if not
 * @cb: netlink callback structure that stores the sequence number
 * @nlh: netlink message header to write the flag to
 *
 * This function checks if the sequence (generation) number changed during dump
 * and if it did, advertises it in the netlink message header.
 *
 * The correct way to use it is to set cb-&gt;seq to the generation counter when
 * all locks for dumping have been acquired, and then call this function for
 * each message that is generated.
 *
 * Note that due to initialisation concerns, 0 is an invalid sequence number
 * and must not be used by code that uses this functionality.
 */</doc>
<use f='linux-5.3.1/include/net/genetlink.h' l='223' u='c' c='genl_dump_check_consistent'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='2022' u='c' c='rtnl_dump_ifinfo'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='5108' u='c' c='rtnl_stats_dump'/>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='1789' u='c' c='in_dev_dump_addr'/>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='2270' u='c' c='inet_netconf_dump_devconf'/>
<use f='linux-5.3.1/net/ipv4/nexthop.c' l='1733' u='c' c='rtm_dump_nexthop'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='752' u='c' c='inet6_netconf_dump_devconf'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='5024' u='c' c='in6_dump_addrs'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='2265' u='c' c='netlink_dump'/>
