<dec f='linux-5.3.1/include/linux/sched/jobctl.h' l='37' type='void task_clear_jobctl_pending(struct task_struct * task, unsigned long mask)'/>
<use f='linux-5.3.1/fs/coredump.c' l='349' u='c' c='zap_process'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='137' u='c' c='__ptrace_unlink'/>
<def f='linux-5.3.1/kernel/signal.c' l='337' ll='348' type='void task_clear_jobctl_pending(struct task_struct * task, unsigned long mask)'/>
<use f='linux-5.3.1/kernel/signal.c' l='373' u='c' c='task_participate_group_stop'/>
<use f='linux-5.3.1/kernel/signal.c' l='923' u='c' c='prepare_signal'/>
<use f='linux-5.3.1/kernel/signal.c' l='1044' u='c' c='complete_signal'/>
<use f='linux-5.3.1/kernel/signal.c' l='1350' u='c' c='zap_other_threads'/>
<use f='linux-5.3.1/kernel/signal.c' l='2176' u='c' c='ptrace_stop'/>
<use f='linux-5.3.1/kernel/signal.c' l='2178' u='c' c='ptrace_stop'/>
<doc f='linux-5.3.1/kernel/signal.c' l='322'>/**
 * task_clear_jobctl_pending - clear jobctl pending bits
 * @task: target task
 * @mask: pending bits to clear
 *
 * Clear @mask from @task-&gt;jobctl.  @mask must be subset of
 * %JOBCTL_PENDING_MASK.  If %JOBCTL_STOP_PENDING is being cleared, other
 * STOP bits are cleared together.
 *
 * If clearing of @mask leaves no stop or trap pending, this function calls
 * task_clear_jobctl_trapping().
 *
 * CONTEXT:
 * Must be called with @task-&gt;sighand-&gt;siglock held.
 */</doc>
