<dec f='linux-5.3.1/include/crypto/hash.h' l='695' type='struct crypto_shash * crypto_alloc_shash(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-5.3.1/include/crypto/hash.h' l='681'>/**
 * crypto_alloc_shash() - allocate message digest handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      message digest cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for a message digest. The returned &amp;struct
 * crypto_shash is the cipher handle that is required for any subsequent
 * API invocation for that message digest.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-5.3.1/arch/x86/power/hibernate.c' l='82' u='c' c='get_e820_md5'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_verify.c' l='38' u='c' c='pkcs7_digest'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/x509_public_key.c' l='54' u='c' c='x509_get_sig_params'/>
<use f='linux-5.3.1/crypto/drbg.c' l='1663' u='c' c='drbg_init_hash_kernel'/>
<def f='linux-5.3.1/crypto/shash.c' l='447' ll='451' type='struct crypto_shash * crypto_alloc_shash(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-5.3.1/crypto/shash.c' l='452' type='struct crypto_shash * crypto_alloc_shash(const char * , u32 , u32 )'/>
<use f='linux-5.3.1/crypto/shash.c' l='452' c='crypto_alloc_shash'/>
<use f='linux-5.3.1/crypto/shash.c' l='452' u='a'/>
<use f='linux-5.3.1/fs/ext4/super.c' l='3698' u='c' c='ext4_fill_super'/>
<use f='linux-5.3.1/fs/jbd2/journal.c' l='1579' u='c' c='journal_get_superblock'/>
<use f='linux-5.3.1/fs/jbd2/journal.c' l='1891' u='c' c='jbd2_journal_set_features'/>
<use f='linux-5.3.1/net/mac80211/aes_cmac.c' l='58' u='c' c='ieee80211_aes_cmac_key_setup'/>
<use f='linux-5.3.1/net/mac80211/fils_aead.c' l='87' u='c' c='aes_siv_encrypt'/>
<use f='linux-5.3.1/net/mac80211/fils_aead.c' l='202' u='c' c='aes_siv_decrypt'/>
