<dec f='linux-5.3.1/include/linux/quotaops.h' l='108' type='int __dquot_transfer(struct inode * inode, struct dquot ** transfer_to)'/>
<use f='linux-5.3.1/fs/ext4/ioctl.c' l='499' u='c' c='ext4_ioctl_setproject'/>
<def f='linux-5.3.1/fs/quota/dquot.c' l='1948' ll='2068' type='int __dquot_transfer(struct inode * inode, struct dquot ** transfer_to)'/>
<dec f='linux-5.3.1/fs/quota/dquot.c' l='2069' type='int __dquot_transfer(struct inode * , struct dquot ** )'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='2069' c='__dquot_transfer'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='2069' u='a'/>
<use f='linux-5.3.1/fs/quota/dquot.c' l='2106' u='c' c='dquot_transfer'/>
<doc f='linux-5.3.1/fs/quota/dquot.c' l='1936'>/*
 * Transfer the number of inode and blocks from one diskquota to an other.
 * On success, dquot references in transfer_to are consumed and references
 * to original dquots that need to be released are placed there. On failure,
 * references are kept untouched.
 *
 * This operation can block, but only after everything is updated
 * A transaction must be started when entering this function.
 *
 * We are holding reference on transfer_from &amp; transfer_to, no need to
 * protect them by srcu_read_lock().
 */</doc>
