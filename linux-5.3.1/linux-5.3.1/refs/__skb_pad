<dec f='linux-5.3.1/include/linux/skbuff.h' l='1132' type='int __skb_pad(struct sk_buff * skb, int pad, bool free_on_error)'/>
<use f='linux-5.3.1/include/linux/skbuff.h' l='1147' u='c' c='skb_pad'/>
<use f='linux-5.3.1/include/linux/skbuff.h' l='3130' u='c' c='__skb_put_padto'/>
<def f='linux-5.3.1/net/core/skbuff.c' l='1792' ll='1824' type='int __skb_pad(struct sk_buff * skb, int pad, bool free_on_error)'/>
<dec f='linux-5.3.1/net/core/skbuff.c' l='1825' type='int __skb_pad(struct sk_buff * , int , bool )'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='1825' c='__skb_pad'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='1825' u='a'/>
<doc f='linux-5.3.1/net/core/skbuff.c' l='1778'>/**
 *	__skb_pad		-	zero pad the tail of an skb
 *	@skb: buffer to pad
 *	@pad: space to pad
 *	@free_on_error: free buffer on error
 *
 *	Ensure that a buffer is followed by a padding area that is zero
 *	filled. Used by network drivers which may DMA or transfer data
 *	beyond the buffer end onto the wire.
 *
 *	May return error in out of memory cases. The skb is freed on error
 *	if @free_on_error is true.
 */</doc>
