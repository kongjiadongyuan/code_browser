<def f='linux-5.3.1/include/linux/timekeeper_internal.h' l='92' ll='139'/>
<use f='linux-5.3.1/include/linux/timekeeper_internal.h' l='143' c='update_vsyscall'/>
<size>280</size>
<doc f='linux-5.3.1/include/linux/timekeeper_internal.h' l='45'>/**
 * struct timekeeper - Structure holding internal timekeeping values.
 * @tkr_mono:		The readout base structure for CLOCK_MONOTONIC
 * @tkr_raw:		The readout base structure for CLOCK_MONOTONIC_RAW
 * @xtime_sec:		Current CLOCK_REALTIME time in seconds
 * @ktime_sec:		Current CLOCK_MONOTONIC time in seconds
 * @wall_to_monotonic:	CLOCK_REALTIME to CLOCK_MONOTONIC offset
 * @offs_real:		Offset clock monotonic -&gt; clock realtime
 * @offs_boot:		Offset clock monotonic -&gt; clock boottime
 * @offs_tai:		Offset clock monotonic -&gt; clock tai
 * @tai_offset:		The current UTC to TAI offset in seconds
 * @clock_was_set_seq:	The sequence number of clock was set events
 * @cs_was_changed_seq:	The sequence number of clocksource change events
 * @next_leap_ktime:	CLOCK_MONOTONIC time value of a pending leap-second
 * @raw_sec:		CLOCK_MONOTONIC_RAW  time in seconds
 * @monotonic_to_boot:	CLOCK_MONOTONIC to CLOCK_BOOTTIME offset
 * @cycle_interval:	Number of clock cycles in one NTP interval
 * @xtime_interval:	Number of clock shifted nano seconds in one NTP
 *			interval.
 * @xtime_remainder:	Shifted nano seconds left over when rounding
 *			@cycle_interval
 * @raw_interval:	Shifted raw nano seconds accumulated per NTP interval.
 * @ntp_error:		Difference between accumulated time and NTP time in ntp
 *			shifted nano seconds.
 * @ntp_error_shift:	Shift conversion between clock shifted nano seconds and
 *			ntp shifted nano seconds.
 * @last_warning:	Warning ratelimiter (DEBUG_TIMEKEEPING)
 * @underflow_seen:	Underflow warning flag (DEBUG_TIMEKEEPING)
 * @overflow_seen:	Overflow warning flag (DEBUG_TIMEKEEPING)
 *
 * Note: For timespec(64) based interfaces wall_to_monotonic is what
 * we need to add to xtime (or xtime corrected for sub jiffie times)
 * to get to monotonic time.  Monotonic is pegged at zero at system
 * boot time, so wall_to_monotonic will be negative, however, we will
 * ALWAYS keep the tv_nsec part positive so we can use the usual
 * normalization.
 *
 * wall_to_monotonic is moved after resume from suspend for the
 * monotonic time not to jump. We need to add total_sleep_time to
 * wall_to_monotonic to get the real boot based time offset.
 *
 * wall_to_monotonic is no longer the boot time, getboottime must be
 * used instead.
 *
 * @monotonic_to_boottime is a timespec64 representation of @offs_boot to
 * accelerate the VDSO update for CLOCK_BOOTTIME.
 */</doc>
<mbr r='timekeeper::tkr_mono' o='0' t='struct tk_read_base'/>
<mbr r='timekeeper::tkr_raw' o='448' t='struct tk_read_base'/>
<mbr r='timekeeper::xtime_sec' o='896' t='u64'/>
<mbr r='timekeeper::ktime_sec' o='960' t='unsigned long'/>
<mbr r='timekeeper::wall_to_monotonic' o='1024' t='struct timespec64'/>
<mbr r='timekeeper::offs_real' o='1152' t='ktime_t'/>
<mbr r='timekeeper::offs_boot' o='1216' t='ktime_t'/>
<mbr r='timekeeper::offs_tai' o='1280' t='ktime_t'/>
<mbr r='timekeeper::tai_offset' o='1344' t='s32'/>
<mbr r='timekeeper::clock_was_set_seq' o='1376' t='unsigned int'/>
<mbr r='timekeeper::cs_was_changed_seq' o='1408' t='u8'/>
<mbr r='timekeeper::next_leap_ktime' o='1472' t='ktime_t'/>
<mbr r='timekeeper::raw_sec' o='1536' t='u64'/>
<mbr r='timekeeper::monotonic_to_boot' o='1600' t='struct timespec64'/>
<mbr r='timekeeper::cycle_interval' o='1728' t='u64'/>
<mbr r='timekeeper::xtime_interval' o='1792' t='u64'/>
<mbr r='timekeeper::xtime_remainder' o='1856' t='s64'/>
<mbr r='timekeeper::raw_interval' o='1920' t='u64'/>
<mbr r='timekeeper::ntp_tick' o='1984' t='u64'/>
<mbr r='timekeeper::ntp_error' o='2048' t='s64'/>
<mbr r='timekeeper::ntp_error_shift' o='2112' t='u32'/>
<mbr r='timekeeper::ntp_err_mult' o='2144' t='u32'/>
<mbr r='timekeeper::skip_second_overflow' o='2176' t='u32'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='48'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='54'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='95' c='tk_normalize_xtime'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='107' c='tk_xtime'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='116' c='tk_set_xtime'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='122' c='tk_xtime_add'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='129' c='tk_set_wall_to_mono'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='146' c='tk_update_sleep_time'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='259' c='timekeeping_check_update'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='287' c='tk_setup_internals'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='507' c='ktime_get_boot_fast_ns'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='557' c='halt_fast_timekeeper'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='576' c='update_pvclock_gtod'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='586' c='pvclock_gtod_register_notifier'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='619' c='tk_update_leap_state'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='630' c='tk_update_ktime_data'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='661' c='timekeeping_update'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='697' c='timekeeping_forward_now'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='728' c='ktime_get_real_ts64'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='749' c='ktime_get'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='769' c='ktime_get_resolution_ns'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='792' c='ktime_get_with_offset'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='813' c='ktime_get_coarse_with_offset'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='856' c='ktime_get_raw'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='882' c='ktime_get_ts64'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='914' c='ktime_get_seconds'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='934' c='ktime_get_real_seconds'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='958' c='__ktime_get_real_seconds'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='969' c='ktime_get_snapshot'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1038' c='adjust_historical_crosststamp'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1126' c='get_device_system_crosststamp'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1226' c='do_settimeofday64'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1275' c='timekeeping_inject_offset'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1349' c='__timekeeping_set_tai_offset'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1362' c='change_clocksource'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1404' c='timekeeping_notify'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1421' c='ktime_get_raw_ts64'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1443' c='timekeeping_valid_for_hres'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1462' c='timekeeping_max_deferment'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1535' c='timekeeping_init'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1587' c='__timekeeping_inject_sleeptime'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1678' c='timekeeping_resume'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1738' c='timekeeping_suspend'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1821' c='timekeeping_apply_adjustment'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1899' c='timekeeping_adjust'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1961' c='accumulate_nsecs_to_secs'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2010' c='logarithmic_accumulation'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2050' c='timekeeping_advance'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2051' c='timekeeping_advance'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2153' c='getboottime64'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2162' c='ktime_get_coarse_real_ts64'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2175' c='ktime_get_coarse_ts64'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2216' c='ktime_get_update_offsets_now'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='2315' c='do_adjtimex'/>
<size>280</size>
<use f='linux-5.3.1/arch/x86/include/asm/vdso/vsyscall.h' l='27' c='__x86_get_clock_mode'/>
<use f='linux-5.3.1/include/asm-generic/vdso/vsyscall.h' l='37' c='__arch_update_vsyscall'/>
<use f='linux-5.3.1/kernel/time/vsyscall.c' l='17' c='update_vdso_data'/>
<use f='linux-5.3.1/kernel/time/vsyscall.c' l='81' c='update_vsyscall'/>
<size>280</size>
