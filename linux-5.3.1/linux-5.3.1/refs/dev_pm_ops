<def f='linux-5.3.1/include/linux/pm.h' l='278' ll='302'/>
<use f='linux-5.3.1/include/linux/pm.h' l='650'/>
<use f='linux-5.3.1/include/linux/device.h' l='139'/>
<use f='linux-5.3.1/include/linux/device.h' l='300'/>
<use f='linux-5.3.1/include/linux/device.h' l='428'/>
<use f='linux-5.3.1/include/linux/device.h' l='565'/>
<size>184</size>
<doc f='linux-5.3.1/include/linux/pm.h' l='54'>/**
 * struct dev_pm_ops - device PM callbacks.
 *
 * @prepare: The principal role of this callback is to prevent new children of
 *	the device from being registered after it has returned (the driver&apos;s
 *	subsystem and generally the rest of the kernel is supposed to prevent
 *	new calls to the probe method from being made too once @prepare() has
 *	succeeded).  If @prepare() detects a situation it cannot handle (e.g.
 *	registration of a child already in progress), it may return -EAGAIN, so
 *	that the PM core can execute it once again (e.g. after a new child has
 *	been registered) to recover from the race condition.
 *	This method is executed for all kinds of suspend transitions and is
 *	followed by one of the suspend callbacks: @suspend(), @freeze(), or
 *	@poweroff().  If the transition is a suspend to memory or standby (that
 *	is, not related to hibernation), the return value of @prepare() may be
 *	used to indicate to the PM core to leave the device in runtime suspend
 *	if applicable.  Namely, if @prepare() returns a positive number, the PM
 *	core will understand that as a declaration that the device appears to be
 *	runtime-suspended and it may be left in that state during the entire
 *	transition and during the subsequent resume if all of its descendants
 *	are left in runtime suspend too.  If that happens, @complete() will be
 *	executed directly after @prepare() and it must ensure the proper
 *	functioning of the device after the system resume.
 *	The PM core executes subsystem-level @prepare() for all devices before
 *	starting to invoke suspend callbacks for any of them, so generally
 *	devices may be assumed to be functional or to respond to runtime resume
 *	requests while @prepare() is being executed.  However, device drivers
 *	may NOT assume anything about the availability of user space at that
 *	time and it is NOT valid to request firmware from within @prepare()
 *	(it&apos;s too late to do that).  It also is NOT valid to allocate
 *	substantial amounts of memory from @prepare() in the GFP_KERNEL mode.
 *	[To work around these limitations, drivers may register suspend and
 *	hibernation notifiers to be executed before the freezing of tasks.]
 *
 * @complete: Undo the changes made by @prepare().  This method is executed for
 *	all kinds of resume transitions, following one of the resume callbacks:
 *	@resume(), @thaw(), @restore().  Also called if the state transition
 *	fails before the driver&apos;s suspend callback: @suspend(), @freeze() or
 *	@poweroff(), can be executed (e.g. if the suspend callback fails for one
 *	of the other devices that the PM core has unsuccessfully attempted to
 *	suspend earlier).
 *	The PM core executes subsystem-level @complete() after it has executed
 *	the appropriate resume callbacks for all devices.  If the corresponding
 *	@prepare() at the beginning of the suspend transition returned a
 *	positive number and the device was left in runtime suspend (without
 *	executing any suspend and resume callbacks for it), @complete() will be
 *	the only callback executed for the device during resume.  In that case,
 *	@complete() must be prepared to do whatever is necessary to ensure the
 *	proper functioning of the device after the system resume.  To this end,
 *	@complete() can check the power.direct_complete flag of the device to
 *	learn whether (unset) or not (set) the previous suspend and resume
 *	callbacks have been executed for it.
 *
 * @suspend: Executed before putting the system into a sleep state in which the
 *	contents of main memory are preserved.  The exact action to perform
 *	depends on the device&apos;s subsystem (PM domain, device type, class or bus
 *	type), but generally the device must be quiescent after subsystem-level
 *	@suspend() has returned, so that it doesn&apos;t do any I/O or DMA.
 *	Subsystem-level @suspend() is executed for all devices after invoking
 *	subsystem-level @prepare() for all of them.
 *
 * @suspend_late: Continue operations started by @suspend().  For a number of
 *	devices @suspend_late() may point to the same callback routine as the
 *	runtime suspend callback.
 *
 * @resume: Executed after waking the system up from a sleep state in which the
 *	contents of main memory were preserved.  The exact action to perform
 *	depends on the device&apos;s subsystem, but generally the driver is expected
 *	to start working again, responding to hardware events and software
 *	requests (the device itself may be left in a low-power state, waiting
 *	for a runtime resume to occur).  The state of the device at the time its
 *	driver&apos;s @resume() callback is run depends on the platform and subsystem
 *	the device belongs to.  On most platforms, there are no restrictions on
 *	availability of resources like clocks during @resume().
 *	Subsystem-level @resume() is executed for all devices after invoking
 *	subsystem-level @resume_noirq() for all of them.
 *
 * @resume_early: Prepare to execute @resume().  For a number of devices
 *	@resume_early() may point to the same callback routine as the runtime
 *	resume callback.
 *
 * @freeze: Hibernation-specific, executed before creating a hibernation image.
 *	Analogous to @suspend(), but it should not enable the device to signal
 *	wakeup events or change its power state.  The majority of subsystems
 *	(with the notable exception of the PCI bus type) expect the driver-level
 *	@freeze() to save the device settings in memory to be used by @restore()
 *	during the subsequent resume from hibernation.
 *	Subsystem-level @freeze() is executed for all devices after invoking
 *	subsystem-level @prepare() for all of them.
 *
 * @freeze_late: Continue operations started by @freeze().  Analogous to
 *	@suspend_late(), but it should not enable the device to signal wakeup
 *	events or change its power state.
 *
 * @thaw: Hibernation-specific, executed after creating a hibernation image OR
 *	if the creation of an image has failed.  Also executed after a failing
 *	attempt to restore the contents of main memory from such an image.
 *	Undo the changes made by the preceding @freeze(), so the device can be
 *	operated in the same way as immediately before the call to @freeze().
 *	Subsystem-level @thaw() is executed for all devices after invoking
 *	subsystem-level @thaw_noirq() for all of them.  It also may be executed
 *	directly after @freeze() in case of a transition error.
 *
 * @thaw_early: Prepare to execute @thaw().  Undo the changes made by the
 *	preceding @freeze_late().
 *
 * @poweroff: Hibernation-specific, executed after saving a hibernation image.
 *	Analogous to @suspend(), but it need not save the device&apos;s settings in
 *	memory.
 *	Subsystem-level @poweroff() is executed for all devices after invoking
 *	subsystem-level @prepare() for all of them.
 *
 * @poweroff_late: Continue operations started by @poweroff().  Analogous to
 *	@suspend_late(), but it need not save the device&apos;s settings in memory.
 *
 * @restore: Hibernation-specific, executed after restoring the contents of main
 *	memory from a hibernation image, analogous to @resume().
 *
 * @restore_early: Prepare to execute @restore(), analogous to @resume_early().
 *
 * @suspend_noirq: Complete the actions started by @suspend().  Carry out any
 *	additional operations required for suspending the device that might be
 *	racing with its driver&apos;s interrupt handler, which is guaranteed not to
 *	run while @suspend_noirq() is being executed.
 *	It generally is expected that the device will be in a low-power state
 *	(appropriate for the target system sleep state) after subsystem-level
 *	@suspend_noirq() has returned successfully.  If the device can generate
 *	system wakeup signals and is enabled to wake up the system, it should be
 *	configured to do so at that time.  However, depending on the platform
 *	and device&apos;s subsystem, @suspend() or @suspend_late() may be allowed to
 *	put the device into the low-power state and configure it to generate
 *	wakeup signals, in which case it generally is not necessary to define
 *	@suspend_noirq().
 *
 * @resume_noirq: Prepare for the execution of @resume() by carrying out any
 *	operations required for resuming the device that might be racing with
 *	its driver&apos;s interrupt handler, which is guaranteed not to run while
 *	@resume_noirq() is being executed.
 *
 * @freeze_noirq: Complete the actions started by @freeze().  Carry out any
 *	additional operations required for freezing the device that might be
 *	racing with its driver&apos;s interrupt handler, which is guaranteed not to
 *	run while @freeze_noirq() is being executed.
 *	The power state of the device should not be changed by either @freeze(),
 *	or @freeze_late(), or @freeze_noirq() and it should not be configured to
 *	signal system wakeup by any of these callbacks.
 *
 * @thaw_noirq: Prepare for the execution of @thaw() by carrying out any
 *	operations required for thawing the device that might be racing with its
 *	driver&apos;s interrupt handler, which is guaranteed not to run while
 *	@thaw_noirq() is being executed.
 *
 * @poweroff_noirq: Complete the actions started by @poweroff().  Analogous to
 *	@suspend_noirq(), but it need not save the device&apos;s settings in memory.
 *
 * @restore_noirq: Prepare for the execution of @restore() by carrying out any
 *	operations required for thawing the device that might be racing with its
 *	driver&apos;s interrupt handler, which is guaranteed not to run while
 *	@restore_noirq() is being executed.  Analogous to @resume_noirq().
 *
 * @runtime_suspend: Prepare the device for a condition in which it won&apos;t be
 *	able to communicate with the CPU(s) and RAM due to power management.
 *	This need not mean that the device should be put into a low-power state.
 *	For example, if the device is behind a link which is about to be turned
 *	off, the device may remain at full power.  If the device does go to low
 *	power and is capable of generating runtime wakeup events, remote wakeup
 *	(i.e., a hardware mechanism allowing the device to request a change of
 *	its power state via an interrupt) should be enabled for it.
 *
 * @runtime_resume: Put the device into the fully active state in response to a
 *	wakeup event generated by hardware or at the request of software.  If
 *	necessary, put the device into the full-power state and restore its
 *	registers, so that it is fully operational.
 *
 * @runtime_idle: Device appears to be inactive and it might be put into a
 *	low-power state if all of the necessary conditions are satisfied.
 *	Check these conditions, and return 0 if it&apos;s appropriate to let the PM
 *	core queue a suspend request for the device.
 *
 * Several device power state transitions are externally visible, affecting
 * the state of pending I/O queues and (for drivers that touch hardware)
 * interrupts, wakeups, DMA, and other hardware state.  There may also be
 * internal transitions to various low-power modes which are transparent
 * to the rest of the driver stack (such as a driver that&apos;s ON gating off
 * clocks which are not in active use).
 *
 * The externally visible transitions are handled with the help of callbacks
 * included in this structure in such a way that, typically, two levels of
 * callbacks are involved.  First, the PM core executes callbacks provided by PM
 * domains, device types, classes and bus types.  They are the subsystem-level
 * callbacks expected to execute callbacks provided by device drivers, although
 * they may choose not to do that.  If the driver callbacks are executed, they
 * have to collaborate with the subsystem-level callbacks to achieve the goals
 * appropriate for the given system transition, given transition phase and the
 * subsystem the device belongs to.
 *
 * All of the above callbacks, except for @complete(), return error codes.
 * However, the error codes returned by @resume(), @thaw(), @restore(),
 * @resume_noirq(), @thaw_noirq(), and @restore_noirq(), do not cause the PM
 * core to abort the resume transition during which they are returned.  The
 * error codes returned in those cases are only printed to the system logs for
 * debugging purposes.  Still, it is recommended that drivers only return error
 * codes from their resume methods in case of an unrecoverable failure (i.e.
 * when the device being handled refuses to resume and becomes unusable) to
 * allow the PM core to be modified in the future, so that it can avoid
 * attempting to handle devices that failed to resume and their children.
 *
 * It is allowed to unregister devices while the above callbacks are being
 * executed.  However, a callback routine MUST NOT try to unregister the device
 * it was called for, although it may unregister children of that device (for
 * example, if it detects that a child was unplugged while the system was
 * asleep).
 *
 * There also are callbacks related to runtime power management of devices.
 * Again, as a rule these callbacks are executed by the PM core for subsystems
 * (PM domains, device types, classes and bus types) and the subsystem-level
 * callbacks are expected to invoke the driver callbacks.  Moreover, the exact
 * actions to be performed by a device driver&apos;s callbacks generally depend on
 * the platform and subsystem the device belongs to.
 *
 * Refer to Documentation/power/runtime_pm.rst for more information about the
 * role of the @runtime_suspend(), @runtime_resume() and @runtime_idle()
 * callbacks in device runtime power management.
 */</doc>
<mbr r='dev_pm_ops::prepare' o='0' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::complete' o='64' t='void (*)(struct device *)'/>
<mbr r='dev_pm_ops::suspend' o='128' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::resume' o='192' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::freeze' o='256' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::thaw' o='320' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::poweroff' o='384' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::restore' o='448' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::suspend_late' o='512' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::resume_early' o='576' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::freeze_late' o='640' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::thaw_early' o='704' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::poweroff_late' o='768' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::restore_early' o='832' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::suspend_noirq' o='896' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::resume_noirq' o='960' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::freeze_noirq' o='1024' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::thaw_noirq' o='1088' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::poweroff_noirq' o='1152' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::restore_noirq' o='1216' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::runtime_suspend' o='1280' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::runtime_resume' o='1344' t='int (*)(struct device *)'/>
<mbr r='dev_pm_ops::runtime_idle' o='1408' t='int (*)(struct device *)'/>
<use f='linux-5.3.1/include/linux/pci.h' l='2056'/>
<size>184</size>
<use f='linux-5.3.1/drivers/acpi/ac.c' l='67' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/acpi/battery.c' l='1466' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/acpi/button.c' l='95' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/acpi/ec.c' l='1981'/>
<size>184</size>
<use f='linux-5.3.1/drivers/acpi/fan.c' l='36'/>
<size>184</size>
<use f='linux-5.3.1/drivers/acpi/thermal.c' l='95' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/ata/ahci.c' l='573'/>
<size>184</size>
<use f='linux-5.3.1/drivers/ata/libata-core.c' l='5807'/>
<size>184</size>
<use f='linux-5.3.1/drivers/base/platform.c' l='1189'/>
<size>184</size>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='22' c='pm_generic_runtime_suspend'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='41' c='pm_generic_runtime_resume'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='75' c='pm_generic_suspend_noirq'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='87' c='pm_generic_suspend_late'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='99' c='pm_generic_suspend'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='111' c='pm_generic_freeze_noirq'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='123' c='pm_generic_freeze_late'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='135' c='pm_generic_freeze'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='147' c='pm_generic_poweroff_noirq'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='159' c='pm_generic_poweroff_late'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='171' c='pm_generic_poweroff'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='183' c='pm_generic_thaw_noirq'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='195' c='pm_generic_thaw_early'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='207' c='pm_generic_thaw'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='219' c='pm_generic_resume_noirq'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='231' c='pm_generic_resume_early'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='243' c='pm_generic_resume'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='255' c='pm_generic_restore_noirq'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='267' c='pm_generic_restore_early'/>
<use f='linux-5.3.1/drivers/base/power/generic_ops.c' l='279' c='pm_generic_restore'/>
<size>184</size>
<use f='linux-5.3.1/drivers/base/power/main.c' l='316' c='pm_op'/>
<use f='linux-5.3.1/drivers/base/power/main.c' l='350' c='pm_late_early_op'/>
<use f='linux-5.3.1/drivers/base/power/main.c' l='385' c='pm_noirq_op'/>
<use f='linux-5.3.1/drivers/base/power/main.c' l='2082' c='pm_ops_is_empty'/>
<size>184</size>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='24' c='__rpm_get_callback'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='49' c='rpm_idle'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='49' c='rpm_suspend'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='49' c='rpm_resume'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='49' c='pm_runtime_force_suspend'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='49' c='pm_runtime_force_resume'/>
<size>184</size>
<use f='linux-5.3.1/drivers/gpu/drm/drm_mipi_dsi.c' l='78'/>
<size>184</size>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.h' l='2434'/>
<size>184</size>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.c' l='3078'/>
<size>184</size>
<use f='linux-5.3.1/drivers/i2c/busses/i2c-i801.c' l='1933' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/input/input.c' l='1741'/>
<size>184</size>
<use f='linux-5.3.1/drivers/input/serio/i8042.c' l='1282'/>
<size>184</size>
<use f='linux-5.3.1/drivers/input/serio/serio.c' l='962'/>
<size>184</size>
<use f='linux-5.3.1/drivers/leds/led-class.c' l='214' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='18139' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='7577'/>
<size>184</size>
<use f='linux-5.3.1/drivers/net/ethernet/marvell/sky2.c' l='5234' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='6229' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/net/ethernet/realtek/r8169_main.c' l='6471'/>
<size>184</size>
<use f='linux-5.3.1/drivers/net/phy/phy_device.c' l='328'/>
<size>184</size>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='752' c='pci_pm_suspend'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='818' c='pci_pm_suspend_noirq'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='959' c='pci_pm_resume'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1001'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1006' c='pci_pm_freeze'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1099' c='pci_pm_thaw'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1120' c='pci_pm_poweroff'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1231' c='pci_pm_restore'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1275' c='pci_pm_runtime_suspend'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1331' c='pci_pm_runtime_resume'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1358' c='pci_pm_runtime_idle'/>
<use f='linux-5.3.1/drivers/pci/pci-driver.c' l='1377'/>
<size>184</size>
<use f='linux-5.3.1/drivers/pci/pcie/portdrv_pci.c' l='64'/>
<size>184</size>
<use f='linux-5.3.1/drivers/pcmcia/cs.c' l='871'/>
<size>184</size>
<use f='linux-5.3.1/drivers/pcmcia/ds.c' l='1410'/>
<size>184</size>
<use f='linux-5.3.1/drivers/pcmcia/yenta_socket.c' l='1333'/>
<size>184</size>
<use f='linux-5.3.1/drivers/platform/x86/eeepc-laptop.c' l='932'/>
<size>184</size>
<use f='linux-5.3.1/drivers/pnp/driver.c' l='246'/>
<size>184</size>
<use f='linux-5.3.1/drivers/rtc/rtc-cmos.c' l='1122' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/scsi/scsi_priv.h' l='164'/>
<size>184</size>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='23' c='do_scsi_suspend'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='28' c='do_scsi_freeze'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='33' c='do_scsi_poweroff'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='38' c='do_scsi_resume'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='43' c='do_scsi_thaw'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='48' c='do_scsi_restore'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='54' c='scsi_dev_type_suspend'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='56' c='scsi_dev_type_suspend'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='73' c='scsi_dev_type_resume'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='75' c='scsi_dev_type_resume'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='107' c='scsi_bus_suspend_common'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='143' c='scsi_bus_resume_common'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='230' c='sdev_runtime_suspend'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='260' c='sdev_runtime_resume'/>
<use f='linux-5.3.1/drivers/scsi/scsi_pm.c' l='345'/>
<size>184</size>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='557'/>
<size>184</size>
<use f='linux-5.3.1/drivers/scsi/sr.c' l='88'/>
<size>184</size>
<use f='linux-5.3.1/drivers/tty/serial/8250/8250_exar.c' l='575' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/drivers/tty/serial/8250/8250_pci.c' l='3891' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/include/linux/usb/hcd.h' l='486'/>
<size>184</size>
<use f='linux-5.3.1/drivers/usb/core/hcd-pci.c' l='603'/>
<size>184</size>
<use f='linux-5.3.1/drivers/usb/core/port.c' l='288'/>
<size>184</size>
<use f='linux-5.3.1/drivers/usb/core/usb.c' l='493'/>
<size>184</size>
<use f='linux-5.3.1/drivers/video/backlight/backlight.c' l='281' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/kernel/time/alarmtimer.c' l='843'/>
<size>184</size>
<use f='linux-5.3.1/net/rfkill/core.c' l='891' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/net/wireless/sysfs.c' l='142' macro='1'/>
<size>184</size>
<use f='linux-5.3.1/sound/core/pcm.c' l='613'/>
<size>184</size>
<use f='linux-5.3.1/include/sound/hda_codec.h' l='470'/>
<size>184</size>
<use f='linux-5.3.1/sound/pci/hda/hda_codec.c' l='2992'/>
<size>184</size>
<use f='linux-5.3.1/sound/pci/hda/hda_intel.c' l='1154'/>
<size>184</size>
