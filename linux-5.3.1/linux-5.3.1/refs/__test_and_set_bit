<def f='linux-5.3.1/include/asm-generic/bitops-instrumented.h' l='155' ll='159' type='bool __test_and_set_bit(long nr, volatile unsigned long * addr)'/>
<use f='linux-5.3.1/include/asm-generic/bitops/le.h' l='90' u='c' c='__test_and_set_bit_le'/>
<doc f='linux-5.3.1/include/asm-generic/bitops-instrumented.h' l='147'>/**
 * __test_and_set_bit - Set a bit and return its old value
 * @nr: Bit to set
 * @addr: Address to count from
 *
 * This operation is non-atomic. If two instances of this operation race, one
 * can appear to succeed but actually fail.
 */</doc>
<use f='linux-5.3.1/arch/x86/events/core.c' l='779' u='c' c='__perf_sched_find_counter'/>
<use f='linux-5.3.1/arch/x86/events/core.c' l='787' u='c' c='__perf_sched_find_counter'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/cpuid-deps.c' l='113' u='c' c='do_clear_cpu_cap'/>
<use f='linux-5.3.1/arch/x86/kernel/process.c' l='376' u='c' c='amd_set_core_ssb_state'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='483' u='c' c='pkcs7_sig_note_authenticated_attr'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='495' u='c' c='pkcs7_sig_note_authenticated_attr'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='504' u='c' c='pkcs7_sig_note_authenticated_attr'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='513' u='c' c='pkcs7_sig_note_authenticated_attr'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='528' u='c' c='pkcs7_sig_note_authenticated_attr'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='532' u='c' c='pkcs7_sig_note_authenticated_attr'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gt/intel_engine.h' l='139' u='c' c='execlists_set_active_once'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_vma.h' l='197' u='c' c='i915_vma_set_userfault'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_sw_fence.c' l='246' u='c' c='__i915_sw_fence_check_if_after'/>
<use f='linux-5.3.1/drivers/input/ff-memless.c' l='338' u='c' c='ml_get_combo_effect'/>
<use f='linux-5.3.1/kernel/sysctl_binary.c' l='1378' u='c' c='warn_on_bintable'/>
<use f='linux-5.3.1/lib/xarray.c' l='92' u='c' c='node_set_mark'/>
<use f='linux-5.3.1/mm/mmap.c' l='3480' u='c' c='vm_lock_anon_vma'/>
<use f='linux-5.3.1/net/core/dev.c' l='4281' u='c' c='enqueue_to_backlog'/>
<use f='linux-5.3.1/net/mac80211/util.c' l='468' u='c' c='__ieee80211_stop_queue'/>
<use f='linux-5.3.1/net/sunrpc/auth_gss/svcauth_gss.c' l='626' u='c' c='gss_check_seq_num'/>
<use f='linux-5.3.1/security/keys/keyctl_pkey.c' l='51' u='c' c='keyctl_pkey_params_parse'/>
<def f='linux-5.3.1/tools/include/asm-generic/bitops/non-atomic.h' l='58' ll='66' type='int __test_and_set_bit(int nr, volatile unsigned long * addr)'/>
<doc f='linux-5.3.1/tools/include/asm-generic/bitops/non-atomic.h' l='49'>/**
 * __test_and_set_bit - Set a bit and return its old value
 * @nr: Bit to set
 * @addr: Address to count from
 *
 * This operation is non-atomic and can be reordered.
 * If two examples of this operation race, one can appear to succeed
 * but actually fail.  You must protect multiple accesses with a lock.
 */</doc>
