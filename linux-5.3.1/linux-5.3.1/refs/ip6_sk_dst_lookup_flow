<dec f='linux-5.3.1/include/net/ipv6.h' l='1022' type='struct dst_entry * ip6_sk_dst_lookup_flow(struct sock * sk, struct flowi6 * fl6, const struct in6_addr * final_dst, bool connected)'/>
<def f='linux-5.3.1/net/ipv6/ip6_output.c' l='1178' ll='1193' type='struct dst_entry * ip6_sk_dst_lookup_flow(struct sock * sk, struct flowi6 * fl6, const struct in6_addr * final_dst, bool connected)'/>
<dec f='linux-5.3.1/net/ipv6/ip6_output.c' l='1194' type='struct dst_entry * ip6_sk_dst_lookup_flow(struct sock * , struct flowi6 * , const struct in6_addr * , bool )'/>
<use f='linux-5.3.1/net/ipv6/ip6_output.c' l='1194' c='ip6_sk_dst_lookup_flow'/>
<use f='linux-5.3.1/net/ipv6/ip6_output.c' l='1194' u='a'/>
<doc f='linux-5.3.1/net/ipv6/ip6_output.c' l='1160'>/**
 *	ip6_sk_dst_lookup_flow - perform socket cached route lookup on flow
 *	@sk: socket which provides the dst cache and route info
 *	@fl6: flow to lookup
 *	@final_dst: final destination address for ipsec lookup
 *	@connected: whether @sk is connected or not
 *
 *	This function performs a route lookup on the given flow with the
 *	possibility of using the cached route in the socket if it is valid.
 *	It will take the socket dst lock when operating on the dst cache.
 *	As a result, this function can only be used in process context.
 *
 *	In addition, for a connected socket, cache the dst in the socket
 *	if the current cache is not valid.
 *
 *	It returns a valid dst pointer on success, or a pointer encoded
 *	error code.
 */</doc>
<use f='linux-5.3.1/net/ipv6/ping.c' l='119' u='c' c='ping_v6_sendmsg'/>
<use f='linux-5.3.1/net/ipv6/udp.c' l='1440' u='c' c='udpv6_sendmsg'/>
