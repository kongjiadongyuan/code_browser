<dec f='linux-5.3.1/include/linux/mempool.h' l='48' type='void * mempool_alloc(mempool_t * pool, gfp_t gfp_mask)'/>
<use f='linux-5.3.1/block/bio.c' l='206' u='c' c='bvec_alloc'/>
<use f='linux-5.3.1/block/bio.c' l='477' u='c' c='bio_alloc_bioset'/>
<use f='linux-5.3.1/block/bio.c' l='481' u='c' c='bio_alloc_bioset'/>
<use f='linux-5.3.1/block/bounce.c' l='327' u='c' c='__blk_queue_bounce'/>
<use f='linux-5.3.1/drivers/dma/dmaengine.c' l='1282' u='c' c='dmaengine_get_unmap_data'/>
<use f='linux-5.3.1/drivers/md/dm-io.c' l='446' u='c' c='sync_io'/>
<use f='linux-5.3.1/drivers/md/dm-io.c' l='478' u='c' c='async_io'/>
<use f='linux-5.3.1/drivers/md/dm-kcopyd.c' l='785' u='c' c='dm_kcopyd_copy'/>
<use f='linux-5.3.1/drivers/md/dm-kcopyd.c' l='867' u='c' c='dm_kcopyd_prepare_callback'/>
<use f='linux-5.3.1/drivers/md/dm-region-hash.c' l='292' u='c' c='__rh_alloc'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='833' u='c' c='sd_setup_unmap_cmnd'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='867' u='c' c='sd_setup_write_same16_cmnd'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='898' u='c' c='sd_setup_write_same10_cmnd'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='1084' u='c' c='sd_setup_rw32_cmnd'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='78' u='c' c='nfs_commitdata_alloc'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='85' u='c' c='nfs_commitdata_alloc'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='107' u='c' c='nfs_writehdr_alloc'/>
<use f='linux-5.3.1/lib/sg_pool.c' l='67' u='c' c='sg_pool_alloc'/>
<def f='linux-5.3.1/mm/mempool.c' l='375' ll='441' type='void * mempool_alloc(mempool_t * pool, gfp_t gfp_mask)'/>
<dec f='linux-5.3.1/mm/mempool.c' l='442' type='void * mempool_alloc(mempool_t * , gfp_t )'/>
<use f='linux-5.3.1/mm/mempool.c' l='442' c='mempool_alloc'/>
<use f='linux-5.3.1/mm/mempool.c' l='442' u='a'/>
<doc f='linux-5.3.1/mm/mempool.c' l='361'>/**
 * mempool_alloc - allocate an element from a specific memory pool
 * @pool:      pointer to the memory pool which was allocated via
 *             mempool_create().
 * @gfp_mask:  the usual allocation bitmask.
 *
 * this function only sleeps if the alloc_fn() function sleeps or
 * returns NULL. Note that due to preallocation, this function
 * *never* fails when called from process contexts. (it might
 * fail if called from an IRQ context.)
 * Note: using __GFP_ZERO is not supported.
 *
 * Return: pointer to the allocated element or %NULL on error.
 */</doc>
<use f='linux-5.3.1/net/sunrpc/auth_unix.c' l='46' u='c' c='unx_lookup_cred'/>
<use f='linux-5.3.1/net/sunrpc/sched.c' l='1037' u='c' c='rpc_malloc'/>
<use f='linux-5.3.1/net/sunrpc/sched.c' l='1112' u='c' c='rpc_alloc_task'/>
