<dec f='linux-5.3.1/drivers/acpi/internal.h' l='145' type='int acpi_device_get_power(struct acpi_device * device, int * state)'/>
<doc f='linux-5.3.1/drivers/acpi/internal.h' l='142'>/* --------------------------------------------------------------------------
                              Device Power Management
   -------------------------------------------------------------------------- */</doc>
<def f='linux-5.3.1/drivers/acpi/device_pm.c' l='75' ll='137' type='int acpi_device_get_power(struct acpi_device * device, int * state)'/>
<use f='linux-5.3.1/drivers/acpi/device_pm.c' l='312' u='c' c='acpi_bus_init_power'/>
<use f='linux-5.3.1/drivers/acpi/device_pm.c' l='382' u='c' c='acpi_device_update_power'/>
<doc f='linux-5.3.1/drivers/acpi/device_pm.c' l='61'>/**
 * acpi_device_get_power - Get power state of an ACPI device.
 * @device: Device to get the power state of.
 * @state: Place to store the power state of the device.
 *
 * This function does not update the device&apos;s power.state field, but it may
 * update its parent&apos;s power.state field (when the parent&apos;s power state is
 * unknown and the device&apos;s power state turns out to be D0).
 *
 * Also, it does not update power resource reference counters to ensure that
 * the power state returned by it will be persistent and it may return a power
 * state shallower than previously set by acpi_device_set_power() for @device
 * (if that power state depends on any power resources).
 */</doc>
<use f='linux-5.3.1/drivers/acpi/device_sysfs.c' l='349' u='c' c='real_power_state_show'/>
