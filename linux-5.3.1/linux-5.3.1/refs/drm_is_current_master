<dec f='linux-5.3.1/include/drm/drm_auth.h' l='111' type='bool drm_is_current_master(struct drm_file * fpriv)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='188' u='c' c='drm_setmaster_ioctl'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='232' u='c' c='drm_dropmaster_ioctl'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='277' u='c' c='drm_master_release'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='308' ll='311' type='bool drm_is_current_master(struct drm_file * fpriv)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='312' type='bool drm_is_current_master(struct drm_file * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='312' c='drm_is_current_master'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='312' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_auth.c' l='298'>/**
 * drm_is_current_master - checks whether @priv is the current master
 * @fpriv: DRM file private
 *
 * Checks whether @fpriv is current master on its device. This decides whether a
 * client is allowed to run DRM_MASTER IOCTLs.
 *
 * Most of the modern IOCTL which require DRM_MASTER are for kernel modesetting
 * - the current master is assumed to own the non-shareable display hardware.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_debugfs.c' l='102' u='c' c='drm_clients_info'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='541' u='c' c='drm_mode_getfb'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='545' u='c' c='drm_ioctl_permit'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c' l='2385' u='c' c='i915_gem_do_execbuffer'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c' l='2479' u='c' c='i915_gem_do_execbuffer'/>
