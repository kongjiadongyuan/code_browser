<dec f='linux-5.3.1/include/linux/bitmap.h' l='145' type='unsigned long bitmap_find_next_zero_area_off(unsigned long * map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask, unsigned long align_offset)'/>
<use f='linux-5.3.1/include/linux/bitmap.h' l='171' u='c' c='bitmap_find_next_zero_area'/>
<def f='linux-5.3.1/lib/bitmap.c' l='305' ll='328' type='unsigned long bitmap_find_next_zero_area_off(unsigned long * map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask, unsigned long align_offset)'/>
<dec f='linux-5.3.1/lib/bitmap.c' l='329' type='unsigned long bitmap_find_next_zero_area_off(unsigned long * , unsigned long , unsigned long , unsigned int , unsigned long , unsigned long )'/>
<use f='linux-5.3.1/lib/bitmap.c' l='329' c='bitmap_find_next_zero_area_off'/>
<use f='linux-5.3.1/lib/bitmap.c' l='329' u='a'/>
<doc f='linux-5.3.1/lib/bitmap.c' l='292'>/**
 * bitmap_find_next_zero_area_off - find a contiguous aligned zero area
 * @map: The address to base the search on
 * @size: The bitmap size in bits
 * @start: The bitnumber to start searching at
 * @nr: The number of zeroed bits we&apos;re looking for
 * @align_mask: Alignment mask for zero area
 * @align_offset: Alignment offset for zero area.
 *
 * The @align_mask should be one less than a power of 2; the effect is that
 * the bit offset of all zero areas this function finds plus @align_offset
 * is multiple of that power of 2.
 */</doc>
<use f='linux-5.3.1/lib/genalloc.c' l='674' u='c' c='gen_pool_first_fit_align'/>
