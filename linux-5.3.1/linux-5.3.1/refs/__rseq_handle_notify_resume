<dec f='linux-5.3.1/include/linux/sched.h' l='1888' type='void __rseq_handle_notify_resume(struct ksignal * sig, struct pt_regs * regs)'/>
<use f='linux-5.3.1/include/linux/sched.h' l='1894' u='c' c='rseq_handle_notify_resume'/>
<def f='linux-5.3.1/kernel/rseq.c' l='262' ll='281' type='void __rseq_handle_notify_resume(struct ksignal * ksig, struct pt_regs * regs)'/>
<doc f='linux-5.3.1/kernel/rseq.c' l='251'>/*
 * This resume handler must always be executed between any of:
 * - preemption,
 * - signal delivery,
 * and return to user-space.
 *
 * This is how we can ensure that the entire rseq critical section
 * will issue the commit instruction only if executed atomically with
 * respect to other threads scheduled on the same CPU, and with respect
 * to signal handlers.
 */</doc>
