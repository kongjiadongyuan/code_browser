<dec f='linux-5.3.1/include/linux/smp.h' l='44' type='void on_each_cpu_mask(const struct cpumask * mask, smp_call_func_t func, void * info, bool wait)'/>
<doc f='linux-5.3.1/include/linux/smp.h' l='40'>/*
 * Call a function on processors specified by mask, which might include
 * the local one.
 */</doc>
<use f='linux-5.3.1/arch/x86/events/core.c' l='2111' u='c' c='x86_pmu_event_mapped'/>
<use f='linux-5.3.1/arch/x86/events/core.c' l='2121' u='c' c='x86_pmu_event_unmapped'/>
<use f='linux-5.3.1/arch/x86/kernel/ldt.c' l='337' u='c' c='install_ldt'/>
<use f='linux-5.3.1/drivers/cpuidle/driver.c' l='216' u='c' c='__cpuidle_register_driver'/>
<use f='linux-5.3.1/drivers/cpuidle/driver.c' l='238' u='c' c='__cpuidle_unregister_driver'/>
<def f='linux-5.3.1/kernel/smp.c' l='640' ll='653' type='void on_each_cpu_mask(const struct cpumask * mask, smp_call_func_t func, void * info, bool wait)'/>
<dec f='linux-5.3.1/kernel/smp.c' l='654' type='void on_each_cpu_mask(const struct cpumask * , smp_call_func_t , void * , bool )'/>
<use f='linux-5.3.1/kernel/smp.c' l='654' c='on_each_cpu_mask'/>
<use f='linux-5.3.1/kernel/smp.c' l='654' u='a'/>
<use f='linux-5.3.1/kernel/smp.c' l='697' u='c' c='on_each_cpu_cond_mask'/>
<doc f='linux-5.3.1/kernel/smp.c' l='624'>/**
 * on_each_cpu_mask(): Run a function on processors specified by
 * cpumask, which may include the local processor.
 * @mask: The set of cpus to run on (only runs on online subset).
 * @func: The function to run. This must be fast and non-blocking.
 * @info: An arbitrary pointer to pass to the function.
 * @wait: If true, wait (atomically) until function has completed
 *        on other CPUs.
 *
 * If @wait is true, then returns once @func has returned.
 *
 * You must not call this function with disabled interrupts or from a
 * hardware interrupt handler or from a bottom half handler.  The
 * exception is that it may be used during early boot while
 * early_boot_irqs_disabled is set.
 */</doc>
