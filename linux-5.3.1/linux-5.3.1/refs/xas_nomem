<dec f='linux-5.3.1/include/linux/xarray.h' l='1468' type='bool xas_nomem(struct xa_state * , gfp_t )'/>
<use f='linux-5.3.1/lib/idr.c' l='462' u='c' c='ida_alloc_range'/>
<def f='linux-5.3.1/lib/xarray.c' l='295' ll='309' type='bool xas_nomem(struct xa_state * xas, gfp_t gfp)'/>
<dec f='linux-5.3.1/lib/xarray.c' l='310' type='bool xas_nomem(struct xa_state * , gfp_t )'/>
<use f='linux-5.3.1/lib/xarray.c' l='310' c='xas_nomem'/>
<use f='linux-5.3.1/lib/xarray.c' l='310' u='a'/>
<doc f='linux-5.3.1/lib/xarray.c' l='277'>/**
 * xas_nomem() - Allocate memory if needed.
 * @xas: XArray operation state.
 * @gfp: Memory allocation flags.
 *
 * If we need to add new nodes to the XArray, we try to allocate memory
 * with GFP_NOWAIT while holding the lock, which will usually succeed.
 * If it fails, @xas is flagged as needing memory to continue.  The caller
 * should drop the lock and call xas_nomem().  If xas_nomem() succeeds,
 * the caller should retry the operation.
 *
 * Forward progress is guaranteed as one node is allocated here and
 * stored in the xa_state where it will be found by xas_alloc().  More
 * nodes will likely be found in the slab allocator, but we do not tie
 * them up here.
 *
 * Return: true if memory was needed, and was successfully allocated.
 */</doc>
<use f='linux-5.3.1/mm/filemap.c' l='888' u='c' c='__add_to_page_cache_locked'/>
<use f='linux-5.3.1/mm/shmem.c' l='633' u='c' c='shmem_add_to_page_cache'/>
<use f='linux-5.3.1/mm/swap_state.c' l='144' u='c' c='add_to_swap_cache'/>
