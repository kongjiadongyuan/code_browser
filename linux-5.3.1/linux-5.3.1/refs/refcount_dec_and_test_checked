<dec f='linux-5.3.1/include/linux/refcount.h' l='54' type='bool refcount_dec_and_test_checked(refcount_t * r)'/>
<def f='linux-5.3.1/lib/refcount.c' l='218' ll='221' type='bool refcount_dec_and_test_checked(refcount_t * r)'/>
<dec f='linux-5.3.1/lib/refcount.c' l='222' type='bool refcount_dec_and_test_checked(refcount_t * )'/>
<use f='linux-5.3.1/lib/refcount.c' l='222' c='refcount_dec_and_test_checked'/>
<use f='linux-5.3.1/lib/refcount.c' l='222' u='a'/>
<use f='linux-5.3.1/lib/refcount.c' l='236' u='c' c='refcount_dec_checked'/>
<doc f='linux-5.3.1/lib/refcount.c' l='205'>/**
 * refcount_dec_and_test_checked - decrement a refcount and test if it is 0
 * @r: the refcount
 *
 * Similar to atomic_dec_and_test(), it will WARN on underflow and fail to
 * decrement when saturated at UINT_MAX.
 *
 * Provides release memory ordering, such that prior loads and stores are done
 * before, and provides an acquire ordering on success such that free()
 * must come after.
 *
 * Return: true if the resulting refcount is 0, false otherwise
 */</doc>
