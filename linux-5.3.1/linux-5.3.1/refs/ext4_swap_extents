<dec f='linux-5.3.1/fs/ext4/ext4.h' l='3251' type='int ext4_swap_extents(handle_t * handle, struct inode * inode1, struct inode * inode2, ext4_lblk_t lblk1, ext4_lblk_t lblk2, ext4_lblk_t count, int mark_unwritten, int * err)'/>
<def f='linux-5.3.1/fs/ext4/extents.c' l='5698' ll='5872' type='int ext4_swap_extents(handle_t * handle, struct inode * inode1, struct inode * inode2, ext4_lblk_t lblk1, ext4_lblk_t lblk2, ext4_lblk_t count, int unwritten, int * erp)'/>
<doc f='linux-5.3.1/fs/ext4/extents.c' l='5678'>/**
 * ext4_swap_extents() - Swap extents between two inodes
 * @handle: handle for this transaction
 * @inode1:	First inode
 * @inode2:	Second inode
 * @lblk1:	Start block for first inode
 * @lblk2:	Start block for second inode
 * @count:	Number of blocks to swap
 * @unwritten: Mark second inode&apos;s extents as unwritten after swap
 * @erp:	Pointer to save error value
 *
 * This helper routine does exactly what is promise &quot;swap extents&quot;. All other
 * stuff such as page-cache locking consistency, bh mapping consistency or
 * extent&apos;s data copying must be performed by caller.
 * Locking:
 * 		i_mutex is held for both inodes
 * 		i_data_sem is locked for write for both inodes
 * Assumptions:
 *		All pages from requested range are locked for both inodes
 */</doc>
<use f='linux-5.3.1/fs/ext4/move_extent.c' l='339' u='c' c='move_extent_per_page'/>
<use f='linux-5.3.1/fs/ext4/move_extent.c' l='360' u='c' c='move_extent_per_page'/>
<use f='linux-5.3.1/fs/ext4/move_extent.c' l='420' u='c' c='move_extent_per_page'/>
