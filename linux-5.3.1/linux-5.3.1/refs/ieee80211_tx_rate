<def f='linux-5.3.1/include/net/mac80211.h' l='924' ll='928'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='932' c='ieee80211_rate_set_vht'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='941' c='ieee80211_rate_get_vht_mcs'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='947' c='ieee80211_rate_get_vht_nss'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='1011'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='1033'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='1043'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='4492' c='ieee80211_get_tx_rates'/>
<use f='linux-5.3.1/include/net/mac80211.h' l='5899'/>
<size>3</size>
<doc f='linux-5.3.1/include/net/mac80211.h' l='892'>/**
 * struct ieee80211_tx_rate - rate selection/status
 *
 * @idx: rate index to attempt to send with
 * @flags: rate control flags (&amp;enum mac80211_rate_control_flags)
 * @count: number of tries in this rate before going to the next rate
 *
 * A value of -1 for @idx indicates an invalid rate and, if used
 * in an array of retry rates, that no more rates should be tried.
 *
 * When used for transmit status reporting, the driver should
 * always report the rate along with the flags it used.
 *
 * &amp;struct ieee80211_tx_info contains an array of these structs
 * in the control information, and it will be filled by the rate
 * control algorithm according to what should be sent. For example,
 * if this array contains, in the format { &lt;idx&gt;, &lt;count&gt; } the
 * information::
 *
 *    { 3, 2 }, { 2, 2 }, { 1, 4 }, { -1, 0 }, { -1, 0 }
 *
 * then this means that the frame should be transmitted
 * up to twice at rate 3, up to twice at rate 2, and up to four
 * times at rate 1 if it doesn&apos;t get acknowledged. Say it gets
 * acknowledged by the peer after the fifth attempt, the status
 * information should then contain::
 *
 *   { 3, 2 }, { 2, 2 }, { 1, 1 }, { -1, 0 } ...
 *
 * since it was transmitted twice at rate 3, twice at rate 2
 * and once at rate 1 after which we received an acknowledgement.
 */</doc>
<mbr r='ieee80211_tx_rate::idx' o='0' t='s8'/>
<mbr r='ieee80211_tx_rate::count' o='8' t='u16'/>
<mbr r='ieee80211_tx_rate::flags' o='13' t='u16'/>
<use f='linux-5.3.1/net/mac80211/sta_info.h' l='595'/>
<use f='linux-5.3.1/net/mac80211/sta_info.h' l='782' c='sta_set_rate_info_tx'/>
<use f='linux-5.3.1/net/mac80211/ieee80211_i.h' l='176'/>
<size>3</size>
<use f='linux-5.3.1/net/mac80211/cfg.c' l='684' c='sta_set_rate_info_tx'/>
<size>3</size>
<use f='linux-5.3.1/net/mac80211/rate.c' l='594' c='rate_fixup_ratelist'/>
<use f='linux-5.3.1/net/mac80211/rate.c' l='696' c='rate_control_fill_sta_table'/>
<use f='linux-5.3.1/net/mac80211/rate.c' l='811' c='rate_control_apply_mask'/>
<use f='linux-5.3.1/net/mac80211/rate.c' l='850' c='ieee80211_get_tx_rates'/>
<size>3</size>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel.c' l='266' c='minstrel_tx_status'/>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel.c' l='335' c='minstrel_get_rate'/>
<size>3</size>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel_ht.c' l='281' c='minstrel_ht_get_group_idx'/>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel_ht.c' l='289' c='minstrel_vht_get_group_idx'/>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel_ht.c' l='299' c='minstrel_ht_get_stats'/>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel_ht.c' l='639' c='minstrel_ht_txstat_valid'/>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel_ht.c' l='733' c='minstrel_ht_tx_status'/>
<use f='linux-5.3.1/net/mac80211/rc80211_minstrel_ht.c' l='1090' c='minstrel_ht_get_rate'/>
<size>3</size>
<use f='linux-5.3.1/net/mac80211/tx.c' l='748' c='ieee80211_tx_h_rate_ctrl'/>
<size>3</size>
