<dec f='linux-5.3.1/include/pcmcia/ds.h' l='220' type='void pcmcia_disable_device(struct pcmcia_device * p_dev)'/>
<def f='linux-5.3.1/drivers/pcmcia/pcmcia_resource.c' l='938' ll='956' type='void pcmcia_disable_device(struct pcmcia_device * p_dev)'/>
<dec f='linux-5.3.1/drivers/pcmcia/pcmcia_resource.c' l='957' type='void pcmcia_disable_device(struct pcmcia_device * )'/>
<use f='linux-5.3.1/drivers/pcmcia/pcmcia_resource.c' l='957' c='pcmcia_disable_device'/>
<use f='linux-5.3.1/drivers/pcmcia/pcmcia_resource.c' l='957' u='a'/>
<doc f='linux-5.3.1/drivers/pcmcia/pcmcia_resource.c' l='926'>/**
 * pcmcia_disable_device() - disable and clean up a PCMCIA device
 * @p_dev: the associated PCMCIA device
 *
 * pcmcia_disable_device() is the driver-callable counterpart to
 * pcmcia_enable_device(): If a PCMCIA device is no longer used,
 * drivers are expected to clean up and disable the device by calling
 * this function. Any I/O ranges (iomem and ioports) will be released,
 * the Vpp voltage will be set to 0, and IRQs will no longer be
 * generated -- at least if there is no other card function (of
 * multifunction devices) being used.
 */</doc>
