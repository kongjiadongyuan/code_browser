<dec f='linux-5.3.1/include/linux/clkdev.h' l='52' type='int devm_clk_hw_register_clkdev(struct device * dev, struct clk_hw * hw, const char * con_id, const char * dev_id)'/>
<def f='linux-5.3.1/drivers/clk/clkdev.c' l='431' ll='446' type='int devm_clk_hw_register_clkdev(struct device * dev, struct clk_hw * hw, const char * con_id, const char * dev_id)'/>
<dec f='linux-5.3.1/drivers/clk/clkdev.c' l='447' type='int devm_clk_hw_register_clkdev(struct device * , struct clk_hw * , const char * , const char * )'/>
<use f='linux-5.3.1/drivers/clk/clkdev.c' l='447' c='devm_clk_hw_register_clkdev'/>
<use f='linux-5.3.1/drivers/clk/clkdev.c' l='447' u='a'/>
<doc f='linux-5.3.1/drivers/clk/clkdev.c' l='416'>/**
 * devm_clk_hw_register_clkdev - managed clk lookup registration for clk_hw
 * @dev: device this lookup is bound
 * @hw: struct clk_hw to associate with all clk_lookups
 * @con_id: connection ID string on device
 * @dev_id: format string describing device name
 *
 * con_id or dev_id may be NULL as a wildcard, just as in the rest of
 * clkdev.
 *
 * To make things easier for mass registration, we detect error clk_hws
 * from a previous clk_hw_register_*() call, and return the error code for
 * those.  This is to permit this function to be called immediately
 * after clk_hw_register_*().
 */</doc>
