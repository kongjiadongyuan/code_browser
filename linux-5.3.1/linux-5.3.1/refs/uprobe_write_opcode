<dec f='linux-5.3.1/include/linux/uprobes.h' l='112' type='int uprobe_write_opcode(struct arch_uprobe * auprobe, struct mm_struct * mm, unsigned long vaddr, uprobe_opcode_t )'/>
<def f='linux-5.3.1/kernel/events/uprobes.c' l='460' ll='517' type='int uprobe_write_opcode(struct arch_uprobe * auprobe, struct mm_struct * mm, unsigned long vaddr, uprobe_opcode_t opcode)'/>
<use f='linux-5.3.1/kernel/events/uprobes.c' l='530' u='c' c='set_swbp'/>
<use f='linux-5.3.1/kernel/events/uprobes.c' l='545' u='c' c='set_orig_insn'/>
<doc f='linux-5.3.1/kernel/events/uprobes.c' l='443'>/*
 * NOTE:
 * Expect the breakpoint instruction to be the smallest size instruction for
 * the architecture. If an arch has variable length instruction and the
 * breakpoint instruction is not of the smallest length instruction
 * supported by that architecture then we need to modify is_trap_at_addr and
 * uprobe_write_opcode accordingly. This would never be a problem for archs
 * that have fixed length instructions.
 *
 * uprobe_write_opcode - write the opcode at a given virtual address.
 * @mm: the probed process address space.
 * @vaddr: the virtual address to store the opcode.
 * @opcode: opcode to be written at @vaddr.
 *
 * Called with mm-&gt;mmap_sem held for write.
 * Return 0 (success) or a negative errno.
 */</doc>
