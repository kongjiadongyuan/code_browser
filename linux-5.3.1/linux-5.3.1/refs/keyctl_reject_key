<dec f='linux-5.3.1/security/keys/internal.h' l='239' type='long keyctl_reject_key(key_serial_t , unsigned int , unsigned int , key_serial_t )'/>
<use f='linux-5.3.1/security/keys/compat.c' l='119' u='c' c='__do_compat_sys_keyctl'/>
<use f='linux-5.3.1/security/keys/keyctl.c' l='1244' u='c' c='keyctl_negate_key'/>
<def f='linux-5.3.1/security/keys/keyctl.c' l='1262' ll='1311' type='long keyctl_reject_key(key_serial_t id, unsigned int timeout, unsigned int error, key_serial_t ringid)'/>
<use f='linux-5.3.1/security/keys/keyctl.c' l='1799' u='c' c='__do_sys_keyctl'/>
<doc f='linux-5.3.1/security/keys/keyctl.c' l='1247'>/*
 * Negatively instantiate the key with the given timeout (in seconds) and error
 * code and link the key into the destination keyring if one is given.
 *
 * The caller must have the appropriate instantiation permit set for this to
 * work (see keyctl_assume_authority).  No other permissions are required.
 *
 * The key and any links to the key will be automatically garbage collected
 * after the timeout expires.
 *
 * Negative keys are used to rate limit repeated request_key() calls by causing
 * them to return the specified error code until the negative key expires.
 *
 * If successful, 0 will be returned.
 */</doc>
