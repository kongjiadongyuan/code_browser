<def f='linux-5.3.1/kernel/trace/trace.h' l='1464' ll='1479' type='void event_trigger_unlock_commit_regs(struct trace_event_file * file, struct ring_buffer * buffer, struct ring_buffer_event * event, void * entry, unsigned long irq_flags, int pc, struct pt_regs * regs)'/>
<doc f='linux-5.3.1/kernel/trace/trace.h' l='1448'>/**
 * event_trigger_unlock_commit_regs - handle triggers and finish event commit
 * @file: The file pointer assoctiated to the event
 * @buffer: The ring buffer that the event is being written to
 * @event: The event meta data in the ring buffer
 * @entry: The event itself
 * @irq_flags: The state of the interrupts at the start of the event
 * @pc: The state of the preempt count at the start of the event.
 *
 * This is a helper function to handle triggers that require data
 * from the event itself. It also tests the event against filters and
 * if the event is soft disabled and should be discarded.
 *
 * Same as event_trigger_unlock_commit() but calls
 * trace_buffer_unlock_commit_regs() instead of trace_buffer_unlock_commit().
 */</doc>
<use f='linux-5.3.1/kernel/trace/trace_kprobe.c' l='1018' u='c' c='__kprobe_trace_func'/>
<use f='linux-5.3.1/kernel/trace/trace_kprobe.c' l='1067' u='c' c='__kretprobe_trace_func'/>
