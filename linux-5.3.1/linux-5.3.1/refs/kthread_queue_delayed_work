<dec f='linux-5.3.1/include/linux/kthread.h' l='184' type='bool kthread_queue_delayed_work(struct kthread_worker * worker, struct kthread_delayed_work * dwork, unsigned long delay)'/>
<use f='linux-5.3.1/drivers/ptp/ptp_clock.c' l='189' u='c' c='ptp_aux_kworker'/>
<def f='linux-5.3.1/kernel/kthread.c' l='913' ll='930' type='bool kthread_queue_delayed_work(struct kthread_worker * worker, struct kthread_delayed_work * dwork, unsigned long delay)'/>
<dec f='linux-5.3.1/kernel/kthread.c' l='931' type='bool kthread_queue_delayed_work(struct kthread_worker * , struct kthread_delayed_work * , unsigned long )'/>
<use f='linux-5.3.1/kernel/kthread.c' l='931' c='kthread_queue_delayed_work'/>
<use f='linux-5.3.1/kernel/kthread.c' l='931' u='a'/>
<doc f='linux-5.3.1/kernel/kthread.c' l='898'>/**
 * kthread_queue_delayed_work - queue the associated kthread work
 *	after a delay.
 * @worker: target kthread_worker
 * @dwork: kthread_delayed_work to queue
 * @delay: number of jiffies to wait before queuing
 *
 * If the work has not been pending it starts a timer that will queue
 * the work after the given @delay. If @delay is zero, it queues the
 * work immediately.
 *
 * Return: %false if the @work has already been pending. It means that
 * either the timer was running or the work was queued. It returns %true
 * otherwise.
 */</doc>
