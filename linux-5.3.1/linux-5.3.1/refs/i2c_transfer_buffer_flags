<dec f='linux-5.3.1/include/linux/i2c.h' l='53' type='int i2c_transfer_buffer_flags(const struct i2c_client * client, char * buf, int count, u16 flags)'/>
<use f='linux-5.3.1/include/linux/i2c.h' l='67' u='c' c='i2c_master_recv'/>
<use f='linux-5.3.1/include/linux/i2c.h' l='82' u='c' c='i2c_master_recv_dmasafe'/>
<use f='linux-5.3.1/include/linux/i2c.h' l='97' u='c' c='i2c_master_send'/>
<use f='linux-5.3.1/include/linux/i2c.h' l='112' u='c' c='i2c_master_send_dmasafe'/>
<doc f='linux-5.3.1/include/linux/i2c.h' l='46'>/*
 * The master routines are the ones normally used to transmit data to devices
 * on a bus (or read from them). Apart from two basic transfer functions to
 * transmit one message at a time, a more complex version can be used to
 * transmit an arbitrary number of messages without interruption.
 * @count must be be less than 64k since msg.len is u16.
 */</doc>
<def f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='2064' ll='2082' type='int i2c_transfer_buffer_flags(const struct i2c_client * client, char * buf, int count, u16 flags)'/>
<dec f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='2083' type='int i2c_transfer_buffer_flags(const struct i2c_client * , char * , int , u16 )'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='2083' c='i2c_transfer_buffer_flags'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='2083' u='a'/>
<doc f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='2054'>/**
 * i2c_transfer_buffer_flags - issue a single I2C message transferring data
 *			       to/from a buffer
 * @client: Handle to slave device
 * @buf: Where the data is stored
 * @count: How many bytes to transfer, must be less than 64k since msg.len is u16
 * @flags: The flags to be used for the message, e.g. I2C_M_RD for reads
 *
 * Returns negative errno, or else the number of bytes transferred.
 */</doc>
