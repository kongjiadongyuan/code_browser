<dec f='linux-5.3.1/kernel/sched/cpupri.h' l='21' type='int cpupri_find(struct cpupri * cp, struct task_struct * p, struct cpumask * lowest_mask)'/>
<def f='linux-5.3.1/kernel/sched/cpupri.c' l='59' ll='119' type='int cpupri_find(struct cpupri * cp, struct task_struct * p, struct cpumask * lowest_mask)'/>
<doc f='linux-5.3.1/kernel/sched/cpupri.c' l='44'>/**
 * cpupri_find - find the best (lowest-pri) CPU in the system
 * @cp: The cpupri context
 * @p: The task
 * @lowest_mask: A mask to fill in with selected CPUs (or NULL)
 *
 * Note: This function returns the recommended CPUs as calculated during the
 * current invocation.  By the time the call returns, the CPUs may have in
 * fact changed priorities any number of times.  While not ideal, it is not
 * an issue of correctness since the normal rebalancer logic will correct
 * any discrepancies created by racing against the uncertainty of the current
 * priority configuration.
 *
 * Return: (int)bool - CPUs were found
 */</doc>
<use f='linux-5.3.1/kernel/sched/rt.c' l='1451' u='c' c='check_preempt_equal_prio'/>
<use f='linux-5.3.1/kernel/sched/rt.c' l='1459' u='c' c='check_preempt_equal_prio'/>
<use f='linux-5.3.1/kernel/sched/rt.c' l='1659' u='c' c='find_lowest_rq'/>
