<def f='linux-5.3.1/include/linux/rculist.h' l='599' ll='607' type='void hlist_add_behind_rcu(struct hlist_node * n, struct hlist_node * prev)'/>
<doc f='linux-5.3.1/include/linux/rculist.h' l='581'>/**
 * hlist_add_behind_rcu
 * @n: the new element to add to the hash list.
 * @prev: the existing element to add the new element after.
 *
 * Description:
 * Adds the specified element to the specified hlist
 * after the specified node while permitting racing traversals.
 *
 * The caller must take whatever precautions are necessary
 * (such as holding appropriate locks) to avoid racing
 * with another list-mutation primitive, such as hlist_add_head_rcu()
 * or hlist_del_rcu(), running on this same list.
 * However, it is perfectly legal to run concurrently with
 * the _rcu list-traversal primitives, such as
 * hlist_for_each_entry_rcu(), used to prevent memory-consistency
 * problems on Alpha CPUs.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_hashtab.c' l='132' u='c' c='drm_ht_insert_item'/>
<use f='linux-5.3.1/fs/notify/mark.c' l='615' u='c' c='fsnotify_add_mark_list'/>
<use f='linux-5.3.1/net/ipv4/fib_trie.c' l='1089' u='c' c='fib_insert_alias'/>
<use f='linux-5.3.1/net/ipv6/addrlabel.c' l='232' u='c' c='__ip6addrlbl_add'/>
<use f='linux-5.3.1/net/xfrm/xfrm_policy.c' l='540' u='c' c='xfrm_dst_hash_transfer'/>
<use f='linux-5.3.1/net/xfrm/xfrm_policy.c' l='854' u='c' c='xfrm_policy_inexact_list_reinsert'/>
<use f='linux-5.3.1/net/xfrm/xfrm_policy.c' l='1335' u='c' c='xfrm_hash_rebuild'/>
<use f='linux-5.3.1/net/xfrm/xfrm_policy.c' l='1521' u='c' c='xfrm_policy_insert_inexact_list'/>
<use f='linux-5.3.1/net/xfrm/xfrm_policy.c' l='1558' u='c' c='xfrm_policy_insert_list'/>
