<dec f='linux-5.3.1/include/linux/bitmap.h' l='175' type='int __bitmap_parse(const char * buf, unsigned int buflen, int is_user, unsigned long * dst, int nbits)'/>
<use f='linux-5.3.1/include/linux/bitmap.h' l='414' u='c' c='bitmap_parse'/>
<def f='linux-5.3.1/lib/bitmap.c' l='356' ll='424' type='int __bitmap_parse(const char * buf, unsigned int buflen, int is_user, unsigned long * maskp, int nmaskbits)'/>
<dec f='linux-5.3.1/lib/bitmap.c' l='425' type='int __bitmap_parse(const char * , unsigned int , int , unsigned long * , int )'/>
<use f='linux-5.3.1/lib/bitmap.c' l='425' c='__bitmap_parse'/>
<use f='linux-5.3.1/lib/bitmap.c' l='425' u='a'/>
<use f='linux-5.3.1/lib/bitmap.c' l='448' u='c' c='bitmap_parse_user'/>
<doc f='linux-5.3.1/lib/bitmap.c' l='340'>/**
 * __bitmap_parse - convert an ASCII hex string into a bitmap.
 * @buf: pointer to buffer containing string.
 * @buflen: buffer size in bytes.  If string is smaller than this
 *    then it must be terminated with a \0.
 * @is_user: location of buffer, 0 indicates kernel space
 * @maskp: pointer to bitmap array that will contain result.
 * @nmaskbits: size of bitmap, in bits.
 *
 * Commas group hex digits into chunks.  Each chunk defines exactly 32
 * bits of the resultant bitmask.  No chunk may specify a value larger
 * than 32 bits (%-EOVERFLOW), and if a chunk specifies a smaller value
 * then leading 0-bits are prepended.  %-EINVAL is returned for illegal
 * characters and for grouping errors such as &quot;1,,5&quot;, &quot;,44&quot;, &quot;,&quot; and &quot;&quot;.
 * Leading and trailing whitespace accepted, but not embedded whitespace.
 */</doc>
