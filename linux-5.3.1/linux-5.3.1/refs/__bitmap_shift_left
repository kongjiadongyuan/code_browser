<dec f='linux-5.3.1/include/linux/bitmap.h' l='127' type='void __bitmap_shift_left(unsigned long * dst, const unsigned long * src, unsigned int shift, unsigned int nbits)'/>
<use f='linux-5.3.1/include/linux/bitmap.h' l='408' u='c' c='bitmap_shift_left'/>
<def f='linux-5.3.1/lib/bitmap.c' l='126' ll='148' type='void __bitmap_shift_left(unsigned long * dst, const unsigned long * src, unsigned int shift, unsigned int nbits)'/>
<dec f='linux-5.3.1/lib/bitmap.c' l='149' type='void __bitmap_shift_left(unsigned long * , const unsigned long * , unsigned int , unsigned int )'/>
<use f='linux-5.3.1/lib/bitmap.c' l='149' c='__bitmap_shift_left'/>
<use f='linux-5.3.1/lib/bitmap.c' l='149' u='a'/>
<use f='linux-5.3.1/lib/bitmap.c' l='415' u='c' c='__bitmap_parse'/>
<doc f='linux-5.3.1/lib/bitmap.c' l='114'>/**
 * __bitmap_shift_left - logical left shift of the bits in a bitmap
 *   @dst : destination bitmap
 *   @src : source bitmap
 *   @shift : shift by this many bits
 *   @nbits : bitmap size, in bits
 *
 * Shifting left (multiplying) means moving bits in the LS -&gt; MS
 * direction.  Zeros are fed into the vacated LS bit positions
 * and those MS bits shifted off the top are lost.
 */</doc>
