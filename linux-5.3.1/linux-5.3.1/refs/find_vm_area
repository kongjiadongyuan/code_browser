<dec f='linux-5.3.1/include/linux/vmalloc.h' l='147' type='struct vm_struct * find_vm_area(const void * addr)'/>
<use f='linux-5.3.1/include/linux/vmalloc.h' l='158' u='c' c='set_vm_flush_reset_perms'/>
<use f='linux-5.3.1/arch/x86/mm/ioremap.c' l='445' u='c' c='iounmap'/>
<use f='linux-5.3.1/kernel/fork.c' l='243' u='c' c='alloc_thread_stack_node'/>
<def f='linux-5.3.1/mm/vmalloc.c' l='2119' ll='2128' type='struct vm_struct * find_vm_area(const void * addr)'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='2232' u='c' c='__vunmap'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='2992' u='c' c='remap_vmalloc_range_partial'/>
<doc f='linux-5.3.1/mm/vmalloc.c' l='2109'>/**
 * find_vm_area - find a continuous kernel virtual area
 * @addr:	  base address
 *
 * Search for the kernel VM area starting at @addr, and return it.
 * It is up to the caller to do all required locking to keep the returned
 * pointer valid.
 *
 * Return: pointer to the found area or %NULL on faulure
 */</doc>
