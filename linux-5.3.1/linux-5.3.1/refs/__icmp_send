<dec f='linux-5.3.1/include/net/icmp.h' l='39' type='void __icmp_send(struct sk_buff * skb_in, int type, int code, __be32 info, const struct ip_options * opt)'/>
<use f='linux-5.3.1/include/net/icmp.h' l='43' u='c' c='icmp_send'/>
<use f='linux-5.3.1/net/ipv4/cipso_ipv4.c' l='1742' u='c' c='cipso_v4_error'/>
<use f='linux-5.3.1/net/ipv4/cipso_ipv4.c' l='1744' u='c' c='cipso_v4_error'/>
<def f='linux-5.3.1/net/ipv4/icmp.c' l='568' ll='746' type='void __icmp_send(struct sk_buff * skb_in, int type, int code, __be32 info, const struct ip_options * opt)'/>
<dec f='linux-5.3.1/net/ipv4/icmp.c' l='747' type='void __icmp_send(struct sk_buff * , int , int , __be32 , const struct ip_options * )'/>
<use f='linux-5.3.1/net/ipv4/icmp.c' l='747' c='__icmp_send'/>
<use f='linux-5.3.1/net/ipv4/icmp.c' l='747' u='a'/>
<doc f='linux-5.3.1/net/ipv4/icmp.c' l='557'>/*
 *	Send an ICMP message in response to a situation
 *
 *	RFC 1122: 3.2.2	MUST send at least the IP header and 8 bytes of header.
 *		  MAY send more (we do).
 *			MUST NOT change this header information.
 *			MUST NOT reply to a multicast/broadcast IP address.
 *			MUST NOT reply to a multicast/broadcast MAC address.
 *			MUST reply to only the first fragment.
 */</doc>
<use f='linux-5.3.1/net/ipv4/route.c' l='1220' u='c' c='ipv4_send_dest_unreach'/>
