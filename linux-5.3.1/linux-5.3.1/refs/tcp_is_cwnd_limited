<def f='linux-5.3.1/include/net/tcp.h' l='1228' ll='1237' type='bool tcp_is_cwnd_limited(const struct sock * sk)'/>
<doc f='linux-5.3.1/include/net/tcp.h' l='1215'>/* We follow the spirit of RFC2861 to validate cwnd but implement a more
 * flexible approach. The RFC suggests cwnd should not be raised unless
 * it was fully used previously. And that&apos;s exactly what we do in
 * congestion avoidance mode. But in slow start we allow cwnd to grow
 * as long as the application has used half the cwnd.
 * Example :
 *    cwnd is 10 (IW10), but application sends 9 frames.
 *    We allow cwnd to reach 18 when all frames are ACKed.
 * This check is safe because it&apos;s as aggressive as slow start which already
 * risks 100% overshoot. The advantage is that we discourage application to
 * either send more filler packets or data to artificially blow up the cwnd
 * usage, and allow application-limited process to probe bw more aggressively.
 */</doc>
<use f='linux-5.3.1/net/ipv4/tcp_cong.c' l='438' u='c' c='tcp_reno_cong_avoid'/>
<use f='linux-5.3.1/net/ipv4/tcp_cubic.c' l='340' u='c' c='bictcp_cong_avoid'/>
<use f='linux-5.3.1/net/ipv4/tcp_output.c' l='1642' u='c' c='tcp_cwnd_validate'/>
