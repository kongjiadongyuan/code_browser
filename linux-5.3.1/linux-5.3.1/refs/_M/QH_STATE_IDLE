<dec f='linux-5.3.1/drivers/usb/host/ehci.h' l='420'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='80' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='145' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='299' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='431' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='507' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='931' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='979' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='1136' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-q.c' l='1398' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-sched.c' l='722' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-sched.c' l='949' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-sched.c' l='960' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-hcd.c' l='928' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-hcd.c' l='993' u='c'/>
<dec f='linux-5.3.1/drivers/usb/host/uhci-hcd.h' l='145'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-q.c' l='272' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-q.c' l='294' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-q.c' l='594' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-q.c' l='1469' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-hcd.c' l='781' u='c'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-hcd.c' l='785' u='c'/>
<doc f='linux-5.3.1/drivers/usb/host/uhci-hcd.h' l='125'>/*
 * One role of a QH is to hold a queue of TDs for some endpoint.  One QH goes
 * with each endpoint, and qh-&gt;element (updated by the HC) is either:
 *   - the next unprocessed TD in the endpoint&apos;s queue, or
 *   - UHCI_PTR_TERM (when there&apos;s no more traffic for this endpoint).
 *
 * The other role of a QH is to serve as a &quot;skeleton&quot; framelist entry, so we
 * can easily splice a QH for some endpoint into the schedule at the right
 * place.  Then qh-&gt;element is UHCI_PTR_TERM.
 *
 * In the schedule, qh-&gt;link maintains a list of QHs seen by the HC:
 *     skel1 --&gt; ep1-qh --&gt; ep2-qh --&gt; ... --&gt; skel2 --&gt; ...
 *
 * qh-&gt;node is the software equivalent of qh-&gt;link.  The differences
 * are that the software list is doubly-linked and QHs in the UNLINKING
 * state are on the software list but not the hardware schedule.
 *
 * For bookkeeping purposes we maintain QHs even for Isochronous endpoints,
 * but they never get added to the hardware schedule.
 */</doc>
