<dec f='linux-5.3.1/include/linux/edac.h' l='392'/>
<doc f='linux-5.3.1/include/linux/edac.h' l='365'>/**
 * EDAC_DIMM_OFF - Macro responsible to get a pointer offset inside a pointer
 *		   array for the element given by [layer0,layer1,layer2]
 *		   position
 *
 * @layers:	a struct edac_mc_layer array, describing how many elements
 *		were allocated for each layer
 * @nlayers:	Number of layers at the @layers array
 * @layer0:	layer0 position
 * @layer1:	layer1 position. Unused if n_layers &lt; 2
 * @layer2:	layer2 position. Unused if n_layers &lt; 3
 *
 * For 1 layer, this macro returns &quot;var[layer0] - var&quot;;
 *
 * For 2 layers, this macro is similar to allocate a bi-dimensional array
 * and to return &quot;var[layer0][layer1] - var&quot;;
 *
 * For 3 layers, this macro is similar to allocate a tri-dimensional array
 * and to return &quot;var[layer0][layer1][layer2] - var&quot;.
 *
 * A loop could be used here to make it more generic, but, as we only have
 * 3 layers, this is a little faster.
 *
 * By design, layers can never be 0 or more than 3. If that ever happens,
 * a NULL is returned, causing an OOPS during the memory allocation routine,
 * with would point to the developer that he&apos;s doing something wrong.
 */</doc>
<use f='linux-5.3.1/drivers/edac/edac_mc.c' l='431' u='c'/>
<use f='linux-5.3.1/drivers/edac/edac_mc_sysfs.c' l='564' u='c'/>
<use f='linux-5.3.1/drivers/edac/edac_mc_sysfs.c' l='581' u='c'/>
