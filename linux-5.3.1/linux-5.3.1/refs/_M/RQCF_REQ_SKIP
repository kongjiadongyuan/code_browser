<dec f='linux-5.3.1/kernel/sched/sched.h' l='1073'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='1105' u='c'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='1115' u='c'/>
<doc f='linux-5.3.1/kernel/sched/sched.h' l='1050'>/*
 * rq::clock_update_flags bits
 *
 * %RQCF_REQ_SKIP - will request skipping of clock update on the next
 *  call to __schedule(). This is an optimisation to avoid
 *  neighbouring rq clock updates.
 *
 * %RQCF_ACT_SKIP - is set from inside of __schedule() when skipping is
 *  in effect and calls to update_rq_clock() are being ignored.
 *
 * %RQCF_UPDATED - is a debug flag that indicates whether a call has been
 *  made to update_rq_clock() since the last time rq::lock was pinned.
 *
 * If inside of __schedule(), clock_update_flags will have been
 * shifted left (a left shift is a cheap operation for the fast path
 * to promote %RQCF_REQ_SKIP to %RQCF_ACT_SKIP), so you must use,
 *
 *	if (rq-clock_update_flags &gt;= RQCF_UPDATED)
 *
 * to check if %RQCF_UPADTED is set. It&apos;ll never be shifted more than
 * one position though, because the next rq_unpin_lock() will shift it
 * back.
 */</doc>
<use f='linux-5.3.1/kernel/sched/core.c' l='3249' u='c'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='3882' u='c'/>
