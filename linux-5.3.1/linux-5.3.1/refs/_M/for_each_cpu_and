<dec f='linux-5.3.1/include/linux/cpumask.h' l='288'/>
<doc f='linux-5.3.1/include/linux/cpumask.h' l='274'>/**
 * for_each_cpu_and - iterate over every cpu in both masks
 * @cpu: the (optionally unsigned) integer iterator
 * @mask: the first cpumask pointer
 * @and: the second cpumask pointer
 *
 * This saves a temporary CPU mask in many places.  It is equivalent to:
 *	struct cpumask tmp;
 *	cpumask_and(&amp;tmp, &amp;mask, &amp;and);
 *	for_each_cpu(cpu, &amp;tmp)
 *		...
 *
 * After the loop, cpu is &gt;= nr_cpu_ids.
 */</doc>
<use f='linux-5.3.1/drivers/acpi/processor_throttling.c' l='1109' u='c'/>
<use f='linux-5.3.1/drivers/acpi/processor_throttling.c' l='1132' u='c'/>
<use f='linux-5.3.1/drivers/acpi/processor_throttling.c' l='1168' u='c'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='2183' u='c'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='61' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='5758' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='6319' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='6423' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='7295' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='8054' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='8636' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='8800' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='9351' u='c'/>
<use f='linux-5.3.1/kernel/sched/fair.c' l='9450' u='c'/>
<use f='linux-5.3.1/kernel/sched/topology.c' l='1902' u='c'/>
<use f='linux-5.3.1/lib/cpumask.c' l='219' u='c'/>
<use f='linux-5.3.1/net/core/net-sysfs.c' l='737' u='c'/>
