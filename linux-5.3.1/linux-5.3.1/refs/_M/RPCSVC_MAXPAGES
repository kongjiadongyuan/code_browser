<dec f='linux-5.3.1/include/linux/sunrpc/svc.h' l='181'/>
<use f='linux-5.3.1/include/linux/sunrpc/svc.h' l='251' u='c'/>
<use f='linux-5.3.1/include/linux/sunrpc/svc.h' l='256' u='c'/>
<doc f='linux-5.3.1/include/linux/sunrpc/svc.h' l='154'>/*
 * RPC Requsts and replies are stored in one or more pages.
 * We maintain an array of pages for each server thread.
 * Requests are copied into these pages as they arrive.  Remaining
 * pages are available to write the reply into.
 *
 * Pages are sent using -&gt;sendpage so each server thread needs to
 * allocate more to replace those used in sending.  To help keep track
 * of these pages we have a receive list where all pages initialy live,
 * and a send list where pages are moved to when there are to be part
 * of a reply.
 *
 * We use xdr_buf for holding responses as it fits well with NFS
 * read responses (that have a header, and some data pages, and possibly
 * a tail) and means we can share some client side routines.
 *
 * The xdr_buf.head kvec always points to the first page in the rq_*pages
 * list.  The xdr_buf.pages pointer points to the second page on that
 * list.  xdr_buf.tail points to the end of the first page.
 * This assumes that the non-page part of an rpc reply will fit
 * in a page - NFSd ensures this.  lockd also has no trouble.
 *
 * Each request/reply pair can have at most one &quot;payload&quot;, plus two pages,
 * one for the request, and one for the reply.
 * We using -&gt;sendfile to return read data, we might need one extra page
 * if the request is not page-aligned.  So add another &apos;1&apos;.
 */</doc>
<use f='linux-5.3.1/include/linux/sunrpc/svcsock.h' l='39' u='c'/>
<use f='linux-5.3.1/net/sunrpc/svc.c' l='577' u='c'/>
<use f='linux-5.3.1/net/sunrpc/svc.c' l='578' u='c'/>
<use f='linux-5.3.1/net/sunrpc/svc.c' l='579' u='c'/>
<use f='linux-5.3.1/net/sunrpc/svc_xprt.c' l='640' u='c'/>
<use f='linux-5.3.1/net/sunrpc/svc_xprt.c' l='644' u='c'/>
