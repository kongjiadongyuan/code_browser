<dec f='linux-5.3.1/include/drm/drm_modeset_lock.h' l='157'/>
<doc f='linux-5.3.1/include/drm/drm_modeset_lock.h' l='133'>/**
 * DRM_MODESET_LOCK_ALL_BEGIN - Helper to acquire modeset locks
 * @dev: drm device
 * @ctx: local modeset acquire context, will be dereferenced
 * @flags: DRM_MODESET_ACQUIRE_* flags to pass to drm_modeset_acquire_init()
 * @ret: local ret/err/etc variable to track error status
 *
 * Use these macros to simplify grabbing all modeset locks using a local
 * context. This has the advantage of reducing boilerplate, but also properly
 * checking return values where appropriate.
 *
 * Any code run between BEGIN and END will be holding the modeset locks.
 *
 * This must be paired with DRM_MODESET_LOCK_ALL_END(). We will jump back and
 * forth between the labels on deadlock and error conditions.
 *
 * Drivers can acquire additional modeset locks. If any lock acquisition
 * fails, the control flow needs to jump to DRM_MODESET_LOCK_ALL_END() with
 * the @ret parameter containing the return value of drm_modeset_lock().
 *
 * Returns:
 * The only possible value of ret immediately after DRM_MODESET_LOCK_ALL_BEGIN()
 * is 0, so no error checking is necessary
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3028' u='c'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3160' u='c'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3251' u='c'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_color_mgmt.c' l='262' u='c'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_crtc.c' l='565' u='c'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_plane.c' l='773' u='c'/>
