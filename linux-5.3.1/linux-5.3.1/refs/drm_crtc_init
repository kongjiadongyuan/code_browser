<dec f='linux-5.3.1/include/drm/drm_modeset_helper.h' l='38' type='int drm_crtc_init(struct drm_device * dev, struct drm_crtc * crtc, const struct drm_crtc_funcs * funcs)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_modeset_helper.c' l='169' ll='177' type='int drm_crtc_init(struct drm_device * dev, struct drm_crtc * crtc, const struct drm_crtc_funcs * funcs)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_modeset_helper.c' l='178' type='int drm_crtc_init(struct drm_device * , struct drm_crtc * , const struct drm_crtc_funcs * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_modeset_helper.c' l='178' c='drm_crtc_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_modeset_helper.c' l='178' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_modeset_helper.c' l='142'>/**
 * drm_crtc_init - Legacy CRTC initialization function
 * @dev: DRM device
 * @crtc: CRTC object to init
 * @funcs: callbacks for the new CRTC
 *
 * Initialize a CRTC object with a default helper-provided primary plane and no
 * cursor plane.
 *
 * Note that we make some assumptions about hardware limitations that may not be
 * true for all hardware:
 *
 * 1. Primary plane cannot be repositioned.
 * 2. Primary plane cannot be scaled.
 * 3. Primary plane must cover the entire CRTC.
 * 4. Subpixel positioning is not supported.
 * 5. The primary plane must always be on if the CRTC is enabled.
 *
 * This is purely a backwards compatibility helper for old drivers. Drivers
 * should instead implement their own primary plane. Atomic drivers must do so.
 * Drivers with the above hardware restriction can look into using &amp;struct
 * drm_simple_display_pipe, which encapsulates the above limitations into a nice
 * interface.
 *
 * Returns:
 * Zero on success, error code on failure.
 */</doc>
