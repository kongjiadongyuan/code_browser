<dec f='linux-5.3.1/include/drm/drm_modeset_helper_vtables.h' l='451' type='void (*)(struct drm_crtc *, struct drm_crtc_state *)'/>
<offset>896</offset>
<doc f='linux-5.3.1/include/drm/drm_modeset_helper_vtables.h' l='429'>/**
	 * @atomic_disable:
	 *
	 * This callback should be used to disable the CRTC. With the atomic
	 * drivers it is called after all encoders connected to this CRTC have
	 * been shut off already using their own
	 * &amp;drm_encoder_helper_funcs.disable hook. If that sequence is too
	 * simple drivers can just add their own hooks and call it from this
	 * CRTC callback here by looping over all encoders connected to it using
	 * for_each_encoder_on_crtc().
	 *
	 * This hook is used only by atomic helpers. Atomic drivers don&apos;t
	 * need to implement it if there&apos;s no need to disable anything at the
	 * CRTC level.
	 *
	 * Comparing to @disable, this one provides the additional input
	 * parameter @old_crtc_state which could be used to access the old
	 * state. Atomic drivers should consider to use this one instead
	 * of @disable.
	 *
	 * This function is optional.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='1069' u='r' c='disable_outputs'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='1070' u='r' c='disable_outputs'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_simple_kms_helper.c' l='91' u='w'/>
