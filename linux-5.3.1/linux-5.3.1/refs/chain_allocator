<def f='linux-5.3.1/kernel/power/snapshot.c' l='258' ll='264'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='266' c='chain_init'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='275' c='chain_alloc'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='403' c='alloc_rtree_node'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='429' c='add_rtree_block'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='500' c='create_zone_bm_rtree'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='646' c='memory_bm_create'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='2428' c='get_highmem_page_buffer'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='2531' c='get_buffer'/>
<use f='linux-5.3.1/kernel/power/snapshot.c' l='2586' c='snapshot_write_next'/>
<size>24</size>
<doc f='linux-5.3.1/kernel/power/snapshot.c' l='246'>/*
 * struct chain_allocator is used for allocating small objects out of
 * a linked list of pages called &apos;the chain&apos;.
 *
 * The chain grows each time when there is no room for a new object in
 * the current page.  The allocated objects cannot be freed individually.
 * It is only possible to free them all at once, by freeing the entire
 * chain.
 *
 * NOTE: The chain allocator may be inefficient if the allocated objects
 * are not much smaller than PAGE_SIZE.
 */</doc>
