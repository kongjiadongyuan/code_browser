<dec f='linux-5.3.1/include/linux/genalloc.h' l='163' type='void * gen_pool_dma_zalloc_algo(struct gen_pool * pool, size_t size, dma_addr_t * dma, genpool_algo_t algo, void * data)'/>
<use f='linux-5.3.1/lib/genalloc.c' l='419' u='c' c='gen_pool_dma_zalloc'/>
<def f='linux-5.3.1/lib/genalloc.c' l='438' ll='447' type='void * gen_pool_dma_zalloc_algo(struct gen_pool * pool, size_t size, dma_addr_t * dma, genpool_algo_t algo, void * data)'/>
<dec f='linux-5.3.1/lib/genalloc.c' l='448' type='void * gen_pool_dma_zalloc_algo(struct gen_pool * , size_t , dma_addr_t * , genpool_algo_t , void * )'/>
<use f='linux-5.3.1/lib/genalloc.c' l='448' c='gen_pool_dma_zalloc_algo'/>
<use f='linux-5.3.1/lib/genalloc.c' l='448' u='a'/>
<use f='linux-5.3.1/lib/genalloc.c' l='469' u='c' c='gen_pool_dma_zalloc_align'/>
<doc f='linux-5.3.1/lib/genalloc.c' l='423'>/**
 * gen_pool_dma_zalloc_algo - allocate special zeroed memory from the pool for
 * DMA usage with the given pool algorithm
 * @pool: pool to allocate from
 * @size: number of bytes to allocate from the pool
 * @dma: DMA-view physical address return value. Use %NULL if unneeded.
 * @algo: algorithm passed from caller
 * @data: data passed to algorithm
 *
 * Allocate the requested number of zeroed bytes from the specified pool. Uses
 * the given pool allocation function. Can not be used in NMI handler on
 * architectures without NMI-safe cmpxchg implementation.
 *
 * Return: virtual address of the allocated zeroed memory, or %NULL on failure
 */</doc>
