<dec f='linux-5.3.1/include/linux/mutex.h' l='180' type='int mutex_lock_killable(struct mutex * lock)'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='684' u='c' c='loop_change_fd'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='953' u='c' c='loop_set_fd'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='1189' u='c' c='loop_clr_fd'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='1226' u='c' c='loop_set_status'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='1345' u='c' c='loop_get_status'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='1551' u='c' c='lo_simple_ioctl'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='1773' u='c' c='lo_open'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='2139' u='c' c='loop_control_ioctl'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_shrinker.c' l='33' macro='1' u='c' c='shrinker_lock'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_userptr.c' l='139' macro='1' u='c' c='userptr_mn_invalidate_range_start'/>
<use f='linux-5.3.1/drivers/hid/hid-core.c' l='2018' u='c' c='hid_hw_open'/>
<use f='linux-5.3.1/drivers/macintosh/mac_hid.c' l='193' u='c' c='mac_hid_toggle_emumouse'/>
<use f='linux-5.3.1/drivers/pci/vpd.c' l='202' u='c' c='pci_vpd_read'/>
<use f='linux-5.3.1/drivers/pci/vpd.c' l='264' u='c' c='pci_vpd_write'/>
<use f='linux-5.3.1/fs/proc/base.c' l='406' u='c' c='lock_trace'/>
<use f='linux-5.3.1/fs/proc/base.c' l='2773' u='c' c='do_io_accounting'/>
<use f='linux-5.3.1/kernel/fork.c' l='1209' u='c' c='mm_access'/>
<def f='linux-5.3.1/kernel/locking/mutex.c' l='1304' ll='1312' type='int mutex_lock_killable(struct mutex * lock)'/>
<dec f='linux-5.3.1/kernel/locking/mutex.c' l='1313' type='int mutex_lock_killable(struct mutex * )'/>
<use f='linux-5.3.1/kernel/locking/mutex.c' l='1313' c='mutex_lock_killable'/>
<use f='linux-5.3.1/kernel/locking/mutex.c' l='1313' u='a'/>
<doc f='linux-5.3.1/kernel/locking/mutex.c' l='1292'>/**
 * mutex_lock_killable() - Acquire the mutex, interruptible by fatal signals.
 * @lock: The mutex to be acquired.
 *
 * Lock the mutex like mutex_lock().  If a signal which will be fatal to
 * the current process is delivered while the process is sleeping, this
 * function will return without acquiring the mutex.
 *
 * Context: Process context.
 * Return: 0 if the lock was successfully acquired or %-EINTR if a
 * fatal signal arrived.
 */</doc>
<use f='linux-5.3.1/kernel/seccomp.c' l='1299' u='c' c='seccomp_set_mode_filter'/>
<use f='linux-5.3.1/mm/oom_kill.c' l='765' u='c' c='oom_killer_disable'/>
<use f='linux-5.3.1/mm/percpu.c' l='1629' u='c' c='pcpu_alloc'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='78' u='c' c='rtnl_lock_killable'/>
