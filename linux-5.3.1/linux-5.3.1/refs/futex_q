<def f='linux-5.3.1/kernel/futex.c' l='230' ll='240'/>
<use f='linux-5.3.1/kernel/futex.c' l='242'/>
<use f='linux-5.3.1/kernel/futex.c' l='767' c='futex_top_waiter'/>
<use f='linux-5.3.1/kernel/futex.c' l='770' c='futex_top_waiter'/>
<use f='linux-5.3.1/kernel/futex.c' l='1314' c='lookup_pi_state'/>
<use f='linux-5.3.1/kernel/futex.c' l='1370' c='futex_lock_pi_atomic'/>
<use f='linux-5.3.1/kernel/futex.c' l='1446' c='__unqueue_futex'/>
<use f='linux-5.3.1/kernel/futex.c' l='1465' c='mark_wake_futex'/>
<use f='linux-5.3.1/kernel/futex.c' l='1600' c='futex_wake'/>
<use f='linux-5.3.1/kernel/futex.c' l='1600' c='futex_wake'/>
<use f='linux-5.3.1/kernel/futex.c' l='1702' c='futex_wake_op'/>
<use f='linux-5.3.1/kernel/futex.c' l='1702' c='futex_wake_op'/>
<use f='linux-5.3.1/kernel/futex.c' l='1797' c='requeue_futex'/>
<use f='linux-5.3.1/kernel/futex.c' l='1831' c='requeue_pi_wake_futex'/>
<use f='linux-5.3.1/kernel/futex.c' l='1873' c='futex_proxy_trylock_atomic'/>
<use f='linux-5.3.1/kernel/futex.c' l='1942' c='futex_requeue'/>
<use f='linux-5.3.1/kernel/futex.c' l='1942' c='futex_requeue'/>
<use f='linux-5.3.1/kernel/futex.c' l='2223' c='queue_lock'/>
<use f='linux-5.3.1/kernel/futex.c' l='2254' c='__queue_me'/>
<use f='linux-5.3.1/kernel/futex.c' l='2285' c='queue_me'/>
<use f='linux-5.3.1/kernel/futex.c' l='2303' c='unqueue_me'/>
<use f='linux-5.3.1/kernel/futex.c' l='2352' c='unqueue_me_pi'/>
<use f='linux-5.3.1/kernel/futex.c' l='2364' c='fixup_pi_state_owner'/>
<use f='linux-5.3.1/kernel/futex.c' l='2550' c='fixup_owner'/>
<use f='linux-5.3.1/kernel/futex.c' l='2602' c='futex_wait_queue_me'/>
<use f='linux-5.3.1/kernel/futex.c' l='2652' c='futex_wait_setup'/>
<use f='linux-5.3.1/kernel/futex.c' l='2716' c='futex_wait'/>
<use f='linux-5.3.1/kernel/futex.c' l='2808' c='futex_lock_pi'/>
<use f='linux-5.3.1/kernel/futex.c' l='2988' c='futex_unlock_pi'/>
<use f='linux-5.3.1/kernel/futex.c' l='3139' c='handle_early_requeue_pi_wakeup'/>
<use f='linux-5.3.1/kernel/futex.c' l='3219' c='futex_wait_requeue_pi'/>
<size>112</size>
<doc f='linux-5.3.1/kernel/futex.c' l='208'>/**
 * struct futex_q - The hashed futex queue entry, one per waiting task
 * @list:		priority-sorted list of tasks waiting on this futex
 * @task:		the task waiting on the futex
 * @lock_ptr:		the hash bucket lock
 * @key:		the key the futex is hashed on
 * @pi_state:		optional priority inheritance state
 * @rt_waiter:		rt_waiter storage for use with requeue_pi
 * @requeue_pi_key:	the requeue_pi target futex key
 * @bitset:		bitset for the optional bitmasked wakeup
 *
 * We use this hashed waitqueue, instead of a normal wait_queue_entry_t, so
 * we can wake only the relevant ones (hashed queues may be shared).
 *
 * A futex_q has a woken state, just like tasks have TASK_RUNNING.
 * It is considered woken when plist_node_empty(&amp;q-&gt;list) || q-&gt;lock_ptr == 0.
 * The order of wakeup is always to make the first condition true, then
 * the second.
 *
 * PI futexes are typically woken before they are removed from the hash list via
 * the rt_mutex code. See unqueue_me_pi().
 */</doc>
