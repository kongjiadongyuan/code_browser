<dec f='linux-5.3.1/include/linux/dma-buf.h' l='71' type='int (*)(struct dma_buf *, struct dma_buf_attachment *)'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='683' u='r' c='dma_buf_attach'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='684' u='r' c='dma_buf_attach'/>
<offset>64</offset>
<doc f='linux-5.3.1/include/linux/dma-buf.h' l='45'>/**
	 * @attach:
	 *
	 * This is called from dma_buf_attach() to make sure that a given
	 * &amp;dma_buf_attachment.dev can access the provided &amp;dma_buf. Exporters
	 * which support buffer objects in special locations like VRAM or
	 * device-specific carveout areas should check whether the buffer could
	 * be move to system memory (or directly accessed by the provided
	 * device), and otherwise need to fail the attach operation.
	 *
	 * The exporter should also in general check whether the current
	 * allocation fullfills the DMA constraints of the new device. If this
	 * is not the case, and the allocation cannot be moved, it should also
	 * fail the attach operation.
	 *
	 * Any exporter-private housekeeping data can be stored in the
	 * &amp;dma_buf_attachment.priv pointer.
	 *
	 * This callback is optional.
	 *
	 * Returns:
	 *
	 * 0 on success, negative error code on failure. It might return -EBUSY
	 * to signal that backing storage is already allocated and incompatible
	 * with the requirements of requesting device.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_prime.c' l='415' u='w'/>
