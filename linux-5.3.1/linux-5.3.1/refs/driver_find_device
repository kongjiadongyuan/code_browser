<dec f='linux-5.3.1/include/linux/device.h' l='341' type='struct device * driver_find_device(struct device_driver * drv, struct device * start, const void * data, int (*)(struct device *, const void *) match)'/>
<def f='linux-5.3.1/drivers/base/driver.c' l='75' ll='92' type='struct device * driver_find_device(struct device_driver * drv, struct device * start, const void * data, int (*)(struct device *, const void *) match)'/>
<dec f='linux-5.3.1/drivers/base/driver.c' l='93' type='struct device * driver_find_device(struct device_driver * , struct device * , const void * , int (*)(struct device *, const void *) )'/>
<use f='linux-5.3.1/drivers/base/driver.c' l='93' c='driver_find_device'/>
<use f='linux-5.3.1/drivers/base/driver.c' l='93' u='a'/>
<doc f='linux-5.3.1/drivers/base/driver.c' l='60'>/**
 * driver_find_device - device iterator for locating a particular device.
 * @drv: The device&apos;s driver
 * @start: Device to begin with
 * @data: Data to pass to match function
 * @match: Callback function to check device
 *
 * This is similar to the driver_for_each_device() function above, but
 * it returns a reference to a device that is &apos;found&apos; for later use, as
 * determined by the @match callback.
 *
 * The callback should return 0 if the device doesn&apos;t match and non-zero
 * if it does.  If the callback returns non-zero, this function will
 * return to the caller and not iterate over any more devices.
 */</doc>
