<dec f='linux-5.3.1/include/linux/refcount.h' l='47' type='void refcount_add_checked(unsigned int i, refcount_t * r)'/>
<def f='linux-5.3.1/lib/refcount.c' l='103' ll='106' type='void refcount_add_checked(unsigned int i, refcount_t * r)'/>
<dec f='linux-5.3.1/lib/refcount.c' l='107' type='void refcount_add_checked(unsigned int , refcount_t * )'/>
<use f='linux-5.3.1/lib/refcount.c' l='107' c='refcount_add_checked'/>
<use f='linux-5.3.1/lib/refcount.c' l='107' u='a'/>
<doc f='linux-5.3.1/lib/refcount.c' l='87'>/**
 * refcount_add_checked - add a value to a refcount
 * @i: the value to add to the refcount
 * @r: the refcount
 *
 * Similar to atomic_add(), but will saturate at UINT_MAX and WARN.
 *
 * Provides no memory ordering, it is assumed the caller has guaranteed the
 * object memory to be stable (RCU, etc.). It does provide a control dependency
 * and thereby orders future stores. See the comment on top.
 *
 * Use of this function is not recommended for the normal reference counting
 * use case in which references are taken and released one at a time.  In these
 * cases, refcount_inc(), or one of its variants, should instead be used to
 * increment a reference count.
 */</doc>
