<dec f='linux-5.3.1/include/linux/irqdomain.h' l='420' type='int irq_domain_xlate_onetwocell(struct irq_domain * d, struct device_node * ctrlr, const u32 * intspec, unsigned int intsize, irq_hw_number_t * out_hwirq, unsigned int * out_type)'/>
<def f='linux-5.3.1/kernel/irq/irqdomain.c' l='966' ll='979' type='int irq_domain_xlate_onetwocell(struct irq_domain * d, struct device_node * ctrlr, const u32 * intspec, unsigned int intsize, unsigned long * out_hwirq, unsigned int * out_type)'/>
<dec f='linux-5.3.1/kernel/irq/irqdomain.c' l='980' type='int irq_domain_xlate_onetwocell(struct irq_domain * , struct device_node * , const u32 * , unsigned int , irq_hw_number_t * , unsigned int * )'/>
<use f='linux-5.3.1/kernel/irq/irqdomain.c' l='980' c='irq_domain_xlate_onetwocell'/>
<use f='linux-5.3.1/kernel/irq/irqdomain.c' l='980' u='a'/>
<use f='linux-5.3.1/kernel/irq/irqdomain.c' l='983'/>
<use f='linux-5.3.1/kernel/irq/irqdomain.c' l='983'/>
<doc f='linux-5.3.1/kernel/irq/irqdomain.c' l='955'>/**
 * irq_domain_xlate_onetwocell() - Generic xlate for one or two cell bindings
 *
 * Device Tree IRQ specifier translation function which works with either one
 * or two cell bindings where the cell values map directly to the hwirq number
 * and linux irq flags.
 *
 * Note: don&apos;t use this function unless your interrupt controller explicitly
 * supports both one and two cell bindings.  For the majority of controllers
 * the _onecell() or _twocell() variants above should be used.
 */</doc>
