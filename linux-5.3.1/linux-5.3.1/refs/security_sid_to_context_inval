<dec f='linux-5.3.1/security/selinux/include/security.h' l='259' type='int security_sid_to_context_inval(struct selinux_state * state, u32 sid, char ** scontext, u32 * scontext_len)'/>
<use f='linux-5.3.1/security/selinux/avc.c' l='736' u='c' c='avc_audit_post_callback'/>
<use f='linux-5.3.1/security/selinux/avc.c' l='746' u='c' c='avc_audit_post_callback'/>
<def f='linux-5.3.1/security/selinux/ss/services.c' l='1364' ll='1369' type='int security_sid_to_context_inval(struct selinux_state * state, u32 sid, char ** scontext, u32 * scontext_len)'/>
<doc f='linux-5.3.1/security/selinux/ss/services.c' l='1351'>/**
 * security_sid_to_context_inval - Obtain a context for a given SID if it
 *                                 is invalid.
 * @sid: security identifier, SID
 * @scontext: security context
 * @scontext_len: length in bytes
 *
 * Write the string representation of the context associated with @sid
 * into a dynamically allocated string of the correct size, but only if the
 * context is invalid in the current policy.  Set @scontext to point to
 * this string (or NULL if the context is valid) and set @scontext_len to
 * the length of the string (or 0 if the context is valid).
 */</doc>
