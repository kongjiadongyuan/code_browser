<dec f='linux-5.3.1/include/linux/pci.h' l='1190' type='int __pci_reset_function_locked(struct pci_dev * dev)'/>
<def f='linux-5.3.1/drivers/pci/pci.c' l='4848' ll='4880' type='int __pci_reset_function_locked(struct pci_dev * dev)'/>
<dec f='linux-5.3.1/drivers/pci/pci.c' l='4881' type='int __pci_reset_function_locked(struct pci_dev * )'/>
<use f='linux-5.3.1/drivers/pci/pci.c' l='4881' c='__pci_reset_function_locked'/>
<use f='linux-5.3.1/drivers/pci/pci.c' l='4881' u='a'/>
<use f='linux-5.3.1/drivers/pci/pci.c' l='4944' u='c' c='pci_reset_function'/>
<use f='linux-5.3.1/drivers/pci/pci.c' l='4979' u='c' c='pci_reset_function_locked'/>
<use f='linux-5.3.1/drivers/pci/pci.c' l='5004' u='c' c='pci_try_reset_function'/>
<doc f='linux-5.3.1/drivers/pci/pci.c' l='4828'>/**
 * __pci_reset_function_locked - reset a PCI device function while holding
 * the @dev mutex lock.
 * @dev: PCI device to reset
 *
 * Some devices allow an individual function to be reset without affecting
 * other functions in the same device.  The PCI device must be responsive
 * to PCI config space in order to use this function.
 *
 * The device function is presumed to be unused and the caller is holding
 * the device mutex lock when this function is called.
 *
 * Resetting the device will make the contents of PCI configuration space
 * random, so any caller of this must be prepared to reinitialise the
 * device including MSI, bus mastering, BARs, decoding IO and memory spaces,
 * etc.
 *
 * Returns 0 if the device function was successfully reset or negative if the
 * device doesn&apos;t support resetting a single function.
 */</doc>
