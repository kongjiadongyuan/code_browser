<dec f='linux-5.3.1/include/linux/mm.h' l='1498' type='void truncate_pagecache_range(struct inode * inode, loff_t offset, loff_t end)'/>
<use f='linux-5.3.1/fs/ext4/extents.c' l='4751' u='c' c='ext4_zero_range'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='4360' u='c' c='ext4_punch_hole'/>
<use f='linux-5.3.1/fs/iomap/buffered-io.c' l='524' u='c' c='iomap_write_failed'/>
<def f='linux-5.3.1/mm/truncate.c' l='898' ll='920' type='void truncate_pagecache_range(struct inode * inode, loff_t lstart, loff_t lend)'/>
<dec f='linux-5.3.1/mm/truncate.c' l='921' type='void truncate_pagecache_range(struct inode * , loff_t , loff_t )'/>
<use f='linux-5.3.1/mm/truncate.c' l='921' c='truncate_pagecache_range'/>
<use f='linux-5.3.1/mm/truncate.c' l='921' u='a'/>
<doc f='linux-5.3.1/mm/truncate.c' l='885'>/**
 * truncate_pagecache_range - unmap and remove pagecache that is hole-punched
 * @inode: inode
 * @lstart: offset of beginning of hole
 * @lend: offset of last byte of hole
 *
 * This function should typically be called before the filesystem
 * releases resources associated with the freed range (eg. deallocates
 * blocks). This way, pagecache will always stay logically coherent
 * with on-disk format, and the filesystem would not have to deal with
 * situations such as writepage being called for a page that has already
 * had its underlying blocks deallocated.
 */</doc>
