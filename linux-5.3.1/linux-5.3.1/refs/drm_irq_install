<dec f='linux-5.3.1/include/drm/drm_irq.h' l='29' type='int drm_irq_install(struct drm_device * dev, int irq)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_irq.c' l='106' ll='154' type='int drm_irq_install(struct drm_device * dev, int irq)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_irq.c' l='155' type='int drm_irq_install(struct drm_device * , int )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_irq.c' l='155' c='drm_irq_install'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_irq.c' l='155' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_irq.c' l='84'>/**
 * drm_irq_install - install IRQ handler
 * @dev: DRM device
 * @irq: IRQ number to install the handler for
 *
 * Initializes the IRQ related data. Installs the handler, calling the driver
 * &amp;drm_driver.irq_preinstall and &amp;drm_driver.irq_postinstall functions before
 * and after the installation.
 *
 * This is the simplified helper interface provided for drivers with no special
 * needs. Drivers which need to install interrupt handlers for multiple
 * interrupts must instead set &amp;drm_device.irq_enabled to signal the DRM core
 * that vblank interrupts are available.
 *
 * @irq must match the interrupt number that would be passed to request_irq(),
 * if called directly instead of using this helper function.
 *
 * &amp;drm_driver.irq_handler is called to handle the registered interrupt.
 *
 * Returns:
 * Zero on success or a negative error code on failure.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_irq.c' l='4954' u='c' c='intel_irq_install'/>
