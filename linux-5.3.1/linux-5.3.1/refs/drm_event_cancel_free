<dec f='linux-5.3.1/include/drm/drm_file.h' l='385' type='void drm_event_cancel_free(struct drm_device * dev, struct drm_pending_event * p)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_uapi.c' l='1249' u='c' c='complete_signaling'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_file.c' l='677' ll='692' type='void drm_event_cancel_free(struct drm_device * dev, struct drm_pending_event * p)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_file.c' l='693' type='void drm_event_cancel_free(struct drm_device * , struct drm_pending_event * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_file.c' l='693' c='drm_event_cancel_free'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_file.c' l='693' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_file.c' l='668'>/**
 * drm_event_cancel_free - free a DRM event and release its space
 * @dev: DRM device
 * @p: tracking structure for the pending event
 *
 * This function frees the event @p initialized with drm_event_reserve_init()
 * and releases any allocated space. It is used to cancel an event when the
 * nonblocking operation could not be submitted and needed to be aborted.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_plane.c' l='1193' u='c' c='drm_mode_page_flip_ioctl'/>
