<dec f='linux-5.3.1/include/drm/drm_framebuffer.h' l='218' type='int drm_framebuffer_init(struct drm_device * dev, struct drm_framebuffer * fb, const struct drm_framebuffer_funcs * funcs)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='723' ll='749' type='int drm_framebuffer_init(struct drm_device * dev, struct drm_framebuffer * fb, const struct drm_framebuffer_funcs * funcs)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='750' type='int drm_framebuffer_init(struct drm_device * , struct drm_framebuffer * , const struct drm_framebuffer_funcs * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='750' c='drm_framebuffer_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='750' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='705'>/**
 * drm_framebuffer_init - initialize a framebuffer
 * @dev: DRM device
 * @fb: framebuffer to be initialized
 * @funcs: ... with these functions
 *
 * Allocates an ID for the framebuffer&apos;s parent mode object, sets its mode
 * functions &amp; device file and adds it to the master fd list.
 *
 * IMPORTANT:
 * This functions publishes the fb and makes it available for concurrent access
 * by other users. Which means by this point the fb _must_ be fully set up -
 * since all the fb attributes are invariant over its lifetime, no further
 * locking but only correct reference counting is required.
 *
 * Returns:
 * Zero on success, error code on failure.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='75' u='c' c='drm_gem_fb_alloc'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='15504' u='c' c='intel_framebuffer_init'/>
