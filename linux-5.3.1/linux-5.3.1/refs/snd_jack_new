<dec f='linux-5.3.1/include/sound/jack.h' l='76' type='int snd_jack_new(struct snd_card * card, const char * id, int type, struct snd_jack ** jack, bool initial_kctl, bool phantom_jack)'/>
<def f='linux-5.3.1/sound/core/jack.c' l='198' ll='268' type='int snd_jack_new(struct snd_card * card, const char * id, int type, struct snd_jack ** jjack, bool initial_kctl, bool phantom_jack)'/>
<dec f='linux-5.3.1/sound/core/jack.c' l='269' type='int snd_jack_new(struct snd_card * , const char * , int , struct snd_jack ** , bool , bool )'/>
<use f='linux-5.3.1/sound/core/jack.c' l='269' c='snd_jack_new'/>
<use f='linux-5.3.1/sound/core/jack.c' l='269' u='a'/>
<doc f='linux-5.3.1/sound/core/jack.c' l='183'>/**
 * snd_jack_new - Create a new jack
 * @card:  the card instance
 * @id:    an identifying string for this jack
 * @type:  a bitmask of enum snd_jack_type values that can be detected by
 *         this jack
 * @jjack: Used to provide the allocated jack object to the caller.
 * @initial_kctl: if true, create a kcontrol and add it to the jack list.
 * @phantom_jack: Don&apos;t create a input device for phantom jacks.
 *
 * Creates a new jack object.
 *
 * Return: Zero if successful, or a negative error code on failure.
 * On success @jjack will be initialised.
 */</doc>
<use f='linux-5.3.1/sound/pci/hda/hda_jack.c' l='413' u='c' c='snd_hda_jack_add_kctl'/>
