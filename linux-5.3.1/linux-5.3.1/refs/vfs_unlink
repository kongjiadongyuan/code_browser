<dec f='linux-5.3.1/include/linux/fs.h' l='1692' type='int vfs_unlink(struct inode * , struct dentry * , struct inode ** )'/>
<use f='linux-5.3.1/drivers/base/devtmpfs.c' l='330' u='c' c='handle_remove'/>
<def f='linux-5.3.1/fs/namei.c' l='3979' ll='4017' type='int vfs_unlink(struct inode * dir, struct dentry * dentry, struct inode ** delegated_inode)'/>
<dec f='linux-5.3.1/fs/namei.c' l='4018' type='int vfs_unlink(struct inode * , struct dentry * , struct inode ** )'/>
<use f='linux-5.3.1/fs/namei.c' l='4018' c='vfs_unlink'/>
<use f='linux-5.3.1/fs/namei.c' l='4018' u='a'/>
<use f='linux-5.3.1/fs/namei.c' l='4063' u='c' c='do_unlinkat'/>
<doc f='linux-5.3.1/fs/namei.c' l='3961'>/**
 * vfs_unlink - unlink a filesystem object
 * @dir:	parent directory
 * @dentry:	victim
 * @delegated_inode: returns victim inode, if the inode is delegated.
 *
 * The caller must hold dir-&gt;i_mutex.
 *
 * If vfs_unlink discovers a delegation, it will return -EWOULDBLOCK and
 * return a reference to the inode in delegated_inode.  The caller
 * should then break the delegation on that inode and retry.  Because
 * breaking a delegation may take a long time, the caller should drop
 * dir-&gt;i_mutex before doing so.
 *
 * Alternatively, a caller may pass NULL for delegated_inode.  This may
 * be appropriate for callers that expect the underlying filesystem not
 * to be NFS exported.
 */</doc>
<use f='linux-5.3.1/ipc/mqueue.c' l='888' u='c' c='__do_sys_mq_unlink'/>
