<def f='linux-5.3.1/include/linux/irq.h' l='1022' ll='1028'/>
<use f='linux-5.3.1/include/linux/irq.h' l='1044'/>
<use f='linux-5.3.1/include/linux/irq.h' l='1067' c='irq_setup_generic_chip'/>
<use f='linux-5.3.1/include/linux/irq.h' l='1078' c='devm_irq_setup_generic_chip'/>
<use f='linux-5.3.1/include/linux/irq.h' l='1087' c='__irq_alloc_domain_generic_chips'/>
<doc f='linux-5.3.1/include/linux/irq.h' l='1012'>/**
 * enum irq_gc_flags - Initialization flags for generic irq chips
 * @IRQ_GC_INIT_MASK_CACHE:	Initialize the mask_cache by reading mask reg
 * @IRQ_GC_INIT_NESTED_LOCK:	Set the lock class of the irqs to nested for
 *				irq chips which need to call irq_set_wake() on
 *				the parent irq. Usually GPIO implementations
 * @IRQ_GC_MASK_CACHE_PER_TYPE:	Mask cache is chip type private
 * @IRQ_GC_NO_MASK:		Do not calculate irq_data-&gt;mask
 * @IRQ_GC_BE_IO:		Use big-endian register accesses (default: LE)
 */</doc>
