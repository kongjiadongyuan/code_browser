<dec f='linux-5.3.1/include/net/tcp.h' l='1069' type='u32 tcp_slow_start(struct tcp_sock * tp, u32 acked)'/>
<def f='linux-5.3.1/net/ipv4/tcp_cong.c' l='394' ll='402' type='u32 tcp_slow_start(struct tcp_sock * tp, u32 acked)'/>
<dec f='linux-5.3.1/net/ipv4/tcp_cong.c' l='403' type='u32 tcp_slow_start(struct tcp_sock * , u32 )'/>
<use f='linux-5.3.1/net/ipv4/tcp_cong.c' l='403' c='tcp_slow_start'/>
<use f='linux-5.3.1/net/ipv4/tcp_cong.c' l='403' u='a'/>
<use f='linux-5.3.1/net/ipv4/tcp_cong.c' l='443' u='c' c='tcp_reno_cong_avoid'/>
<doc f='linux-5.3.1/net/ipv4/tcp_cong.c' l='385'>/* Slow start is used when congestion window is no greater than the slow start
 * threshold. We base on RFC2581 and also handle stretch ACKs properly.
 * We do not implement RFC3465 Appropriate Byte Counting (ABC) per se but
 * something better;) a packet is only considered (s)acked in its entirety to
 * defend the ACK attacks described in the RFC. Slow start processes a stretch
 * ACK of degree N as if N acks of degree 1 are received back to back except
 * ABC caps N to 2. Slow start exits when cwnd grows over ssthresh and
 * returns the leftover acks to adjust cwnd in congestion avoidance mode.
 */</doc>
<use f='linux-5.3.1/net/ipv4/tcp_cubic.c' l='346' u='c' c='bictcp_cong_avoid'/>
