<dec f='linux-5.3.1/include/drm/drm_gem.h' l='398' type='int drm_gem_dumb_map_offset(struct drm_file * file, struct drm_device * dev, u32 handle, u64 * offset)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dumb_buffers.c' l='130' u='c' c='drm_mode_mmap_dumb_ioctl'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='313' ll='338' type='int drm_gem_dumb_map_offset(struct drm_file * file, struct drm_device * dev, u32 handle, u64 * offset)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='339' type='int drm_gem_dumb_map_offset(struct drm_file * , struct drm_device * , u32 , u64 * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='339' c='drm_gem_dumb_map_offset'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='339' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='300'>/**
 * drm_gem_dumb_map_offset - return the fake mmap offset for a gem object
 * @file: drm file-private structure containing the gem object
 * @dev: corresponding drm_device
 * @handle: gem object handle
 * @offset: return location for the fake mmap offset
 *
 * This implements the &amp;drm_driver.dumb_map_offset kms driver callback for
 * drivers which use gem to manage their backing storage.
 *
 * Returns:
 * 0 on success or a negative error code on failure.
 */</doc>
