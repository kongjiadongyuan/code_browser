<dec f='linux-5.3.1/include/linux/workqueue.h' l='461' type='bool cancel_delayed_work(struct delayed_work * dwork)'/>
<use f='linux-5.3.1/block/blk-mq.c' l='1545' u='c' c='blk_mq_stop_hw_queue'/>
<use f='linux-5.3.1/drivers/acpi/acpi_video.c' l='249' u='c' c='acpi_video_set_brightness'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display_power.c' l='1654' u='c' c='intel_display_power_grab_async_put_ref'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display_power.c' l='1954' u='c' c='intel_display_power_flush_work'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp.c' l='2489' u='c' c='edp_panel_vdd_on'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp.c' l='7035' u='c' c='intel_edp_drrs_invalidate'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp.c' l='7078' u='c' c='intel_edp_drrs_flush'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='7428' u='c' c='e1000_remove'/>
<use f='linux-5.3.1/drivers/thermal/thermal_core.c' l='307' u='c' c='thermal_zone_device_set_polling'/>
<use f='linux-5.3.1/drivers/usb/host/xhci-ring.c' l='1402' u='c' c='handle_cmd_completion'/>
<use f='linux-5.3.1/fs/nfs/namespace.c' l='210' u='c' c='nfs_release_automount_timer'/>
<def f='linux-5.3.1/kernel/workqueue.c' l='3242' ll='3245' type='bool cancel_delayed_work(struct delayed_work * dwork)'/>
<dec f='linux-5.3.1/kernel/workqueue.c' l='3246' type='bool cancel_delayed_work(struct delayed_work * )'/>
<use f='linux-5.3.1/kernel/workqueue.c' l='3246' c='cancel_delayed_work'/>
<use f='linux-5.3.1/kernel/workqueue.c' l='3246' u='a'/>
<doc f='linux-5.3.1/kernel/workqueue.c' l='3226'>/**
 * cancel_delayed_work - cancel a delayed work
 * @dwork: delayed_work to cancel
 *
 * Kill off a pending delayed_work.
 *
 * Return: %true if @dwork was pending and canceled; %false if it wasn&apos;t
 * pending.
 *
 * Note:
 * The work callback function may still be running on return, unless
 * it returns %true and the work doesn&apos;t re-arm itself.  Explicitly flush or
 * use cancel_delayed_work_sync() to wait on it.
 *
 * This function is safe to call from any context including IRQ handler.
 */</doc>
<use f='linux-5.3.1/net/core/netpoll.c' l='784' u='c' c='rcu_cleanup_netpoll_info'/>
<use f='linux-5.3.1/net/core/netpoll.c' l='789' u='c' c='rcu_cleanup_netpoll_info'/>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='545' u='c' c='__inet_insert_ifa'/>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='969' u='c' c='inet_rtm_newaddr'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='309' u='c' c='addrconf_del_dad_work'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='959' u='c' c='inet6_ifa_finish_destroy'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='4413' u='c' c='addrconf_verify_rtnl'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='7128' u='c' c='addrconf_cleanup'/>
<use f='linux-5.3.1/net/mac80211/scan.c' l='1198' u='c' c='ieee80211_scan_cancel'/>
<use f='linux-5.3.1/net/mac80211/tdls.c' l='1429' u='c' c='ieee80211_tdls_oper'/>
<use f='linux-5.3.1/net/mac80211/util.c' l='3252' u='c' c='ieee80211_dfs_cac_cancel'/>
<use f='linux-5.3.1/net/sunrpc/sched.c' l='92' u='c' c='__rpc_disable_timer'/>
<use f='linux-5.3.1/net/wireless/mlme.c' l='759' u='c' c='cfg80211_sched_dfs_chan_update'/>
<use f='linux-5.3.1/net/wireless/reg.c' l='526' u='c' c='cancel_crda_timeout'/>
