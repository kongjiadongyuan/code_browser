<dec f='linux-5.3.1/include/crypto/hash.h' l='935' type='int crypto_shash_final(struct shash_desc * desc, u8 * out)'/>
<doc f='linux-5.3.1/include/crypto/hash.h' l='921'>/**
 * crypto_shash_final() - calculate message digest
 * @desc: operational state handle that is already filled with data
 * @out: output buffer filled with the message digest
 *
 * Finalize the message digest operation and create the message digest
 * based on all data added to the cipher handle. The message digest is placed
 * into the output buffer. The caller must ensure that the output buffer is
 * large enough by using crypto_shash_digestsize.
 *
 * Context: Any context.
 * Return: 0 if the message digest creation was successful; &lt; 0 if an error
 *	   occurred
 */</doc>
<use f='linux-5.3.1/crypto/drbg.c' l='1711' u='c' c='drbg_kcapi_hash'/>
<use f='linux-5.3.1/crypto/hmac.c' l='121' u='c' c='hmac_final'/>
<def f='linux-5.3.1/crypto/shash.c' l='152' ll='162' type='int crypto_shash_final(struct shash_desc * desc, u8 * out)'/>
<dec f='linux-5.3.1/crypto/shash.c' l='163' type='int crypto_shash_final(struct shash_desc * , u8 * )'/>
<use f='linux-5.3.1/crypto/shash.c' l='163' c='crypto_shash_final'/>
<use f='linux-5.3.1/crypto/shash.c' l='163' u='a'/>
<use f='linux-5.3.1/crypto/shash.c' l='169' u='c' c='shash_finup_unaligned'/>
<use f='linux-5.3.1/crypto/shash.c' l='260' u='c' c='shash_async_final'/>
<use f='linux-5.3.1/crypto/shash.c' l='270' u='c' c='shash_ahash_finup'/>
