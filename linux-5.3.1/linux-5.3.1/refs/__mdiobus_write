<dec f='linux-5.3.1/include/linux/mdio.h' l='307' type='int __mdiobus_write(struct mii_bus * bus, int addr, u32 regnum, u16 val)'/>
<use f='linux-5.3.1/include/linux/phy.h' l='731' u='c' c='__phy_write'/>
<def f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='582' ll='593' type='int __mdiobus_write(struct mii_bus * bus, int addr, u32 regnum, u16 val)'/>
<dec f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='594' type='int __mdiobus_write(struct mii_bus * , int , u32 , u16 )'/>
<use f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='594' c='__mdiobus_write'/>
<use f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='594' u='a'/>
<use f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='668' u='c' c='mdiobus_write_nested'/>
<use f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='693' u='c' c='mdiobus_write'/>
<doc f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='571'>/**
 * __mdiobus_write - Unlocked version of the mdiobus_write function
 * @bus: the mii_bus struct
 * @addr: the phy address
 * @regnum: register number to write
 * @val: value to write to @regnum
 *
 * Write a MDIO bus register. Caller must hold the mdio bus lock.
 *
 * NOTE: MUST NOT be called from interrupt context.
 */</doc>
<use f='linux-5.3.1/drivers/net/phy/phy-core.c' l='317' u='c' c='mmd_phy_indirect'/>
<use f='linux-5.3.1/drivers/net/phy/phy-core.c' l='320' u='c' c='mmd_phy_indirect'/>
<use f='linux-5.3.1/drivers/net/phy/phy-core.c' l='323' u='c' c='mmd_phy_indirect'/>
<use f='linux-5.3.1/drivers/net/phy/phy-core.c' l='405' u='c' c='__phy_write_mmd'/>
<use f='linux-5.3.1/drivers/net/phy/phy-core.c' l='414' u='c' c='__phy_write_mmd'/>
