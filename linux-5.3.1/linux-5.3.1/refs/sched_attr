<use f='linux-5.3.1/include/linux/sched.h' l='1616' c='sched_setattr'/>
<use f='linux-5.3.1/include/linux/sched.h' l='1617' c='sched_setattr_nocheck'/>
<def f='linux-5.3.1/include/uapi/linux/sched/types.h' l='100' ll='121'/>
<size>56</size>
<doc f='linux-5.3.1/include/uapi/linux/sched/types.h' l='14'>/*
 * Extended scheduling parameters data structure.
 *
 * This is needed because the original struct sched_param can not be
 * altered without introducing ABI issues with legacy applications
 * (e.g., in sched_getparam()).
 *
 * However, the possibility of specifying more than just a priority for
 * the tasks may be useful for a wide variety of application fields, e.g.,
 * multimedia, streaming, automation and control, and many others.
 *
 * This variant (sched_attr) allows to define additional attributes to
 * improve the scheduler knowledge about task requirements.
 *
 * Scheduling Class Attributes
 * ===========================
 *
 * A subset of sched_attr attributes specifies the
 * scheduling policy and relative POSIX attributes:
 *
 *  @size		size of the structure, for fwd/bwd compat.
 *
 *  @sched_policy	task&apos;s scheduling policy
 *  @sched_nice		task&apos;s nice value      (SCHED_NORMAL/BATCH)
 *  @sched_priority	task&apos;s static priority (SCHED_FIFO/RR)
 *
 * Certain more advanced scheduling features can be controlled by a
 * predefined set of flags via the attribute:
 *
 *  @sched_flags	for customizing the scheduler behaviour
 *
 * Sporadic Time-Constrained Task Attributes
 * =========================================
 *
 * A subset of sched_attr attributes allows to describe a so-called
 * sporadic time-constrained task.
 *
 * In such a model a task is specified by:
 *  - the activation period or minimum instance inter-arrival time;
 *  - the maximum (or average, depending on the actual scheduling
 *    discipline) computation time of all instances, a.k.a. runtime;
 *  - the deadline (relative to the actual activation time) of each
 *    instance.
 * Very briefly, a periodic (sporadic) task asks for the execution of
 * some specific computation --which is typically called an instance--
 * (at most) every period. Moreover, each instance typically lasts no more
 * than the runtime and must be completed by time instant t equal to
 * the instance activation time + the deadline.
 *
 * This is reflected by the following fields of the sched_attr structure:
 *
 *  @sched_deadline	representative of the task&apos;s deadline
 *  @sched_runtime	representative of the task&apos;s runtime
 *  @sched_period	representative of the task&apos;s period
 *
 * Given this task model, there are a multiplicity of scheduling algorithms
 * and policies, that can be used to ensure all the tasks will make their
 * timing constraints.
 *
 * As of now, the SCHED_DEADLINE policy (sched_dl scheduling class) is the
 * only user of this new interface. More information about the algorithm
 * available in the scheduling class file or in Documentation/.
 *
 * Task Utilization Attributes
 * ===========================
 *
 * A subset of sched_attr attributes allows to specify the utilization
 * expected for a task. These attributes allow to inform the scheduler about
 * the utilization boundaries within which it should schedule the task. These
 * boundaries are valuable hints to support scheduler decisions on both task
 * placement and frequency selection.
 *
 *  @sched_util_min	represents the minimum utilization
 *  @sched_util_max	represents the maximum utilization
 *
 * Utilization is a value in the range [0..SCHED_CAPACITY_SCALE]. It
 * represents the percentage of CPU time used by a task when running at the
 * maximum frequency on the highest capacity CPU of the system. For example, a
 * 20% utilization task is a task running for 2ms every 10ms at maximum
 * frequency.
 *
 * A task with a min utilization value bigger than 0 is more likely scheduled
 * on a CPU with a capacity big enough to fit the specified value.
 * A task with a max utilization value smaller than 1024 is more likely
 * scheduled on a CPU with no more capacity than the specified value.
 */</doc>
<mbr r='sched_attr::size' o='0' t='__u32'/>
<mbr r='sched_attr::sched_policy' o='32' t='__u32'/>
<mbr r='sched_attr::sched_flags' o='64' t='__u64'/>
<mbr r='sched_attr::sched_nice' o='128' t='__s32'/>
<mbr r='sched_attr::sched_priority' o='160' t='__u32'/>
<mbr r='sched_attr::sched_runtime' o='192' t='__u64'/>
<mbr r='sched_attr::sched_deadline' o='256' t='__u64'/>
<mbr r='sched_attr::sched_period' o='320' t='__u64'/>
<mbr r='sched_attr::sched_util_min' o='384' t='__u32'/>
<mbr r='sched_attr::sched_util_max' o='416' t='__u32'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='312' c='sched_dl_overflow'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='313' c='__setparam_dl'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='314' c='__getparam_dl'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='315' c='__checkparam_dl'/>
<use f='linux-5.3.1/kernel/sched/sched.h' l='316' c='dl_param_changed'/>
<size>56</size>
<use f='linux-5.3.1/kernel/sched/core.c' l='1160' c='uclamp_validate'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='1165' c='__setscheduler_uclamp'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4484' c='__setscheduler_params'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4510' c='__setscheduler'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4554' c='__sched_setscheduler'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4810' c='_sched_setscheduler'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4842' c='sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4848' c='sched_setattr_nocheck'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4898' c='sched_copy_attr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4898' c='sched_copy_attr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5003' c='__se_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5003' c='__se_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5003' c='__do_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5003' c='__se_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5003' c='__se_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5003' c='__se_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5003' c='__do_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5006' c='__do_sys_sched_setattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5117' c='sched_attr_copy_to_user'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5118' c='sched_attr_copy_to_user'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5154' c='__se_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5154' c='__se_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5154' c='__do_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5154' c='__se_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5154' c='__se_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5154' c='__se_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5154' c='__do_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='5157' c='__do_sys_sched_getattr'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='6646' c='normalize_rt_tasks'/>
<size>56</size>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2506' c='sched_dl_overflow'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2568' c='__setparam_dl'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2580' c='__getparam_dl'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2601' c='__checkparam_dl'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2655' c='dl_param_changed'/>
<size>56</size>
