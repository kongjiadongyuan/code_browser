<dec f='linux-5.3.1/include/linux/pm_wakeirq.h' l='20' type='int dev_pm_set_dedicated_wake_irq(struct device * dev, int irq)'/>
<def f='linux-5.3.1/drivers/base/power/wakeirq.c' l='165' ll='215' type='int dev_pm_set_dedicated_wake_irq(struct device * dev, int irq)'/>
<dec f='linux-5.3.1/drivers/base/power/wakeirq.c' l='216' type='int dev_pm_set_dedicated_wake_irq(struct device * , int )'/>
<use f='linux-5.3.1/drivers/base/power/wakeirq.c' l='216' c='dev_pm_set_dedicated_wake_irq'/>
<use f='linux-5.3.1/drivers/base/power/wakeirq.c' l='216' u='a'/>
<doc f='linux-5.3.1/drivers/base/power/wakeirq.c' l='148'>/**
 * dev_pm_set_dedicated_wake_irq - Request a dedicated wake-up interrupt
 * @dev: Device entry
 * @irq: Device wake-up interrupt
 *
 * Unless your hardware has separate wake-up interrupts in addition
 * to the device IO interrupts, you don&apos;t need this.
 *
 * Sets up a threaded interrupt handler for a device that has
 * a dedicated wake-up interrupt in addition to the device IO
 * interrupt.
 *
 * The interrupt starts disabled, and needs to be managed for
 * the device by the bus code or the device driver using
 * dev_pm_enable_wake_irq() and dev_pm_disable_wake_irq()
 * functions.
 */</doc>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='364' u='c' c='i2c_device_probe'/>
