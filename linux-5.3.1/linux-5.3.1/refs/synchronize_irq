<dec f='linux-5.3.1/include/linux/hardirq.h' l='12' type='void synchronize_irq(unsigned int irq)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display_power.c' l='1074' u='c' c='vlv_display_power_well_deinit'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_pipe_crc.c' l='670' u='c' c='intel_crtc_disable_pipe_crc'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_debugfs.c' l='4090' u='c' c='i915_hpd_storm_ctl_show'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_irq.c' l='583' u='c' c='gen6_disable_rps_interrupts'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_irq.c' l='630' u='c' c='gen9_disable_guc_interrupts'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_irq.c' l='666' u='c' c='gen11_disable_guc_interrupts'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_irq.c' l='3683' u='c' c='gen8_irq_power_well_pre_disable'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_irq.c' l='4982' u='c' c='intel_runtime_pm_disable_interrupts'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/intel_guc_log.c' l='618' u='c' c='intel_guc_log_relay_close'/>
<use f='linux-5.3.1/drivers/input/serio/i8042.c' l='463' u='c' c='i8042_stop'/>
<use f='linux-5.3.1/drivers/input/serio/i8042.c' l='464' u='c' c='i8042_stop'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='7448' u='c' c='tg3_irq_quiesce'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='9123' u='c' c='tg3_chip_reset'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000/e1000_main.c' l='289' u='c' c='e1000_irq_disable'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='2227' u='c' c='e1000_irq_disable'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='2229' u='c' c='e1000_irq_disable'/>
<use f='linux-5.3.1/drivers/net/ethernet/marvell/sky2.c' l='2139' u='c' c='sky2_close'/>
<use f='linux-5.3.1/drivers/net/ethernet/marvell/sky2.c' l='2400' u='c' c='sky2_change_mtu'/>
<use f='linux-5.3.1/drivers/net/ethernet/marvell/sky2.c' l='3464' u='c' c='sky2_all_down'/>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='4158' u='c' c='nv_do_nic_poll'/>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='5596' u='c' c='nv_close'/>
<use f='linux-5.3.1/drivers/pci/pcie/pme.c' l='404' u='c' c='pcie_pme_suspend'/>
<use f='linux-5.3.1/drivers/tty/serial/8250/8250_port.c' l='2407' u='c' c='serial8250_do_shutdown'/>
<use f='linux-5.3.1/drivers/tty/serial/serial_core.c' l='1704' u='c' c='uart_port_shutdown'/>
<use f='linux-5.3.1/drivers/usb/core/hcd-pci.c' l='457' u='c' c='suspend_common'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-hcd.c' l='203' u='c' c='ehci_halt'/>
<use f='linux-5.3.1/drivers/usb/host/ehci-hcd.c' l='1105' u='c' c='ehci_suspend'/>
<use f='linux-5.3.1/drivers/usb/host/ohci-hcd.c' l='1111' u='c' c='ohci_suspend'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-hcd.c' l='719' u='c' c='uhci_stop'/>
<use f='linux-5.3.1/drivers/usb/host/uhci-pci.c' l='201' u='c' c='uhci_pci_suspend'/>
<use f='linux-5.3.1/drivers/usb/host/xhci.c' l='399' u='c' c='xhci_msix_sync_irqs'/>
<use f='linux-5.3.1/kernel/irq/irqdomain.c' l='516' u='c' c='irq_domain_disassociate'/>
<use f='linux-5.3.1/kernel/irq/irqdomain.c' l='1093' u='c' c='irq_domain_remove_irq'/>
<def f='linux-5.3.1/kernel/irq/manage.c' l='126' ll='140' type='void synchronize_irq(unsigned int irq)'/>
<dec f='linux-5.3.1/kernel/irq/manage.c' l='141' type='void synchronize_irq(unsigned int )'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='141' c='synchronize_irq'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='141' u='a'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='555' u='c' c='disable_irq'/>
<doc f='linux-5.3.1/kernel/irq/manage.c' l='111'>/**
 *	synchronize_irq - wait for pending IRQ handlers (on other CPUs)
 *	@irq: interrupt number to wait for
 *
 *	This function waits for any pending IRQ handlers for this interrupt
 *	to complete before returning. If you use this function while
 *	holding a resource the IRQ handler may need you will deadlock.
 *
 *	Can only be called from preemptible code as it might sleep when
 *	an interrupt thread is associated to @irq.
 *
 *	It optionally makes sure (when the irq chip supports that method)
 *	that the interrupt is not pending in any CPU and waiting for
 *	service.
 */</doc>
<use f='linux-5.3.1/kernel/irq/pm.c' l='133' u='c' c='suspend_device_irqs'/>
<use f='linux-5.3.1/sound/pci/hda/hda_intel.c' l='1836' u='c' c='azx_first_init'/>
