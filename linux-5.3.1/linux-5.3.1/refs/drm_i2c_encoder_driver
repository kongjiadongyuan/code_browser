<def f='linux-5.3.1/include/drm/drm_encoder_slave.h' l='120' ll='127'/>
<use f='linux-5.3.1/include/drm/drm_encoder_slave.h' l='146' c='drm_i2c_encoder_register'/>
<use f='linux-5.3.1/include/drm/drm_encoder_slave.h' l='155' c='drm_i2c_encoder_unregister'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_encoder_slave.c' l='59' c='drm_i2c_encoder_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_encoder_slave.c' l='83' macro='1' c='drm_i2c_encoder_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_encoder_slave.c' l='83' macro='1' c='drm_i2c_encoder_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_encoder_slave.c' l='83' macro='1' c='drm_i2c_encoder_init'/>
<size>240</size>
<doc f='linux-5.3.1/include/drm/drm_encoder_slave.h' l='110'>/**
 * struct drm_i2c_encoder_driver
 *
 * Describes a device driver for an encoder connected to the GPU
 * through an I2C bus. In addition to the entry points in @i2c_driver
 * an @encoder_init function should be provided. It will be called to
 * give the driver an opportunity to allocate any per-encoder data
 * structures and to initialize the @slave_funcs and (optionally)
 * @slave_priv members of @encoder.
 */</doc>
<mbr r='drm_i2c_encoder_driver::i2c_driver' o='0' t='struct i2c_driver'/>
<mbr r='drm_i2c_encoder_driver::encoder_init' o='1856' t='int (*)(struct i2c_client *, struct drm_device *, struct drm_encoder_slave *)'/>
