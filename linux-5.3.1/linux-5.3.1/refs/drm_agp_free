<dec f='linux-5.3.1/include/drm/drm_agpsupport.h' l='57' type='int drm_agp_free(struct drm_device * dev, struct drm_agp_buffer * request)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_agpsupport.c' l='362' ll='379' type='int drm_agp_free(struct drm_device * dev, struct drm_agp_buffer * request)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_agpsupport.c' l='380' type='int drm_agp_free(struct drm_device * , struct drm_agp_buffer * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_agpsupport.c' l='380' c='drm_agp_free'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_agpsupport.c' l='380' u='a'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_agpsupport.c' l='388' u='c' c='drm_agp_free_ioctl'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_agpsupport.c' l='348'>/**
 * Free AGP memory (ioctl).
 *
 * \param inode device inode.
 * \param file_priv DRM file private.
 * \param cmd command.
 * \param arg pointer to a drm_agp_buffer structure.
 * \return zero on success or a negative number on failure.
 *
 * Verifies the AGP device is present and has been acquired and looks up the
 * AGP memory entry. If the memory is currently bound, unbind it via
 * unbind_agp(). Frees it via free_agp() as well as the entry itself
 * and unlinks from the doubly linked list it&apos;s inserted in.
 */</doc>
