<dec f='linux-5.3.1/include/drm/drm_dp_mst_helper.h' l='592' type='int drm_dp_mst_topology_mgr_init(struct drm_dp_mst_topology_mgr * mgr, struct drm_device * dev, struct drm_dp_aux * aux, int max_dpcd_transaction_bytes, int max_payloads, int conn_base_id)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3819' ll='3866' type='int drm_dp_mst_topology_mgr_init(struct drm_dp_mst_topology_mgr * mgr, struct drm_device * dev, struct drm_dp_aux * aux, int max_dpcd_transaction_bytes, int max_payloads, int conn_base_id)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3867' type='int drm_dp_mst_topology_mgr_init(struct drm_dp_mst_topology_mgr * , struct drm_device * , struct drm_dp_aux * , int , int , int )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3867' c='drm_dp_mst_topology_mgr_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3867' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3808'>/**
 * drm_dp_mst_topology_mgr_init - initialise a topology manager
 * @mgr: manager struct to initialise
 * @dev: device providing this structure - for i2c addition.
 * @aux: DP helper aux channel to talk to this device
 * @max_dpcd_transaction_bytes: hw specific DPCD transaction limit
 * @max_payloads: maximum number of payloads this GPU can source
 * @conn_base_id: the connector object ID the MST device is connected to.
 *
 * Return 0 for success, or negative error code on failure
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp_mst.c' l='662' u='c' c='intel_dp_mst_encoder_init'/>
