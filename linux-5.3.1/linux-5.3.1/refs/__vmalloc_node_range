<dec f='linux-5.3.1/include/linux/vmalloc.h' l='92' type='void * __vmalloc_node_range(unsigned long size, unsigned long align, unsigned long start, unsigned long end, gfp_t gfp_mask, pgprot_t prot, unsigned long vm_flags, int node, const void * caller)'/>
<use f='linux-5.3.1/arch/x86/kernel/module.c' l='75' u='c' c='module_alloc'/>
<use f='linux-5.3.1/kernel/fork.c' l='231' u='c' c='alloc_thread_stack_node'/>
<def f='linux-5.3.1/mm/vmalloc.c' l='2470' ll='2507' type='void * __vmalloc_node_range(unsigned long size, unsigned long align, unsigned long start, unsigned long end, gfp_t gfp_mask, pgprot_t prot, unsigned long vm_flags, int node, const void * caller)'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='2543' u='c' c='__vmalloc_node'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='2618' u='c' c='vmalloc_user'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='2681' u='c' c='vmalloc_exec'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='2725' u='c' c='vmalloc_32_user'/>
<doc f='linux-5.3.1/mm/vmalloc.c' l='2452'>/**
 * __vmalloc_node_range - allocate virtually contiguous memory
 * @size:		  allocation size
 * @align:		  desired alignment
 * @start:		  vm area range start
 * @end:		  vm area range end
 * @gfp_mask:		  flags for the page level allocator
 * @prot:		  protection mask for the allocated pages
 * @vm_flags:		  additional vm area flags (e.g. %VM_NO_GUARD)
 * @node:		  node to use for allocation or NUMA_NO_NODE
 * @caller:		  caller&apos;s return address
 *
 * Allocate enough pages to cover @size from the page level
 * allocator with @gfp_mask flags.  Map them into contiguous
 * kernel virtual space, using a pagetable protection of @prot.
 *
 * Return: the address of the area or %NULL on failure
 */</doc>
