<dec f='linux-5.3.1/include/linux/lz4.h' l='622' type='int LZ4_decompress_safe_usingDict(const char * source, char * dest, int compressedSize, int maxDecompressedSize, const char * dictStart, int dictSize)'/>
<doc f='linux-5.3.1/include/linux/lz4.h' l='602'>/**
 * LZ4_decompress_safe_usingDict() - Same as LZ4_setStreamDecode()
 *	followed by LZ4_decompress_safe_continue()
 * @source: source address of the compressed data
 * @dest: output buffer address of the uncompressed data
 *	which must be already allocated
 * @compressedSize: is the precise full size of the compressed block
 * @maxDecompressedSize: is the size of &apos;dest&apos; buffer
 * @dictStart: pointer to the start of the dictionary in memory
 * @dictSize: size of dictionary
 *
 * This decoding function works the same as
 * a combination of LZ4_setStreamDecode() followed by
 * LZ4_decompress_safe_continue()
 * It is stand-alone, and doesn&apos;t need an LZ4_streamDecode_t structure.
 *
 * Return: number of bytes decompressed into destination buffer
 *	(necessarily &lt;= maxDecompressedSize)
 *	or a negative result in case of error
 */</doc>
<def f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='668' ll='684' type='int LZ4_decompress_safe_usingDict(const char * source, char * dest, int compressedSize, int maxOutputSize, const char * dictStart, int dictSize)'/>
<dec f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='704' type='int LZ4_decompress_safe_usingDict(const char * , char * , int , int , const char * , int )'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='704' c='LZ4_decompress_safe_usingDict'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='704' u='a'/>
