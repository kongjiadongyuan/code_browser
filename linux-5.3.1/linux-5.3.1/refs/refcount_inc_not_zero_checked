<dec f='linux-5.3.1/include/linux/refcount.h' l='49' type='bool refcount_inc_not_zero_checked(refcount_t * r)'/>
<def f='linux-5.3.1/lib/refcount.c' l='121' ll='139' type='bool refcount_inc_not_zero_checked(refcount_t * r)'/>
<dec f='linux-5.3.1/lib/refcount.c' l='140' type='bool refcount_inc_not_zero_checked(refcount_t * )'/>
<use f='linux-5.3.1/lib/refcount.c' l='140' c='refcount_inc_not_zero_checked'/>
<use f='linux-5.3.1/lib/refcount.c' l='140' u='a'/>
<use f='linux-5.3.1/lib/refcount.c' l='156' u='c' c='refcount_inc_checked'/>
<doc f='linux-5.3.1/lib/refcount.c' l='109'>/**
 * refcount_inc_not_zero_checked - increment a refcount unless it is 0
 * @r: the refcount to increment
 *
 * Similar to atomic_inc_not_zero(), but will saturate at UINT_MAX and WARN.
 *
 * Provides no memory ordering, it is assumed the caller has guaranteed the
 * object memory to be stable (RCU, etc.). It does provide a control dependency
 * and thereby orders future stores. See the comment on top.
 *
 * Return: true if the increment was successful, false otherwise
 */</doc>
