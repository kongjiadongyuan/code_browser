<dec f='linux-5.3.1/include/linux/skbuff.h' l='1041' type='struct sk_buff * build_skb(void * data, unsigned int frag_size)'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='6903' u='c' c='tg3_rx'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000/e1000_main.c' l='4378' u='c' c='e1000_clean_rx_irq'/>
<def f='linux-5.3.1/net/core/skbuff.c' l='324' ll='334' type='struct sk_buff * build_skb(void * data, unsigned int frag_size)'/>
<dec f='linux-5.3.1/net/core/skbuff.c' l='335' type='struct sk_buff * build_skb(void * , unsigned int )'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='335' c='build_skb'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='335' u='a'/>
<doc f='linux-5.3.1/net/core/skbuff.c' l='319'>/* build_skb() is wrapper over __build_skb(), that specifically
 * takes care of skb-&gt;head and skb-&gt;pfmemalloc
 * This means that if @frag_size is not zero, then @data must be backed
 * by a page fragment, not kmalloc() or vmalloc()
 */</doc>
