<dec f='linux-5.3.1/include/linux/mm.h' l='1654' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux-5.3.1/include/linux/mm.h' l='1651'>/*
 * doesn&apos;t attempt to fault and will return short.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_userptr.c' l='622' u='c' c='i915_gem_userptr_get_pages'/>
<use f='linux-5.3.1/kernel/events/core.c' l='6425' u='c' c='perf_virt_to_phys'/>
<def f='linux-5.3.1/mm/gup.c' l='2325' ll='2361' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<dec f='linux-5.3.1/mm/gup.c' l='2362' type='int __get_user_pages_fast(unsigned long , int , int , struct page ** )'/>
<use f='linux-5.3.1/mm/gup.c' l='2362' c='__get_user_pages_fast'/>
<use f='linux-5.3.1/mm/gup.c' l='2362' u='a'/>
<doc f='linux-5.3.1/mm/gup.c' l='2316'>/*
 * Like get_user_pages_fast() except it&apos;s IRQ-safe in that it won&apos;t fall back to
 * the regular GUP.
 * Note a difference with get_user_pages_fast: this always returns the
 * number of pages pinned, 0 if no pages were pinned.
 *
 * If the architecture does not support this function, simply return with no
 * pages pinned.
 */</doc>
