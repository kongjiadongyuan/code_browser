<dec f='linux-5.3.1/include/net/cfg80211.h' l='6487' type='void cfg80211_roamed(struct net_device * dev, struct cfg80211_roam_info * info, gfp_t gfp)'/>
<doc f='linux-5.3.1/include/net/cfg80211.h' l='6469'>/**
 * cfg80211_roamed - notify cfg80211 of roaming
 *
 * @dev: network device
 * @info: information about the new BSS. struct &amp;cfg80211_roam_info.
 * @gfp: allocation flags
 *
 * This function may be called with the driver passing either the BSSID of the
 * new AP or passing the bss entry to avoid a race in timeout of the bss entry.
 * It should be called by the underlying driver whenever it roamed from one AP
 * to another while connected. Drivers which have roaming implemented in
 * firmware should pass the bss entry to avoid a race in bss entry timeout where
 * the bss entry of the new AP is seen in the driver, but gets timed out by the
 * time it is accessed in __cfg80211_roamed() due to delay in scheduling
 * rdev-&gt;event_work. In case of any failures, the reference is released
 * either in cfg80211_roamed() or in __cfg80211_romed(), Otherwise, it will be
 * released while diconneting from the current bss.
 */</doc>
<def f='linux-5.3.1/net/wireless/sme.c' l='956' ll='1028' type='void cfg80211_roamed(struct net_device * dev, struct cfg80211_roam_info * info, gfp_t gfp)'/>
<dec f='linux-5.3.1/net/wireless/sme.c' l='1029' type='void cfg80211_roamed(struct net_device * , struct cfg80211_roam_info * , gfp_t )'/>
<use f='linux-5.3.1/net/wireless/sme.c' l='1029' c='cfg80211_roamed'/>
<use f='linux-5.3.1/net/wireless/sme.c' l='1029' u='a'/>
<doc f='linux-5.3.1/net/wireless/sme.c' l='955'>/* Consumes info-&gt;bss object one way or another */</doc>
