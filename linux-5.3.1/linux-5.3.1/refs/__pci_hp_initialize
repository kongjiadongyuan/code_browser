<dec f='linux-5.3.1/include/linux/pci_hotplug.h' l='74' type='int __pci_hp_initialize(struct hotplug_slot * slot, struct pci_bus * bus, int nr, const char * name, struct module * owner, const char * mod_name)'/>
<use f='linux-5.3.1/drivers/pci/hotplug/pci_hotplug_core.c' l='410' u='c' c='__pci_hp_register'/>
<def f='linux-5.3.1/drivers/pci/hotplug/pci_hotplug_core.c' l='438' ll='464' type='int __pci_hp_initialize(struct hotplug_slot * slot, struct pci_bus * bus, int devnr, const char * name, struct module * owner, const char * mod_name)'/>
<dec f='linux-5.3.1/drivers/pci/hotplug/pci_hotplug_core.c' l='465' type='int __pci_hp_initialize(struct hotplug_slot * , struct pci_bus * , int , const char * , struct module * , const char * )'/>
<use f='linux-5.3.1/drivers/pci/hotplug/pci_hotplug_core.c' l='465' c='__pci_hp_initialize'/>
<use f='linux-5.3.1/drivers/pci/hotplug/pci_hotplug_core.c' l='465' u='a'/>
<doc f='linux-5.3.1/drivers/pci/hotplug/pci_hotplug_core.c' l='422'>/**
 * __pci_hp_initialize - prepare hotplug slot for in-kernel use
 * @slot: pointer to the &amp;struct hotplug_slot to initialize
 * @bus: bus this slot is on
 * @devnr: slot number
 * @name: name registered with kobject core
 * @owner: caller module owner
 * @mod_name: caller module name
 *
 * Allocate and fill in a PCI slot for use by a hotplug driver.  Once this has
 * been called, the driver may invoke hotplug_slot_name() to get the slot&apos;s
 * unique name.  The driver must be prepared to handle a -&gt;reset_slot callback
 * from this point on.
 *
 * Returns 0 on success or a negative int on error.
 */</doc>
