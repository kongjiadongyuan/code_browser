<dec f='linux-5.3.1/drivers/usb/host/pci-quirks.h' l='16' type='void usb_enable_intel_xhci_ports(struct pci_dev * xhci_pdev)'/>
<def f='linux-5.3.1/drivers/usb/host/pci-quirks.c' l='1041' ll='1123' type='void usb_enable_intel_xhci_ports(struct pci_dev * xhci_pdev)'/>
<dec f='linux-5.3.1/drivers/usb/host/pci-quirks.c' l='1124' type='void usb_enable_intel_xhci_ports(struct pci_dev * )'/>
<use f='linux-5.3.1/drivers/usb/host/pci-quirks.c' l='1124' c='usb_enable_intel_xhci_ports'/>
<use f='linux-5.3.1/drivers/usb/host/pci-quirks.c' l='1124' u='a'/>
<use f='linux-5.3.1/drivers/usb/host/pci-quirks.c' l='1208' u='c' c='quirk_usb_handoff_xhci'/>
<doc f='linux-5.3.1/drivers/usb/host/pci-quirks.c' l='1023'>/*
 * Intel&apos;s Panther Point chipset has two host controllers (EHCI and xHCI) that
 * share some number of ports.  These ports can be switched between either
 * controller.  Not all of the ports under the EHCI host controller may be
 * switchable.
 *
 * The ports should be switched over to xHCI before PCI probes for any device
 * start.  This avoids active devices under EHCI being disconnected during the
 * port switchover, which could cause loss of data on USB storage devices, or
 * failed boot when the root file system is on a USB mass storage device and is
 * enumerated under EHCI first.
 *
 * We write into the xHC&apos;s PCI configuration space in some Intel-specific
 * registers to switch the ports over.  The USB 3.0 terminations and the USB
 * 2.0 data wires are switched separately.  We want to enable the SuperSpeed
 * terminations before switching the USB 2.0 wires over, so that USB 3.0
 * devices connect at SuperSpeed, rather than at USB 2.0 speeds.
 */</doc>
<use f='linux-5.3.1/drivers/usb/host/xhci-pci.c' l='509' u='c' c='xhci_pci_resume'/>
