<dec f='linux-5.3.1/include/linux/sched/jobctl.h' l='35' type='bool task_set_jobctl_pending(struct task_struct * task, unsigned long mask)'/>
<use f='linux-5.3.1/include/linux/ptrace.h' l='221' u='c' c='ptrace_init_task'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='436' u='c' c='ptrace_attach'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='1112' u='c' c='ptrace_request'/>
<def f='linux-5.3.1/kernel/signal.c' l='285' ll='299' type='bool task_set_jobctl_pending(struct task_struct * task, unsigned long mask)'/>
<use f='linux-5.3.1/kernel/signal.c' l='400' u='c' c='task_join_group_stop'/>
<use f='linux-5.3.1/kernel/signal.c' l='880' u='c' c='ptrace_trap_notify'/>
<use f='linux-5.3.1/kernel/signal.c' l='2338' u='c' c='do_signal_stop'/>
<use f='linux-5.3.1/kernel/signal.c' l='2349' u='c' c='do_signal_stop'/>
<use f='linux-5.3.1/kernel/signal.c' l='2397' u='c' c='do_signal_stop'/>
<doc f='linux-5.3.1/kernel/signal.c' l='268'>/**
 * task_set_jobctl_pending - set jobctl pending bits
 * @task: target task
 * @mask: pending bits to set
 *
 * Clear @mask from @task-&gt;jobctl.  @mask must be subset of
 * %JOBCTL_PENDING_MASK | %JOBCTL_STOP_CONSUME | %JOBCTL_STOP_SIGMASK |
 * %JOBCTL_TRAPPING.  If stop signo is being set, the existing signo is
 * cleared.  If @task is already being killed or exiting, this function
 * becomes noop.
 *
 * CONTEXT:
 * Must be called with @task-&gt;sighand-&gt;siglock held.
 *
 * RETURNS:
 * %true if @mask is set, %false if made noop because @task was dying.
 */</doc>
