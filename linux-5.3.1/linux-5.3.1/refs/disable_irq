<dec f='linux-5.3.1/include/linux/interrupt.h' l='224' type='void disable_irq(unsigned int irq)'/>
<use f='linux-5.3.1/include/linux/interrupt.h' l='424' u='c' c='disable_irq_lockdep'/>
<use f='linux-5.3.1/arch/x86/kernel/hpet.c' l='532' u='c' c='hpet_setup_msi_irq'/>
<use f='linux-5.3.1/drivers/ata/libahci.c' l='2552' u='c' c='ahci_host_activate_multi_irqs'/>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='1092' u='c' c='nv_disable_irq'/>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='1094' u='c' c='nv_disable_irq'/>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='1096' u='c' c='nv_disable_irq'/>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='1097' u='c' c='nv_disable_irq'/>
<use f='linux-5.3.1/drivers/net/ethernet/nvidia/forcedeth.c' l='1098' u='c' c='nv_disable_irq'/>
<def f='linux-5.3.1/kernel/irq/manage.c' l='552' ll='556' type='void disable_irq(unsigned int irq)'/>
<dec f='linux-5.3.1/kernel/irq/manage.c' l='557' type='void disable_irq(unsigned int )'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='557' c='disable_irq'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='557' u='a'/>
<doc f='linux-5.3.1/kernel/irq/manage.c' l='540'>/**
 *	disable_irq - disable an irq and wait for completion
 *	@irq: Interrupt to disable
 *
 *	Disable the selected interrupt line.  Enables and Disables are
 *	nested.
 *	This function waits for any pending IRQ handlers for this interrupt
 *	to complete before returning. If you use this function while
 *	holding a resource the IRQ handler may need you will deadlock.
 *
 *	This function may be called - with care - from IRQ context.
 */</doc>
