<dec f='linux-5.3.1/include/linux/pm_runtime.h' l='46' type='void __pm_runtime_disable(struct device * dev, bool check_resume)'/>
<use f='linux-5.3.1/include/linux/pm_runtime.h' l='267' u='c' c='pm_runtime_disable'/>
<use f='linux-5.3.1/drivers/base/power/main.c' l='1498' u='c' c='__device_suspend_late'/>
<def f='linux-5.3.1/drivers/base/power/runtime.c' l='1328' ll='1363' type='void __pm_runtime_disable(struct device * dev, bool check_resume)'/>
<dec f='linux-5.3.1/drivers/base/power/runtime.c' l='1364' type='void __pm_runtime_disable(struct device * , bool )'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='1364' c='__pm_runtime_disable'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='1364' u='a'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='1615' u='c' c='pm_runtime_remove'/>
<doc f='linux-5.3.1/drivers/base/power/runtime.c' l='1314'>/**
 * __pm_runtime_disable - Disable runtime PM of a device.
 * @dev: Device to handle.
 * @check_resume: If set, check if there&apos;s a resume request for the device.
 *
 * Increment power.disable_depth for the device and if it was zero previously,
 * cancel all pending runtime PM requests for the device and wait for all
 * operations in progress to complete.  The device can be either active or
 * suspended after its runtime PM has been disabled.
 *
 * If @check_resume is set and there&apos;s a resume request pending when
 * __pm_runtime_disable() is called and power.disable_depth is zero, the
 * function will wake up the device before disabling its runtime PM.
 */</doc>
