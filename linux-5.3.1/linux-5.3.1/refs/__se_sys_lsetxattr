<dec f='linux-5.3.1/fs/xattr.c' l='488' macro='1' type='long __se_sys_lsetxattr(typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const char *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const char *)0), typeof (0ULL))), 0LL, 0L)) pathname, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const char *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const char *)0), typeof (0ULL))), 0LL, 0L)) name, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const void *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const void *)0), typeof (0ULL))), 0LL, 0L)) value, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((size_t)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((size_t)0), typeof (0ULL))), 0LL, 0L)) size, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((int)0), typeof (0ULL))), 0LL, 0L)) flags)'/>
<use f='linux-5.3.1/fs/xattr.c' l='488' macro='1' u='c' c='__x64_sys_lsetxattr'/>
<use f='linux-5.3.1/fs/xattr.c' l='488' macro='1' u='c' c='__ia32_sys_lsetxattr'/>
<def f='linux-5.3.1/fs/xattr.c' l='488' macro='1' type='long __se_sys_lsetxattr(typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const char *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const char *)0), typeof (0ULL))), 0LL, 0L)) pathname, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const char *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const char *)0), typeof (0ULL))), 0LL, 0L)) name, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const void *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const void *)0), typeof (0ULL))), 0LL, 0L)) value, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((size_t)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((size_t)0), typeof (0ULL))), 0LL, 0L)) size, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((int)0), typeof (0ULL))), 0LL, 0L)) flags)'/>
