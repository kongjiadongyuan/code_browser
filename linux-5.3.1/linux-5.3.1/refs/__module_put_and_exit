<dec f='linux-5.3.1/include/linux/module.h' l='605' type='void __module_put_and_exit(struct module * mod, long code)'/>
<use f='linux-5.3.1/crypto/algboss.c' l='87' macro='1' u='c' c='cryptomgr_probe'/>
<use f='linux-5.3.1/crypto/algboss.c' l='224' macro='1' u='c' c='cryptomgr_test'/>
<use f='linux-5.3.1/fs/nfs/callback.c' l='96' macro='1' u='c' c='nfs4_callback_svc'/>
<use f='linux-5.3.1/fs/nfs/nfs4state.c' l='2654' macro='1' u='c' c='nfs4_run_state_manager'/>
<def f='linux-5.3.1/kernel/module.c' l='334' ll='338' type='void __module_put_and_exit(struct module * mod, long code)'/>
<dec f='linux-5.3.1/kernel/module.c' l='339' type='void __module_put_and_exit(struct module * , long )'/>
<use f='linux-5.3.1/kernel/module.c' l='339' c='__module_put_and_exit'/>
<use f='linux-5.3.1/kernel/module.c' l='339' u='a'/>
<doc f='linux-5.3.1/kernel/module.c' l='330'>/*
 * A thread that wants to hold a reference to a module only while it
 * is running can call this to safely exit.  nfsd and lockd use this.
 */</doc>
