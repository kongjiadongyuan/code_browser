<def f='linux-5.3.1/arch/x86/include/asm/vdso/gettimeofday.h' l='286' ll='292' type='u64 vdso_calc_delta(u64 cycles, u64 last, u64 mask, u32 mult)'/>
<use f='linux-5.3.1/lib/vdso/gettimeofday.c' l='56' macro='1' u='c' c='do_hres'/>
<doc f='linux-5.3.1/arch/x86/include/asm/vdso/gettimeofday.h' l='268'>/*
 * x86 specific delta calculation.
 *
 * The regular implementation assumes that clocksource reads are globally
 * monotonic. The TSC can be slightly off across sockets which can cause
 * the regular delta calculation (@cycles - @last) to return a huge time
 * jump.
 *
 * Therefore it needs to be verified that @cycles are greater than
 * @last. If not then use @last, which is the base time of the current
 * conversion period.
 *
 * This variant also removes the masking of the subtraction because the
 * clocksource mask of all VDSO capable clocksources on x86 is U64_MAX
 * which would result in a pointless operation. The compiler cannot
 * optimize it away as the mask comes from the vdso data and is not compile
 * time constant.
 */</doc>
