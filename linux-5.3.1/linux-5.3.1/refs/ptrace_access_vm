<dec f='linux-5.3.1/include/linux/ptrace.h' l='20' type='int ptrace_access_vm(struct task_struct * tsk, unsigned long addr, void * buf, int len, unsigned int gup_flags)'/>
<def f='linux-5.3.1/kernel/ptrace.c' l='42' ll='64' type='int ptrace_access_vm(struct task_struct * tsk, unsigned long addr, void * buf, int len, unsigned int gup_flags)'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='597' u='c' c='ptrace_readdata'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='625' u='c' c='ptrace_writedata'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='1288' u='c' c='generic_ptrace_peekdata'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='1299' u='c' c='generic_ptrace_pokedata'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='1317' u='c' c='compat_ptrace_request'/>
<use f='linux-5.3.1/kernel/ptrace.c' l='1327' u='c' c='compat_ptrace_request'/>
<doc f='linux-5.3.1/kernel/ptrace.c' l='37'>/*
 * Access another process&apos; address space via ptrace.
 * Source/target buffer must be kernel space,
 * Do not walk the page table directly, use get_user_pages
 */</doc>
