<dec f='linux-5.3.1/include/linux/key.h' l='300' type='struct key * request_key_rcu(struct key_type * type, const char * description, struct key_tag * domain_tag)'/>
<def f='linux-5.3.1/security/keys/request_key.c' l='766' ll='804' type='struct key * request_key_rcu(struct key_type * type, const char * description, struct key_tag * domain_tag)'/>
<dec f='linux-5.3.1/security/keys/request_key.c' l='805' type='struct key * request_key_rcu(struct key_type * , const char * , struct key_tag * )'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='805' c='request_key_rcu'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='805' u='a'/>
<doc f='linux-5.3.1/security/keys/request_key.c' l='754'>/**
 * request_key_rcu - Request key from RCU-read-locked context
 * @type: The type of key we want.
 * @description: The name of the key we want.
 * @domain_tag: The domain in which the key operates.
 *
 * Request a key from a context that we may not sleep in (such as RCU-mode
 * pathwalk).  Keys under construction are ignored.
 *
 * Return a pointer to the found key if successful, -ENOKEY if we couldn&apos;t find
 * a key or some other error if the key found was unsuitable or inaccessible.
 */</doc>
