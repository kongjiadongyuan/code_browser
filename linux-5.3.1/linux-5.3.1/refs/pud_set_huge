<dec f='linux-5.3.1/include/asm-generic/pgtable.h' l='1056' type='int pud_set_huge(pud_t * pud, phys_addr_t addr, pgprot_t prot)'/>
<def f='linux-5.3.1/arch/x86/mm/pgtable.c' l='700' ll='720' type='int pud_set_huge(pud_t * pud, phys_addr_t addr, pgprot_t prot)'/>
<doc f='linux-5.3.1/arch/x86/mm/pgtable.c' l='682'>/**
 * pud_set_huge - setup kernel PUD mapping
 *
 * MTRRs can override PAT memory types with 4KiB granularity. Therefore, this
 * function sets up a huge page only if any of the following conditions are met:
 *
 * - MTRRs are disabled, or
 *
 * - MTRRs are enabled and the range is completely covered by a single MTRR, or
 *
 * - MTRRs are enabled and the corresponding MTRR memory type is WB, which
 *   has no effect on the requested PAT memory type.
 *
 * Callers should try to decrease page size (1GB -&gt; 2MB -&gt; 4K) if the bigger
 * page mapping attempt fails.
 *
 * Returns 1 on success and 0 on failure.
 */</doc>
<use f='linux-5.3.1/lib/ioremap.c' l='143' u='c' c='ioremap_try_huge_pud'/>
