<dec f='linux-5.3.1/security/keys/internal.h' l='174' type='void keyring_restriction_gc(struct key * keyring, struct key_type * dead_type)'/>
<use f='linux-5.3.1/security/keys/gc.c' l='338' u='c' c='key_garbage_collector'/>
<def f='linux-5.3.1/security/keys/keyring.c' l='1759' ll='1792' type='void keyring_restriction_gc(struct key * keyring, struct key_type * dead_type)'/>
<doc f='linux-5.3.1/security/keys/keyring.c' l='1744'>/*
 * Garbage collect restriction pointers from a keyring.
 *
 * Keyring restrictions are associated with a key type, and must be cleaned
 * up if the key type is unregistered. The restriction is altered to always
 * reject additional keys so a keyring cannot be opened up by unregistering
 * a key type.
 *
 * Not called with any keyring locks held. The keyring&apos;s key struct will not
 * be deallocated under us as only our caller may deallocate it.
 *
 * The caller is required to hold key_types_sem and dead_type-&gt;sem. This is
 * fulfilled by key_gc_keytype() holding the locks on behalf of
 * key_garbage_collector(), which it invokes on a workqueue.
 */</doc>
