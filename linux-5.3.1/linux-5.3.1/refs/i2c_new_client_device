<dec f='linux-5.3.1/include/linux/i2c.h' l='446' type='struct i2c_client * i2c_new_client_device(struct i2c_adapter * adap, const struct i2c_board_info * info)'/>
<def f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='726' ll='800' type='struct i2c_client * i2c_new_client_device(struct i2c_adapter * adap, const struct i2c_board_info * info)'/>
<dec f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='801' type='struct i2c_client * i2c_new_client_device(struct i2c_adapter * , const struct i2c_board_info * )'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='801' c='i2c_new_client_device'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='801' u='a'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='822' u='c' c='i2c_new_device'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='897' u='c' c='i2c_new_dummy_device'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='1087' u='c' c='i2c_sysfs_new_device'/>
<doc f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='710'>/**
 * i2c_new_client_device - instantiate an i2c device
 * @adap: the adapter managing the device
 * @info: describes one I2C device; bus_num is ignored
 * Context: can sleep
 *
 * Create an i2c device. Binding is handled through driver model
 * probe()/remove() methods.  A driver may be bound to this device when we
 * return from this function, or any later moment (e.g. maybe hotplugging will
 * load the driver module).  This call is not appropriate for use by mainboard
 * initialization logic, which usually runs during an arch_initcall() long
 * before any i2c_adapter could exist.
 *
 * This returns the new i2c client, which may be saved for later use with
 * i2c_unregister_device(); or an ERR_PTR to describe the error.
 */</doc>
