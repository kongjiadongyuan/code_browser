<dec f='linux-5.3.1/include/linux/sched/wake_q.h' l='59' type='void wake_q_add(struct wake_q_head * head, struct task_struct * task)'/>
<use f='linux-5.3.1/ipc/mqueue.c' l='932' u='c' c='pipelined_send'/>
<use f='linux-5.3.1/ipc/mqueue.c' l='960' u='c' c='pipelined_receive'/>
<use f='linux-5.3.1/ipc/msg.c' l='230' u='c' c='ss_wakeup'/>
<use f='linux-5.3.1/ipc/msg.c' l='240' u='c' c='expunge_all'/>
<use f='linux-5.3.1/ipc/msg.c' l='800' u='c' c='pipelined_send'/>
<use f='linux-5.3.1/ipc/msg.c' l='806' u='c' c='pipelined_send'/>
<use f='linux-5.3.1/ipc/sem.c' l='769' u='c' c='wake_up_sem_queue_prepare'/>
<use f='linux-5.3.1/kernel/locking/mutex.c' l='1246' u='c' c='__mutex_unlock_slowpath'/>
<use f='linux-5.3.1/kernel/locking/rtmutex.c' l='1059' u='c' c='mark_wakeup_next_waiter'/>
<use f='linux-5.3.1/kernel/locking/rwsem.c' l='422' u='c' c='rwsem_mark_wake'/>
<def f='linux-5.3.1/kernel/sched/core.c' l='449' ll='453' type='void wake_q_add(struct wake_q_head * head, struct task_struct * task)'/>
<doc f='linux-5.3.1/kernel/sched/core.c' l='437'>/**
 * wake_q_add() - queue a wakeup for &apos;later&apos; waking.
 * @head: the wake_q_head to add @task to
 * @task: the task to queue for &apos;later&apos; wakeup
 *
 * Queue a task for later wakeup, most likely by the wake_up_q() call in the
 * same context, _HOWEVER_ this is not guaranteed, the wakeup can come
 * instantly.
 *
 * This function must be used as-if it were wake_up_process(); IOW the task
 * must be ready to be woken at this location.
 */</doc>
<use f='linux-5.3.1/kernel/stop_machine.c' l='72' u='c' c='__cpu_stop_queue_work'/>
