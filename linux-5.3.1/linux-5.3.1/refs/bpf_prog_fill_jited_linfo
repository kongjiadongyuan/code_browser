<dec f='linux-5.3.1/include/linux/filter.h' l='805' type='void bpf_prog_fill_jited_linfo(struct bpf_prog * prog, const u32 * insn_to_jit_off)'/>
<def f='linux-5.3.1/kernel/bpf/core.c' l='181' ll='208' type='void bpf_prog_fill_jited_linfo(struct bpf_prog * prog, const u32 * insn_to_jit_off)'/>
<doc f='linux-5.3.1/kernel/bpf/core.c' l='157'>/* The jit engine is responsible to provide an array
 * for insn_off to the jited_off mapping (insn_to_jit_off).
 *
 * The idx to this array is the insn_off.  Hence, the insn_off
 * here is relative to the prog itself instead of the main prog.
 * This array has one entry for each xlated bpf insn.
 *
 * jited_off is the byte off to the last byte of the jited insn.
 *
 * Hence, with
 * insn_start:
 *      The first bpf insn off of the prog.  The insn off
 *      here is relative to the main prog.
 *      e.g. if prog is a subprog, insn_start &gt; 0
 * linfo_idx:
 *      The prog&apos;s idx to prog-&gt;aux-&gt;linfo and jited_linfo
 *
 * jited_linfo[linfo_idx] = prog-&gt;bpf_func
 *
 * For i &gt; linfo_idx,
 *
 * jited_linfo[i] = prog-&gt;bpf_func +
 *	insn_to_jit_off[linfo[i].insn_off - insn_start - 1]
 */</doc>
