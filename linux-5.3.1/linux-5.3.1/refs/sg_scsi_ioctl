<dec f='linux-5.3.1/include/linux/blkdev.h' l='854' type='int sg_scsi_ioctl(struct request_queue * , struct gendisk * , fmode_t , struct scsi_ioctl_command * )'/>
<def f='linux-5.3.1/block/scsi_ioctl.c' l='404' ll='515' type='int sg_scsi_ioctl(struct request_queue * q, struct gendisk * disk, fmode_t mode, struct scsi_ioctl_command * sic)'/>
<dec f='linux-5.3.1/block/scsi_ioctl.c' l='516' type='int sg_scsi_ioctl(struct request_queue * , struct gendisk * , fmode_t , struct scsi_ioctl_command * )'/>
<use f='linux-5.3.1/block/scsi_ioctl.c' l='516' c='sg_scsi_ioctl'/>
<use f='linux-5.3.1/block/scsi_ioctl.c' l='516' u='a'/>
<use f='linux-5.3.1/block/scsi_ioctl.c' l='659' u='c' c='scsi_cmd_ioctl'/>
<doc f='linux-5.3.1/block/scsi_ioctl.c' l='370'>/**
 * sg_scsi_ioctl  --  handle deprecated SCSI_IOCTL_SEND_COMMAND ioctl
 * @q:		request queue to send scsi commands down
 * @disk:	gendisk to operate on (option)
 * @mode:	mode used to open the file through which the ioctl has been
 *		submitted
 * @sic:	userspace structure describing the command to perform
 *
 * Send down the scsi command described by @sic to the device below
 * the request queue @q.  If @file is non-NULL it&apos;s used to perform
 * fine-grained permission checks that allow users to send down
 * non-destructive SCSI commands.  If the caller has a struct gendisk
 * available it should be passed in as @disk to allow the low level
 * driver to use the information contained in it.  A non-NULL @disk
 * is only allowed if the caller knows that the low level driver doesn&apos;t
 * need it (e.g. in the scsi subsystem).
 *
 * Notes:
 *   -  This interface is deprecated - users should use the SG_IO
 *      interface instead, as this is a more flexible approach to
 *      performing SCSI commands on a device.
 *   -  The SCSI command length is determined by examining the 1st byte
 *      of the given command. There is no way to override this.
 *   -  Data transfers are limited to PAGE_SIZE
 *   -  The length (x + y) must be at least OMAX_SB_LEN bytes long to
 *      accommodate the sense buffer when an error occurs.
 *      The sense buffer is truncated to OMAX_SB_LEN (16) bytes so that
 *      old code will not be surprised.
 *   -  If a Unix error occurs (e.g. ENOMEM) then the user will receive
 *      a negative return and the Unix error code in &apos;errno&apos;.
 *      If the SCSI command succeeds then 0 is returned.
 *      Positive numbers returned are the compacted SCSI error codes (4
 *      bytes in one int) where the lowest byte is the SCSI status.
 */</doc>
<use f='linux-5.3.1/drivers/scsi/scsi_ioctl.c' l='243' u='c' c='scsi_ioctl'/>
<use f='linux-5.3.1/drivers/scsi/sg.c' l='1101' u='c' c='sg_ioctl'/>
