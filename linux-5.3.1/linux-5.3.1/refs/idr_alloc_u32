<dec f='linux-5.3.1/include/linux/idr.h' l='115' type='int idr_alloc_u32(struct idr * , void * ptr, u32 * id, unsigned long max, gfp_t )'/>
<def f='linux-5.3.1/lib/idr.c' l='33' ll='56' type='int idr_alloc_u32(struct idr * idr, void * ptr, u32 * nextid, unsigned long max, gfp_t gfp)'/>
<dec f='linux-5.3.1/lib/idr.c' l='57' type='int idr_alloc_u32(struct idr * , void * , u32 * , unsigned long , gfp_t )'/>
<use f='linux-5.3.1/lib/idr.c' l='57' c='idr_alloc_u32'/>
<use f='linux-5.3.1/lib/idr.c' l='57' u='a'/>
<use f='linux-5.3.1/lib/idr.c' l='87' u='c' c='idr_alloc'/>
<use f='linux-5.3.1/lib/idr.c' l='125' u='c' c='idr_alloc_cyclic'/>
<use f='linux-5.3.1/lib/idr.c' l='128' u='c' c='idr_alloc_cyclic'/>
<doc f='linux-5.3.1/lib/idr.c' l='10'>/**
 * idr_alloc_u32() - Allocate an ID.
 * @idr: IDR handle.
 * @ptr: Pointer to be associated with the new ID.
 * @nextid: Pointer to an ID.
 * @max: The maximum ID to allocate (inclusive).
 * @gfp: Memory allocation flags.
 *
 * Allocates an unused ID in the range specified by @nextid and @max.
 * Note that @max is inclusive whereas the @end parameter to idr_alloc()
 * is exclusive.  The new ID is assigned to @nextid before the pointer
 * is inserted into the IDR, so if @nextid points into the object pointed
 * to by @ptr, a concurrent lookup will not find an uninitialised ID.
 *
 * The caller should provide their own locking to ensure that two
 * concurrent modifications to the IDR are not possible.  Read-only
 * accesses to the IDR may be done under the RCU read lock or may
 * exclude simultaneous writers.
 *
 * Return: 0 if an ID was allocated, -ENOMEM if memory allocation failed,
 * or -ENOSPC if no free IDs could be found.  If an error occurred,
 * @nextid is unchanged.
 */</doc>
<use f='linux-5.3.1/net/sched/act_api.c' l='511' u='c' c='tcf_idr_check_alloc'/>
<use f='linux-5.3.1/net/sched/act_api.c' l='520' u='c' c='tcf_idr_check_alloc'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='965' u='c' c='tcf_block_insert'/>
