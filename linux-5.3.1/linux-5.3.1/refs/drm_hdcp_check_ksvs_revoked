<dec f='linux-5.3.1/include/drm/drm_hdcp.h' l='291' type='bool drm_hdcp_check_ksvs_revoked(struct drm_device * dev, u8 * ksvs, u32 ksv_count)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_hdcp.c' l='277' ll='319' type='bool drm_hdcp_check_ksvs_revoked(struct drm_device * drm_dev, u8 * ksvs, u32 ksv_count)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_hdcp.c' l='320' type='bool drm_hdcp_check_ksvs_revoked(struct drm_device * , u8 * , u32 )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_hdcp.c' l='320' c='drm_hdcp_check_ksvs_revoked'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_hdcp.c' l='320' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_hdcp.c' l='259'>/**
 * drm_hdcp_check_ksvs_revoked - Check the revoked status of the IDs
 *
 * @drm_dev: drm_device for which HDCP revocation check is requested
 * @ksvs: List of KSVs (HDCP receiver IDs)
 * @ksv_count: KSV count passed in through @ksvs
 *
 * This function reads the HDCP System renewability Message(SRM Table)
 * from userspace as a firmware and parses it for the revoked HDCP
 * KSVs(Receiver IDs) detected by DCP LLC. Once the revoked KSVs are known,
 * revoked state of the KSVs in the list passed in by display drivers are
 * decided and response is sent.
 *
 * SRM should be presented in the name of &quot;display_hdcp_srm.bin&quot;.
 *
 * Returns:
 * TRUE on any of the KSV is revoked, else FALSE.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_hdcp.c' l='537' u='c' c='intel_hdcp_auth_downstream'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_hdcp.c' l='640' u='c' c='intel_hdcp_auth'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_hdcp.c' l='1215' u='c' c='hdcp2_authentication_key_exchange'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_hdcp.c' l='1408' u='c' c='hdcp2_authenticate_repeater_topology'/>
