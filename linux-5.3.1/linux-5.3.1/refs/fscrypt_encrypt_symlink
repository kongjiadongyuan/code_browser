<def f='linux-5.3.1/include/linux/fscrypt.h' l='710' ll='718' type='int fscrypt_encrypt_symlink(struct inode * inode, const char * target, unsigned int len, struct fscrypt_str * disk_link)'/>
<doc f='linux-5.3.1/include/linux/fscrypt.h' l='695'>/**
 * fscrypt_encrypt_symlink - encrypt the symlink target if needed
 * @inode: symlink inode
 * @target: plaintext symlink target
 * @len: length of @target excluding null terminator
 * @disk_link: (in/out) the on-disk symlink target being prepared
 *
 * If the symlink target needs to be encrypted, then this function encrypts it
 * into @disk_link-&gt;name.  fscrypt_prepare_symlink() must have been called
 * previously to compute @disk_link-&gt;len.  If the filesystem did not allocate a
 * buffer for @disk_link-&gt;name after calling fscrypt_prepare_link(), then one
 * will be kmalloc()&apos;ed and the filesystem will be responsible for freeing it.
 *
 * Return: 0 on success, -errno on failure
 */</doc>
<use f='linux-5.3.1/fs/ext4/namei.c' l='3273' u='c' c='ext4_symlink'/>
