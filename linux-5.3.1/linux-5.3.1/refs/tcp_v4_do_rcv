<dec f='linux-5.3.1/include/net/tcp.h' l='434' type='int tcp_v4_do_rcv(struct sock * sk, struct sk_buff * skb)'/>
<def f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='1526' ll='1585' type='int tcp_v4_do_rcv(struct sock * sk, struct sk_buff * skb)'/>
<dec f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='1586' type='int tcp_v4_do_rcv(struct sock * , struct sk_buff * )'/>
<use f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='1586' c='tcp_v4_do_rcv'/>
<use f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='1586' u='a'/>
<use f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='1911' u='c' c='tcp_v4_rcv'/>
<use f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='1923' u='c' c='tcp_v4_rcv'/>
<use f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='2566'/>
<use f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='2566'/>
<doc f='linux-5.3.1/net/ipv4/tcp_ipv4.c' l='1518'>/* The socket must have it&apos;s spinlock held when we get
 * here, unless it is a TCP_LISTEN socket.
 *
 * We have a potential double-lock case here, so even when
 * doing backlog processing we use the BH locking scheme.
 * This is because we cannot sleep with the original spinlock
 * held.
 */</doc>
<use f='linux-5.3.1/net/ipv6/tcp_ipv6.c' l='240' u='r' c='tcp_v6_connect'/>
<use f='linux-5.3.1/net/ipv6/tcp_ipv6.c' l='1132' u='r' c='tcp_v6_syn_recv_sock'/>
<use f='linux-5.3.1/net/ipv6/tcp_ipv6.c' l='1320' u='c' c='tcp_v6_do_rcv'/>
