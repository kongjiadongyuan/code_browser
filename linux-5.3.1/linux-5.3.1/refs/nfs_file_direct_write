<dec f='linux-5.3.1/include/linux/nfs_fs.h' l='483' type='ssize_t nfs_file_direct_write(struct kiocb * iocb, struct iov_iter * iter)'/>
<use f='linux-5.3.1/fs/nfs/direct.c' l='276' u='c' c='nfs_direct_IO'/>
<def f='linux-5.3.1/fs/nfs/direct.c' l='989' ll='1059' type='ssize_t nfs_file_direct_write(struct kiocb * iocb, struct iov_iter * iter)'/>
<doc f='linux-5.3.1/fs/nfs/direct.c' l='969'>/**
 * nfs_file_direct_write - file direct write operation for NFS files
 * @iocb: target I/O control block
 * @iter: vector of user buffers from which to write data
 *
 * We use this function for direct writes instead of calling
 * generic_file_aio_write() in order to avoid taking the inode
 * semaphore and updating the i_size.  The NFS server will set
 * the new i_size and this client must read the updated size
 * back into its cache.  We let the server do generic write
 * parameter checking and report problems.
 *
 * We eliminate local atime updates, see direct read above.
 *
 * We avoid unnecessary page cache invalidations for normal cached
 * readers of this file.
 *
 * Note that O_APPEND is not supported for NFS direct writes, as there
 * is no atomic O_APPEND write facility in the NFS protocol.
 */</doc>
<use f='linux-5.3.1/fs/nfs/file.c' l='605' u='c' c='nfs_file_write'/>
