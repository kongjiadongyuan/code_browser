<dec f='linux-5.3.1/include/net/netlink.h' l='437' type='int __nla_parse(struct nlattr ** tb, int maxtype, const struct nlattr * head, int len, const struct nla_policy * policy, unsigned int validate, struct netlink_ext_ack * extack)'/>
<use f='linux-5.3.1/include/net/netlink.h' l='588' u='c' c='nla_parse'/>
<use f='linux-5.3.1/include/net/netlink.h' l='613' u='c' c='nla_parse_deprecated'/>
<use f='linux-5.3.1/include/net/netlink.h' l='639' u='c' c='nla_parse_deprecated_strict'/>
<use f='linux-5.3.1/include/net/netlink.h' l='666' u='c' c='__nlmsg_parse'/>
<use f='linux-5.3.1/include/net/netlink.h' l='1147' u='c' c='nla_parse_nested'/>
<use f='linux-5.3.1/include/net/netlink.h' l='1166' u='c' c='nla_parse_nested_deprecated'/>
<def f='linux-5.3.1/lib/nlattr.c' l='473' ll='480' type='int __nla_parse(struct nlattr ** tb, int maxtype, const struct nlattr * head, int len, const struct nla_policy * policy, unsigned int validate, struct netlink_ext_ack * extack)'/>
<dec f='linux-5.3.1/lib/nlattr.c' l='481' type='int __nla_parse(struct nlattr ** , int , const struct nlattr * , int , const struct nla_policy * , unsigned int , struct netlink_ext_ack * )'/>
<use f='linux-5.3.1/lib/nlattr.c' l='481' c='__nla_parse'/>
<use f='linux-5.3.1/lib/nlattr.c' l='481' u='a'/>
<doc f='linux-5.3.1/lib/nlattr.c' l='457'>/**
 * __nla_parse - Parse a stream of attributes into a tb buffer
 * @tb: destination array with maxtype+1 elements
 * @maxtype: maximum attribute type to be expected
 * @head: head of attribute stream
 * @len: length of attribute stream
 * @policy: validation policy
 * @validate: validation strictness
 * @extack: extended ACK pointer
 *
 * Parses a stream of attributes and stores a pointer to each attribute in
 * the tb array accessible via the attribute type.
 * Validation is controlled by the @validate parameter.
 *
 * Returns 0 on success or a negative error code.
 */</doc>
