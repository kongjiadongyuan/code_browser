<def f='linux-5.3.1/include/linux/nvmem-provider.h' l='56' ll='76'/>
<use f='linux-5.3.1/include/linux/nvmem-provider.h' l='99' c='nvmem_register'/>
<use f='linux-5.3.1/include/linux/nvmem-provider.h' l='103' c='devm_nvmem_register'/>
<use f='linux-5.3.1/include/linux/rtc.h' l='262' c='rtc_nvmem_register'/>
<size>112</size>
<doc f='linux-5.3.1/include/linux/nvmem-provider.h' l='29'>/**
 * struct nvmem_config - NVMEM device configuration
 *
 * @dev:	Parent device.
 * @name:	Optional name.
 * @id:		Optional device ID used in full name. Ignored if name is NULL.
 * @owner:	Pointer to exporter module. Used for refcounting.
 * @cells:	Optional array of pre-defined NVMEM cells.
 * @ncells:	Number of elements in cells.
 * @type:	Type of the nvmem storage
 * @read_only:	Device is read-only.
 * @root_only:	Device is accessibly to root only.
 * @no_of_node:	Device should not use the parent&apos;s of_node even if it&apos;s !NULL.
 * @reg_read:	Callback to read data.
 * @reg_write:	Callback to write data.
 * @size:	Device size.
 * @word_size:	Minimum read/write access granularity.
 * @stride:	Minimum read/write access stride.
 * @priv:	User context passed to read/write callbacks.
 *
 * Note: A default &quot;nvmem&lt;id&gt;&quot; name will be assigned to the device if
 * no name is specified in its configuration. In such case &quot;&lt;id&gt;&quot; is
 * generated with ida_simple_get() and provided id field is ignored.
 *
 * Note: Specifying name and setting id to -1 implies a unique device
 * whose name is provided as-is (kept unaltered).
 */</doc>
<mbr r='nvmem_config::dev' o='0' t='struct device *'/>
<mbr r='nvmem_config::name' o='64' t='const char *'/>
<mbr r='nvmem_config::id' o='128' t='int'/>
<mbr r='nvmem_config::owner' o='192' t='struct module *'/>
<mbr r='nvmem_config::cells' o='256' t='const struct nvmem_cell_info *'/>
<mbr r='nvmem_config::ncells' o='320' t='int'/>
<mbr r='nvmem_config::type' o='352' t='enum nvmem_type'/>
<mbr r='nvmem_config::read_only' o='384' t='bool'/>
<mbr r='nvmem_config::root_only' o='392' t='bool'/>
<mbr r='nvmem_config::no_of_node' o='400' t='bool'/>
<mbr r='nvmem_config::reg_read' o='448' t='nvmem_reg_read_t'/>
<mbr r='nvmem_config::reg_write' o='512' t='nvmem_reg_write_t'/>
<mbr r='nvmem_config::size' o='576' t='int'/>
<mbr r='nvmem_config::word_size' o='608' t='int'/>
<mbr r='nvmem_config::stride' o='640' t='int'/>
<mbr r='nvmem_config::priv' o='704' t='void *'/>
<mbr r='nvmem_config::compat' o='768' t='bool'/>
<mbr r='nvmem_config::base_dev' o='832' t='struct device *'/>
<use f='linux-5.3.1/drivers/nvmem/nvmem.h' l='38' c='nvmem_sysfs_get_groups'/>
<use f='linux-5.3.1/drivers/nvmem/nvmem.h' l='40' c='nvmem_sysfs_setup_compat'/>
<use f='linux-5.3.1/drivers/nvmem/nvmem.h' l='42' c='nvmem_sysfs_remove_compat'/>
<use f='linux-5.3.1/drivers/nvmem/core.c' l='356' c='nvmem_register'/>
<use f='linux-5.3.1/drivers/nvmem/core.c' l='497' c='devm_nvmem_register'/>
<size>112</size>
<use f='linux-5.3.1/drivers/nvmem/nvmem-sysfs.c' l='201' c='nvmem_sysfs_get_groups'/>
<use f='linux-5.3.1/drivers/nvmem/nvmem-sysfs.c' l='217' c='nvmem_sysfs_setup_compat'/>
<use f='linux-5.3.1/drivers/nvmem/nvmem-sysfs.c' l='259' c='nvmem_sysfs_remove_compat'/>
<size>112</size>
<use f='linux-5.3.1/drivers/rtc/nvmem.c' l='81' c='rtc_nvmem_register'/>
<size>112</size>
<use f='linux-5.3.1/drivers/rtc/rtc-cmos.c' l='713' c='cmos_do_probe'/>
<size>112</size>
