<use f='linux-5.3.1/include/linux/iomap.h' l='70'/>
<def f='linux-5.3.1/include/linux/iomap.h' l='89' ll='94'/>
<size>16</size>
<doc f='linux-5.3.1/include/linux/iomap.h' l='79'>/*
 * When a filesystem sets page_ops in an iomap mapping it returns, page_prepare
 * and page_done will be called for each page written to.  This only applies to
 * buffered writes as unbuffered writes will not typically have pages
 * associated with them.
 *
 * When page_prepare succeeds, page_done will always be called to do any
 * cleanup work necessary.  In that page_done call, @page will be NULL if the
 * associated page could not be obtained.
 */</doc>
<mbr r='iomap_page_ops::page_prepare' o='0' t='int (*)(struct inode *, loff_t, unsigned int, struct iomap *)'/>
<mbr r='iomap_page_ops::page_done' o='64' t='void (*)(struct inode *, loff_t, unsigned int, struct page *, struct iomap *)'/>
<use f='linux-5.3.1/fs/iomap/buffered-io.c' l='586' c='iomap_write_begin'/>
<use f='linux-5.3.1/fs/iomap/buffered-io.c' l='702' c='iomap_write_end'/>
<size>16</size>
