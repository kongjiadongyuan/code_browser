<dec f='linux-5.3.1/include/linux/writeback.h' l='394' type='void tag_pages_for_writeback(struct address_space * mapping, unsigned long start, unsigned long end)'/>
<dec f='linux-5.3.1/include/linux/writeback.h' l='401' type='void tag_pages_for_writeback(struct address_space * mapping, unsigned long start, unsigned long end)'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='2834' u='c' c='ext4_writepages'/>
<def f='linux-5.3.1/mm/page-writeback.c' l='2103' ll='2122' type='void tag_pages_for_writeback(struct address_space * mapping, unsigned long start, unsigned long end)'/>
<dec f='linux-5.3.1/mm/page-writeback.c' l='2123' type='void tag_pages_for_writeback(struct address_space * , unsigned long , unsigned long )'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2123' c='tag_pages_for_writeback'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2123' u='a'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2188' u='c' c='write_cache_pages'/>
<doc f='linux-5.3.1/mm/page-writeback.c' l='2089'>/**
 * tag_pages_for_writeback - tag pages to be written by write_cache_pages
 * @mapping: address space structure to write
 * @start: starting page index
 * @end: ending page index (inclusive)
 *
 * This function scans the page range from @start to @end (inclusive) and tags
 * all pages that have DIRTY tag set with a special TOWRITE tag. The idea is
 * that write_cache_pages (or whoever calls this function) will then use
 * TOWRITE tag to identify pages eligible for writeback.  This mechanism is
 * used to avoid livelocking of writeback by a process steadily creating new
 * dirty pages in the file (thus it is important for this function to be quick
 * so that it can tag pages faster than a dirtying process can create them).
 */</doc>
