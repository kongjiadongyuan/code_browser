<dec f='linux-5.3.1/include/linux/stacktrace.h' l='56' type='void arch_stack_walk(stack_trace_consume_fn consume_entry, void * cookie, struct task_struct * task, struct pt_regs * regs)'/>
<doc f='linux-5.3.1/include/linux/stacktrace.h' l='40'>/**
 * arch_stack_walk - Architecture specific function to walk the stack
 * @consume_entry:	Callback which is invoked by the architecture code for
 *			each entry.
 * @cookie:		Caller supplied pointer which is handed back to
 *			@consume_entry
 * @task:		Pointer to a task struct, can be NULL
 * @regs:		Pointer to registers, can be NULL
 *
 * ============ ======= ============================================
 * task	        regs
 * ============ ======= ============================================
 * task		NULL	Stack trace from task (can be current)
 * current	regs	Stack trace starting on regs-&gt;stackpointer
 * ============ ======= ============================================
 */</doc>
<def f='linux-5.3.1/arch/x86/kernel/stacktrace.c' l='15' ll='30' type='void arch_stack_walk(stack_trace_consume_fn consume_entry, void * cookie, struct task_struct * task, struct pt_regs * regs)'/>
<use f='linux-5.3.1/kernel/stacktrace.c' l='123' u='c' c='stack_trace_save'/>
<use f='linux-5.3.1/kernel/stacktrace.c' l='150' u='c' c='stack_trace_save_tsk'/>
<use f='linux-5.3.1/kernel/stacktrace.c' l='174' u='c' c='stack_trace_save_regs'/>
