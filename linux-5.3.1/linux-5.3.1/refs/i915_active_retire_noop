<dec f='linux-5.3.1/drivers/gpu/drm/i915/i915_active.h' l='44' type='void i915_active_retire_noop(struct i915_active_request * active, struct i915_request * request)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_active.h' l='66' u='r' c='i915_active_request_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_active.h' l='108' u='r' c='i915_active_request_set_retire_fn'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/i915_active.h' l='15'>/*
 * We treat requests as fences. This is not be to confused with our
 * &quot;fence registers&quot; but pipeline synchronisation objects ala GL_ARB_sync.
 * We use the fences to synchronize access from the CPU with activity on the
 * GPU, for example, we should not rewrite an object&apos;s PTE whilst the GPU
 * is reading them. We also track fences at a higher level to provide
 * implicit synchronisation around GEM objects, e.g. set-domain will wait
 * for outstanding GPU rendering before marking the object ready for CPU
 * access, or a pageflip will wait until the GPU is complete before showing
 * the frame on the scanout.
 *
 * In order to use a fence, the object must track the fence it needs to
 * serialise with. For example, GEM objects want to track both read and
 * write access so that we can perform concurrent read operations between
 * the CPU and GPU engines, as well as waiting for all rendering to
 * complete, or waiting for the last GPU user of a &quot;fence register&quot;. The
 * object then embeds a #i915_active_request to track the most recent (in
 * retirement order) request relevant for the desired mode of access.
 * The #i915_active_request is updated with i915_active_request_set() to
 * track the most recent fence request, typically this is done as part of
 * i915_vma_move_to_active().
 *
 * When the #i915_active_request completes (is retired), it will
 * signal its completion to the owner through a callback as well as mark
 * itself as idle (i915_active_request.request == NULL). The owner
 * can then perform any action, such as delayed freeing of an active
 * resource including itself.
 */</doc>
<def f='linux-5.3.1/drivers/gpu/drm/i915/i915_active.c' l='376' ll='380' type='void i915_active_retire_noop(struct i915_active_request * active, struct i915_request * request)'/>
