<dec f='linux-5.3.1/include/sound/jack.h' l='81' type='int snd_jack_set_key(struct snd_jack * jack, enum snd_jack_types type, int keytype)'/>
<def f='linux-5.3.1/sound/core/jack.c' l='317' ll='330' type='int snd_jack_set_key(struct snd_jack * jack, enum snd_jack_types type, int keytype)'/>
<dec f='linux-5.3.1/sound/core/jack.c' l='331' type='int snd_jack_set_key(struct snd_jack * , enum snd_jack_types , int )'/>
<use f='linux-5.3.1/sound/core/jack.c' l='331' c='snd_jack_set_key'/>
<use f='linux-5.3.1/sound/core/jack.c' l='331' u='a'/>
<doc f='linux-5.3.1/sound/core/jack.c' l='292'>/**
 * snd_jack_set_key - Set a key mapping on a jack
 *
 * @jack:    The jack to configure
 * @type:    Jack report type for this key
 * @keytype: Input layer key type to be reported
 *
 * Map a SND_JACK_BTN_* button type to an input layer key, allowing
 * reporting of keys on accessories via the jack abstraction.  If no
 * mapping is provided but keys are enabled in the jack type then
 * BTN_n numeric buttons will be reported.
 *
 * If jacks are not reporting via the input API this call will have no
 * effect.
 *
 * Note that this is intended to be use by simple devices with small
 * numbers of keys that can be reported.  It is also possible to
 * access the input device directly - devices with complex input
 * capabilities on accessories should consider doing this rather than
 * using this abstraction.
 *
 * This function may only be called prior to registration of the jack.
 *
 * Return: Zero if successful, or a negative error code on failure.
 */</doc>
<use f='linux-5.3.1/sound/pci/hda/hda_jack.c' l='425' u='c' c='snd_hda_jack_add_kctl'/>
