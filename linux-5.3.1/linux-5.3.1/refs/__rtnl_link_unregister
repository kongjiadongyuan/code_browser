<dec f='linux-5.3.1/include/net/rtnetlink.h' l='116' type='void __rtnl_link_unregister(struct rtnl_link_ops * ops)'/>
<def f='linux-5.3.1/net/core/rtnetlink.c' l='432' ll='440' type='void __rtnl_link_unregister(struct rtnl_link_ops * ops)'/>
<dec f='linux-5.3.1/net/core/rtnetlink.c' l='441' type='void __rtnl_link_unregister(struct rtnl_link_ops * )'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='441' c='__rtnl_link_unregister'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='441' u='a'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='483' u='c' c='rtnl_link_unregister'/>
<doc f='linux-5.3.1/net/core/rtnetlink.c' l='424'>/**
 * __rtnl_link_unregister - Unregister rtnl_link_ops from rtnetlink.
 * @ops: struct rtnl_link_ops * to unregister
 *
 * The caller must hold the rtnl_mutex and guarantee net_namespace_list
 * integrity (hold pernet_ops_rwsem for writing to close the race
 * with setup_net() and cleanup_net()).
 */</doc>
