<dec f='linux-5.3.1/include/linux/sunrpc/xdr.h' l='131' type='void xdr_inline_pages(struct xdr_buf * , unsigned int , struct page ** , unsigned int , unsigned int )'/>
<use f='linux-5.3.1/net/sunrpc/auth_gss/gss_rpc_xdr.c' l='771' u='c' c='gssx_enc_accept_sec_context'/>
<use f='linux-5.3.1/net/sunrpc/clnt.c' l='1252' u='c' c='rpc_prepare_reply_pages'/>
<def f='linux-5.3.1/net/sunrpc/xdr.c' l='176' ll='197' type='void xdr_inline_pages(struct xdr_buf * xdr, unsigned int offset, struct page ** pages, unsigned int base, unsigned int len)'/>
<dec f='linux-5.3.1/net/sunrpc/xdr.c' l='198' type='void xdr_inline_pages(struct xdr_buf * , unsigned int , struct page ** , unsigned int , unsigned int )'/>
<use f='linux-5.3.1/net/sunrpc/xdr.c' l='198' c='xdr_inline_pages'/>
<use f='linux-5.3.1/net/sunrpc/xdr.c' l='198' u='a'/>
<doc f='linux-5.3.1/net/sunrpc/xdr.c' l='167'>/**
 * xdr_inline_pages - Prepare receive buffer for a large reply
 * @xdr: xdr_buf into which reply will be placed
 * @offset: expected offset where data payload will start, in bytes
 * @pages: vector of struct page pointers
 * @base: offset in first page where receive should start, in bytes
 * @len: expected size of the upper layer data payload, in bytes
 *
 */</doc>
