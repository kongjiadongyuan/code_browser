<dec f='linux-5.3.1/include/crypto/public_key.h' l='78' type='int verify_signature(const struct key * , const struct public_key_signature * )'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/asymmetric_type.c' l='574' u='c' c='asymmetric_key_verify_signature'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_trust.c' l='115' u='c' c='pkcs7_validate_trust_one'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/restrict.c' l='106' u='c' c='restrict_link_by_signature'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/restrict.c' l='206' u='c' c='key_or_keyring_common'/>
<def f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='137' ll='158' type='int verify_signature(const struct key * key, const struct public_key_signature * sig)'/>
<dec f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='159' type='int verify_signature(const struct key * , const struct public_key_signature * )'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='159' c='verify_signature'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='159' u='a'/>
<doc f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='130'>/**
 * verify_signature - Initiate the use of an asymmetric key to verify a signature
 * @key: The asymmetric key to verify against
 * @sig: The signature to check
 *
 * Returns 0 if successful or else an error.
 */</doc>
