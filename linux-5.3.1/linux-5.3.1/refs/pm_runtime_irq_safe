<dec f='linux-5.3.1/include/linux/pm_runtime.h' l='50' type='void pm_runtime_irq_safe(struct device * dev)'/>
<def f='linux-5.3.1/drivers/base/power/runtime.c' l='1470' ll='1477' type='void pm_runtime_irq_safe(struct device * dev)'/>
<dec f='linux-5.3.1/drivers/base/power/runtime.c' l='1478' type='void pm_runtime_irq_safe(struct device * )'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='1478' c='pm_runtime_irq_safe'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='1478' u='a'/>
<doc f='linux-5.3.1/drivers/base/power/runtime.c' l='1459'>/**
 * pm_runtime_irq_safe - Leave interrupts disabled during callbacks.
 * @dev: Device to handle
 *
 * Set the power.irq_safe flag, which tells the PM core that the
 * -&gt;runtime_suspend() and -&gt;runtime_resume() callbacks for this device should
 * always be invoked with the spinlock held and interrupts disabled.  It also
 * causes the parent&apos;s usage counter to be permanently incremented, preventing
 * the parent from runtime suspending -- otherwise an irq-safe child might have
 * to wait for a non-irq-safe parent.
 */</doc>
