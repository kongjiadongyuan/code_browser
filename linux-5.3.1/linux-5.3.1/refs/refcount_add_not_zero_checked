<dec f='linux-5.3.1/include/linux/refcount.h' l='46' type='bool refcount_add_not_zero_checked(unsigned int i, refcount_t * r)'/>
<def f='linux-5.3.1/lib/refcount.c' l='64' ll='84' type='bool refcount_add_not_zero_checked(unsigned int i, refcount_t * r)'/>
<dec f='linux-5.3.1/lib/refcount.c' l='85' type='bool refcount_add_not_zero_checked(unsigned int , refcount_t * )'/>
<use f='linux-5.3.1/lib/refcount.c' l='85' c='refcount_add_not_zero_checked'/>
<use f='linux-5.3.1/lib/refcount.c' l='85' u='a'/>
<use f='linux-5.3.1/lib/refcount.c' l='105' u='c' c='refcount_add_checked'/>
<doc f='linux-5.3.1/lib/refcount.c' l='46'>/**
 * refcount_add_not_zero_checked - add a value to a refcount unless it is 0
 * @i: the value to add to the refcount
 * @r: the refcount
 *
 * Will saturate at UINT_MAX and WARN.
 *
 * Provides no memory ordering, it is assumed the caller has guaranteed the
 * object memory to be stable (RCU, etc.). It does provide a control dependency
 * and thereby orders future stores. See the comment on top.
 *
 * Use of this function is not recommended for the normal reference counting
 * use case in which references are taken and released one at a time.  In these
 * cases, refcount_inc(), or one of its variants, should instead be used to
 * increment a reference count.
 *
 * Return: false if the passed refcount is 0, true otherwise
 */</doc>
