<dec f='linux-5.3.1/include/linux/pci.h' l='2363' type='void pci_add_dma_alias(struct pci_dev * dev, u8 devfn)'/>
<use f='linux-5.3.1/drivers/iommu/amd_iommu.c' l='288' u='c' c='get_alias'/>
<def f='linux-5.3.1/drivers/pci/pci.c' l='5878' ll='5890' type='void pci_add_dma_alias(struct pci_dev * dev, u8 devfn)'/>
<doc f='linux-5.3.1/drivers/pci/pci.c' l='5859'>/**
 * pci_add_dma_alias - Add a DMA devfn alias for a device
 * @dev: the PCI device for which alias is added
 * @devfn: alias slot and function
 *
 * This helper encodes an 8-bit devfn as a bit number in dma_alias_mask
 * which is used to program permissible bus-devfn source addresses for DMA
 * requests in an IOMMU.  These aliases factor into IOMMU group creation
 * and are useful for devices generating DMA requests beyond or different
 * from their logical bus-devfn.  Examples include device quirks where the
 * device simply uses the wrong devfn, as well as non-transparent bridges
 * where the alias may be a proxy for devices in another domain.
 *
 * IOMMU group creation is performed during device discovery or addition,
 * prior to any potential DMA mapping and therefore prior to driver probing
 * (especially for userspace assigned devices where IOMMU group definition
 * cannot be left as a userspace activity).  DMA aliases should therefore
 * be configured via quirks, such as the PCI fixup header quirk.
 */</doc>
<use f='linux-5.3.1/drivers/pci/quirks.c' l='3865' u='c' c='quirk_dma_func0_alias'/>
<use f='linux-5.3.1/drivers/pci/quirks.c' l='3879' u='c' c='quirk_dma_func1_alias'/>
<use f='linux-5.3.1/drivers/pci/quirks.c' l='3964' u='c' c='quirk_fixed_dma_alias'/>
<use f='linux-5.3.1/drivers/pci/quirks.c' l='4006' u='c' c='quirk_mic_x200_dma_alias'/>
<use f='linux-5.3.1/drivers/pci/quirks.c' l='4007' u='c' c='quirk_mic_x200_dma_alias'/>
<use f='linux-5.3.1/drivers/pci/quirks.c' l='4008' u='c' c='quirk_mic_x200_dma_alias'/>
<use f='linux-5.3.1/drivers/pci/quirks.c' l='5172' u='c' c='quirk_switchtec_ntb_dma_alias'/>
