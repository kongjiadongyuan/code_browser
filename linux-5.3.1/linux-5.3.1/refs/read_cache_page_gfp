<dec f='linux-5.3.1/include/linux/pagemap.h' l='378' type='struct page * read_cache_page_gfp(struct address_space * mapping, unsigned long index, gfp_t gfp_mask)'/>
<def f='linux-5.3.1/mm/filemap.c' l='2938' ll='2943' type='struct page * read_cache_page_gfp(struct address_space * mapping, unsigned long index, gfp_t gfp)'/>
<dec f='linux-5.3.1/mm/filemap.c' l='2944' type='struct page * read_cache_page_gfp(struct address_space * , unsigned long , gfp_t )'/>
<use f='linux-5.3.1/mm/filemap.c' l='2944' c='read_cache_page_gfp'/>
<use f='linux-5.3.1/mm/filemap.c' l='2944' u='a'/>
<doc f='linux-5.3.1/mm/filemap.c' l='2925'>/**
 * read_cache_page_gfp - read into page cache, using specified page allocation flags.
 * @mapping:	the page&apos;s address_space
 * @index:	the page index
 * @gfp:	the page allocator flags to use if allocating
 *
 * This is the same as &quot;read_mapping_page(mapping, index, NULL)&quot;, but with
 * any new page allocations done using the specified allocation flags.
 *
 * If the page does not get brought uptodate, return -EIO.
 *
 * Return: up to date page on success, ERR_PTR() on failure.
 */</doc>
