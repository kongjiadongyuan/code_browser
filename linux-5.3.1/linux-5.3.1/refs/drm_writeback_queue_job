<dec f='linux-5.3.1/include/drm/drm_writeback.h' l='151' type='void drm_writeback_queue_job(struct drm_writeback_connector * wb_connector, struct drm_connector_state * conn_state)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='300' ll='312' type='void drm_writeback_queue_job(struct drm_writeback_connector * wb_connector, struct drm_connector_state * conn_state)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='313' type='void drm_writeback_queue_job(struct drm_writeback_connector * , struct drm_connector_state * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='313' c='drm_writeback_queue_job'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='313' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='281'>/**
 * drm_writeback_queue_job - Queue a writeback job for later signalling
 * @wb_connector: The writeback connector to queue a job on
 * @conn_state: The connector state containing the job to queue
 *
 * This function adds the job contained in @conn_state to the job_queue for a
 * writeback connector. It takes ownership of the writeback job and sets the
 * @conn_state-&gt;writeback_job to NULL, and so no access to the job may be
 * performed by the caller after this function returns.
 *
 * Drivers must ensure that for a given writeback connector, jobs are queued in
 * exactly the same order as they will be completed by the hardware (and
 * signaled via drm_writeback_signal_completion).
 *
 * For every call to drm_writeback_queue_job() there must be exactly one call to
 * drm_writeback_signal_completion()
 *
 * See also: drm_writeback_signal_completion()
 */</doc>
