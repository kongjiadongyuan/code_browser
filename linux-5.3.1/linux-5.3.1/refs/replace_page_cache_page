<dec f='linux-5.3.1/include/linux/pagemap.h' l='603' type='int replace_page_cache_page(struct page * old, struct page * new, gfp_t gfp_mask)'/>
<def f='linux-5.3.1/mm/filemap.c' l='802' ll='838' type='int replace_page_cache_page(struct page * old, struct page * new, gfp_t gfp_mask)'/>
<dec f='linux-5.3.1/mm/filemap.c' l='839' type='int replace_page_cache_page(struct page * , struct page * , gfp_t )'/>
<use f='linux-5.3.1/mm/filemap.c' l='839' c='replace_page_cache_page'/>
<use f='linux-5.3.1/mm/filemap.c' l='839' u='a'/>
<doc f='linux-5.3.1/mm/filemap.c' l='786'>/**
 * replace_page_cache_page - replace a pagecache page with a new one
 * @old:	page to be replaced
 * @new:	page to replace with
 * @gfp_mask:	allocation mode
 *
 * This function replaces a page in the pagecache with a new one.  On
 * success it acquires the pagecache reference for the new page and
 * drops it for the old page.  Both the old and new pages must be
 * locked.  This function does not add the new page to the LRU, the
 * caller must do that.
 *
 * The remove + add is atomic.  This function cannot fail.
 *
 * Return: %0
 */</doc>
