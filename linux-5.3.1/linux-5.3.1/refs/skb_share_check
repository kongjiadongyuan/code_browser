<def f='linux-5.3.1/include/linux/skbuff.h' l='1671' ll='1684' type='struct sk_buff * skb_share_check(struct sk_buff * skb, gfp_t pri)'/>
<doc f='linux-5.3.1/include/linux/skbuff.h' l='1658'>/**
 *	skb_share_check - check if buffer is shared and if so clone it
 *	@skb: buffer to check
 *	@pri: priority for memory allocation
 *
 *	If the buffer is shared the buffer is cloned and the old copy
 *	drops a reference. A new clone with a single reference is returned.
 *	If the buffer is not shared the original buffer is returned. When
 *	being called from interrupt status or with spinlocks held pri must
 *	be GFP_ATOMIC.
 *
 *	NULL is returned on a memory allocation failure.
 */</doc>
<use f='linux-5.3.1/net/core/skbuff.c' l='5305' u='c' c='skb_vlan_untag'/>
<use f='linux-5.3.1/net/ipv4/arp.c' l='947' u='c' c='arp_rcv'/>
<use f='linux-5.3.1/net/ipv4/ip_fragment.c' l='525' u='c' c='ip_check_defrag'/>
<use f='linux-5.3.1/net/ipv4/ip_input.c' l='433' u='c' c='ip_rcv_core'/>
<use f='linux-5.3.1/net/ipv4/ipconfig.c' l='486' u='c' c='ic_rarp_recv'/>
<use f='linux-5.3.1/net/ipv4/ipconfig.c' l='972' u='c' c='ic_bootp_recv'/>
<use f='linux-5.3.1/net/ipv6/ip6_input.c' l='139' u='c' c='ip6_rcv_core'/>
<use f='linux-5.3.1/net/packet/af_packet.c' l='1816' u='c' c='packet_rcv_spkt'/>
