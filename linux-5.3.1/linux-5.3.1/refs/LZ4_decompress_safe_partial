<dec f='linux-5.3.1/include/linux/lz4.h' l='320' type='int LZ4_decompress_safe_partial(const char * source, char * dest, int compressedSize, int targetOutputSize, int maxDecompressedSize)'/>
<doc f='linux-5.3.1/include/linux/lz4.h' l='295'>/**
 * LZ4_decompress_safe_partial() - Decompress a block of size &apos;compressedSize&apos;
 *	at position &apos;source&apos; into buffer &apos;dest&apos;
 * @source: source address of the compressed data
 * @dest: output buffer address of the decompressed data which must be
 *	already allocated
 * @compressedSize: is the precise full size of the compressed block.
 * @targetOutputSize: the decompression operation will try
 *	to stop as soon as &apos;targetOutputSize&apos; has been reached
 * @maxDecompressedSize: is the size of destination buffer
 *
 * This function decompresses a compressed block of size &apos;compressedSize&apos;
 * at position &apos;source&apos; into destination buffer &apos;dest&apos;
 * of size &apos;maxDecompressedSize&apos;.
 * The function tries to stop decompressing operation as soon as
 * &apos;targetOutputSize&apos; has been reached, reducing decompression time.
 * This function never writes outside of output buffer,
 * and never reads outside of input buffer.
 * It is therefore protected against malicious data packets.
 *
 * Return: the number of bytes decoded in the destination buffer
 *	(necessarily &lt;= maxDecompressedSize)
 *	or a negative result in case of error
 *
 */</doc>
<def f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='458' ll='465' type='int LZ4_decompress_safe_partial(const char * src, char * dst, int compressedSize, int targetOutputSize, int dstCapacity)'/>
<dec f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='699' type='int LZ4_decompress_safe_partial(const char * , char * , int , int , int )'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='699' c='LZ4_decompress_safe_partial'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='699' u='a'/>
