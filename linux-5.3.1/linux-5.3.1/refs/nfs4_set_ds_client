<dec f='linux-5.3.1/fs/nfs/internal.h' l='200' type='struct nfs_client * nfs4_set_ds_client(struct nfs_server * mds_srv, const struct sockaddr * ds_addr, int ds_addrlen, int ds_proto, unsigned int ds_timeo, unsigned int ds_retrans, u32 minor_version)'/>
<def f='linux-5.3.1/fs/nfs/nfs4client.c' l='925' ll='963' type='struct nfs_client * nfs4_set_ds_client(struct nfs_server * mds_srv, const struct sockaddr * ds_addr, int ds_addrlen, int ds_proto, unsigned int ds_timeo, unsigned int ds_retrans, u32 minor_version)'/>
<dec f='linux-5.3.1/fs/nfs/nfs4client.c' l='964' type='struct nfs_client * nfs4_set_ds_client(struct nfs_server * , const struct sockaddr * , int , int , unsigned int , unsigned int , u32 )'/>
<use f='linux-5.3.1/fs/nfs/nfs4client.c' l='964' c='nfs4_set_ds_client'/>
<use f='linux-5.3.1/fs/nfs/nfs4client.c' l='964' u='a'/>
<doc f='linux-5.3.1/fs/nfs/nfs4client.c' l='915'>/*
 * Set up a pNFS Data Server client.
 *
 * Return any existing nfs_client that matches server address,port,version
 * and minorversion.
 *
 * For a new nfs_client, use a soft mount (default), a low retrans and a
 * low timeout interval so that if a connection is lost, we retry through
 * the MDS.
 */</doc>
