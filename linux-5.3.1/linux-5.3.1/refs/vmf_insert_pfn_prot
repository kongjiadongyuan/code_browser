<dec f='linux-5.3.1/include/linux/mm.h' l='2568' type='vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct * vma, unsigned long addr, unsigned long pfn, pgprot_t pgprot)'/>
<use f='linux-5.3.1/arch/x86/entry/vdso/vma.c' l='116' u='c' c='vvar_fault'/>
<def f='linux-5.3.1/mm/memory.c' l='1647' ll='1672' type='vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct * vma, unsigned long addr, unsigned long pfn, pgprot_t pgprot)'/>
<dec f='linux-5.3.1/mm/memory.c' l='1673' type='vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct * , unsigned long , unsigned long , pgprot_t )'/>
<use f='linux-5.3.1/mm/memory.c' l='1673' c='vmf_insert_pfn_prot'/>
<use f='linux-5.3.1/mm/memory.c' l='1673' u='a'/>
<use f='linux-5.3.1/mm/memory.c' l='1698' u='c' c='vmf_insert_pfn'/>
<doc f='linux-5.3.1/mm/memory.c' l='1629'>/**
 * vmf_insert_pfn_prot - insert single pfn into user vma with specified pgprot
 * @vma: user vma to map to
 * @addr: target user address of this page
 * @pfn: source kernel pfn
 * @pgprot: pgprot flags for the inserted page
 *
 * This is exactly like vmf_insert_pfn(), except that it allows drivers to
 * to override pgprot on a per-page basis.
 *
 * This only makes sense for IO mappings, and it makes no sense for
 * COW mappings.  In general, using multiple vmas is preferable;
 * vmf_insert_pfn_prot should only be used if using multiple VMAs is
 * impractical.
 *
 * Context: Process context.  May allocate using %GFP_KERNEL.
 * Return: vm_fault_t value.
 */</doc>
