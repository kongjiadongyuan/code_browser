<dec f='linux-5.3.1/include/uapi/drm/drm_mode.h' l='519' type='__u32 [4]'/>
<offset>160</offset>
<doc f='linux-5.3.1/include/uapi/drm/drm_mode.h' l='495'>/*
	 * In case of planar formats, this ioctl allows up to 4
	 * buffer objects with offsets and pitches per plane.
	 * The pitch and offset order is dictated by the fourcc,
	 * e.g. NV12 (http://fourcc.org/yuv.php#NV12) is described as:
	 *
	 *   YUV 4:2:0 image with a plane of 8 bit Y samples
	 *   followed by an interleaved U/V plane containing
	 *   8 bit 2x2 subsampled colour difference samples.
	 *
	 * So it would consist of Y as offsets[0] and UV as
	 * offsets[1].  Note that offsets[0] will generally
	 * be 0 (but this is not required).
	 *
	 * To accommodate tiled, compressed, etc formats, a
	 * modifier can be specified.  The default value of zero
	 * indicates &quot;native&quot; format as specified by the fourcc.
	 * Vendor specific modifier token.  Note that even though
	 * it looks like we have a modifier per-plane, we in fact
	 * do not. The modifier for each plane must be identical.
	 * Thus all combinations of different data layouts for
	 * multi plane formats must be enumerated as separate
	 * modifiers.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='136' u='w' c='drm_mode_addfb'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='212' u='r' c='framebuffer_check'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='270' u='r' c='framebuffer_check'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='161' u='r' c='drm_gem_fb_create_with_funcs'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_plane.c' l='855' u='w' c='drm_mode_cursor_universal'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='15471' u='r' c='intel_framebuffer_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='15471' u='r' c='intel_framebuffer_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='15528' u='r' c='intel_user_framebuffer_create'/>
