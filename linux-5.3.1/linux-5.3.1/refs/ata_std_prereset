<dec f='linux-5.3.1/include/linux/libata.h' l='1078' type='int ata_std_prereset(struct ata_link * link, unsigned long deadline)'/>
<use f='linux-5.3.1/drivers/ata/libata-core.c' l='72'/>
<use f='linux-5.3.1/drivers/ata/libata-core.c' l='72'/>
<def f='linux-5.3.1/drivers/ata/libata-core.c' l='4002' ll='4028' type='int ata_std_prereset(struct ata_link * link, unsigned long deadline)'/>
<dec f='linux-5.3.1/drivers/ata/libata-core.c' l='7321' type='int ata_std_prereset(struct ata_link * , unsigned long )'/>
<use f='linux-5.3.1/drivers/ata/libata-core.c' l='7321' c='ata_std_prereset'/>
<use f='linux-5.3.1/drivers/ata/libata-core.c' l='7321' u='a'/>
<doc f='linux-5.3.1/drivers/ata/libata-core.c' l='3985'>/**
 *	ata_std_prereset - prepare for reset
 *	@link: ATA link to be reset
 *	@deadline: deadline jiffies for the operation
 *
 *	@link is about to be reset.  Initialize it.  Failure from
 *	prereset makes libata abort whole reset sequence and give up
 *	that port, so prereset should be best-effort.  It does its
 *	best to prepare for reset sequence but if things go wrong, it
 *	should just whine, not fail.
 *
 *	LOCKING:
 *	Kernel thread context (may sleep)
 *
 *	RETURNS:
 *	0 on success, -errno otherwise.
 */</doc>
<use f='linux-5.3.1/drivers/ata/libata-pmp.c' l='18'/>
<use f='linux-5.3.1/drivers/ata/libata-pmp.c' l='18'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='1726' u='c' c='ata_sff_prereset'/>
