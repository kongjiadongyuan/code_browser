<dec f='linux-5.3.1/include/linux/kthread.h' l='63' type='void kthread_unpark(struct task_struct * k)'/>
<use f='linux-5.3.1/kernel/cpu.c' l='520' u='c' c='bringup_wait_for_ap'/>
<use f='linux-5.3.1/kernel/cpu.c' l='789' u='c' c='cpuhp_threads_init'/>
<use f='linux-5.3.1/kernel/cpu.c' l='893' u='c' c='takedown_cpu'/>
<def f='linux-5.3.1/kernel/kthread.c' l='472' ll='488' type='void kthread_unpark(struct task_struct * k)'/>
<dec f='linux-5.3.1/kernel/kthread.c' l='489' type='void kthread_unpark(struct task_struct * )'/>
<use f='linux-5.3.1/kernel/kthread.c' l='489' c='kthread_unpark'/>
<use f='linux-5.3.1/kernel/kthread.c' l='489' u='a'/>
<use f='linux-5.3.1/kernel/kthread.c' l='557' u='c' c='kthread_stop'/>
<doc f='linux-5.3.1/kernel/kthread.c' l='464'>/**
 * kthread_unpark - unpark a thread created by kthread_create().
 * @k:		thread created by kthread_create().
 *
 * Sets kthread_should_park() for @k to return false, wakes it, and
 * waits for it to return. If the thread is marked percpu then its
 * bound to the cpu again.
 */</doc>
<use f='linux-5.3.1/kernel/smpboot.c' l='233' u='c' c='smpboot_unpark_thread'/>
<use f='linux-5.3.1/kernel/stop_machine.c' l='560' u='c' c='stop_machine_unpark'/>
