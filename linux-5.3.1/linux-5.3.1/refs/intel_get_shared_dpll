<dec f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dpll_mgr.h' l='334' type='struct intel_shared_dpll * intel_get_shared_dpll(struct intel_crtc_state * state, struct intel_encoder * encoder)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='9528' u='c' c='ironlake_crtc_compute_clock'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='9909' u='c' c='haswell_crtc_compute_clock'/>
<def f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dpll_mgr.c' l='3303' ll='3314' type='struct intel_shared_dpll * intel_get_shared_dpll(struct intel_crtc_state * crtc_state, struct intel_encoder * encoder)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dpll_mgr.c' l='3289'>/**
 * intel_get_shared_dpll - get a shared DPLL for CRTC and encoder combination
 * @crtc_state: atomic state for the crtc
 * @encoder: encoder
 *
 * Find an appropriate DPLL for the given CRTC and encoder combination. A
 * reference from the @crtc_state to the returned pll is registered in the
 * atomic state. That configuration is made effective by calling
 * intel_shared_dpll_swap_state(). The reference should be released by calling
 * intel_release_shared_dpll().
 *
 * Returns:
 * A shared DPLL to be used by @crtc_state and @encoder.
 */</doc>
