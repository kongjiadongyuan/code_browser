<dec f='linux-5.3.1/include/linux/xarray.h' l='520' type='void * __xa_store(struct xarray * , unsigned long index, void * entry, gfp_t )'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='552' u='c' c='xa_store_bh'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='578' u='c' c='xa_store_irq'/>
<def f='linux-5.3.1/lib/xarray.c' l='1369' ll='1386' type='void * __xa_store(struct xarray * xa, unsigned long index, void * entry, gfp_t gfp)'/>
<dec f='linux-5.3.1/lib/xarray.c' l='1387' type='void * __xa_store(struct xarray * , unsigned long , void * , gfp_t )'/>
<use f='linux-5.3.1/lib/xarray.c' l='1387' c='__xa_store'/>
<use f='linux-5.3.1/lib/xarray.c' l='1387' u='a'/>
<use f='linux-5.3.1/lib/xarray.c' l='1411' u='c' c='xa_store'/>
<doc f='linux-5.3.1/lib/xarray.c' l='1354'>/**
 * __xa_store() - Store this entry in the XArray.
 * @xa: XArray.
 * @index: Index into array.
 * @entry: New entry.
 * @gfp: Memory allocation flags.
 *
 * You must already be holding the xa_lock when calling this function.
 * It will drop the lock if needed to allocate memory, and then reacquire
 * it afterwards.
 *
 * Context: Any context.  Expects xa_lock to be held on entry.  May
 * release and reacquire xa_lock if @gfp flags permit.
 * Return: The old entry at this index or xa_err() if an error happened.
 */</doc>
