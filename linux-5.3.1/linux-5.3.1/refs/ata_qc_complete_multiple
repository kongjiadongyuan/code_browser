<dec f='linux-5.3.1/include/linux/libata.h' l='1176' type='int ata_qc_complete_multiple(struct ata_port * ap, u64 qc_active)'/>
<use f='linux-5.3.1/drivers/ata/libahci.c' l='1875' u='c' c='ahci_handle_port_interrupt'/>
<def f='linux-5.3.1/drivers/ata/libata-core.c' l='5348' ll='5384' type='int ata_qc_complete_multiple(struct ata_port * ap, u64 qc_active)'/>
<dec f='linux-5.3.1/drivers/ata/libata-core.c' l='7301' type='int ata_qc_complete_multiple(struct ata_port * , u64 )'/>
<use f='linux-5.3.1/drivers/ata/libata-core.c' l='7301' c='ata_qc_complete_multiple'/>
<use f='linux-5.3.1/drivers/ata/libata-core.c' l='7301' u='a'/>
<doc f='linux-5.3.1/drivers/ata/libata-core.c' l='5328'>/**
 *	ata_qc_complete_multiple - Complete multiple qcs successfully
 *	@ap: port in question
 *	@qc_active: new qc_active mask
 *
 *	Complete in-flight commands.  This functions is meant to be
 *	called from low-level driver&apos;s interrupt routine to complete
 *	requests normally.  ap-&gt;qc_active and @qc_active is compared
 *	and commands are completed accordingly.
 *
 *	Always use this function when completing multiple NCQ commands
 *	from IRQ handlers instead of calling ata_qc_complete()
 *	multiple times to keep IRQ expect status properly in sync.
 *
 *	LOCKING:
 *	spin_lock_irqsave(host lock)
 *
 *	RETURNS:
 *	Number of completed commands on success, -errno otherwise.
 */</doc>
