<dec f='linux-5.3.1/include/linux/pm_wakeup.h' l='101' type='void pm_wakeup_dev_event(struct device * dev, unsigned int msec, bool hard)'/>
<use f='linux-5.3.1/include/linux/pm_wakeup.h' l='198' u='c' c='pm_wakeup_event'/>
<use f='linux-5.3.1/include/linux/pm_wakeup.h' l='203' u='c' c='pm_wakeup_hard_event'/>
<use f='linux-5.3.1/drivers/acpi/device_pm.c' l='436' u='c' c='acpi_pm_wakeup_event'/>
<def f='linux-5.3.1/drivers/base/power/wakeup.c' l='783' ll='793' type='void pm_wakeup_dev_event(struct device * dev, unsigned int msec, bool hard)'/>
<dec f='linux-5.3.1/drivers/base/power/wakeup.c' l='794' type='void pm_wakeup_dev_event(struct device * , unsigned int , bool )'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='794' c='pm_wakeup_dev_event'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='794' u='a'/>
<doc f='linux-5.3.1/drivers/base/power/wakeup.c' l='775'>/**
 * pm_wakeup_dev_event - Notify the PM core of a wakeup event.
 * @dev: Device the wakeup event is related to.
 * @msec: Anticipated event processing time (in milliseconds).
 * @hard: If set, abort suspends in progress and wake up from suspend-to-idle.
 *
 * Call pm_wakeup_ws_event() for the @dev&apos;s wakeup source object.
 */</doc>
