<dec f='linux-5.3.1/fs/fsopen.c' l='314' macro='1' type='long __se_sys_fsconfig(typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((int)0), typeof (0ULL))), 0LL, 0L)) fd, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((unsigned int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((unsigned int)0), typeof (0ULL))), 0LL, 0L)) cmd, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const char *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const char *)0), typeof (0ULL))), 0LL, 0L)) _key, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const void *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const void *)0), typeof (0ULL))), 0LL, 0L)) _value, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((int)0), typeof (0ULL))), 0LL, 0L)) aux)'/>
<use f='linux-5.3.1/fs/fsopen.c' l='314' macro='1' u='c' c='__x64_sys_fsconfig'/>
<use f='linux-5.3.1/fs/fsopen.c' l='314' macro='1' u='c' c='__ia32_sys_fsconfig'/>
<def f='linux-5.3.1/fs/fsopen.c' l='314' macro='1' type='long __se_sys_fsconfig(typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((int)0), typeof (0ULL))), 0LL, 0L)) fd, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((unsigned int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((unsigned int)0), typeof (0ULL))), 0LL, 0L)) cmd, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const char *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const char *)0), typeof (0ULL))), 0LL, 0L)) _key, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((const void *)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((const void *)0), typeof (0ULL))), 0LL, 0L)) _value, typeof (__builtin_choose_expr((__builtin_types_compatible_p(typeof ((int)0), typeof (0LL)) || __builtin_types_compatible_p(typeof ((int)0), typeof (0ULL))), 0LL, 0L)) aux)'/>
