<def f='linux-5.3.1/include/uapi/drm/drm_mode.h' l='799' ll='808'/>
<size>32</size>
<doc f='linux-5.3.1/include/uapi/drm/drm_mode.h' l='798'>/* create a dumb scanout buffer */</doc>
<mbr r='drm_mode_create_dumb::height' o='0' t='__u32'/>
<mbr r='drm_mode_create_dumb::width' o='32' t='__u32'/>
<mbr r='drm_mode_create_dumb::bpp' o='64' t='__u32'/>
<mbr r='drm_mode_create_dumb::flags' o='96' t='__u32'/>
<mbr r='drm_mode_create_dumb::handle' o='128' t='__u32'/>
<mbr r='drm_mode_create_dumb::pitch' o='160' t='__u32'/>
<mbr r='drm_mode_create_dumb::size' o='192' t='__u64'/>
<use f='linux-5.3.1/include/drm/drm_drv.h' l='624'/>
<size>32</size>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_crtc_internal.h' l='95' type='int drm_mode_create_dumb(struct drm_device * dev, struct drm_mode_create_dumb * args, struct drm_file * file_priv)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_crtc_internal.h' l='96' c='drm_mode_create_dumb'/>
<size>32</size>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_crtc_internal.h' l='94'>/* drm_dumb_buffers.c */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_client.c' l='253' c='drm_client_buffer_create'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_client.c' l='268' u='c' c='drm_client_buffer_create'/>
<size>32</size>
<def f='linux-5.3.1/drivers/gpu/drm/drm_dumb_buffers.c' l='58' ll='95' type='int drm_mode_create_dumb(struct drm_device * dev, struct drm_mode_create_dumb * args, struct drm_file * file_priv)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dumb_buffers.c' l='59' c='drm_mode_create_dumb'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dumb_buffers.c' l='100' u='c' c='drm_mode_create_dumb_ioctl'/>
<size>32</size>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_dumb_buffers.c' l='33'>/**
 * DOC: overview
 *
 * The KMS API doesn&apos;t standardize backing storage object creation and leaves it
 * to driver-specific ioctls. Furthermore actually creating a buffer object even
 * for GEM-based drivers is done through a driver-specific ioctl - GEM only has
 * a common userspace interface for sharing and destroying objects. While not an
 * issue for full-fledged graphics stacks that include device-specific userspace
 * components (in libdrm for instance), this limit makes DRM-based early boot
 * graphics unnecessarily complex.
 *
 * Dumb objects partly alleviate the problem by providing a standard API to
 * create dumb buffers suitable for scanout, which can then be used to create
 * KMS frame buffers.
 *
 * To support dumb objects drivers must implement the &amp;drm_driver.dumb_create
 * operation. &amp;drm_driver.dumb_destroy defaults to drm_gem_dumb_destroy() if
 * not set and &amp;drm_driver.dumb_map_offset defaults to
 * drm_gem_dumb_map_offset(). See the callbacks for further details.
 *
 * Note that dumb objects may not be used for gpu acceleration, as has been
 * attempted on some ARM embedded platforms. Such drivers really must have
 * a hardware-specific ioctl to allocate suitable buffer objects.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_ioctl.c' l='675' macro='1'/>
<size>32</size>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.h' l='2538' c='i915_gem_dumb_create'/>
<size>32</size>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_gem.c' l='184' c='i915_gem_dumb_create'/>
<size>32</size>
