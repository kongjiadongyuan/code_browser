<dec f='linux-5.3.1/fs/nfs/internal.h' l='366' type='int nfs_symlink(struct inode * , struct dentry * , const char * )'/>
<def f='linux-5.3.1/fs/nfs/dir.c' l='1926' ll='1981' type='int nfs_symlink(struct inode * dir, struct dentry * dentry, const char * symname)'/>
<dec f='linux-5.3.1/fs/nfs/dir.c' l='1982' type='int nfs_symlink(struct inode * , struct dentry * , const char * )'/>
<use f='linux-5.3.1/fs/nfs/dir.c' l='1982' c='nfs_symlink'/>
<use f='linux-5.3.1/fs/nfs/dir.c' l='1982' u='a'/>
<doc f='linux-5.3.1/fs/nfs/dir.c' l='1911'>/*
 * To create a symbolic link, most file systems instantiate a new inode,
 * add a page to it containing the path, then write it out to the disk
 * using prepare_write/commit_write.
 *
 * Unfortunately the NFS client can&apos;t create the in-core inode first
 * because it needs a file handle to create an in-core inode (see
 * fs/nfs/inode.c:nfs_fhget).  We only have a file handle *after* the
 * symlink request has completed on the server.
 *
 * So instead we allocate a raw page, copy the symname into it, then do
 * the SYMLINK request with the page as the buffer.  If it succeeds, we
 * now have a new file handle and can instantiate an in-core NFS inode
 * and move the raw page into its mapping.
 */</doc>
<use f='linux-5.3.1/fs/nfs/nfs3proc.c' l='931'/>
<use f='linux-5.3.1/fs/nfs/nfs3proc.c' l='931'/>
<use f='linux-5.3.1/fs/nfs/nfs4proc.c' l='9872'/>
<use f='linux-5.3.1/fs/nfs/nfs4proc.c' l='9872'/>
<use f='linux-5.3.1/fs/nfs/proc.c' l='689'/>
<use f='linux-5.3.1/fs/nfs/proc.c' l='689'/>
