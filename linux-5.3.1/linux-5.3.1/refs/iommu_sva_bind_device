<dec f='linux-5.3.1/include/linux/iommu.h' l='555' type='struct iommu_sva * iommu_sva_bind_device(struct device * dev, struct mm_struct * mm, void * drvdata)'/>
<def f='linux-5.3.1/drivers/iommu/iommu.c' l='2383' ll='2416' type='struct iommu_sva * iommu_sva_bind_device(struct device * dev, struct mm_struct * mm, void * drvdata)'/>
<dec f='linux-5.3.1/drivers/iommu/iommu.c' l='2417' type='struct iommu_sva * iommu_sva_bind_device(struct device * , struct mm_struct * , void * )'/>
<use f='linux-5.3.1/drivers/iommu/iommu.c' l='2417' c='iommu_sva_bind_device'/>
<use f='linux-5.3.1/drivers/iommu/iommu.c' l='2417' u='a'/>
<doc f='linux-5.3.1/drivers/iommu/iommu.c' l='2368'>/**
 * iommu_sva_bind_device() - Bind a process address space to a device
 * @dev: the device
 * @mm: the mm to bind, caller must hold a reference to it
 *
 * Create a bond between device and address space, allowing the device to access
 * the mm using the returned PASID. If a bond already exists between @device and
 * @mm, it is returned and an additional reference is taken. Caller must call
 * iommu_sva_unbind_device() to release each reference.
 *
 * iommu_dev_enable_feature(dev, IOMMU_DEV_FEAT_SVA) must be called first, to
 * initialize the required SVA features.
 *
 * On error, returns an ERR_PTR value.
 */</doc>
