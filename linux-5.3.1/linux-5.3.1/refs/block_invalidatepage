<dec f='linux-5.3.1/include/linux/buffer_head.h' l='215' type='void block_invalidatepage(struct page * page, unsigned int offset, unsigned int length)'/>
<doc f='linux-5.3.1/include/linux/buffer_head.h' l='211'>/*
 * Generic address_space_operations implementations for buffer_head-backed
 * address_spaces.
 */</doc>
<def f='linux-5.3.1/fs/buffer.c' l='1458' ll='1504' type='void block_invalidatepage(struct page * page, unsigned int offset, unsigned int length)'/>
<dec f='linux-5.3.1/fs/buffer.c' l='1505' type='void block_invalidatepage(struct page * , unsigned int , unsigned int )'/>
<use f='linux-5.3.1/fs/buffer.c' l='1505' c='block_invalidatepage'/>
<use f='linux-5.3.1/fs/buffer.c' l='1505' u='a'/>
<doc f='linux-5.3.1/fs/buffer.c' l='1442'>/**
 * block_invalidatepage - invalidate part or all of a buffer-backed page
 *
 * @page: the page which is affected
 * @offset: start of the range to invalidate
 * @length: length of the range to invalidate
 *
 * block_invalidatepage() is called when all or part of the page has become
 * invalidated by a truncate operation.
 *
 * block_invalidatepage() does not have to release all buffers, but it must
 * ensure that no dirty buffer is left outside @offset and that no I/O
 * is underway against any of the blocks which are outside the truncation
 * point.  Because the caller is about to free (and possibly reuse) those
 * blocks on-disk.
 */</doc>
<use f='linux-5.3.1/fs/ext4/inode.c' l='1748' u='c' c='mpage_release_unused_pages'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='3399' u='c' c='ext4_invalidatepage'/>
<use f='linux-5.3.1/mm/truncate.c' l='160' u='r' c='do_invalidatepage'/>
