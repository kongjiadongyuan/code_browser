<use f='linux-5.3.1/include/linux/fsl/mc.h' l='191'/>
<def f='linux-5.3.1/include/linux/fsl/mc.h' l='324' ll='344'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='346' c='mc_send_command'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='386' c='fsl_mc_portal_allocate'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='388' c='fsl_mc_portal_free'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='390' c='fsl_mc_portal_reset'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='474' c='dpbp_open'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='479' c='dpbp_close'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='483' c='dpbp_enable'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='487' c='dpbp_disable'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='491' c='dpbp_reset'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='506' c='dpbp_get_attributes'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='520' c='dpcon_open'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='525' c='dpcon_close'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='529' c='dpcon_enable'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='533' c='dpcon_disable'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='537' c='dpcon_reset'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='553' c='dpcon_get_attributes'/>
<use f='linux-5.3.1/include/linux/fsl/mc.h' l='572' c='dpcon_set_notification'/>
<size>72</size>
<doc f='linux-5.3.1/include/linux/fsl/mc.h' l='301'>/**
 * struct fsl_mc_io - MC I/O object to be passed-in to mc_send_command()
 * @dev: device associated with this Mc I/O object
 * @flags: flags for mc_send_command()
 * @portal_size: MC command portal size in bytes
 * @portal_phys_addr: MC command portal physical address
 * @portal_virt_addr: MC command portal virtual address
 * @dpmcp_dev: pointer to the DPMCP device associated with the MC portal.
 *
 * Fields are only meaningful if the FSL_MC_IO_ATOMIC_CONTEXT_PORTAL flag is not
 * set:
 * @mutex: Mutex to serialize mc_send_command() calls that use the same MC
 * portal, if the fsl_mc_io object was created with the
 * FSL_MC_IO_ATOMIC_CONTEXT_PORTAL flag off. mc_send_command() calls for this
 * fsl_mc_io object must be made only from non-atomic context.
 *
 * Fields are only meaningful if the FSL_MC_IO_ATOMIC_CONTEXT_PORTAL flag is
 * set:
 * @spinlock: Spinlock to serialize mc_send_command() calls that use the same MC
 * portal, if the fsl_mc_io object was created with the
 * FSL_MC_IO_ATOMIC_CONTEXT_PORTAL flag on. mc_send_command() calls for this
 * fsl_mc_io object can be made from atomic or non-atomic context.
 */</doc>
<mbr r='fsl_mc_io::dev' o='0' t='struct device *'/>
<mbr r='fsl_mc_io::flags' o='64' t='u16'/>
<mbr r='fsl_mc_io::portal_size' o='96' t='u32'/>
<mbr r='fsl_mc_io::portal_phys_addr' o='128' t='phys_addr_t'/>
<mbr r='fsl_mc_io::portal_virt_addr' o='192' t='void *'/>
<mbr r='fsl_mc_io::dpmcp_dev' o='256' t='struct fsl_mc_device *'/>
