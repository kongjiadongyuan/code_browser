<def f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='58' ll='67'/>
<use f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='173' c='pinctrl_add_gpio_range'/>
<use f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='175' c='pinctrl_add_gpio_ranges'/>
<use f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='178' c='pinctrl_remove_gpio_range'/>
<use f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='181' c='pinctrl_find_and_add_gpio_range'/>
<use f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='182' c='pinctrl_find_gpio_range_from_pin'/>
<size>64</size>
<doc f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='46'>/**
 * struct pinctrl_gpio_range - each pin controller can provide subranges of
 * the GPIO number space to be handled by the controller
 * @node: list node for internal use
 * @name: a name for the chip in this range
 * @id: an ID number for the chip in this range
 * @base: base offset of the GPIO range
 * @pin_base: base pin number of the GPIO range if pins == NULL
 * @pins: enumeration of pins in GPIO range or NULL
 * @npins: number of pins in the GPIO range, including the base number
 * @gc: an optional pointer to a gpio_chip
 */</doc>
<mbr r='pinctrl_gpio_range::node' o='0' t='struct list_head'/>
<mbr r='pinctrl_gpio_range::name' o='128' t='const char *'/>
<mbr r='pinctrl_gpio_range::id' o='192' t='unsigned int'/>
<mbr r='pinctrl_gpio_range::base' o='224' t='unsigned int'/>
<mbr r='pinctrl_gpio_range::pin_base' o='256' t='unsigned int'/>
<mbr r='pinctrl_gpio_range::pins' o='320' t='const unsigned int *'/>
<mbr r='pinctrl_gpio_range::npins' o='384' t='unsigned int'/>
<mbr r='pinctrl_gpio_range::gc' o='448' t='struct gpio_chip *'/>
