<dec f='linux-5.3.1/include/crypto/skcipher.h' l='191' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-5.3.1/include/crypto/skcipher.h' l='177'>/**
 * crypto_alloc_skcipher() - allocate symmetric key cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      skcipher cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for an skcipher. The returned struct
 * crypto_skcipher is the cipher handle that is required for any subsequent
 * API invocation for that skcipher.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<def f='linux-5.3.1/crypto/skcipher.c' l='985' ll='989' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-5.3.1/crypto/skcipher.c' l='990' type='struct crypto_skcipher * crypto_alloc_skcipher(const char * , u32 , u32 )'/>
<use f='linux-5.3.1/crypto/skcipher.c' l='990' c='crypto_alloc_skcipher'/>
<use f='linux-5.3.1/crypto/skcipher.c' l='990' u='a'/>
<use f='linux-5.3.1/net/mac80211/fils_aead.c' l='116' u='c' c='aes_siv_encrypt'/>
<use f='linux-5.3.1/net/mac80211/fils_aead.c' l='175' u='c' c='aes_siv_decrypt'/>
