<dec f='linux-5.3.1/include/linux/mm.h' l='827' type='vm_fault_t finish_mkwrite_fault(struct vm_fault * vmf)'/>
<def f='linux-5.3.1/mm/memory.c' l='2448' ll='2463' type='vm_fault_t finish_mkwrite_fault(struct vm_fault * vmf)'/>
<use f='linux-5.3.1/mm/memory.c' l='2481' u='c' c='wp_pfn_shared'/>
<use f='linux-5.3.1/mm/memory.c' l='2504' u='c' c='wp_page_shared'/>
<doc f='linux-5.3.1/mm/memory.c' l='2432'>/**
 * finish_mkwrite_fault - finish page fault for a shared mapping, making PTE
 *			  writeable once the page is prepared
 *
 * @vmf: structure describing the fault
 *
 * This function handles all that is needed to finish a write page fault in a
 * shared mapping due to PTE being read-only once the mapped page is prepared.
 * It handles locking of PTE and modifying it.
 *
 * The function expects the page to be locked or other protection against
 * concurrent faults / writeback (such as DAX radix tree locks).
 *
 * Return: %VM_FAULT_WRITE on success, %0 when PTE got changed before
 * we acquired PTE lock.
 */</doc>
