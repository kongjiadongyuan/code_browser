<dec f='linux-5.3.1/include/linux/clk.h' l='630' type='int clk_set_rate(struct clk * clk, unsigned long rate)'/>
<doc f='linux-5.3.1/include/linux/clk.h' l='623'>/**
 * clk_set_rate - set the clock rate for a clock source
 * @clk: clock source
 * @rate: desired clock rate in Hz
 *
 * Returns success (0) or negative errno.
 */</doc>
<def f='linux-5.3.1/drivers/clk/clk.c' l='2192' ll='2213' type='int clk_set_rate(struct clk * clk, unsigned long rate)'/>
<dec f='linux-5.3.1/drivers/clk/clk.c' l='2214' type='int clk_set_rate(struct clk * , unsigned long )'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='2214' c='clk_set_rate'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='2214' u='a'/>
<doc f='linux-5.3.1/drivers/clk/clk.c' l='2171'>/**
 * clk_set_rate - specify a new rate for clk
 * @clk: the clk whose rate is being changed
 * @rate: the new rate for clk
 *
 * In the simplest case clk_set_rate will only adjust the rate of clk.
 *
 * Setting the CLK_SET_RATE_PARENT flag allows the rate change operation to
 * propagate up to clk&apos;s parent; whether or not this happens depends on the
 * outcome of clk&apos;s .round_rate implementation.  If *parent_rate is unchanged
 * after calling .round_rate then upstream parent propagation is ignored.  If
 * *parent_rate comes back with a new rate for clk&apos;s parent then we propagate
 * up to clk&apos;s parent and set its rate.  Upward propagation will continue
 * until either a clk does not support the CLK_SET_RATE_PARENT flag or
 * .round_rate stops requesting changes to clk&apos;s parent_rate.
 *
 * Rate changes are accomplished via tree traversal that also recalculates the
 * rates for the clocks and fires off POST_RATE_CHANGE notifiers.
 *
 * Returns 0 on success, -EERROR otherwise.
 */</doc>
