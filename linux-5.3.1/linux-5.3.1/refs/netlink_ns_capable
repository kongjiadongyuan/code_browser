<dec f='linux-5.3.1/include/linux/netlink.h' l='247' type='bool netlink_ns_capable(const struct sk_buff * skb, struct user_namespace * ns, int cap)'/>
<use f='linux-5.3.1/lib/kobject_uevent.c' l='739' u='c' c='uevent_net_rcv_skb'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='2088' u='c' c='rtnl_link_get_net_capable'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='3180' u='c' c='__rtnl_newlink'/>
<def f='linux-5.3.1/net/netlink/af_netlink.c' l='871' ll='875' type='bool netlink_ns_capable(const struct sk_buff * skb, struct user_namespace * user_ns, int cap)'/>
<dec f='linux-5.3.1/net/netlink/af_netlink.c' l='876' type='bool netlink_ns_capable(const struct sk_buff * , struct user_namespace * , int )'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='876' c='netlink_ns_capable'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='876' u='a'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='889' u='c' c='netlink_capable'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='905' u='c' c='netlink_net_capable'/>
<doc f='linux-5.3.1/net/netlink/af_netlink.c' l='861'>/**
 * netlink_ns_capable - General netlink message capability test
 * @skb: socket buffer holding a netlink command from userspace
 * @user_ns: The user namespace of the capability to use
 * @cap: The capability to use
 *
 * Test to see if the opener of the socket we received the message
 * from had when the netlink socket was created and the sender of the
 * message has has the capability @cap in the user namespace @user_ns.
 */</doc>
<use f='linux-5.3.1/net/netlink/genetlink.c' l='530' u='c' c='genl_family_rcv_msg'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1996' u='c' c='tc_new_tfilter'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='2214' u='c' c='tc_del_tfilter'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='2804' u='c' c='tc_ctl_chain'/>
<use f='linux-5.3.1/net/sched/sch_api.c' l='1420' u='c' c='tc_get_qdisc'/>
<use f='linux-5.3.1/net/sched/sch_api.c' l='1503' u='c' c='tc_modify_qdisc'/>
<use f='linux-5.3.1/net/sched/sch_api.c' l='1971' u='c' c='tc_ctl_tclass'/>
