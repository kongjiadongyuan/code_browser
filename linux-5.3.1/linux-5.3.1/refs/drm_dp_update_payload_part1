<dec f='linux-5.3.1/include/drm/drm_dp_mst_helper.h' l='633' type='int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr * mgr)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2310' ll='2403' type='int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr * mgr)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2404' type='int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2404' c='drm_dp_update_payload_part1'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2404' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2297'>/**
 * drm_dp_update_payload_part1() - Execute payload update part 1
 * @mgr: manager to use.
 *
 * This iterates over all proposed virtual channels, and tries to
 * allocate space in the link for them. For 0-&gt;slots transitions,
 * this step just writes the VCPI to the MST device. For slots-&gt;0
 * transitions, this writes the updated VCPIs and removes the
 * remote VC payloads.
 *
 * after calling this the driver should generate ACT and payload
 * packets.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp_mst.c' l='216' u='c' c='intel_mst_disable_dp'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp_mst.c' l='332' u='c' c='intel_mst_pre_enable_dp'/>
