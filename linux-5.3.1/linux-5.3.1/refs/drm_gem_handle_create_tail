<dec f='linux-5.3.1/drivers/gpu/drm/drm_internal.h' l='122' type='int drm_gem_handle_create_tail(struct drm_file * file_priv, struct drm_gem_object * obj, u32 * handlep)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='372' ll='429' type='int drm_gem_handle_create_tail(struct drm_file * file_priv, struct drm_gem_object * obj, u32 * handlep)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='450' u='c' c='drm_gem_handle_create'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='898' u='c' c='drm_gem_open_ioctl'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='358'>/**
 * drm_gem_handle_create_tail - internal functions to create a handle
 * @file_priv: drm file-private structure to register the handle for
 * @obj: object to register
 * @handlep: pointer to return the created handle to the caller
 *
 * This expects the &amp;drm_device.object_name_lock to be held already and will
 * drop it before returning. Used to avoid races in establishing new handles
 * when importing an object from either an flink name or a dma-buf.
 *
 * Handles must be release again through drm_gem_handle_delete(). This is done
 * when userspace closes @file_priv for all attached handles, or through the
 * GEM_CLOSE ioctl for individual handles.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_prime.c' l='790' u='c' c='drm_gem_prime_fd_to_handle'/>
