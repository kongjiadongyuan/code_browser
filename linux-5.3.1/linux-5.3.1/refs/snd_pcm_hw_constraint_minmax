<dec f='linux-5.3.1/include/sound/pcm.h' l='969' type='int snd_pcm_hw_constraint_minmax(struct snd_pcm_runtime * runtime, snd_pcm_hw_param_t var, unsigned int min, unsigned int max)'/>
<use f='linux-5.3.1/include/sound/pcm.h' l='1020' u='c' c='snd_pcm_hw_constraint_single'/>
<def f='linux-5.3.1/sound/core/pcm_lib.c' l='1227' ll='1237' type='int snd_pcm_hw_constraint_minmax(struct snd_pcm_runtime * runtime, snd_pcm_hw_param_t var, unsigned int min, unsigned int max)'/>
<dec f='linux-5.3.1/sound/core/pcm_lib.c' l='1238' type='int snd_pcm_hw_constraint_minmax(struct snd_pcm_runtime * , snd_pcm_hw_param_t , unsigned int , unsigned int )'/>
<use f='linux-5.3.1/sound/core/pcm_lib.c' l='1238' c='snd_pcm_hw_constraint_minmax'/>
<use f='linux-5.3.1/sound/core/pcm_lib.c' l='1238' u='a'/>
<doc f='linux-5.3.1/sound/core/pcm_lib.c' l='1215'>/**
 * snd_pcm_hw_constraint_minmax - apply a min/max range constraint to an interval
 * @runtime: PCM runtime instance
 * @var: hw_params variable to apply the range
 * @min: the minimal value
 * @max: the maximal value
 * 
 * Apply the min/max range constraint to an interval parameter.
 *
 * Return: Positive if the value is changed, zero if it&apos;s not changed, or a
 * negative error code.
 */</doc>
<use f='linux-5.3.1/sound/core/pcm_native.c' l='2358' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux-5.3.1/sound/core/pcm_native.c' l='2363' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux-5.3.1/sound/core/pcm_native.c' l='2368' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux-5.3.1/sound/core/pcm_native.c' l='2373' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux-5.3.1/sound/core/pcm_native.c' l='2378' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux-5.3.1/sound/core/pcm_native.c' l='2391' u='c' c='snd_pcm_hw_constraints_complete'/>
<use f='linux-5.3.1/sound/pci/hda/hda_controller.c' l='612' u='c' c='azx_pcm_open'/>
