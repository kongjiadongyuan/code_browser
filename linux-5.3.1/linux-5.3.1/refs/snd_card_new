<dec f='linux-5.3.1/include/sound/core.h' l='222' type='int snd_card_new(struct device * parent, int idx, const char * xid, struct module * module, int extra_size, struct snd_card ** card_ret)'/>
<def f='linux-5.3.1/sound/core/init.c' l='160' ll='252' type='int snd_card_new(struct device * parent, int idx, const char * xid, struct module * module, int extra_size, struct snd_card ** card_ret)'/>
<dec f='linux-5.3.1/sound/core/init.c' l='253' type='int snd_card_new(struct device * , int , const char * , struct module * , int , struct snd_card ** )'/>
<use f='linux-5.3.1/sound/core/init.c' l='253' c='snd_card_new'/>
<use f='linux-5.3.1/sound/core/init.c' l='253' u='a'/>
<doc f='linux-5.3.1/sound/core/init.c' l='143'>/**
 *  snd_card_new - create and initialize a soundcard structure
 *  @parent: the parent device object
 *  @idx: card index (address) [0 ... (SNDRV_CARDS-1)]
 *  @xid: card identification (ASCII string)
 *  @module: top level module for locking
 *  @extra_size: allocate this extra size after the main soundcard structure
 *  @card_ret: the pointer to store the created card instance
 *
 *  Creates and initializes a soundcard structure.
 *
 *  The function allocates snd_card instance via kzalloc with the given
 *  space for the driver to use freely.  The allocated struct is stored
 *  in the given card_ret pointer.
 *
 *  Return: Zero if successful or a negative error code.
 */</doc>
<use f='linux-5.3.1/sound/pci/hda/hda_intel.c' l='2102' u='c' c='azx_probe'/>
