<dec f='linux-5.3.1/include/linux/i2c.h' l='470' type='struct i2c_client * i2c_new_dummy_device(struct i2c_adapter * adapter, u16 address)'/>
<def f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='891' ll='898' type='struct i2c_client * i2c_new_dummy_device(struct i2c_adapter * adapter, u16 address)'/>
<dec f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='899' type='struct i2c_client * i2c_new_dummy_device(struct i2c_adapter * , u16 )'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='899' c='i2c_new_dummy_device'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='899' u='a'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='919' u='c' c='i2c_new_dummy'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='956' u='c' c='devm_i2c_new_dummy_device'/>
<doc f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='873'>/**
 * i2c_new_dummy_device - return a new i2c device bound to a dummy driver
 * @adapter: the adapter managing the device
 * @address: seven bit address to be used
 * Context: can sleep
 *
 * This returns an I2C client bound to the &quot;dummy&quot; driver, intended for use
 * with devices that consume multiple addresses.  Examples of such chips
 * include various EEPROMS (like 24c04 and 24c08 models).
 *
 * These dummy devices have two main uses.  First, most I2C and SMBus calls
 * except i2c_transfer() need a client handle; the dummy will be that handle.
 * And second, this prevents the specified address from being bound to a
 * different driver.
 *
 * This returns the new i2c client, which should be saved for later use with
 * i2c_unregister_device(); or an ERR_PTR to describe the error.
 */</doc>
