<def f='linux-5.3.1/include/linux/hwspinlock.h' l='349' ll='353' type='int hwspin_lock_timeout_in_atomic(struct hwspinlock * hwlock, unsigned int to)'/>
<doc f='linux-5.3.1/include/linux/hwspinlock.h' l='333'>/**
 * hwspin_lock_timeout_in_atomic() - lock an hwspinlock with timeout limit
 * @hwlock: the hwspinlock to be locked
 * @to: timeout value in msecs
 *
 * This function locks the underlying @hwlock. If the @hwlock
 * is already taken, the function will busy loop waiting for it to
 * be released, but give up when @timeout msecs have elapsed.
 *
 * This function shall be called only from an atomic context and the timeout
 * value shall not exceed a few msecs.
 *
 * Returns 0 when the @hwlock was successfully taken, and an appropriate
 * error code otherwise (most notably an -ETIMEDOUT if the @hwlock is still
 * busy after @timeout msecs). The function will never sleep.
 */</doc>
