<dec f='linux-5.3.1/include/net/ip.h' l='162' type='int ip_do_fragment(struct net * net, struct sock * sk, struct sk_buff * skb, int (*)(struct net *, struct sock *, struct sk_buff *) output)'/>
<use f='linux-5.3.1/net/ipv4/ip_output.c' l='575' u='c' c='ip_fragment'/>
<use f='linux-5.3.1/net/ipv4/ip_output.c' l='587' u='c' c='ip_fragment'/>
<def f='linux-5.3.1/net/ipv4/ip_output.c' l='766' ll='917' type='int ip_do_fragment(struct net * net, struct sock * sk, struct sk_buff * skb, int (*)(struct net *, struct sock *, struct sk_buff *) output)'/>
<dec f='linux-5.3.1/net/ipv4/ip_output.c' l='918' type='int ip_do_fragment(struct net * , struct sock * , struct sk_buff * , int (*)(struct net *, struct sock *, struct sk_buff *) )'/>
<use f='linux-5.3.1/net/ipv4/ip_output.c' l='918' c='ip_do_fragment'/>
<use f='linux-5.3.1/net/ipv4/ip_output.c' l='918' u='a'/>
<doc f='linux-5.3.1/net/ipv4/ip_output.c' l='759'>/*
 *	This IP datagram is too large to be sent in one piece.  Break it up into
 *	smaller pieces (each of size equal to IP header plus
 *	a block of the data of the original IP data part) that will yet fit in a
 *	single device frame, and queue such a frame for sending.
 */</doc>
