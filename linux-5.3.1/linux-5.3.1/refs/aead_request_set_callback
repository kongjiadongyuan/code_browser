<def f='linux-5.3.1/include/crypto/aead.h' l='440' ll='448' type='void aead_request_set_callback(struct aead_request * req, u32 flags, crypto_completion_t compl, void * data)'/>
<doc f='linux-5.3.1/include/crypto/aead.h' l='415'>/**
 * aead_request_set_callback() - set asynchronous callback function
 * @req: request handle
 * @flags: specify zero or an ORing of the flags
 *	   CRYPTO_TFM_REQ_MAY_BACKLOG the request queue may back log and
 *	   increase the wait queue beyond the initial maximum size;
 *	   CRYPTO_TFM_REQ_MAY_SLEEP the request processing may sleep
 * @compl: callback function pointer to be registered with the request handle
 * @data: The data pointer refers to memory that is not used by the kernel
 *	  crypto API, but provided to the callback function for it to use. Here,
 *	  the caller can provide a reference to memory the callback function can
 *	  operate on. As the callback function is invoked asynchronously to the
 *	  related functionality, it may need to access data structures of the
 *	  related functionality which can be referenced using this pointer. The
 *	  callback function can access the memory via the &quot;data&quot; field in the
 *	  crypto_async_request data structure provided to the callback function.
 *
 * Setting the callback function that is triggered once the cipher operation
 * completes
 *
 * The callback function is registered with the aead_request handle and
 * must comply with the following template::
 *
 *	void callback_function(struct crypto_async_request *req, int error)
 */</doc>
<use f='linux-5.3.1/crypto/ccm.c' l='676' u='c' c='crypto_rfc4309_crypt'/>
<use f='linux-5.3.1/crypto/echainiv.c' l='59' u='c' c='echainiv_encrypt'/>
<use f='linux-5.3.1/crypto/echainiv.c' l='102' u='c' c='echainiv_decrypt'/>
<use f='linux-5.3.1/crypto/gcm.c' l='809' u='c' c='crypto_rfc4106_crypt'/>
<use f='linux-5.3.1/crypto/gcm.c' l='1020' u='c' c='crypto_rfc4543_crypt'/>
<use f='linux-5.3.1/crypto/seqiv.c' l='97' u='c' c='seqiv_aead_encrypt'/>
<use f='linux-5.3.1/crypto/seqiv.c' l='128' u='c' c='seqiv_aead_decrypt'/>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='388' u='c' c='esp6_output_tail'/>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='390' u='c' c='esp6_output_tail'/>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='668' u='c' c='esp6_input'/>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='670' u='c' c='esp6_input'/>
