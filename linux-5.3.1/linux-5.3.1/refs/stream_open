<dec f='linux-5.3.1/include/linux/fs.h' l='3087' type='int stream_open(struct inode * inode, struct file * filp)'/>
<use f='linux-5.3.1/drivers/input/evdev.c' l='523' u='c' c='evdev_open'/>
<def f='linux-5.3.1/fs/open.c' l='1249' ll='1254' type='int stream_open(struct inode * inode, struct file * filp)'/>
<dec f='linux-5.3.1/fs/open.c' l='1256' type='int stream_open(struct inode * , struct file * )'/>
<use f='linux-5.3.1/fs/open.c' l='1256' c='stream_open'/>
<use f='linux-5.3.1/fs/open.c' l='1256' u='a'/>
<doc f='linux-5.3.1/fs/open.c' l='1239'>/*
 * stream_open is used by subsystems that want stream-like file descriptors.
 * Such file descriptors are not seekable and don&apos;t have notion of position
 * (file.f_pos is always 0 and ppos passed to .read()/.write() is always NULL).
 * Contrary to file descriptors of other regular files, .read() and .write()
 * can run simultaneously.
 *
 * stream_open never fails and is marked to return int so that it could be
 * directly used as file_operations.open .
 */</doc>
<use f='linux-5.3.1/net/rfkill/core.c' l='1134' u='c' c='rfkill_fop_open'/>
<use f='linux-5.3.1/sound/core/control.c' l='42' u='c' c='snd_ctl_open'/>
<use f='linux-5.3.1/sound/core/seq/seq_clientmgr.c' l='327' u='c' c='snd_seq_open'/>
<use f='linux-5.3.1/sound/core/timer.c' l='1440' u='c' c='snd_timer_user_open'/>
