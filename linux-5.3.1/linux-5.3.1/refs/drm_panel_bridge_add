<dec f='linux-5.3.1/include/drm/drm_bridge.h' l='432' type='struct drm_bridge * drm_panel_bridge_add(struct drm_panel * panel, u32 connector_type)'/>
<def f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='154' ll='178' type='struct drm_bridge * drm_panel_bridge_add(struct drm_panel * panel, u32 connector_type)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='179' type='struct drm_bridge * drm_panel_bridge_add(struct drm_panel * , u32 )'/>
<use f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='179' c='drm_panel_bridge_add'/>
<use f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='179' u='a'/>
<use f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='233' u='c' c='devm_drm_panel_bridge_add'/>
<doc f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='131'>/**
 * drm_panel_bridge_add - Creates a &amp;drm_bridge and &amp;drm_connector that
 * just calls the appropriate functions from &amp;drm_panel.
 *
 * @panel: The drm_panel being wrapped.  Must be non-NULL.
 * @connector_type: The DRM_MODE_CONNECTOR_* for the connector to be
 * created.
 *
 * For drivers converting from directly using drm_panel: The expected
 * usage pattern is that during either encoder module probe or DSI
 * host attach, a drm_panel will be looked up through
 * drm_of_find_panel_or_bridge().  drm_panel_bridge_add() is used to
 * wrap that panel in the new bridge, and the result can then be
 * passed to drm_bridge_attach().  The drm_panel_prepare() and related
 * functions can be dropped from the encoder driver (they&apos;re now
 * called by the KMS helpers before calling into the encoder), along
 * with connector creation.  When done with the bridge (after
 * drm_mode_config_cleanup() if the bridge has already been attached), then
 * drm_panel_bridge_remove() to free it.
 *
 * See devm_drm_panel_bridge_add() for an automatically manged version of this
 * function.
 */</doc>
