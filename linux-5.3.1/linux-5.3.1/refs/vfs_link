<dec f='linux-5.3.1/include/linux/fs.h' l='1690' type='int vfs_link(struct dentry * , struct inode * , struct dentry * , struct inode ** )'/>
<def f='linux-5.3.1/fs/namei.c' l='4195' ll='4253' type='int vfs_link(struct dentry * old_dentry, struct inode * dir, struct dentry * new_dentry, struct inode ** delegated_inode)'/>
<dec f='linux-5.3.1/fs/namei.c' l='4254' type='int vfs_link(struct dentry * , struct inode * , struct dentry * , struct inode ** )'/>
<use f='linux-5.3.1/fs/namei.c' l='4254' c='vfs_link'/>
<use f='linux-5.3.1/fs/namei.c' l='4254' u='a'/>
<use f='linux-5.3.1/fs/namei.c' l='4309' u='c' c='do_linkat'/>
<doc f='linux-5.3.1/fs/namei.c' l='4176'>/**
 * vfs_link - create a new link
 * @old_dentry:	object to be linked
 * @dir:	new parent
 * @new_dentry:	where to create the new link
 * @delegated_inode: returns inode needing a delegation break
 *
 * The caller must hold dir-&gt;i_mutex
 *
 * If vfs_link discovers a delegation on the to-be-linked file in need
 * of breaking, it will return -EWOULDBLOCK and return a reference to the
 * inode in delegated_inode.  The caller should then break the delegation
 * and retry.  Because breaking a delegation may take a long time, the
 * caller should drop the i_mutex before doing so.
 *
 * Alternatively, a caller may pass NULL for delegated_inode.  This may
 * be appropriate for callers that expect the underlying filesystem not
 * to be NFS exported.
 */</doc>
