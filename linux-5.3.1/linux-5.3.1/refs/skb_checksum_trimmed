<dec f='linux-5.3.1/include/linux/skbuff.h' l='4392' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * skb, unsigned int transport_len, __sum16 (*)(struct sk_buff *) skb_chkf)'/>
<def f='linux-5.3.1/net/core/skbuff.c' l='4956' ll='4986' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * skb, unsigned int transport_len, __sum16 (*)(struct sk_buff *) skb_chkf)'/>
<dec f='linux-5.3.1/net/core/skbuff.c' l='4987' type='struct sk_buff * skb_checksum_trimmed(struct sk_buff * , unsigned int , __sum16 (*)(struct sk_buff *) )'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='4987' c='skb_checksum_trimmed'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='4987' u='a'/>
<doc f='linux-5.3.1/net/core/skbuff.c' l='4941'>/**
 * skb_checksum_trimmed - validate checksum of an skb
 * @skb: the skb to check
 * @transport_len: the data length beyond the network header
 * @skb_chkf: checksum function to use
 *
 * Applies the given checksum function skb_chkf to the provided skb.
 * Returns a checked and maybe trimmed skb. Returns NULL on error.
 *
 * If the skb has data beyond the given transport length, then a
 * trimmed &amp; cloned skb is checked and returned.
 *
 * Caller needs to set the skb transport header and free any returned skb if it
 * differs from the provided skb.
 */</doc>
<use f='linux-5.3.1/net/ipv4/igmp.c' l='1580' u='c' c='ip_mc_check_igmp_csum'/>
<use f='linux-5.3.1/net/ipv6/mcast_snoop.c' l='143' u='c' c='ipv6_mc_check_icmpv6'/>
