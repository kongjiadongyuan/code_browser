<dec f='linux-5.3.1/include/net/pkt_cls.h' l='42' type='struct tcf_chain * tcf_get_next_chain(struct tcf_block * block, struct tcf_chain * chain)'/>
<def f='linux-5.3.1/net/sched/cls_api.c' l='1061' ll='1070' type='struct tcf_chain * tcf_get_next_chain(struct tcf_block * block, struct tcf_chain * chain)'/>
<dec f='linux-5.3.1/net/sched/cls_api.c' l='1071' type='struct tcf_chain * tcf_get_next_chain(struct tcf_block * , struct tcf_chain * )'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1071' c='tcf_get_next_chain'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1071' u='a'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1134' u='c' c='tcf_block_flush_all_chains'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1136' u='c' c='tcf_block_flush_all_chains'/>
<doc f='linux-5.3.1/net/sched/cls_api.c' l='1052'>/* Function to be used by all clients that want to iterate over all chains on
 * block. It properly obtains block-&gt;lock and takes reference to chain before
 * returning it. Users of this function must be tolerant to concurrent chain
 * insertion/deletion or ensure that no concurrent chain modification is
 * possible. Note that all netlink dump callbacks cannot guarantee to provide
 * consistent dump because rtnl lock is released each time skb is filled with
 * data and sent to user-space.
 */</doc>
<use f='linux-5.3.1/net/sched/sch_api.c' l='1928' u='c' c='tc_bind_tclass'/>
<use f='linux-5.3.1/net/sched/sch_api.c' l='1930' u='c' c='tc_bind_tclass'/>
