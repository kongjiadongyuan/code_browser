<dec f='linux-5.3.1/include/linux/kobject.h' l='96' type='int kobject_add(struct kobject * kobj, struct kobject * parent, const char * fmt)'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/amd.c' l='1286' u='c' c='__threshold_add_blocks'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/amd.c' l='1292' u='c' c='__threshold_add_blocks'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/amd.c' l='1321' u='c' c='threshold_create_bank'/>
<use f='linux-5.3.1/block/blk-mq-sysfs.c' l='255' u='c' c='blk_mq_register_hctx'/>
<use f='linux-5.3.1/block/blk-mq-sysfs.c' l='260' u='c' c='blk_mq_register_hctx'/>
<use f='linux-5.3.1/block/blk-mq-sysfs.c' l='325' u='c' c='__blk_mq_register_dev'/>
<use f='linux-5.3.1/block/blk-sysfs.c' l='974' u='c' c='blk_register_queue'/>
<use f='linux-5.3.1/block/elevator.c' l='480' u='c' c='elv_register_queue'/>
<use f='linux-5.3.1/drivers/base/core.c' l='1735' u='c' c='class_dir_create_and_add'/>
<use f='linux-5.3.1/drivers/base/core.c' l='2116' u='c' c='device_add'/>
<use f='linux-5.3.1/drivers/firmware/efi/runtime-map.c' l='127' u='c' c='add_sysfs_runtime_map_entry'/>
<use f='linux-5.3.1/drivers/firmware/memmap.c' l='190' u='c' c='add_sysfs_fw_map_entry'/>
<use f='linux-5.3.1/drivers/md/md.c' l='2288' u='c' c='bind_rdev_to_array'/>
<use f='linux-5.3.1/drivers/md/md.c' l='5423' u='c' c='md_alloc'/>
<use f='linux-5.3.1/kernel/irq/irqdesc.c' l='293' u='c' c='irq_sysfs_add'/>
<def f='linux-5.3.1/lib/kobject.c' l='426' ll='446' type='int kobject_add(struct kobject * kobj, struct kobject * parent, const char * fmt)'/>
<dec f='linux-5.3.1/lib/kobject.c' l='447' type='int kobject_add(struct kobject * , struct kobject * , const char * )'/>
<use f='linux-5.3.1/lib/kobject.c' l='447' c='kobject_add'/>
<use f='linux-5.3.1/lib/kobject.c' l='447' u='a'/>
<use f='linux-5.3.1/lib/kobject.c' l='800' u='c' c='kobject_create_and_add'/>
<doc f='linux-5.3.1/lib/kobject.c' l='393'>/**
 * kobject_add() - The main kobject add function.
 * @kobj: the kobject to add
 * @parent: pointer to the parent of the kobject.
 * @fmt: format to name the kobject with.
 *
 * The kobject name is set and added to the kobject hierarchy in this
 * function.
 *
 * If @parent is set, then the parent of the @kobj will be set to it.
 * If @parent is NULL, then the parent of the @kobj will be set to the
 * kobject associated with the kset assigned to this kobject.  If no kset
 * is assigned to the kobject, then the kobject will be located in the
 * root of the sysfs tree.
 *
 * Note, no &quot;add&quot; uevent will be created with this call, the caller should set
 * up all of the necessary sysfs files for the object and then call
 * kobject_uevent() with the UEVENT_ADD parameter to ensure that
 * userspace is properly notified of this kobject&apos;s creation.
 *
 * Return: If this function returns an error, kobject_put() must be
 *         called to properly clean up the memory associated with the
 *         object.  Under no instance should the kobject that is passed
 *         to this function be directly freed with a call to kfree(),
 *         that can leak memory.
 *
 *         If this function returns success, kobject_put() must also be called
 *         in order to properly clean up the memory associated with the object.
 *
 *         In short, once this function is called, kobject_put() MUST be called
 *         when the use of the object is finished in order to properly free
 *         everything.
 */</doc>
<use f='linux-5.3.1/sound/hda/hdac_sysfs.c' l='348' u='c' c='add_widget_node'/>
