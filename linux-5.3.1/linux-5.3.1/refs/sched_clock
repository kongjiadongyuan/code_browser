<dec f='linux-5.3.1/include/linux/sched/clock.h' l='15' type='unsigned long long sched_clock()'/>
<doc f='linux-5.3.1/include/linux/sched/clock.h' l='7'>/*
 * Do not use outside of architecture code which knows its limitations.
 *
 * sched_clock() has no promise of monotonicity or bounded drift between
 * CPUs, use (which you should not) requires disabling IRQs.
 *
 * Please use one of the three interfaces below.
 */</doc>
<use f='linux-5.3.1/arch/x86/events/amd/ibs.c' l='684' u='c' c='perf_ibs_nmi_handler'/>
<use f='linux-5.3.1/arch/x86/events/amd/ibs.c' l='693' u='c' c='perf_ibs_nmi_handler'/>
<use f='linux-5.3.1/arch/x86/events/core.c' l='1539' u='c' c='perf_event_nmi_handler'/>
<use f='linux-5.3.1/arch/x86/events/core.c' l='1541' u='c' c='perf_event_nmi_handler'/>
<use f='linux-5.3.1/arch/x86/kernel/nmi.c' l='139' u='c' c='nmi_handle'/>
<use f='linux-5.3.1/arch/x86/kernel/nmi.c' l='142' u='c' c='nmi_handle'/>
<def f='linux-5.3.1/arch/x86/kernel/tsc.c' l='253' ll='254' type='unsigned long long sched_clock()'/>
<use f='linux-5.3.1/arch/x86/kernel/tsc.c' l='918' u='c' c='tsc_save_sched_clock_state'/>
<use f='linux-5.3.1/arch/x86/kernel/tsc.c' l='949' u='c' c='tsc_restore_sched_clock_state'/>
<use f='linux-5.3.1/include/linux/filter.h' l='561' u='c' c='__bpf_prog_run_save_cb'/>
<use f='linux-5.3.1/include/linux/filter.h' l='566' u='c' c='__bpf_prog_run_save_cb'/>
<use f='linux-5.3.1/include/linux/filter.h' l='561' u='c' c='bpf_prog_run_clear_cb'/>
<use f='linux-5.3.1/include/linux/filter.h' l='566' u='c' c='bpf_prog_run_clear_cb'/>
<use f='linux-5.3.1/include/linux/filter.h' l='561' u='c' c='bpf_prog_run_xdp'/>
<use f='linux-5.3.1/include/linux/filter.h' l='566' u='c' c='bpf_prog_run_xdp'/>
<use f='linux-5.3.1/kernel/locking/rwsem.c' l='780' u='c' c='rwsem_rspin_threshold'/>
<use f='linux-5.3.1/kernel/locking/rwsem.c' l='845' u='c' c='rwsem_optimistic_spin'/>
<def f='linux-5.3.1/kernel/sched/clock.c' l='64' ll='68' type='unsigned long long sched_clock()'/>
<dec f='linux-5.3.1/kernel/sched/clock.c' l='69' type='unsigned long long sched_clock()'/>
<use f='linux-5.3.1/kernel/sched/clock.c' l='69' c='sched_clock'/>
<use f='linux-5.3.1/kernel/sched/clock.c' l='69' u='a'/>
<use f='linux-5.3.1/kernel/sched/clock.c' l='116' u='c' c='__scd_stamp'/>
<use f='linux-5.3.1/kernel/sched/clock.c' l='271' u='c' c='sched_clock_local'/>
<use f='linux-5.3.1/kernel/sched/clock.c' l='371' u='c' c='sched_clock_cpu'/>
<use f='linux-5.3.1/kernel/sched/clock.c' l='374' u='c' c='sched_clock_cpu'/>
<doc f='linux-5.3.1/kernel/sched/clock.c' l='59'>/*
 * Scheduler clock - returns current time in nanosec units.
 * This is default implementation.
 * Architectures and sub-architectures can override this.
 */</doc>
<use f='linux-5.3.1/kernel/sched/core.c' l='5841' u='c' c='init_idle'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='272' macro='1' u='c' c='seccomp_run_filters'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='272' macro='1' u='c' c='seccomp_run_filters'/>
<use f='linux-5.3.1/kernel/trace/trace_clock.c' l='42' u='c' c='trace_clock_local'/>
<use f='linux-5.3.1/net/core/filter.c' l='8620' macro='1' u='c' c='bpf_run_sk_reuseport'/>
<use f='linux-5.3.1/net/core/filter.c' l='8620' macro='1' u='c' c='bpf_run_sk_reuseport'/>
<use f='linux-5.3.1/net/core/flow_dissector.c' l='799' macro='1' u='c' c='bpf_flow_dissect'/>
<use f='linux-5.3.1/net/core/flow_dissector.c' l='799' macro='1' u='c' c='bpf_flow_dissect'/>
<use f='linux-5.3.1/net/core/ptp_classifier.c' l='106' macro='1' u='c' c='ptp_classify_raw'/>
<use f='linux-5.3.1/net/core/ptp_classifier.c' l='106' macro='1' u='c' c='ptp_classify_raw'/>
