<dec f='linux-5.3.1/include/linux/iommu.h' l='444' type='int iommu_register_device_fault_handler(struct device * dev, iommu_dev_fault_handler_t handler, void * data)'/>
<def f='linux-5.3.1/drivers/iommu/iommu.c' l='897' ll='930' type='int iommu_register_device_fault_handler(struct device * dev, iommu_dev_fault_handler_t handler, void * data)'/>
<dec f='linux-5.3.1/drivers/iommu/iommu.c' l='931' type='int iommu_register_device_fault_handler(struct device * , iommu_dev_fault_handler_t , void * )'/>
<use f='linux-5.3.1/drivers/iommu/iommu.c' l='931' c='iommu_register_device_fault_handler'/>
<use f='linux-5.3.1/drivers/iommu/iommu.c' l='931' u='a'/>
<doc f='linux-5.3.1/drivers/iommu/iommu.c' l='879'>/**
 * iommu_register_device_fault_handler() - Register a device fault handler
 * @dev: the device
 * @handler: the fault handler
 * @data: private data passed as argument to the handler
 *
 * When an IOMMU fault event is received, this handler gets called with the
 * fault event and data as argument. The handler should return 0 on success. If
 * the fault is recoverable (IOMMU_FAULT_PAGE_REQ), the consumer should also
 * complete the fault by calling iommu_page_response() with one of the following
 * response code:
 * - IOMMU_PAGE_RESP_SUCCESS: retry the translation
 * - IOMMU_PAGE_RESP_INVALID: terminate the fault
 * - IOMMU_PAGE_RESP_FAILURE: terminate the fault and stop reporting
 *   page faults if possible.
 *
 * Return 0 if the fault handler was installed successfully, or an error.
 */</doc>
