<dec f='linux-5.3.1/include/net/cfg80211.h' l='5027' type='int ieee80211_radiotap_iterator_init(struct ieee80211_radiotap_iterator * iterator, struct ieee80211_radiotap_header * radiotap_header, int max_length, const struct ieee80211_radiotap_vendor_namespaces * vns)'/>
<use f='linux-5.3.1/net/mac80211/tx.c' l='2027' u='c' c='ieee80211_parse_tx_radiotap'/>
<def f='linux-5.3.1/net/wireless/radiotap.c' l='96' ll='163' type='int ieee80211_radiotap_iterator_init(struct ieee80211_radiotap_iterator * iterator, struct ieee80211_radiotap_header * radiotap_header, int max_length, const struct ieee80211_radiotap_vendor_namespaces * vns)'/>
<dec f='linux-5.3.1/net/wireless/radiotap.c' l='164' type='int ieee80211_radiotap_iterator_init(struct ieee80211_radiotap_iterator * , struct ieee80211_radiotap_header * , int , const struct ieee80211_radiotap_vendor_namespaces * )'/>
<use f='linux-5.3.1/net/wireless/radiotap.c' l='164' c='ieee80211_radiotap_iterator_init'/>
<use f='linux-5.3.1/net/wireless/radiotap.c' l='164' u='a'/>
<doc f='linux-5.3.1/net/wireless/radiotap.c' l='57'>/**
 * ieee80211_radiotap_iterator_init - radiotap parser iterator initialization
 * @iterator: radiotap_iterator to initialize
 * @radiotap_header: radiotap header to parse
 * @max_length: total length we can parse into (eg, whole packet length)
 *
 * Returns: 0 or a negative error code if there is a problem.
 *
 * This function initializes an opaque iterator struct which can then
 * be passed to ieee80211_radiotap_iterator_next() to visit every radiotap
 * argument which is present in the header.  It knows about extended
 * present headers and handles them.
 *
 * How to use:
 * call __ieee80211_radiotap_iterator_init() to init a semi-opaque iterator
 * struct ieee80211_radiotap_iterator (no need to init the struct beforehand)
 * checking for a good 0 return code.  Then loop calling
 * __ieee80211_radiotap_iterator_next()... it returns either 0,
 * -ENOENT if there are no more args to parse, or -EINVAL if there is a problem.
 * The iterator&apos;s @this_arg member points to the start of the argument
 * associated with the current argument index that is present, which can be
 * found in the iterator&apos;s @this_arg_index member.  This arg index corresponds
 * to the IEEE80211_RADIOTAP_... defines.
 *
 * Radiotap header length:
 * You can find the CPU-endian total radiotap header length in
 * iterator-&gt;max_length after executing ieee80211_radiotap_iterator_init()
 * successfully.
 *
 * Alignment Gotcha:
 * You must take care when dereferencing iterator.this_arg
 * for multibyte types... the pointer is not aligned.  Use
 * get_unaligned((type *)iterator.this_arg) to dereference
 * iterator.this_arg for type &quot;type&quot; safely on all arches.
 *
 * Example code:
 * See Documentation/networking/radiotap-headers.txt
 */</doc>
