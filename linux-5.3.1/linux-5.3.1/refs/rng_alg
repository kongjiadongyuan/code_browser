<def f='linux-5.3.1/include/crypto/rng.h' l='41' ll='52'/>
<use f='linux-5.3.1/include/crypto/rng.h' l='105' c='crypto_rng_alg'/>
<use f='linux-5.3.1/include/crypto/rng.h' l='108' c='crypto_rng_alg'/>
<use f='linux-5.3.1/include/crypto/rng.h' l='108' c='crypto_rng_alg'/>
<use f='linux-5.3.1/include/crypto/rng.h' l='108' c='crypto_rng_alg'/>
<use f='linux-5.3.1/include/crypto/internal/rng.h' l='15' c='crypto_register_rng'/>
<use f='linux-5.3.1/include/crypto/internal/rng.h' l='16' c='crypto_unregister_rng'/>
<use f='linux-5.3.1/include/crypto/internal/rng.h' l='17' c='crypto_register_rngs'/>
<use f='linux-5.3.1/include/crypto/internal/rng.h' l='18' c='crypto_unregister_rngs'/>
<size>424</size>
<doc f='linux-5.3.1/include/crypto/rng.h' l='16'>/**
 * struct rng_alg - random number generator definition
 *
 * @generate:	The function defined by this variable obtains a
 *		random number. The random number generator transform
 *		must generate the random number out of the context
 *		provided with this call, plus any additional data
 *		if provided to the call.
 * @seed:	Seed or reseed the random number generator.  With the
 *		invocation of this function call, the random number
 *		generator shall become ready for generation.  If the
 *		random number generator requires a seed for setting
 *		up a new state, the seed must be provided by the
 *		consumer while invoking this function. The required
 *		size of the seed is defined with @seedsize .
 * @set_ent:	Set entropy that would otherwise be obtained from
 *		entropy source.  Internal use only.
 * @seedsize:	The seed size required for a random number generator
 *		initialization defined with this variable. Some
 *		random number generators does not require a seed
 *		as the seeding is implemented internally without
 *		the need of support by the consumer. In this case,
 *		the seed size is set to zero.
 * @base:	Common crypto API algorithm data structure.
 */</doc>
<mbr r='rng_alg::generate' o='0' t='int (*)(struct crypto_rng *, const u8 *, unsigned int, u8 *, unsigned int)'/>
<mbr r='rng_alg::seed' o='64' t='int (*)(struct crypto_rng *, const u8 *, unsigned int)'/>
<mbr r='rng_alg::set_ent' o='128' t='void (*)(struct crypto_rng *, const u8 *, unsigned int)'/>
<mbr r='rng_alg::seedsize' o='192' t='unsigned int'/>
<mbr r='rng_alg::base' o='256' t='struct crypto_alg'/>
<use f='linux-5.3.1/crypto/drbg.c' l='2047'/>
<use f='linux-5.3.1/crypto/drbg.c' l='2054' c='drbg_fill_array'/>
<size>424</size>
<use f='linux-5.3.1/crypto/jitterentropy-kcapi.c' l='163'/>
<size>424</size>
<use f='linux-5.3.1/crypto/rng.c' l='64' c='seedsize'/>
<use f='linux-5.3.1/crypto/rng.c' l='64' c='seedsize'/>
<use f='linux-5.3.1/crypto/rng.c' l='64' c='seedsize'/>
<use f='linux-5.3.1/crypto/rng.c' l='64' c='seedsize'/>
<use f='linux-5.3.1/crypto/rng.c' l='177' c='crypto_register_rng'/>
<use f='linux-5.3.1/crypto/rng.c' l='192' c='crypto_unregister_rng'/>
<use f='linux-5.3.1/crypto/rng.c' l='198' c='crypto_register_rngs'/>
<use f='linux-5.3.1/crypto/rng.c' l='218' c='crypto_unregister_rngs'/>
<size>424</size>
