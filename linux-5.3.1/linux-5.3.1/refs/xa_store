<dec f='linux-5.3.1/include/linux/xarray.h' l='348' type='void * xa_store(struct xarray * , unsigned long index, void * entry, gfp_t )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1374' u='c' c='drm_gem_fence_array_add'/>
<def f='linux-5.3.1/lib/xarray.c' l='1406' ll='1415' type='void * xa_store(struct xarray * xa, unsigned long index, void * entry, gfp_t gfp)'/>
<dec f='linux-5.3.1/lib/xarray.c' l='1416' type='void * xa_store(struct xarray * , unsigned long , void * , gfp_t )'/>
<use f='linux-5.3.1/lib/xarray.c' l='1416' c='xa_store'/>
<use f='linux-5.3.1/lib/xarray.c' l='1416' u='a'/>
<doc f='linux-5.3.1/lib/xarray.c' l='1389'>/**
 * xa_store() - Store this entry in the XArray.
 * @xa: XArray.
 * @index: Index into array.
 * @entry: New entry.
 * @gfp: Memory allocation flags.
 *
 * After this function returns, loads from this index will return @entry.
 * Storing into an existing multislot entry updates the entry of every index.
 * The marks associated with @index are unaffected unless @entry is %NULL.
 *
 * Context: Any context.  Takes and releases the xa_lock.
 * May sleep if the @gfp flags permit.
 * Return: The old entry at this index on success, xa_err(-EINVAL) if @entry
 * cannot be stored in an XArray, or xa_err(-ENOMEM) if memory allocation
 * failed.
 */</doc>
