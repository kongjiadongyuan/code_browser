<dec f='linux-5.3.1/include/linux/sunrpc/sched.h' l='264' type='int rpc_malloc(struct rpc_task * )'/>
<def f='linux-5.3.1/net/sunrpc/sched.c' l='1025' ll='1050' type='int rpc_malloc(struct rpc_task * task)'/>
<dec f='linux-5.3.1/net/sunrpc/sched.c' l='1051' type='int rpc_malloc(struct rpc_task * )'/>
<use f='linux-5.3.1/net/sunrpc/sched.c' l='1051' c='rpc_malloc'/>
<use f='linux-5.3.1/net/sunrpc/sched.c' l='1051' u='a'/>
<doc f='linux-5.3.1/net/sunrpc/sched.c' l='1008'>/**
 * rpc_malloc - allocate RPC buffer resources
 * @task: RPC task
 *
 * A single memory region is allocated, which is split between the
 * RPC call and RPC reply that this task is being used for. When
 * this RPC is retired, the memory is released by calling rpc_free.
 *
 * To prevent rpciod from hanging, this allocator never sleeps,
 * returning -ENOMEM and suppressing warning if the request cannot
 * be serviced immediately. The caller can arrange to sleep in a
 * way that is safe for rpciod.
 *
 * Most requests are &apos;small&apos; (under 2KiB) and can be serviced from a
 * mempool, ensuring that NFS reads and writes can always proceed,
 * and that there is good locality of reference for these buffers.
 */</doc>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='2734'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='2734'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='2755'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='2755'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='2777'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='2777'/>
