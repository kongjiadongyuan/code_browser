<dec f='linux-5.3.1/kernel/cgroup/cgroup-internal.h' l='226' type='void cgroup_migrate_add_src(struct css_set * src_cset, struct cgroup * dst_cgrp, struct cgroup_mgctx * mgctx)'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup-v1.c' l='120' u='c' c='cgroup_transfer_tasks'/>
<def f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2645' ll='2676' type='void cgroup_migrate_add_src(struct css_set * src_cset, struct cgroup * dst_cgrp, struct cgroup_mgctx * mgctx)'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2807' u='c' c='cgroup_attach_task'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2949' u='c' c='cgroup_update_dfl_csses'/>
<doc f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2629'>/**
 * cgroup_migrate_add_src - add a migration source css_set
 * @src_cset: the source css_set to add
 * @dst_cgrp: the destination cgroup
 * @mgctx: migration context
 *
 * Tasks belonging to @src_cset are about to be migrated to @dst_cgrp.  Pin
 * @src_cset and add it to @mgctx-&gt;src_csets, which should later be cleaned
 * up by cgroup_migrate_finish().
 *
 * This function may be called without holding cgroup_threadgroup_rwsem
 * even if the target is a process.  Threads may be created and destroyed
 * but as long as cgroup_mutex is not dropped, no new css_set can be put
 * into play and the preloaded css_sets are guaranteed to cover all
 * migrations.
 */</doc>
