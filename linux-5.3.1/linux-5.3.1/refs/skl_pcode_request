<dec f='linux-5.3.1/drivers/gpu/drm/i915/intel_sideband.h' l='138' type='int skl_pcode_request(struct drm_i915_private * i915, u32 mbox, u32 request, u32 reply_mask, u32 reply, int timeout_base_ms)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_cdclk.c' l='1013' u='c' c='skl_set_cdclk'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_cdclk.c' l='1638' u='c' c='cnl_set_cdclk'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_cdclk.c' l='1820' u='c' c='icl_set_cdclk'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/intel_pm.c' l='3718' u='c' c='intel_disable_sagv'/>
<def f='linux-5.3.1/drivers/gpu/drm/i915/intel_sideband.c' l='489' ll='534' type='int skl_pcode_request(struct drm_i915_private * i915, u32 mbox, u32 request, u32 reply_mask, u32 reply, int timeout_base_ms)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/intel_sideband.c' l='470'>/**
 * skl_pcode_request - send PCODE request until acknowledgment
 * @i915: device private
 * @mbox: PCODE mailbox ID the request is targeted for
 * @request: request ID
 * @reply_mask: mask used to check for request acknowledgment
 * @reply: value used to check for request acknowledgment
 * @timeout_base_ms: timeout for polling with preemption enabled
 *
 * Keep resending the @request to @mbox until PCODE acknowledges it, PCODE
 * reports an error or an overall timeout of @timeout_base_ms+50 ms expires.
 * The request is acknowledged once the PCODE reply dword equals @reply after
 * applying @reply_mask. Polling is first attempted with preemption enabled
 * for @timeout_base_ms and if this times out for another 50 ms with
 * preemption disabled.
 *
 * Returns 0 on success, %-ETIMEDOUT in case of a timeout, &lt;0 in case of some
 * other error as reported by PCODE.
 */</doc>
