<dec f='linux-5.3.1/include/crypto/gf128mul.h' l='226' type='struct gf128mul_4k * gf128mul_init_4k_lle(const be128 * g)'/>
<def f='linux-5.3.1/crypto/gf128mul.c' l='341' ll='360' type='struct gf128mul_4k * gf128mul_init_4k_lle(const be128 * g)'/>
<dec f='linux-5.3.1/crypto/gf128mul.c' l='361' type='struct gf128mul_4k * gf128mul_init_4k_lle(const be128 * )'/>
<use f='linux-5.3.1/crypto/gf128mul.c' l='361' c='gf128mul_init_4k_lle'/>
<use f='linux-5.3.1/crypto/gf128mul.c' l='361' u='a'/>
<doc f='linux-5.3.1/crypto/gf128mul.c' l='325'>/*      This version uses 4k bytes of table space.
    A 16 byte buffer has to be multiplied by a 16 byte key
    value in GF(2^128).  If we consider a GF(2^128) value in a
    single byte, we can construct a table of the 256 16 byte
    values that result from the 256 values of this byte.
    This requires 4096 bytes. If we take the highest byte in
    the buffer and use this table to get the result, we then
    have to multiply by x^120 to get the final value. For the
    next highest byte the result has to be multiplied by x^112
    and so on. But we can do this by accumulating the result
    in an accumulator starting with the result for the top
    byte.  We repeatedly multiply the accumulator value by
    x^8 and then add in (i.e. xor) the 16 bytes of the next
    lower byte in the buffer, stopping when we reach the
    lowest byte. This requires a 4096 byte table.
*/</doc>
<use f='linux-5.3.1/crypto/ghash-generic.c' l='46' u='c' c='ghash_setkey'/>
