<def f='linux-5.3.1/include/linux/sched/mm.h' l='252' ll='257' type='unsigned int memalloc_nofs_save()'/>
<doc f='linux-5.3.1/include/linux/sched/mm.h' l='241'>/**
 * memalloc_nofs_save - Marks implicit GFP_NOFS allocation scope.
 *
 * This functions marks the beginning of the GFP_NOFS allocation scope.
 * All further allocations will implicitly drop __GFP_FS flag and so
 * they are safe for the FS critical section from the allocation recursion
 * point of view. Use memalloc_nofs_restore to end the scope with flags
 * returned by this function.
 *
 * This function is safe to be used from any context.
 */</doc>
<use f='linux-5.3.1/fs/jbd2/journal.c' l='194' u='c' c='kjournald2'/>
<use f='linux-5.3.1/fs/jbd2/transaction.c' l='424' u='c' c='start_this_handle'/>
<use f='linux-5.3.1/net/sunrpc/sched.c' l='1002' u='c' c='rpc_async_schedule'/>
<use f='linux-5.3.1/net/sunrpc/sched.c' l='1168' u='c' c='rpc_async_release'/>
<use f='linux-5.3.1/net/sunrpc/xprt.c' l='654' u='c' c='xprt_autoclose'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='722' u='c' c='xs_stream_data_receive_workfn'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='1441' u='c' c='xs_udp_data_receive_workfn'/>
