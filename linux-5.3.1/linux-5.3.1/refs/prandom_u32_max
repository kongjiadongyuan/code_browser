<def f='linux-5.3.1/include/linux/random.h' l='138' ll='141' type='u32 prandom_u32_max(u32 ep_ro)'/>
<doc f='linux-5.3.1/include/linux/random.h' l='126'>/**
 * prandom_u32_max - returns a pseudo-random number in interval [0, ep_ro)
 * @ep_ro: right open interval endpoint
 *
 * Returns a pseudo-random number that is in interval [0, ep_ro). Note
 * that the result depends on PRNG being well distributed in [0, ~0U]
 * u32 space. Here we use maximally equidistributed combined Tausworthe
 * generator, that is, prandom_u32(). This is useful when requesting a
 * random index of an array containing ep_ro elements, for example.
 *
 * Returns: pseudo-random number in interval [0, ep_ro)
 */</doc>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='255' u='c' c='pkcs1pad_encrypt'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gt/intel_lrc.c' l='3063' u='c' c='virtual_engine_initial_hint'/>
<use f='linux-5.3.1/lib/random32.c' l='229' u='c' c='__prandom_timer'/>
<use f='linux-5.3.1/net/ipv4/route.c' l='495' u='c' c='ip_idents_reserve'/>
<use f='linux-5.3.1/net/ipv4/tcp_input.c' l='3469' u='c' c='tcp_send_challenge_ack'/>
<use f='linux-5.3.1/net/ipv4/tcp_input.c' l='3469' u='c' c='tcp_send_challenge_ack'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='824' u='c' c='netlink_autobind'/>
<use f='linux-5.3.1/net/packet/af_packet.c' l='1337' u='c' c='fanout_demux_rnd'/>
