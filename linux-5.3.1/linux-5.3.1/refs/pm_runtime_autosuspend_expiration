<dec f='linux-5.3.1/include/linux/pm_runtime.h' l='53' type='u64 pm_runtime_autosuspend_expiration(struct device * dev)'/>
<def f='linux-5.3.1/drivers/base/power/runtime.c' l='163' ll='181' type='u64 pm_runtime_autosuspend_expiration(struct device * dev)'/>
<dec f='linux-5.3.1/drivers/base/power/runtime.c' l='182' type='u64 pm_runtime_autosuspend_expiration(struct device * )'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='182' c='pm_runtime_autosuspend_expiration'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='182' u='a'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='538' u='c' c='rpm_suspend'/>
<use f='linux-5.3.1/drivers/base/power/runtime.c' l='680' u='c' c='rpm_suspend'/>
<doc f='linux-5.3.1/drivers/base/power/runtime.c' l='151'>/*
 * pm_runtime_autosuspend_expiration - Get a device&apos;s autosuspend-delay expiration time.
 * @dev: Device to handle.
 *
 * Compute the autosuspend-delay expiration time based on the device&apos;s
 * power.last_busy time.  If the delay has already expired or is disabled
 * (negative) or the power.use_autosuspend flag isn&apos;t set, return 0.
 * Otherwise return the expiration time in nanoseconds (adjusted to be nonzero).
 *
 * This function may be called either with or without dev-&gt;power.lock held.
 * Either way it can be racy, since power.last_busy may be updated at any time.
 */</doc>
