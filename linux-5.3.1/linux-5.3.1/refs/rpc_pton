<dec f='linux-5.3.1/include/linux/sunrpc/addr.h' l='17' type='size_t rpc_pton(struct net * , const char * , const size_t , struct sockaddr * , const size_t )'/>
<use f='linux-5.3.1/fs/nfs/dns_resolve.c' l='28' u='c' c='nfs_dns_resolve_name'/>
<use f='linux-5.3.1/fs/nfs/nfs4namespace.c' l='129' u='c' c='nfs_parse_server_name'/>
<use f='linux-5.3.1/fs/nfs/super.c' l='1538' u='c' c='nfs_parse_mount_options'/>
<use f='linux-5.3.1/fs/nfs/super.c' l='1560' u='c' c='nfs_parse_mount_options'/>
<def f='linux-5.3.1/net/sunrpc/addr.c' l='248' ll='257' type='size_t rpc_pton(struct net * net, const char * buf, const size_t buflen, struct sockaddr * sap, const size_t salen)'/>
<dec f='linux-5.3.1/net/sunrpc/addr.c' l='258' type='size_t rpc_pton(struct net * , const char * , const size_t , struct sockaddr * , const size_t )'/>
<use f='linux-5.3.1/net/sunrpc/addr.c' l='258' c='rpc_pton'/>
<use f='linux-5.3.1/net/sunrpc/addr.c' l='258' u='a'/>
<use f='linux-5.3.1/net/sunrpc/addr.c' l='344' u='c' c='rpc_uaddr2sockaddr'/>
<doc f='linux-5.3.1/net/sunrpc/addr.c' l='233'>/**
 * rpc_pton - Construct a sockaddr in @sap
 * @net: applicable network namespace
 * @buf: C string containing presentation format IP address
 * @buflen: length of presentation address in bytes
 * @sap: buffer into which to plant socket address
 * @salen: size of buffer in bytes
 *
 * Returns the size of the socket address if successful; otherwise
 * zero is returned.
 *
 * Plants a socket address in @sap and returns the size of the
 * socket address, if successful.  Returns zero if an error
 * occurred.
 */</doc>
<use f='linux-5.3.1/net/sunrpc/svcauth_unix.c' l='204' u='c' c='ip_map_parse'/>
