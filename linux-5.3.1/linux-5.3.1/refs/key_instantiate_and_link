<dec f='linux-5.3.1/include/linux/key-type.h' l='169' type='int key_instantiate_and_link(struct key * key, const void * data, size_t datalen, struct key * keyring, struct key * authkey)'/>
<use f='linux-5.3.1/fs/nfs/nfs4idmap.c' l='627' u='c' c='nfs_idmap_instantiate'/>
<def f='linux-5.3.1/security/keys/key.c' l='494' ll='544' type='int key_instantiate_and_link(struct key * key, const void * data, size_t datalen, struct key * keyring, struct key * authkey)'/>
<dec f='linux-5.3.1/security/keys/key.c' l='546' type='int key_instantiate_and_link(struct key * , const void * , size_t , struct key * , struct key * )'/>
<use f='linux-5.3.1/security/keys/key.c' l='546' c='key_instantiate_and_link'/>
<use f='linux-5.3.1/security/keys/key.c' l='546' u='a'/>
<doc f='linux-5.3.1/security/keys/key.c' l='478'>/**
 * key_instantiate_and_link - Instantiate a key and link it into the keyring.
 * @key: The key to instantiate.
 * @data: The data to use to instantiate the keyring.
 * @datalen: The length of @data.
 * @keyring: Keyring to create a link in on success (or NULL).
 * @authkey: The authorisation token permitting instantiation.
 *
 * Instantiate a key that&apos;s in the uninstantiated state using the provided data
 * and, if successful, link it in to the destination keyring if one is
 * supplied.
 *
 * If successful, 0 is returned, the authorisation token is revoked and anyone
 * waiting for the key is woken up.  If the key was already instantiated,
 * -EBUSY will be returned.
 */</doc>
<use f='linux-5.3.1/security/keys/keyctl.c' l='1148' u='c' c='keyctl_instantiate_key_common'/>
<use f='linux-5.3.1/security/keys/keyring.c' l='533' u='c' c='keyring_alloc'/>
<use f='linux-5.3.1/security/keys/request_key_auth.c' l='227' u='c' c='request_key_auth_new'/>
