<dec f='linux-5.3.1/arch/x86/include/asm/fpu/internal.h' l='29' type='void fpu__prepare_write(struct fpu * fpu)'/>
<def f='linux-5.3.1/arch/x86/kernel/fpu/core.c' l='255' ll='265' type='void fpu__prepare_write(struct fpu * fpu)'/>
<doc f='linux-5.3.1/arch/x86/kernel/fpu/core.c' l='243'>/*
 * This function must be called before we write a task&apos;s fpstate.
 *
 * Invalidate any cached FPU registers.
 *
 * After this function call, after registers in the fpstate are
 * modified and the child task has woken up, the child task will
 * restore the modified FPU state from the modified context. If we
 * didn&apos;t clear its cached status here then the cached in-registers
 * state pending on its former CPU could be restored, corrupting
 * the modifications.
 */</doc>
<use f='linux-5.3.1/arch/x86/kernel/fpu/regset.c' l='55' u='c' c='xfpregs_set'/>
<use f='linux-5.3.1/arch/x86/kernel/fpu/regset.c' l='132' u='c' c='xstateregs_set'/>
<use f='linux-5.3.1/arch/x86/kernel/fpu/regset.c' l='332' u='c' c='fpregs_set'/>
