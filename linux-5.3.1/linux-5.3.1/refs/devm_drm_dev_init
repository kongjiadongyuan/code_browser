<dec f='linux-5.3.1/include/drm/drm_drv.h' l='728' type='int devm_drm_dev_init(struct device * parent, struct drm_device * dev, struct drm_driver * driver)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_drv.c' l='741' ll='759' type='int devm_drm_dev_init(struct device * parent, struct drm_device * dev, struct drm_driver * driver)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_drv.c' l='760' type='int devm_drm_dev_init(struct device * , struct drm_device * , struct drm_driver * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_drv.c' l='760' c='devm_drm_dev_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_drv.c' l='760' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_drv.c' l='728'>/**
 * devm_drm_dev_init - Resource managed drm_dev_init()
 * @parent: Parent device object
 * @dev: DRM device
 * @driver: DRM driver
 *
 * Managed drm_dev_init(). The DRM device initialized with this function is
 * automatically put on driver detach using drm_dev_put(). You must supply a
 * &amp;drm_driver.release callback to control the finalization explicitly.
 *
 * RETURNS:
 * 0 on success, or error code on failure.
 */</doc>
