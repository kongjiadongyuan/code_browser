<dec f='linux-5.3.1/include/drm/drm_fourcc.h' l='313' type='uint32_t drm_driver_legacy_fb_format(struct drm_device * dev, uint32_t bpp, uint32_t depth)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_fourcc.c' l='109' ll='130' type='uint32_t drm_driver_legacy_fb_format(struct drm_device * dev, uint32_t bpp, uint32_t depth)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_fourcc.c' l='131' type='uint32_t drm_driver_legacy_fb_format(struct drm_device * , uint32_t , uint32_t )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_fourcc.c' l='131' c='drm_driver_legacy_fb_format'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_fourcc.c' l='131' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_fourcc.c' l='98'>/**
 * drm_driver_legacy_fb_format - compute drm fourcc code from legacy description
 * @dev: DRM device
 * @bpp: bits per pixels
 * @depth: bit depth per pixel
 *
 * Computes a drm fourcc pixel format code for the given @bpp/@depth values.
 * Unlike drm_mode_legacy_fb_format() this looks at the drivers mode_config,
 * and depending on the &amp;drm_mode_config.quirk_addfb_prefer_host_byte_order flag
 * it returns little endian byte order or host byte order framebuffer formats.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='125' u='c' c='drm_mode_addfb'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='358' u='c' c='drm_gem_fbdev_fb_create'/>
