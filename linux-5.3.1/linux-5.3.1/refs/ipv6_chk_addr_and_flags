<dec f='linux-5.3.1/include/net/addrconf.h' l='85' type='int ipv6_chk_addr_and_flags(struct net * net, const struct in6_addr * addr, const struct net_device * dev, bool skip_dev_check, int strict, u32 banned_flags)'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='1889' u='c' c='ipv6_chk_addr'/>
<def f='linux-5.3.1/net/ipv6/addrconf.c' l='1903' ll='1942' type='int ipv6_chk_addr_and_flags(struct net * net, const struct in6_addr * addr, const struct net_device * dev, bool skip_dev_check, int strict, u32 banned_flags)'/>
<dec f='linux-5.3.1/net/ipv6/addrconf.c' l='1943' type='int ipv6_chk_addr_and_flags(struct net * , const struct in6_addr * , const struct net_device * , bool , int , u32 )'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='1943' c='ipv6_chk_addr_and_flags'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='1943' u='a'/>
<doc f='linux-5.3.1/net/ipv6/addrconf.c' l='1894'>/* device argument is used to find the L3 domain of interest. If
 * skip_dev_check is set, then the ifp device is not checked against
 * the passed in dev argument. So the 2 cases for addresses checks are:
 *   1. does the address exist in the L3 domain that dev is part of
 *      (skip_dev_check = true), or
 *
 *   2. does the address exist on the specific device
 *      (skip_dev_check = false)
 */</doc>
<use f='linux-5.3.1/net/ipv6/anycast.c' l='83' u='c' c='ipv6_sock_ac_join'/>
<use f='linux-5.3.1/net/ipv6/datagram.c' l='808' u='c' c='ip6_datagram_send_ctl'/>
<use f='linux-5.3.1/net/ipv6/ndisc.c' l='722' u='c' c='ndisc_solicit'/>
<use f='linux-5.3.1/net/ipv6/route.c' l='3307' u='c' c='ip6_validate_gw'/>
<use f='linux-5.3.1/net/ipv6/route.c' l='3357' u='c' c='ip6_validate_gw'/>
