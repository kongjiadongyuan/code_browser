<def f='linux-5.3.1/arch/x86/include/asm/atomic64_64.h' l='20' ll='23' type='s64 arch_atomic64_read(const atomic64_t * v)'/>
<use f='linux-5.3.1/arch/x86/include/asm/atomic64_64.h' l='204' u='c' c='arch_atomic64_fetch_and'/>
<use f='linux-5.3.1/arch/x86/include/asm/atomic64_64.h' l='221' u='c' c='arch_atomic64_fetch_or'/>
<use f='linux-5.3.1/arch/x86/include/asm/atomic64_64.h' l='238' u='c' c='arch_atomic64_fetch_xor'/>
<use f='linux-5.3.1/include/asm-generic/atomic-instrumented.h' l='837' u='c' c='atomic64_read'/>
<doc f='linux-5.3.1/arch/x86/include/asm/atomic64_64.h' l='13'>/**
 * arch_atomic64_read - read atomic64 variable
 * @v: pointer of type atomic64_t
 *
 * Atomically reads the value of @v.
 * Doesn&apos;t imply a read memory barrier.
 */</doc>
<def f='linux-5.3.1/arch/x86/include/asm/atomic64_32.h' l='120' ll='125' type='s64 arch_atomic64_read(const atomic64_t * v)'/>
<doc f='linux-5.3.1/arch/x86/include/asm/atomic64_32.h' l='114'>/**
 * arch_atomic64_read - read atomic64 variable
 * @v: pointer to type atomic64_t
 *
 * Atomically reads the value of @v and returns it.
 */</doc>
