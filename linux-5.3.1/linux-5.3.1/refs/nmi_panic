<dec f='linux-5.3.1/include/linux/kernel.h' l='302' type='void nmi_panic(struct pt_regs * regs, const char * msg)'/>
<use f='linux-5.3.1/arch/x86/kernel/nmi.c' l='229' u='c' c='pci_serr_error'/>
<use f='linux-5.3.1/arch/x86/kernel/nmi.c' l='254' u='c' c='io_check_error'/>
<use f='linux-5.3.1/arch/x86/kernel/nmi.c' l='303' u='c' c='unknown_nmi_error'/>
<def f='linux-5.3.1/kernel/panic.c' l='123' ll='134' type='void nmi_panic(struct pt_regs * regs, const char * msg)'/>
<dec f='linux-5.3.1/kernel/panic.c' l='135' type='void nmi_panic(struct pt_regs * , const char * )'/>
<use f='linux-5.3.1/kernel/panic.c' l='135' c='nmi_panic'/>
<use f='linux-5.3.1/kernel/panic.c' l='135' u='a'/>
<doc f='linux-5.3.1/kernel/panic.c' l='117'>/*
 * A variant of panic() called from NMI context. We return if we&apos;ve already
 * panicked on this CPU. If another CPU already panicked, loop in
 * nmi_panic_self_stop() which can provide architecture dependent code such
 * as saving register state for crash dump.
 */</doc>
