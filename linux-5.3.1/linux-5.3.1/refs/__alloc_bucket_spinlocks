<dec f='linux-5.3.1/include/linux/spinlock.h' l='463' type='int __alloc_bucket_spinlocks(spinlock_t ** locks, unsigned int * lock_mask, size_t max_size, unsigned int cpu_mult, gfp_t gfp, const char * name, struct lock_class_key * key)'/>
<def f='linux-5.3.1/lib/bucket_locks.c' l='14' ll='47' type='int __alloc_bucket_spinlocks(spinlock_t ** locks, unsigned int * locks_mask, size_t max_size, unsigned int cpu_mult, gfp_t gfp, const char * name, struct lock_class_key * key)'/>
<dec f='linux-5.3.1/lib/bucket_locks.c' l='48' type='int __alloc_bucket_spinlocks(spinlock_t ** , unsigned int * , size_t , unsigned int , gfp_t , const char * , struct lock_class_key * )'/>
<use f='linux-5.3.1/lib/bucket_locks.c' l='48' c='__alloc_bucket_spinlocks'/>
<use f='linux-5.3.1/lib/bucket_locks.c' l='48' u='a'/>
<doc f='linux-5.3.1/lib/bucket_locks.c' l='7'>/* Allocate an array of spinlocks to be accessed by a hash. Two arguments
 * indicate the number of elements to allocate in the array. max_size
 * gives the maximum number of elements to allocate. cpu_mult gives
 * the number of locks per CPU to allocate. The size is rounded up
 * to a power of 2 to be suitable as a hash table.
 */</doc>
