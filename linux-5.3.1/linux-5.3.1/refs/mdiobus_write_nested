<dec f='linux-5.3.1/include/linux/mdio.h' l='312' type='int mdiobus_write_nested(struct mii_bus * bus, int addr, u32 regnum, u16 val)'/>
<def f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='661' ll='672' type='int mdiobus_write_nested(struct mii_bus * bus, int addr, u32 regnum, u16 val)'/>
<dec f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='673' type='int mdiobus_write_nested(struct mii_bus * , int , u32 , u16 )'/>
<use f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='673' c='mdiobus_write_nested'/>
<use f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='673' u='a'/>
<doc f='linux-5.3.1/drivers/net/phy/mdio_bus.c' l='647'>/**
 * mdiobus_write_nested - Nested version of the mdiobus_write function
 * @bus: the mii_bus struct
 * @addr: the phy address
 * @regnum: register number to write
 * @val: value to write to @regnum
 *
 * In case of nested MDIO bus access avoid lockdep false positives by
 * using mutex_lock_nested().
 *
 * NOTE: MUST NOT be called from interrupt context,
 * because the bus read/write functions may wait for an interrupt
 * to conclude the operation.
 */</doc>
