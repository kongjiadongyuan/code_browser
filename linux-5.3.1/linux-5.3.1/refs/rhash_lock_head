<def f='linux-5.3.1/include/linux/rhashtable.h' l='47'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='87'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='264' c='rht_bucket_nested'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='266' c='__rht_bucket_nested'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='268' c='rht_bucket_nested_insert'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='287' c='rht_bucket'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='294' c='rht_bucket_var'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='301' c='rht_bucket_insert'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='328' c='rht_lock'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='336' c='rht_lock_nested'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='345' c='rht_unlock'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='353' c='__rht_ptr'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='368' c='rht_ptr_rcu'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='376' c='rht_ptr'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='384' c='rht_ptr_exclusive'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='389' c='rht_assign_locked'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='400' c='rht_assign_unlock'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='596' c='__rhashtable_lookup'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='712' c='__rhashtable_insert_fast'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='998' c='__rhashtable_remove_fast_one'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='1150' c='__rhashtable_replace_fast'/>
<size>0</size>
<doc f='linux-5.3.1/include/linux/rhashtable.h' l='30'>/*
 * Objects in an rhashtable have an embedded struct rhash_head
 * which is linked into as hash chain from the hash table - or one
 * of two or more hash tables when the rhashtable is being resized.
 * The end of the chain is marked with a special nulls marks which has
 * the least significant bit set but otherwise stores the address of
 * the hash bucket.  This allows us to be be sure we&apos;ve found the end
 * of the right list.
 * The value stored in the hash bucket has BIT(0) used as a lock bit.
 * This bit must be atomically set before any changes are made to
 * the chain.  To avoid dereferencing this pointer without clearing
 * the bit first, we use an opaque &apos;struct rhash_lock_head *&apos; for the
 * pointer stored in the bucket.  This struct needs to be defined so
 * that rcu_dereference() works on it, but it has no content so a
 * cast is needed for it to be useful.  This ensures it isn&apos;t
 * used by mistake with clearing the lock bit first.
 */</doc>
<use f='linux-5.3.1/lib/rhashtable.c' l='34'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='216' c='rhashtable_rehash_one'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='269' c='rhashtable_rehash_chain'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='479' c='rhashtable_lookup_one'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='530' c='rhashtable_insert_one'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='585' c='rhashtable_try_insert'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='1167' c='__rht_bucket_nested'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='1196' c='rht_bucket_nested'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='1199' c='rht_bucket_nested'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='1207' c='rht_bucket_nested_insert'/>
<size>0</size>
