<dec f='linux-5.3.1/include/linux/mm.h' l='2566' type='vm_fault_t vmf_insert_pfn(struct vm_area_struct * vma, unsigned long addr, unsigned long pfn)'/>
<use f='linux-5.3.1/arch/x86/entry/vdso/vma.c' l='110' u='c' c='vvar_fault'/>
<use f='linux-5.3.1/arch/x86/entry/vdso/vma.c' l='124' u='c' c='vvar_fault'/>
<def f='linux-5.3.1/mm/memory.c' l='1695' ll='1699' type='vm_fault_t vmf_insert_pfn(struct vm_area_struct * vma, unsigned long addr, unsigned long pfn)'/>
<dec f='linux-5.3.1/mm/memory.c' l='1700' type='vm_fault_t vmf_insert_pfn(struct vm_area_struct * , unsigned long , unsigned long )'/>
<use f='linux-5.3.1/mm/memory.c' l='1700' c='vmf_insert_pfn'/>
<use f='linux-5.3.1/mm/memory.c' l='1700' u='a'/>
<doc f='linux-5.3.1/mm/memory.c' l='1675'>/**
 * vmf_insert_pfn - insert single pfn into user vma
 * @vma: user vma to map to
 * @addr: target user address of this page
 * @pfn: source kernel pfn
 *
 * Similar to vm_insert_page, this allows drivers to insert individual pages
 * they&apos;ve allocated into a user vma. Same comments apply.
 *
 * This function should only be called from a vm_ops-&gt;fault handler, and
 * in that case the handler should return the result of this function.
 *
 * vma cannot be a COW mapping.
 *
 * As this is called only for pages that do not currently exist, we
 * do not need to flush old virtual caches or the TLB.
 *
 * Context: Process context.  May allocate using %GFP_KERNEL.
 * Return: vm_fault_t value.
 */</doc>
