<def f='linux-5.3.1/include/linux/dmaengine.h' l='414' ll='424'/>
<use f='linux-5.3.1/include/linux/dmaengine.h' l='1313' c='dma_get_slave_caps'/>
<use f='linux-5.3.1/include/linux/dmaengine.h' l='1366' c='dmaengine_desc_set_reuse'/>
<size>28</size>
<doc f='linux-5.3.1/include/linux/dmaengine.h' l='395'>/**
 * struct dma_slave_caps - expose capabilities of a slave channel only
 * @src_addr_widths: bit mask of src addr widths the channel supports.
 *	Width is specified in bytes, e.g. for a channel supporting
 *	a width of 4 the mask should have BIT(4) set.
 * @dst_addr_widths: bit mask of dst addr widths the channel supports
 * @directions: bit mask of slave directions the channel supports.
 *	Since the enum dma_transfer_direction is not defined as bit flag for
 *	each type, the dma controller should set BIT(&lt;TYPE&gt;) and same
 *	should be checked by controller as well
 * @max_burst: max burst capability per-transfer
 * @cmd_pause: true, if pause is supported (i.e. for reading residue or
 *	       for resume later)
 * @cmd_resume: true, if resume is supported
 * @cmd_terminate: true, if terminate cmd is supported
 * @residue_granularity: granularity of the reported transfer residue
 * @descriptor_reuse: if a descriptor can be reused by client and
 * resubmitted multiple times
 */</doc>
<mbr r='dma_slave_caps::src_addr_widths' o='0' t='u32'/>
<mbr r='dma_slave_caps::dst_addr_widths' o='32' t='u32'/>
<mbr r='dma_slave_caps::directions' o='64' t='u32'/>
<mbr r='dma_slave_caps::max_burst' o='96' t='u32'/>
<mbr r='dma_slave_caps::cmd_pause' o='128' t='bool'/>
<mbr r='dma_slave_caps::cmd_resume' o='136' t='bool'/>
<mbr r='dma_slave_caps::cmd_terminate' o='144' t='bool'/>
<mbr r='dma_slave_caps::residue_granularity' o='160' t='enum dma_residue_granularity'/>
<mbr r='dma_slave_caps::descriptor_reuse' o='192' t='bool'/>
<use f='linux-5.3.1/drivers/dma/dmaengine.c' l='463' c='dma_get_slave_caps'/>
<size>28</size>
<use f='linux-5.3.1/drivers/tty/serial/8250/8250_dma.c' l='154' c='serial8250_request_dma'/>
<size>28</size>
