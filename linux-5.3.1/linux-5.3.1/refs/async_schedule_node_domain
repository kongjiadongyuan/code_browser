<dec f='linux-5.3.1/include/linux/async.h' l='40' type='async_cookie_t async_schedule_node_domain(async_func_t func, void * data, int node, struct async_domain * domain)'/>
<use f='linux-5.3.1/include/linux/async.h' l='72' u='c' c='async_schedule_domain'/>
<use f='linux-5.3.1/include/linux/async.h' l='112' u='c' c='async_schedule_dev_domain'/>
<def f='linux-5.3.1/kernel/async.c' l='165' ll='215' type='async_cookie_t async_schedule_node_domain(async_func_t func, void * data, int node, struct async_domain * domain)'/>
<dec f='linux-5.3.1/kernel/async.c' l='216' type='async_cookie_t async_schedule_node_domain(async_func_t , void * , int , struct async_domain * )'/>
<use f='linux-5.3.1/kernel/async.c' l='216' c='async_schedule_node_domain'/>
<use f='linux-5.3.1/kernel/async.c' l='216' u='a'/>
<use f='linux-5.3.1/kernel/async.c' l='233' u='c' c='async_schedule_node'/>
<doc f='linux-5.3.1/kernel/async.c' l='148'>/**
 * async_schedule_node_domain - NUMA specific version of async_schedule_domain
 * @func: function to execute asynchronously
 * @data: data pointer to pass to the function
 * @node: NUMA node that we want to schedule this on or close to
 * @domain: the domain
 *
 * Returns an async_cookie_t that may be used for checkpointing later.
 * @domain may be used in the async_synchronize_*_domain() functions to
 * wait within a certain synchronization domain rather than globally.
 *
 * Note: This function may be called from atomic or non-atomic contexts.
 *
 * The node requested will be honored on a best effort basis. If the node
 * has no CPUs associated with it then the work is distributed among all
 * available CPUs.
 */</doc>
