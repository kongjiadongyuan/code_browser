<dec f='linux-5.3.1/include/drm/drm_dp_mst_helper.h' l='658' type='int drm_dp_mst_atomic_check(struct drm_atomic_state * state)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3761' ll='3774' type='int drm_dp_mst_atomic_check(struct drm_atomic_state * state)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3775' type='int drm_dp_mst_atomic_check(struct drm_atomic_state * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3775' c='drm_dp_mst_atomic_check'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3775' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='3740'>/**
 * drm_dp_mst_atomic_check - Check that the new state of an MST topology in an
 * atomic update is valid
 * @state: Pointer to the new &amp;struct drm_dp_mst_topology_state
 *
 * Checks the given topology state for an atomic update to ensure that it&apos;s
 * valid. This includes checking whether there&apos;s enough bandwidth to support
 * the new VCPI allocations in the atomic update.
 *
 * Any atomic drivers supporting DP MST must make sure to call this after
 * checking the rest of their state in their
 * &amp;drm_mode_config_funcs.atomic_check() callback.
 *
 * See also:
 * drm_dp_atomic_find_vcpi_slots()
 * drm_dp_atomic_release_vcpi_slots()
 *
 * Returns:
 *
 * 0 if the new state is valid, negative error code otherwise.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='13499' u='c' c='intel_atomic_check'/>
