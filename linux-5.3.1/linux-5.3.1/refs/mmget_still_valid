<def f='linux-5.3.1/include/linux/sched/mm.h' l='72' ll='75' type='bool mmget_still_valid(struct mm_struct * mm)'/>
<doc f='linux-5.3.1/include/linux/sched/mm.h' l='52'>/*
 * This has to be called after a get_task_mm()/mmget_not_zero()
 * followed by taking the mmap_sem for writing before modifying the
 * vmas or anything the coredump pretends not to change from under it.
 *
 * It also has to be called when mmgrab() is used in the context of
 * the process, but then the mm_count refcount is transferred outside
 * the context of the process to run down_write() on that pinned mm.
 *
 * NOTE: find_extend_vma() called from GUP context is the only place
 * that can modify the &quot;mm&quot; (notably the vm_start/end) under mmap_sem
 * for reading and outside the context of the process, so it is also
 * the only case that holds the mmap_sem for reading that must call
 * this function. Generally if the mmap_sem is hold for reading
 * there&apos;s no need of this check after get_task_mm()/mmget_not_zero().
 *
 * This function can be obsoleted and the check can be removed, after
 * the coredump code will hold the mmap_sem for writing before
 * invoking the -&gt;core_dump methods.
 */</doc>
<use f='linux-5.3.1/fs/proc/task_mmu.c' l='1195' u='c' c='clear_refs_write'/>
<use f='linux-5.3.1/mm/mmap.c' l='2558' u='c' c='find_extend_vma'/>
