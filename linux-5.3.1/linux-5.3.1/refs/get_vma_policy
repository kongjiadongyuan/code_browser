<dec f='linux-5.3.1/include/linux/mempolicy.h' l='142' type='struct mempolicy * get_vma_policy(struct vm_area_struct * vma, unsigned long addr)'/>
<def f='linux-5.3.1/mm/mempolicy.c' l='1737' ll='1746' type='struct mempolicy * get_vma_policy(struct vm_area_struct * vma, unsigned long addr)'/>
<use f='linux-5.3.1/mm/mempolicy.c' l='1945' u='c' c='huge_node'/>
<use f='linux-5.3.1/mm/mempolicy.c' l='2103' u='c' c='alloc_pages_vma'/>
<use f='linux-5.3.1/mm/mempolicy.c' l='2357' u='c' c='mpol_misplaced'/>
<doc f='linux-5.3.1/mm/mempolicy.c' l='1725'>/*
 * get_vma_policy(@vma, @addr)
 * @vma: virtual memory area whose policy is sought
 * @addr: address in @vma for shared policy lookup
 *
 * Returns effective policy for a VMA at specified address.
 * Falls back to current-&gt;mempolicy or system default policy, as necessary.
 * Shared policies [those marked as MPOL_F_SHARED] require an extra reference
 * count--added by the get_policy() vm_op, as appropriate--to protect against
 * freeing by another task.  It is the caller&apos;s responsibility to free the
 * extra reference for shared policies.
 */</doc>
