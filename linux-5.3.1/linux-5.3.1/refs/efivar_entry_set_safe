<dec f='linux-5.3.1/include/linux/efi.h' l='1510' type='int efivar_entry_set_safe(efi_char16_t * name, efi_guid_t vendor, u32 attributes, bool block, unsigned long size, void * data)'/>
<def f='linux-5.3.1/drivers/firmware/efi/vars.c' l='748' ll='794' type='int efivar_entry_set_safe(efi_char16_t * name, efi_guid_t vendor, u32 attributes, bool block, unsigned long size, void * data)'/>
<dec f='linux-5.3.1/drivers/firmware/efi/vars.c' l='795' type='int efivar_entry_set_safe(efi_char16_t * , efi_guid_t , u32 , bool , unsigned long , void * )'/>
<use f='linux-5.3.1/drivers/firmware/efi/vars.c' l='795' c='efivar_entry_set_safe'/>
<use f='linux-5.3.1/drivers/firmware/efi/vars.c' l='795' u='a'/>
<doc f='linux-5.3.1/drivers/firmware/efi/vars.c' l='731'>/**
 * efivar_entry_set_safe - call set_variable() if enough space in firmware
 * @name: buffer containing the variable name
 * @vendor: variable vendor guid
 * @attributes: variable attributes
 * @block: can we block in this context?
 * @size: size of @data buffer
 * @data: buffer containing variable data
 *
 * Ensures there is enough free storage in the firmware for this variable, and
 * if so, calls set_variable(). If creating a new EFI variable, this function
 * is usually followed by efivar_entry_add().
 *
 * Returns 0 on success, -ENOSPC if the firmware does not have enough
 * space for set_variable() to succeed, or a converted EFI status code
 * if set_variable() fails.
 */</doc>
