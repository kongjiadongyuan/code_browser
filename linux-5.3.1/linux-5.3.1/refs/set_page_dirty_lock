<dec f='linux-5.3.1/include/linux/mm.h' l='1628' type='int set_page_dirty_lock(struct page * page)'/>
<use f='linux-5.3.1/block/bio.c' l='846' u='c' c='bio_release_pages'/>
<use f='linux-5.3.1/block/bio.c' l='1650' u='c' c='bio_set_pages_dirty'/>
<use f='linux-5.3.1/mm/gup.c' l='110' u='r' c='put_user_pages_dirty_lock'/>
<use f='linux-5.3.1/mm/memory.c' l='4334' u='c' c='__access_remote_vm'/>
<def f='linux-5.3.1/mm/page-writeback.c' l='2588' ll='2596' type='int set_page_dirty_lock(struct page * page)'/>
<dec f='linux-5.3.1/mm/page-writeback.c' l='2597' type='int set_page_dirty_lock(struct page * )'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2597' c='set_page_dirty_lock'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2597' u='a'/>
<doc f='linux-5.3.1/mm/page-writeback.c' l='2578'>/*
 * set_page_dirty() is racy if the caller has no reference against
 * page-&gt;mapping-&gt;host, and if the page is unlocked.  This is because another
 * CPU could truncate the page off the mapping and then free the mapping.
 *
 * Usually, the page _is_ locked, or the caller is a user-space process which
 * holds a reference on the inode by having an open file.
 *
 * In other cases, the page should be locked before running set_page_dirty().
 */</doc>
<use f='linux-5.3.1/mm/process_vm_access.c' l='47' u='c' c='process_vm_rw_pages'/>
