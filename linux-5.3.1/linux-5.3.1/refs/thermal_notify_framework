<dec f='linux-5.3.1/include/linux/thermal.h' l='465' type='void thermal_notify_framework(struct thermal_zone_device * , int )'/>
<def f='linux-5.3.1/drivers/thermal/thermal_core.c' l='508' ll='511' type='void thermal_notify_framework(struct thermal_zone_device * tz, int trip)'/>
<dec f='linux-5.3.1/drivers/thermal/thermal_core.c' l='512' type='void thermal_notify_framework(struct thermal_zone_device * , int )'/>
<use f='linux-5.3.1/drivers/thermal/thermal_core.c' l='512' c='thermal_notify_framework'/>
<use f='linux-5.3.1/drivers/thermal/thermal_core.c' l='512' u='a'/>
<doc f='linux-5.3.1/drivers/thermal/thermal_core.c' l='496'>/**
 * thermal_notify_framework - Sensor drivers use this API to notify framework
 * @tz:		thermal zone device
 * @trip:	indicates which trip point has been crossed
 *
 * This function handles the trip events from sensor drivers. It starts
 * throttling the cooling devices according to the policy configured.
 * For CRITICAL and HOT trip points, this notifies the respective drivers,
 * and does actual throttling for other trip points i.e ACTIVE and PASSIVE.
 * The throttling policy is based on the configured platform data; if no
 * platform data is provided, this uses the step_wise throttling policy.
 */</doc>
