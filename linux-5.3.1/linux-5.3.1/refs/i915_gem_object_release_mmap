<dec f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_object.h' l='348' type='void i915_gem_object_release_mmap(struct drm_i915_gem_object * obj)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_domain.c' l='244' u='c' c='i915_gem_object_set_cache_level'/>
<def f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_mman.c' l='400' ll='432' type='void i915_gem_object_release_mmap(struct drm_i915_gem_object * obj)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_mman.c' l='386'>/**
 * i915_gem_object_release_mmap - remove physical page mappings
 * @obj: obj in question
 *
 * Preserve the reservation of the mmapping with the DRM core code, but
 * relinquish ownership of the pages back to the system.
 *
 * It is vital that we remove the page mapping if we have mapped a tiled
 * object through the GTT and then lose the fence register due to
 * resource pressure. Similarly if the object has been moved out of the
 * aperture, than pages mapped into userspace must be revoked. Removing the
 * mapping will then trigger a page fault on the next user access, allowing
 * fixup by i915_gem_fault().
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_tiling.c' l='282' u='c' c='i915_gem_object_set_tiling'/>
