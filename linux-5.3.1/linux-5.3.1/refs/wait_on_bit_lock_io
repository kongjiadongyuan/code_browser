<def f='linux-5.3.1/include/linux/wait_bit.h' l='202' ll='209' type='int wait_on_bit_lock_io(unsigned long * word, int bit, unsigned int mode)'/>
<doc f='linux-5.3.1/include/linux/wait_bit.h' l='187'>/**
 * wait_on_bit_lock_io - wait for a bit to be cleared, when wanting to set it
 * @word: the word being waited on, a kernel virtual address
 * @bit: the bit of the word being waited on
 * @mode: the task state to sleep in
 *
 * Use the standard hashed waitqueue table to wait for a bit
 * to be cleared and then to atomically set it.  This is similar
 * to wait_on_bit(), but calls io_schedule() instead of schedule()
 * for the actual waiting.
 *
 * Returns zero if the bit was (eventually) found to be clear and was
 * set.  Returns non-zero if a signal was delivered to the process and
 * the @mode allows that signal to wake the process.
 */</doc>
<use f='linux-5.3.1/fs/buffer.c' l='66' u='c' c='__lock_buffer'/>
