<dec f='linux-5.3.1/drivers/gpu/drm/i915/intel_uncore.h' l='217' type='int __intel_wait_for_register(struct intel_uncore * uncore, i915_reg_t reg, u32 mask, u32 value, unsigned int fast_timeout_us, unsigned int slow_timeout_ms, u32 * out_value)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/intel_uncore.h' l='231' u='c' c='intel_wait_for_register'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_hdcp.c' l='229' u='c' c='intel_hdcp_load_keys'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_psr.c' l='966' u='c' c='intel_psr_wait_for_idle'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/intel_guc.c' l='565' u='c' c='intel_guc_suspend'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/intel_huc.c' l='138' u='c' c='intel_huc_auth'/>
<def f='linux-5.3.1/drivers/gpu/drm/i915/intel_uncore.c' l='1802' ll='1840' type='int __intel_wait_for_register(struct intel_uncore * uncore, i915_reg_t reg, u32 mask, u32 value, unsigned int fast_timeout_us, unsigned int slow_timeout_ms, u32 * out_value)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/intel_uncore.c' l='1783'>/**
 * __intel_wait_for_register - wait until register matches expected state
 * @uncore: the struct intel_uncore
 * @reg: the register to read
 * @mask: mask to apply to register value
 * @value: expected value
 * @fast_timeout_us: fast timeout in microsecond for atomic/tight wait
 * @slow_timeout_ms: slow timeout in millisecond
 * @out_value: optional placeholder to hold registry value
 *
 * This routine waits until the target register @reg contains the expected
 * @value after applying the @mask, i.e. it waits until ::
 *
 *     (I915_READ(reg) &amp; mask) == value
 *
 * Otherwise, the wait will timeout after @timeout_ms milliseconds.
 *
 * Returns 0 if the register matches the desired condition, or -ETIMEOUT.
 */</doc>
