<dec f='linux-5.3.1/include/linux/fs.h' l='3544' type='int vfs_ioc_setflags_prepare(struct inode * inode, unsigned int oldflags, unsigned int flags)'/>
<use f='linux-5.3.1/fs/efivarfs/file.c' l='160' u='c' c='efivarfs_ioc_setxflags'/>
<use f='linux-5.3.1/fs/ext4/ioctl.c' l='315' u='c' c='ext4_ioctl_setflags'/>
<def f='linux-5.3.1/fs/inode.c' l='2201' ll='2215' type='int vfs_ioc_setflags_prepare(struct inode * inode, unsigned int oldflags, unsigned int flags)'/>
<dec f='linux-5.3.1/fs/inode.c' l='2216' type='int vfs_ioc_setflags_prepare(struct inode * , unsigned int , unsigned int )'/>
<use f='linux-5.3.1/fs/inode.c' l='2216' c='vfs_ioc_setflags_prepare'/>
<use f='linux-5.3.1/fs/inode.c' l='2216' u='a'/>
<doc f='linux-5.3.1/fs/inode.c' l='2194'>/*
 * Generic function to check FS_IOC_SETFLAGS values and reject any invalid
 * configurations.
 *
 * Note: the caller should be holding i_mutex, or else be sure that they have
 * exclusive access to the inode structure.
 */</doc>
