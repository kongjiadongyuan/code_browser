<dec f='linux-5.3.1/include/net/tcp.h' l='1114' type='void tcp_rate_skb_delivered(struct sock * sk, struct sk_buff * skb, struct rate_sample * rs)'/>
<use f='linux-5.3.1/net/ipv4/tcp_input.c' l='1300' u='c' c='tcp_shifted_skb'/>
<use f='linux-5.3.1/net/ipv4/tcp_input.c' l='1589' u='c' c='tcp_sacktag_walk'/>
<use f='linux-5.3.1/net/ipv4/tcp_input.c' l='3137' u='c' c='tcp_clean_rtx_queue'/>
<def f='linux-5.3.1/net/ipv4/tcp_rate.c' l='78' ll='107' type='void tcp_rate_skb_delivered(struct sock * sk, struct sk_buff * skb, struct rate_sample * rs)'/>
<doc f='linux-5.3.1/net/ipv4/tcp_rate.c' l='71'>/* When an skb is sacked or acked, we fill in the rate sample with the (prior)
 * delivery information when the skb was last transmitted.
 *
 * If an ACK (s)acks multiple skbs (e.g., stretched-acks), this function is
 * called multiple times. We favor the information from the most recently
 * sent skb, i.e., the skb with the highest prior_delivered count.
 */</doc>
