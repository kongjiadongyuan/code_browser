<dec f='linux-5.3.1/include/linux/key-type.h' l='174' type='int key_reject_and_link(struct key * key, unsigned int timeout, unsigned int error, struct key * keyring, struct key * authkey)'/>
<use f='linux-5.3.1/include/linux/key-type.h' l='186' u='c' c='key_negate_and_link'/>
<def f='linux-5.3.1/security/keys/key.c' l='569' ll='630' type='int key_reject_and_link(struct key * key, unsigned int timeout, unsigned int error, struct key * keyring, struct key * authkey)'/>
<dec f='linux-5.3.1/security/keys/key.c' l='631' type='int key_reject_and_link(struct key * , unsigned int , unsigned int , struct key * , struct key * )'/>
<use f='linux-5.3.1/security/keys/key.c' l='631' c='key_reject_and_link'/>
<use f='linux-5.3.1/security/keys/key.c' l='631' u='a'/>
<doc f='linux-5.3.1/security/keys/key.c' l='548'>/**
 * key_reject_and_link - Negatively instantiate a key and link it into the keyring.
 * @key: The key to instantiate.
 * @timeout: The timeout on the negative key.
 * @error: The error to return when the key is hit.
 * @keyring: Keyring to create a link in on success (or NULL).
 * @authkey: The authorisation token permitting instantiation.
 *
 * Negatively instantiate a key that&apos;s in the uninstantiated state and, if
 * successful, set its timeout and stored error and link it in to the
 * destination keyring if one is supplied.  The key and any links to the key
 * will be automatically garbage collected after the timeout expires.
 *
 * Negative keys are used to rate limit repeated request_key() calls by causing
 * them to return the stored error code (typically ENOKEY) until the negative
 * key expires.
 *
 * If successful, 0 is returned, the authorisation token is revoked and anyone
 * waiting for the key is woken up.  If the key was already instantiated,
 * -EBUSY will be returned.
 */</doc>
<use f='linux-5.3.1/security/keys/keyctl.c' l='1299' u='c' c='keyctl_reject_key'/>
