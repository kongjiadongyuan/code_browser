<dec f='linux-5.3.1/include/linux/workqueue.h' l='446' type='bool mod_delayed_work_on(int cpu, struct workqueue_struct * wq, struct delayed_work * dwork, unsigned long delay)'/>
<use f='linux-5.3.1/include/linux/workqueue.h' l='520' u='c' c='mod_delayed_work'/>
<use f='linux-5.3.1/block/blk-core.c' l='1631' u='c' c='kblockd_mod_delayed_work_on'/>
<def f='linux-5.3.1/kernel/workqueue.c' l='1701' ll='1718' type='bool mod_delayed_work_on(int cpu, struct workqueue_struct * wq, struct delayed_work * dwork, unsigned long delay)'/>
<dec f='linux-5.3.1/kernel/workqueue.c' l='1719' type='bool mod_delayed_work_on(int , struct workqueue_struct * , struct delayed_work * , unsigned long )'/>
<use f='linux-5.3.1/kernel/workqueue.c' l='1719' c='mod_delayed_work_on'/>
<use f='linux-5.3.1/kernel/workqueue.c' l='1719' u='a'/>
<doc f='linux-5.3.1/kernel/workqueue.c' l='1683'>/**
 * mod_delayed_work_on - modify delay of or queue a delayed work on specific CPU
 * @cpu: CPU number to execute work on
 * @wq: workqueue to use
 * @dwork: work to queue
 * @delay: number of jiffies to wait before queueing
 *
 * If @dwork is idle, equivalent to queue_delayed_work_on(); otherwise,
 * modify @dwork&apos;s timer so that it expires after @delay.  If @delay is
 * zero, @work is guaranteed to be scheduled immediately regardless of its
 * current state.
 *
 * Return: %false if @dwork was idle and queued, %true if @dwork was
 * pending and its timer was modified.
 *
 * This function is safe to call from any context including IRQ handler.
 * See try_to_grab_pending() for details.
 */</doc>
