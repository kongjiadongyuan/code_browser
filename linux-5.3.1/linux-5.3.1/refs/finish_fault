<dec f='linux-5.3.1/include/linux/mm.h' l='826' type='vm_fault_t finish_fault(struct vm_fault * vmf)'/>
<def f='linux-5.3.1/mm/memory.c' l='3324' ll='3347' type='vm_fault_t finish_fault(struct vm_fault * vmf)'/>
<use f='linux-5.3.1/mm/memory.c' l='3484' u='c' c='do_read_fault'/>
<use f='linux-5.3.1/mm/memory.c' l='3518' u='c' c='do_cow_fault'/>
<use f='linux-5.3.1/mm/memory.c' l='3553' u='c' c='do_shared_fault'/>
<doc f='linux-5.3.1/mm/memory.c' l='3309'>/**
 * finish_fault - finish page fault once we have prepared the page to fault
 *
 * @vmf: structure describing the fault
 *
 * This function handles all that is needed to finish a page fault once the
 * page to fault in is prepared. It handles locking of PTEs, inserts PTE for
 * given page, adds reverse page mapping, handles memcg charges and LRU
 * addition.
 *
 * The function expects the page to be locked and on success it consumes a
 * reference of a page being mapped (for the PTE which maps it).
 *
 * Return: %0 on success, %VM_FAULT_ code in case of error.
 */</doc>
