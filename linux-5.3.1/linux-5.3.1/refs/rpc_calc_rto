<dec f='linux-5.3.1/include/linux/sunrpc/timer.h' l='25' type='unsigned long rpc_calc_rto(struct rpc_rtt * rt, unsigned int timer)'/>
<def f='linux-5.3.1/net/sunrpc/timer.c' l='110' ll='122' type='unsigned long rpc_calc_rto(struct rpc_rtt * rt, unsigned int timer)'/>
<dec f='linux-5.3.1/net/sunrpc/timer.c' l='123' type='unsigned long rpc_calc_rto(struct rpc_rtt * , unsigned int )'/>
<use f='linux-5.3.1/net/sunrpc/timer.c' l='123' c='rpc_calc_rto'/>
<use f='linux-5.3.1/net/sunrpc/timer.c' l='123' u='a'/>
<doc f='linux-5.3.1/net/sunrpc/timer.c' l='92'>/**
 * rpc_calc_rto - Provide an estimated timeout value
 * @rt: context to use for calculation
 * @timer: timer array index (request type)
 *
 * Estimate RTO for an NFS RPC sent via an unreliable datagram.  Use
 * the mean and mean deviation of RTT for the appropriate type of RPC
 * for frequently issued RPCs, and a fixed default for the others.
 *
 * The justification for doing &quot;other&quot; this way is that these RPCs
 * happen so infrequently that timer estimation would probably be
 * stale.  Also, since many of these RPCs are non-idempotent, a
 * conservative timeout is desired.
 *
 * getattr, lookup,
 * read, write, commit     - A+4D
 * other                   - timeo
 */</doc>
<use f='linux-5.3.1/net/sunrpc/xprt.c' l='1175' u='c' c='xprt_wait_for_reply_request_rtt'/>
