<dec f='linux-5.3.1/include/linux/netdevice.h' l='3618' type='int netif_receive_skb(struct sk_buff * skb)'/>
<use f='linux-5.3.1/include/net/sch_generic.h' l='1316' u='c' c='skb_tc_reinsert'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e100.c' l='2043' u='c' c='e100_rx_indicate'/>
<use f='linux-5.3.1/drivers/net/ethernet/marvell/sky2.c' l='2633' u='c' c='sky2_skb_rx'/>
<use f='linux-5.3.1/drivers/net/ethernet/realtek/8139too.c' l='2055' u='c' c='rtl8139_rx'/>
<def f='linux-5.3.1/net/core/dev.c' l='5265' ll='5275' type='int netif_receive_skb(struct sk_buff * skb)'/>
<dec f='linux-5.3.1/net/core/dev.c' l='5276' type='int netif_receive_skb(struct sk_buff * )'/>
<use f='linux-5.3.1/net/core/dev.c' l='5276' c='netif_receive_skb'/>
<use f='linux-5.3.1/net/core/dev.c' l='5276' u='a'/>
<doc f='linux-5.3.1/net/core/dev.c' l='5250'>/**
 *	netif_receive_skb - process receive buffer from network
 *	@skb: buffer to process
 *
 *	netif_receive_skb() is the main receive data processing function.
 *	It always succeeds. The buffer may be dropped during processing
 *	for congestion control or by the protocol layers.
 *
 *	This function may only be called from softirq context and interrupts
 *	should be enabled.
 *
 *	Return values (usually ignored):
 *	NET_RX_SUCCESS: no congestion
 *	NET_RX_DROP: packet was dropped
 */</doc>
<use f='linux-5.3.1/net/mac80211/rx.c' l='858' u='c' c='ieee80211_rx_monitor'/>
<use f='linux-5.3.1/net/mac80211/rx.c' l='2461' u='c' c='ieee80211_deliver_skb_to_local_stack'/>
<use f='linux-5.3.1/net/mac80211/rx.c' l='3553' u='c' c='ieee80211_rx_cooked_monitor'/>
<use f='linux-5.3.1/net/mac80211/rx.c' l='3563' u='c' c='ieee80211_rx_cooked_monitor'/>
<use f='linux-5.3.1/net/mac80211/rx.c' l='4324' u='c' c='ieee80211_invoke_fast_rx'/>
