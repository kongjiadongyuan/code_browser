<def f='linux-5.3.1/block/blk-mq.h' l='254' ll='266' type='struct blk_plug * blk_mq_plug(struct request_queue * q, struct bio * bio)'/>
<doc f='linux-5.3.1/block/blk-mq.h' l='236'>/*
 * blk_mq_plug() - Get caller context plug
 * @q: request queue
 * @bio : the bio being submitted by the caller context
 *
 * Plugging, by design, may delay the insertion of BIOs into the elevator in
 * order to increase BIO merging opportunities. This however can cause BIO
 * insertion order to change from the order in which submit_bio() is being
 * executed in the case of multiple contexts concurrently issuing BIOs to a
 * device, even if these context are synchronized to tightly control BIO issuing
 * order. While this is not a problem with regular block devices, this ordering
 * change can cause write BIO failures with zoned block devices as these
 * require sequential write patterns to zones. Prevent this from happening by
 * ignoring the plug state of a BIO issuing context if the target request queue
 * is for a zoned block device and the BIO to plug is a write operation.
 *
 * Return current-&gt;plug if the bio can be plugged and NULL otherwise
 */</doc>
<use f='linux-5.3.1/block/blk-core.c' l='691' u='c' c='blk_attempt_plug_merge'/>
<use f='linux-5.3.1/block/blk-mq.c' l='1974' u='c' c='blk_mq_make_request'/>
