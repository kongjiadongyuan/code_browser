<dec f='linux-5.3.1/include/linux/dma-buf.h' l='397' type='struct dma_buf_attachment * dma_buf_attach(struct dma_buf * dmabuf, struct device * dev)'/>
<def f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='665' ll='698' type='struct dma_buf_attachment * dma_buf_attach(struct dma_buf * dmabuf, struct device * dev)'/>
<dec f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='699' type='struct dma_buf_attachment * dma_buf_attach(struct dma_buf * , struct device * )'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='699' c='dma_buf_attach'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='699' u='a'/>
<doc f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='647'>/**
 * dma_buf_attach - Add the device to dma_buf&apos;s attachments list; optionally,
 * calls attach() of dma_buf_ops to allow device-specific attach functionality
 * @dmabuf:	[in]	buffer to attach device to.
 * @dev:	[in]	device to be attached.
 *
 * Returns struct dma_buf_attachment pointer for this attachment. Attachments
 * must be cleaned up by calling dma_buf_detach().
 *
 * Returns:
 *
 * A pointer to newly created &amp;dma_buf_attachment on success, or a negative
 * error code wrapped into a pointer on failure.
 *
 * Note that this can fail if the backing storage of @dmabuf is in a place not
 * accessible to @dev, and cannot be moved to a more suitable place. This is
 * indicated with the error code -EBUSY.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_prime.c' l='693' u='c' c='drm_gem_prime_import_dev'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_dmabuf.c' l='278' u='c' c='i915_gem_prime_import'/>
