<dec f='linux-5.3.1/include/linux/pm_wakeup.h' l='100' type='void pm_wakeup_ws_event(struct wakeup_source * ws, unsigned int msec, bool hard)'/>
<use f='linux-5.3.1/include/linux/pm_wakeup.h' l='193' u='c' c='__pm_wakeup_event'/>
<use f='linux-5.3.1/drivers/acpi/device_pm.c' l='456' u='c' c='acpi_pm_notify_handler'/>
<def f='linux-5.3.1/drivers/base/power/wakeup.c' l='744' ll='772' type='void pm_wakeup_ws_event(struct wakeup_source * ws, unsigned int msec, bool hard)'/>
<dec f='linux-5.3.1/drivers/base/power/wakeup.c' l='773' type='void pm_wakeup_ws_event(struct wakeup_source * , unsigned int , bool )'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='773' c='pm_wakeup_ws_event'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='773' u='a'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='791' u='c' c='pm_wakeup_dev_event'/>
<doc f='linux-5.3.1/drivers/base/power/wakeup.c' l='731'>/**
 * pm_wakeup_ws_event - Notify the PM core of a wakeup event.
 * @ws: Wakeup source object associated with the event source.
 * @msec: Anticipated event processing time (in milliseconds).
 * @hard: If set, abort suspends in progress and wake up from suspend-to-idle.
 *
 * Notify the PM core of a wakeup event whose source is @ws that will take
 * approximately @msec milliseconds to be processed by the kernel.  If @ws is
 * not active, activate it.  If @msec is nonzero, set up the @ws&apos; timer to
 * execute pm_wakeup_timer_fn() in future.
 *
 * It is safe to call this function from interrupt context.
 */</doc>
