<dec f='linux-5.3.1/include/linux/interrupt.h' l='160' type='int request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags, const char * name, void * dev)'/>
<def f='linux-5.3.1/kernel/irq/manage.c' l='2128' ll='2195' type='int request_nmi(unsigned int irq, irq_handler_t handler, unsigned long irqflags, const char * name, void * dev_id)'/>
<doc f='linux-5.3.1/kernel/irq/manage.c' l='2102'>/**
 *	request_nmi - allocate an interrupt line for NMI delivery
 *	@irq: Interrupt line to allocate
 *	@handler: Function to be called when the IRQ occurs.
 *		  Threaded handler for threaded interrupts.
 *	@irqflags: Interrupt type flags
 *	@name: An ascii name for the claiming device
 *	@dev_id: A cookie passed back to the handler function
 *
 *	This call allocates interrupt resources and enables the
 *	interrupt line and IRQ handling. It sets up the IRQ line
 *	to be handled as an NMI.
 *
 *	An interrupt line delivering NMIs cannot be shared and IRQ handling
 *	cannot be threaded.
 *
 *	Interrupt lines requested for NMI delivering must produce per cpu
 *	interrupts and have auto enabling setting disabled.
 *
 *	Dev_id must be globally unique. Normally the address of the
 *	device data structure is used as the cookie. Since the handler
 *	receives this value it makes sense to use it.
 *
 *	If the interrupt line cannot be used to deliver NMIs, function
 *	will fail and return a negative value.
 */</doc>
