<dec f='linux-5.3.1/include/linux/gfp.h' l='529' type='void * alloc_pages_exact(size_t size, gfp_t gfp_mask)'/>
<use f='linux-5.3.1/kernel/crash_core.c' l='387' u='c' c='crash_save_vmcoreinfo_init'/>
<use f='linux-5.3.1/kernel/profile.c' l='122' u='c' c='profile_init'/>
<def f='linux-5.3.1/mm/page_alloc.c' l='4934' ll='4944' type='void * alloc_pages_exact(size_t size, gfp_t gfp_mask)'/>
<dec f='linux-5.3.1/mm/page_alloc.c' l='4945' type='void * alloc_pages_exact(size_t , gfp_t )'/>
<use f='linux-5.3.1/mm/page_alloc.c' l='4945' c='alloc_pages_exact'/>
<use f='linux-5.3.1/mm/page_alloc.c' l='4945' u='a'/>
<use f='linux-5.3.1/mm/page_alloc.c' l='8110' u='c' c='alloc_large_system_hash'/>
<doc f='linux-5.3.1/mm/page_alloc.c' l='4919'>/**
 * alloc_pages_exact - allocate an exact number physically-contiguous pages.
 * @size: the number of bytes to allocate
 * @gfp_mask: GFP flags for the allocation, must not contain __GFP_COMP
 *
 * This function is similar to alloc_pages(), except that it allocates the
 * minimum number of pages to satisfy the request.  alloc_pages() can only
 * allocate memory in power-of-two pages.
 *
 * This function is also limited by MAX_ORDER.
 *
 * Memory allocated by this function must be released by free_pages_exact().
 *
 * Return: pointer to the allocated area or %NULL in case of error.
 */</doc>
<use f='linux-5.3.1/sound/core/memalloc.c' l='131' u='c' c='snd_dma_alloc_pages'/>
<use f='linux-5.3.1/sound/core/pcm.c' l='947' u='c' c='snd_pcm_attach_substream'/>
<use f='linux-5.3.1/sound/core/pcm.c' l='955' u='c' c='snd_pcm_attach_substream'/>
