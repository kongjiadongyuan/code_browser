<dec f='linux-5.3.1/include/drm/drm_bridge.h' l='435' type='struct drm_bridge * devm_drm_panel_bridge_add(struct device * dev, struct drm_panel * panel, u32 connector_type)'/>
<def f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='222' ll='242' type='struct drm_bridge * devm_drm_panel_bridge_add(struct device * dev, struct drm_panel * panel, u32 connector_type)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='243' type='struct drm_bridge * devm_drm_panel_bridge_add(struct device * , struct drm_panel * , u32 )'/>
<use f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='243' c='devm_drm_panel_bridge_add'/>
<use f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='243' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/bridge/panel.c' l='211'>/**
 * devm_drm_panel_bridge_add - Creates a managed &amp;drm_bridge and &amp;drm_connector
 * that just calls the appropriate functions from &amp;drm_panel.
 * @dev: device to tie the bridge lifetime to
 * @panel: The drm_panel being wrapped.  Must be non-NULL.
 * @connector_type: The DRM_MODE_CONNECTOR_* for the connector to be
 * created.
 *
 * This is the managed version of drm_panel_bridge_add() which automatically
 * calls drm_panel_bridge_remove() when @dev is unbound.
 */</doc>
