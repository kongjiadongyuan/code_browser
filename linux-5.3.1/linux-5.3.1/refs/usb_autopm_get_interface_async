<dec f='linux-5.3.1/include/linux/usb.h' l='767' type='int usb_autopm_get_interface_async(struct usb_interface * intf)'/>
<use f='linux-5.3.1/drivers/hid/usbhid/hid-core.c' l='204' u='c' c='usbhid_restart_out_queue'/>
<use f='linux-5.3.1/drivers/hid/usbhid/hid-core.c' l='243' u='c' c='usbhid_restart_ctrl_queue'/>
<def f='linux-5.3.1/drivers/usb/core/driver.c' l='1736' ll='1749' type='int usb_autopm_get_interface_async(struct usb_interface * intf)'/>
<dec f='linux-5.3.1/drivers/usb/core/driver.c' l='1750' type='int usb_autopm_get_interface_async(struct usb_interface * )'/>
<use f='linux-5.3.1/drivers/usb/core/driver.c' l='1750' c='usb_autopm_get_interface_async'/>
<use f='linux-5.3.1/drivers/usb/core/driver.c' l='1750' u='a'/>
<doc f='linux-5.3.1/drivers/usb/core/driver.c' l='1719'>/**
 * usb_autopm_get_interface_async - increment a USB interface&apos;s PM-usage counter
 * @intf: the usb_interface whose counter should be incremented
 *
 * This routine does much the same thing as
 * usb_autopm_get_interface(): It increments @intf&apos;s usage counter and
 * queues an autoresume request if the device is suspended.  The
 * differences are that it does not perform any synchronization (callers
 * should hold a private lock and handle all synchronization issues
 * themselves), and it does not autoresume the device directly (it only
 * queues a request).  After a successful call, the device may not yet be
 * resumed.
 *
 * This routine can run in atomic context.
 *
 * Return: 0 on success. A negative error code otherwise.
 */</doc>
