<def f='linux-5.3.1/include/net/devlink.h' l='366' ll='379'/>
<use f='linux-5.3.1/include/net/devlink.h' l='383'/>
<use f='linux-5.3.1/include/net/devlink.h' l='670' c='devlink_params_register'/>
<use f='linux-5.3.1/include/net/devlink.h' l='673' c='devlink_params_unregister'/>
<use f='linux-5.3.1/include/net/devlink.h' l='678' c='devlink_port_params_register'/>
<use f='linux-5.3.1/include/net/devlink.h' l='681' c='devlink_port_params_unregister'/>
<size>56</size>
<doc f='linux-5.3.1/include/net/devlink.h' l='351'>/**
 * struct devlink_param - devlink configuration parameter data
 * @name: name of the parameter
 * @generic: indicates if the parameter is generic or driver specific
 * @type: parameter type
 * @supported_cmodes: bitmap of supported configuration modes
 * @get: get parameter value, used for runtime and permanent
 *       configuration modes
 * @set: set parameter value, used for runtime and permanent
 *       configuration modes
 * @validate: validate input value is applicable (within value range, etc.)
 *
 * This struct should be used by the driver to fill the data for
 * a parameter it registers.
 */</doc>
<mbr r='devlink_param::id' o='0' t='u32'/>
<mbr r='devlink_param::name' o='64' t='const char *'/>
<mbr r='devlink_param::generic' o='128' t='bool'/>
<mbr r='devlink_param::type' o='160' t='enum devlink_param_type'/>
<mbr r='devlink_param::supported_cmodes' o='192' t='unsigned long'/>
<mbr r='devlink_param::get' o='256' t='int (*)(struct devlink *, u32, struct devlink_param_gset_ctx *)'/>
<mbr r='devlink_param::set' o='320' t='int (*)(struct devlink *, u32, struct devlink_param_gset_ctx *)'/>
<mbr r='devlink_param::validate' o='384' t='int (*)(struct devlink *, u32, union devlink_param_value, struct netlink_ext_ack *)'/>
