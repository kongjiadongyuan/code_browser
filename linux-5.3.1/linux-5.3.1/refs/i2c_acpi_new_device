<dec f='linux-5.3.1/include/linux/i2c.h' l='984' type='struct i2c_client * i2c_acpi_new_device(struct device * dev, int index, struct i2c_board_info * info)'/>
<def f='linux-5.3.1/drivers/i2c/i2c-core-acpi.c' l='438' ll='476' type='struct i2c_client * i2c_acpi_new_device(struct device * dev, int index, struct i2c_board_info * info)'/>
<dec f='linux-5.3.1/drivers/i2c/i2c-core-acpi.c' l='477' type='struct i2c_client * i2c_acpi_new_device(struct device * , int , struct i2c_board_info * )'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-acpi.c' l='477' c='i2c_acpi_new_device'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-acpi.c' l='477' u='a'/>
<doc f='linux-5.3.1/drivers/i2c/i2c-core-acpi.c' l='421'>/**
 * i2c_acpi_new_device - Create i2c-client for the Nth I2cSerialBus resource
 * @dev:     Device owning the ACPI resources to get the client from
 * @index:   Index of ACPI resource to get
 * @info:    describes the I2C device; note this is modified (addr gets set)
 * Context: can sleep
 *
 * By default the i2c subsys creates an i2c-client for the first I2cSerialBus
 * resource of an acpi_device, but some acpi_devices have multiple I2cSerialBus
 * resources, in that case this function can be used to create an i2c-client
 * for other I2cSerialBus resources in the Current Resource Settings table.
 *
 * Also see i2c_new_device, which this function calls to create the i2c-client.
 *
 * Returns a pointer to the new i2c-client, or error pointer in case of failure.
 * Specifically, -EPROBE_DEFER is returned if the adapter is not found.
 */</doc>
