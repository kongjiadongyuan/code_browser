<dec f='linux-5.3.1/include/drm/drm_gem_framebuffer_helper.h' l='29' type='struct drm_framebuffer * drm_gem_fb_create_with_dirty(struct drm_device * dev, struct drm_file * file, const struct drm_mode_fb_cmd2 * mode_cmd)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='260' ll='266' type='struct drm_framebuffer * drm_gem_fb_create_with_dirty(struct drm_device * dev, struct drm_file * file, const struct drm_mode_fb_cmd2 * mode_cmd)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='267' type='struct drm_framebuffer * drm_gem_fb_create_with_dirty(struct drm_device * , struct drm_file * , const struct drm_mode_fb_cmd2 * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='267' c='drm_gem_fb_create_with_dirty'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='267' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='237'>/**
 * drm_gem_fb_create_with_dirty() - Helper function for the
 *                       &amp;drm_mode_config_funcs.fb_create callback
 * @dev: DRM device
 * @file: DRM file that holds the GEM handle(s) backing the framebuffer
 * @mode_cmd: Metadata from the userspace framebuffer creation request
 *
 * This function creates a new framebuffer object described by
 * &amp;drm_mode_fb_cmd2. This description includes handles for the buffer(s)
 * backing the framebuffer. drm_atomic_helper_dirtyfb() is used for the dirty
 * callback giving framebuffer flushing through the atomic machinery. Use
 * drm_gem_fb_create() if you don&apos;t need the dirty callback.
 * The function does buffer size validation.
 *
 * Drivers should also call drm_plane_enable_fb_damage_clips() on all planes
 * to enable userspace to use damage clips also with the ATOMIC IOCTL.
 *
 * Drivers can use this as their &amp;drm_mode_config_funcs.fb_create callback.
 * The ADDFB2 IOCTL calls into this callback.
 *
 * Returns:
 * Pointer to a &amp;drm_framebuffer on success or an error pointer on failure.
 */</doc>
