<dec f='linux-5.3.1/include/linux/fs.h' l='3299' type='int inode_newsize_ok(const struct inode * , loff_t offset)'/>
<use f='linux-5.3.1/fs/attr.c' l='71' u='c' c='setattr_prepare'/>
<def f='linux-5.3.1/fs/attr.c' l='135' ll='160' type='int inode_newsize_ok(const struct inode * inode, loff_t offset)'/>
<dec f='linux-5.3.1/fs/attr.c' l='161' type='int inode_newsize_ok(const struct inode * , loff_t )'/>
<use f='linux-5.3.1/fs/attr.c' l='161' c='inode_newsize_ok'/>
<use f='linux-5.3.1/fs/attr.c' l='161' u='a'/>
<doc f='linux-5.3.1/fs/attr.c' l='119'>/**
 * inode_newsize_ok - may this inode be truncated to a given size
 * @inode:	the inode to be truncated
 * @offset:	the new size to assign to the inode
 *
 * inode_newsize_ok must be called with i_mutex held.
 *
 * inode_newsize_ok will check filesystem limits and ulimits to check that the
 * new inode size is within limits. inode_newsize_ok will also send SIGXFSZ
 * when necessary. Caller must not proceed with inode size change if failure is
 * returned. @inode must be a file (not directory), with appropriate
 * permissions to allow truncate (inode_newsize_ok does NOT check these
 * conditions).
 *
 * Return: 0 on success, -ve errno on failure
 */</doc>
<use f='linux-5.3.1/fs/buffer.c' l='2313' u='c' c='generic_cont_expand_simple'/>
<use f='linux-5.3.1/fs/ext4/extents.c' l='4704' u='c' c='ext4_zero_range'/>
<use f='linux-5.3.1/fs/ext4/extents.c' l='4880' u='c' c='ext4_fallocate'/>
<use f='linux-5.3.1/fs/hugetlbfs/inode.c' l='602' u='c' c='hugetlbfs_fallocate'/>
<use f='linux-5.3.1/fs/nfs/inode.c' l='600' u='c' c='nfs_setattr'/>
<use f='linux-5.3.1/fs/nfs/inode.c' l='649' u='c' c='nfs_vmtruncate'/>
<use f='linux-5.3.1/mm/shmem.c' l='2752' u='c' c='shmem_fallocate'/>
