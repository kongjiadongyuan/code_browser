<dec f='linux-5.3.1/include/linux/bitmap.h' l='179' type='int bitmap_parselist(const char * buf, unsigned long * maskp, int nmaskbits)'/>
<use f='linux-5.3.1/include/linux/cpumask.h' l='650' u='c' c='cpulist_parse'/>
<use f='linux-5.3.1/include/linux/nodemask.h' l='342' u='c' c='__nodelist_parse'/>
<use f='linux-5.3.1/drivers/input/keyboard/atkbd.c' l='1416' u='c' c='atkbd_set_force_release'/>
<def f='linux-5.3.1/lib/bitmap.c' l='622' ll='648' type='int bitmap_parselist(const char * buf, unsigned long * maskp, int nmaskbits)'/>
<dec f='linux-5.3.1/lib/bitmap.c' l='649' type='int bitmap_parselist(const char * , unsigned long * , int )'/>
<use f='linux-5.3.1/lib/bitmap.c' l='649' c='bitmap_parselist'/>
<use f='linux-5.3.1/lib/bitmap.c' l='649' u='a'/>
<use f='linux-5.3.1/lib/bitmap.c' l='674' u='c' c='bitmap_parselist_user'/>
<doc f='linux-5.3.1/lib/bitmap.c' l='598'>/**
 * bitmap_parselist - convert list format ASCII string to bitmap
 * @buf: read user string from this buffer; must be terminated
 *    with a \0 or \n.
 * @maskp: write resulting mask here
 * @nmaskbits: number of bits in mask to be written
 *
 * Input format is a comma-separated list of decimal numbers and
 * ranges.  Consecutively set bits are shown as two hyphen-separated
 * decimal numbers, the smallest and largest bit numbers set in
 * the range.
 * Optionally each range can be postfixed to denote that only parts of it
 * should be set. The range will divided to groups of specific size.
 * From each group will be used only defined amount of bits.
 * Syntax: range:used_size/group_size
 * Example: 0-1023:2/256 ==&gt; 0,1,256,257,512,513,768,769
 *
 * Returns: 0 on success, -errno on invalid input strings. Error values:
 *
 *   - ``-EINVAL``: wrong region format
 *   - ``-EINVAL``: invalid character in string
 *   - ``-ERANGE``: bit number specified too large for mask
 *   - ``-EOVERFLOW``: integer overflow in the input parameters
 */</doc>
