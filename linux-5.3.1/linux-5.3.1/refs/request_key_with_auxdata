<dec f='linux-5.3.1/include/linux/key.h' l='304' type='struct key * request_key_with_auxdata(struct key_type * type, const char * description, struct key_tag * domain_tag, const void * callout_info, size_t callout_len, void * aux)'/>
<use f='linux-5.3.1/fs/nfs/nfs4idmap.c' l='293' u='c' c='nfs_idmap_request_key'/>
<def f='linux-5.3.1/security/keys/request_key.c' l='730' ll='751' type='struct key * request_key_with_auxdata(struct key_type * type, const char * description, struct key_tag * domain_tag, const void * callout_info, size_t callout_len, void * aux)'/>
<dec f='linux-5.3.1/security/keys/request_key.c' l='752' type='struct key * request_key_with_auxdata(struct key_type * , const char * , struct key_tag * , const void * , size_t , void * )'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='752' c='request_key_with_auxdata'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='752' u='a'/>
<doc f='linux-5.3.1/security/keys/request_key.c' l='715'>/**
 * request_key_with_auxdata - Request a key with auxiliary data for the upcaller
 * @type: The type of key we want.
 * @description: The searchable description of the key.
 * @domain_tag: The domain in which the key operates.
 * @callout_info: The data to pass to the instantiation upcall (or NULL).
 * @callout_len: The length of callout_info.
 * @aux: Auxiliary data for the upcall.
 *
 * As for request_key_and_link() except that it does not add the returned key
 * to a keyring if found and new keys are always allocated in the user&apos;s quota.
 *
 * Furthermore, it then works as wait_for_key_construction() to wait for the
 * completion of keys undergoing construction with a non-interruptible wait.
 */</doc>
