<dec f='linux-5.3.1/include/linux/skbuff.h' l='1288' type='bool __skb_flow_dissect(const struct net * net, const struct sk_buff * skb, struct flow_dissector * flow_dissector, void * target_container, void * data, __be16 proto, int nhoff, int hlen, unsigned int flags)'/>
<use f='linux-5.3.1/include/linux/skbuff.h' l='1299' u='c' c='skb_flow_dissect'/>
<use f='linux-5.3.1/include/linux/skbuff.h' l='1308' u='c' c='skb_flow_dissect_flow_keys'/>
<use f='linux-5.3.1/include/linux/skbuff.h' l='1320' u='c' c='skb_flow_dissect_flow_keys_basic'/>
<def f='linux-5.3.1/net/core/flow_dissector.c' l='828' ll='1333' type='bool __skb_flow_dissect(const struct net * net, const struct sk_buff * skb, struct flow_dissector * flow_dissector, void * target_container, void * data, __be16 proto, int nhoff, int hlen, unsigned int flags)'/>
<dec f='linux-5.3.1/net/core/flow_dissector.c' l='1334' type='bool __skb_flow_dissect(const struct net * , const struct sk_buff * , struct flow_dissector * , void * , void * , __be16 , int , int , unsigned int )'/>
<use f='linux-5.3.1/net/core/flow_dissector.c' l='1334' c='__skb_flow_dissect'/>
<use f='linux-5.3.1/net/core/flow_dissector.c' l='1334' u='a'/>
<use f='linux-5.3.1/net/core/flow_dissector.c' l='1506' u='c' c='__skb_get_hash_symmetric'/>
<doc f='linux-5.3.1/net/core/flow_dissector.c' l='809'>/**
 * __skb_flow_dissect - extract the flow_keys struct and return it
 * @net: associated network namespace, derived from @skb if NULL
 * @skb: sk_buff to extract the flow from, can be NULL if the rest are specified
 * @flow_dissector: list of keys to dissect
 * @target_container: target structure to put dissected values into
 * @data: raw buffer pointer to the packet, if NULL use skb-&gt;data
 * @proto: protocol for which to get the flow, if @data is NULL use skb-&gt;protocol
 * @nhoff: network header offset, if @data is NULL use skb_network_offset(skb)
 * @hlen: packet header length, if @data is NULL use skb_headlen(skb)
 * @flags: flags that control the dissection process, e.g.
 *         FLOW_DISSECTOR_F_STOP_AT_ENCAP.
 *
 * The function will try to retrieve individual keys into target specified
 * by flow_dissector from either the skbuff or a raw buffer specified by the
 * rest parameters.
 *
 * Caller must take care of zeroing target container memory.
 */</doc>
