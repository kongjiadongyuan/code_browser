<dec f='linux-5.3.1/include/linux/fs.h' l='3177' type='const char * simple_get_link(struct dentry * , struct inode * , struct delayed_call * )'/>
<use f='linux-5.3.1/fs/ext4/symlink.c' l='70'/>
<use f='linux-5.3.1/fs/ext4/symlink.c' l='70'/>
<def f='linux-5.3.1/fs/libfs.c' l='1203' ll='1207' type='const char * simple_get_link(struct dentry * dentry, struct inode * inode, struct delayed_call * done)'/>
<dec f='linux-5.3.1/fs/libfs.c' l='1208' type='const char * simple_get_link(struct dentry * , struct inode * , struct delayed_call * )'/>
<use f='linux-5.3.1/fs/libfs.c' l='1208' c='simple_get_link'/>
<use f='linux-5.3.1/fs/libfs.c' l='1208' u='a'/>
<use f='linux-5.3.1/fs/libfs.c' l='1211'/>
<use f='linux-5.3.1/fs/libfs.c' l='1211'/>
<doc f='linux-5.3.1/fs/libfs.c' l='1189'>/**
 * simple_get_link - generic helper to get the target of &quot;fast&quot; symlinks
 * @dentry: not used here
 * @inode: the symlink inode
 * @done: not used here
 *
 * Generic helper for filesystems to use for symlink inodes where a pointer to
 * the symlink target is stored in -&gt;i_link.  NOTE: this isn&apos;t normally called,
 * since as an optimization the path lookup code uses any non-NULL -&gt;i_link
 * directly, without calling -&gt;get_link().  But -&gt;get_link() still must be set,
 * to mark the inode_operations as being for a symlink.
 *
 * Return: the symlink target
 */</doc>
<use f='linux-5.3.1/mm/shmem.c' l='3258'/>
<use f='linux-5.3.1/mm/shmem.c' l='3258'/>
