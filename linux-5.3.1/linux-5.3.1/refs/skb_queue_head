<dec f='linux-5.3.1/include/linux/skbuff.h' l='1982' type='void skb_queue_head(struct sk_buff_head * list, struct sk_buff * newsk)'/>
<use f='linux-5.3.1/fs/io_uring.c' l='2612' u='c' c='__io_sqe_files_scm'/>
<use f='linux-5.3.1/kernel/audit.c' l='546' u='c' c='kauditd_rehold_skb'/>
<use f='linux-5.3.1/kernel/audit.c' l='749' u='c' c='kauditd_send_queue'/>
<use f='linux-5.3.1/net/core/netpoll.c' l='126' u='c' c='queue_process'/>
<def f='linux-5.3.1/net/core/skbuff.c' l='3113' ll='3120' type='void skb_queue_head(struct sk_buff_head * list, struct sk_buff * newsk)'/>
<dec f='linux-5.3.1/net/core/skbuff.c' l='3121' type='void skb_queue_head(struct sk_buff_head * , struct sk_buff * )'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='3121' c='skb_queue_head'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='3121' u='a'/>
<doc f='linux-5.3.1/net/core/skbuff.c' l='3102'>/**
 *	skb_queue_head - queue a buffer at the list head
 *	@list: list to use
 *	@newsk: buffer to queue
 *
 *	Queue a buffer at the start of the list. This function takes the
 *	list lock and can be used safely with other locking &amp;sk_buff functions
 *	safely.
 *
 *	A buffer cannot be placed on two lists at the same time.
 */</doc>
