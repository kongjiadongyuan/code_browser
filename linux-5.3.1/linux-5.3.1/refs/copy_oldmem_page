<dec f='linux-5.3.1/include/linux/crash_dump.h' l='27' type='ssize_t copy_oldmem_page(unsigned long , char * , size_t , unsigned long , int )'/>
<def f='linux-5.3.1/arch/x86/kernel/crash_dump_64.c' l='57' ll='61' type='ssize_t copy_oldmem_page(unsigned long pfn, char * buf, size_t csize, unsigned long offset, int userbuf)'/>
<doc f='linux-5.3.1/arch/x86/kernel/crash_dump_64.c' l='44'>/**
 * copy_oldmem_page - copy one page of memory
 * @pfn: page frame number to be copied
 * @buf: target memory address for the copy; this can be in kernel address
 *	space or user address space (see @userbuf)
 * @csize: number of bytes to copy
 * @offset: offset in bytes into the page (based on pfn) to begin the copy
 * @userbuf: if set, @buf is in user address space, use copy_to_user(),
 *	otherwise @buf is in kernel address space, use memcpy().
 *
 * Copy a page from the old kernel&apos;s memory. For this page, there is no pte
 * mapped in the current kernel. We stitch up a pte, similar to kmap_atomic.
 */</doc>
<use f='linux-5.3.1/fs/proc/vmcore.c' l='137' u='c' c='read_from_oldmem'/>
<use f='linux-5.3.1/fs/proc/vmcore.c' l='202' u='c' c='copy_oldmem_page_encrypted'/>
