<dec f='linux-5.3.1/include/linux/pm_wakeup.h' l='98' type='void __pm_relax(struct wakeup_source * ws)'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='148' u='c' c='wakeup_source_destroy'/>
<def f='linux-5.3.1/drivers/base/power/wakeup.c' l='674' ll='685' type='void __pm_relax(struct wakeup_source * ws)'/>
<dec f='linux-5.3.1/drivers/base/power/wakeup.c' l='686' type='void __pm_relax(struct wakeup_source * )'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='686' c='__pm_relax'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='686' u='a'/>
<use f='linux-5.3.1/drivers/base/power/wakeup.c' l='702' u='c' c='pm_relax'/>
<doc f='linux-5.3.1/drivers/base/power/wakeup.c' l='665'>/**
 * __pm_relax - Notify the PM core that processing of a wakeup event has ended.
 * @ws: Wakeup source object associated with the source of the event.
 *
 * Call this function for wakeup events whose processing started with calling
 * __pm_stay_awake().
 *
 * It is safe to call it from interrupt context.
 */</doc>
<use f='linux-5.3.1/fs/eventpoll.c' l='740' u='c' c='ep_scan_ready_list'/>
<use f='linux-5.3.1/fs/eventpoll.c' l='922' u='c' c='ep_read_events_proc'/>
<use f='linux-5.3.1/fs/eventpoll.c' l='1738' u='c' c='ep_send_events_proc'/>
