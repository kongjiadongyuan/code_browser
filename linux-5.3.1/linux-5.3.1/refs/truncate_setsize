<dec f='linux-5.3.1/include/linux/mm.h' l='1496' type='void truncate_setsize(struct inode * inode, loff_t newsize)'/>
<use f='linux-5.3.1/fs/aio.c' l='288' u='c' c='put_aio_ring_file'/>
<use f='linux-5.3.1/fs/fat/file.c' l='547' u='c' c='fat_setattr'/>
<use f='linux-5.3.1/fs/libfs.c' l='428' u='c' c='simple_setattr'/>
<def f='linux-5.3.1/mm/truncate.c' l='823' ll='831' type='void truncate_setsize(struct inode * inode, loff_t newsize)'/>
<dec f='linux-5.3.1/mm/truncate.c' l='832' type='void truncate_setsize(struct inode * , loff_t )'/>
<use f='linux-5.3.1/mm/truncate.c' l='832' c='truncate_setsize'/>
<use f='linux-5.3.1/mm/truncate.c' l='832' u='a'/>
<doc f='linux-5.3.1/mm/truncate.c' l='810'>/**
 * truncate_setsize - update inode and pagecache for a new file size
 * @inode: inode
 * @newsize: new file size
 *
 * truncate_setsize updates i_size and performs pagecache truncation (if
 * necessary) to @newsize. It will be typically be called from the filesystem&apos;s
 * setattr function when ATTR_SIZE is passed in.
 *
 * Must be called with a lock serializing truncates and writes (generally
 * i_mutex but e.g. xfs uses a different lock) and before all filesystem
 * specific block truncation has been performed.
 */</doc>
