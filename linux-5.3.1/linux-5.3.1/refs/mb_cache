<use f='linux-5.3.1/fs/ext4/ext4.h' l='1518'/>
<use f='linux-5.3.1/fs/ext4/ext4.h' l='1519'/>
<use f='linux-5.3.1/fs/ext4/xattr.h' l='192' c='ext4_xattr_create_cache'/>
<use f='linux-5.3.1/fs/ext4/xattr.h' l='193' c='ext4_xattr_destroy_cache'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='27' c='mb_cache_create'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='28' c='mb_cache_destroy'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='30' c='mb_cache_entry_create'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='33' c='mb_cache_entry_put'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='42' c='mb_cache_entry_delete'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='43' c='mb_cache_entry_get'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='45' c='mb_cache_entry_find_first'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='47' c='mb_cache_entry_find_next'/>
<use f='linux-5.3.1/include/linux/mbcache.h' l='49' c='mb_cache_entry_touch'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='77' c='ext4_xattr_block_cache_insert'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='469' c='ext4_xattr_inode_get'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='520' c='ext4_xattr_block_get'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='1022' c='ext4_xattr_inode_update_ref'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='1243' c='ext4_xattr_release_block'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='1469' c='ext4_xattr_inode_cache_find'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='1856' c='ext4_xattr_block_set'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='2974' c='ext4_xattr_block_cache_insert'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='3049' c='ext4_xattr_block_cache_find'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='3137' c='ext4_xattr_create_cache'/>
<use f='linux-5.3.1/fs/ext4/xattr.c' l='3143' c='ext4_xattr_destroy_cache'/>
<def f='linux-5.3.1/fs/mbcache.c' l='28' ll='43'/>
<use f='linux-5.3.1/fs/mbcache.c' l='47' c='mb_cache_shrink'/>
<use f='linux-5.3.1/fs/mbcache.c' l='50' c='mb_cache_entry_head'/>
<use f='linux-5.3.1/fs/mbcache.c' l='74' c='mb_cache_entry_create'/>
<use f='linux-5.3.1/fs/mbcache.c' l='128' c='__entry_find'/>
<use f='linux-5.3.1/fs/mbcache.c' l='168' c='mb_cache_entry_find_first'/>
<use f='linux-5.3.1/fs/mbcache.c' l='185' c='mb_cache_entry_find_next'/>
<use f='linux-5.3.1/fs/mbcache.c' l='198' c='mb_cache_entry_get'/>
<use f='linux-5.3.1/fs/mbcache.c' l='227' c='mb_cache_entry_delete'/>
<use f='linux-5.3.1/fs/mbcache.c' l='263' c='mb_cache_entry_touch'/>
<use f='linux-5.3.1/fs/mbcache.c' l='273' c='mb_cache_count'/>
<use f='linux-5.3.1/fs/mbcache.c' l='273' c='mb_cache_count'/>
<use f='linux-5.3.1/fs/mbcache.c' l='273' c='mb_cache_count'/>
<use f='linux-5.3.1/fs/mbcache.c' l='273' c='mb_cache_count'/>
<use f='linux-5.3.1/fs/mbcache.c' l='280' c='mb_cache_shrink'/>
<use f='linux-5.3.1/fs/mbcache.c' l='323' c='mb_cache_scan'/>
<use f='linux-5.3.1/fs/mbcache.c' l='323' c='mb_cache_scan'/>
<use f='linux-5.3.1/fs/mbcache.c' l='323' c='mb_cache_scan'/>
<use f='linux-5.3.1/fs/mbcache.c' l='323' c='mb_cache_scan'/>
<use f='linux-5.3.1/fs/mbcache.c' l='333' c='mb_cache_shrink_worker'/>
<use f='linux-5.3.1/fs/mbcache.c' l='333' c='mb_cache_shrink_worker'/>
<use f='linux-5.3.1/fs/mbcache.c' l='333' c='mb_cache_shrink_worker'/>
<use f='linux-5.3.1/fs/mbcache.c' l='333' c='mb_cache_shrink_worker'/>
<use f='linux-5.3.1/fs/mbcache.c' l='344' c='mb_cache_create'/>
<use f='linux-5.3.1/fs/mbcache.c' l='346' c='mb_cache_create'/>
<use f='linux-5.3.1/fs/mbcache.c' l='350' c='mb_cache_create'/>
<use f='linux-5.3.1/fs/mbcache.c' l='392' c='mb_cache_destroy'/>
<size>144</size>
<doc f='linux-5.3.1/fs/mbcache.c' l='11'>/*
 * Mbcache is a simple key-value store. Keys need not be unique, however
 * key-value pairs are expected to be unique (we use this fact in
 * mb_cache_entry_delete()).
 *
 * Ext2 and ext4 use this cache for deduplication of extended attribute blocks.
 * Ext4 also uses it for deduplication of xattr values stored in inodes.
 * They use hash of data as a key and provide a value that may represent a
 * block or inode number. That&apos;s why keys need not be unique (hash of different
 * data may be the same). However user provided value always uniquely
 * identifies a cache entry.
 *
 * We provide functions for creation and removal of entries, search by key,
 * and a special &quot;delete entry with given key-value pair&quot; operation. Fixed
 * size hash table is used for fast key lookups.
 */</doc>
<mbr r='mb_cache::c_hash' o='0' t='struct hlist_bl_head *'/>
<mbr r='mb_cache::c_bucket_bits' o='64' t='int'/>
<mbr r='mb_cache::c_max_entries' o='128' t='unsigned long'/>
<mbr r='mb_cache::c_list_lock' o='192' t='spinlock_t'/>
<mbr r='mb_cache::c_list' o='256' t='struct list_head'/>
<mbr r='mb_cache::c_entry_count' o='384' t='unsigned long'/>
<mbr r='mb_cache::c_shrink' o='448' t='struct shrinker'/>
<mbr r='mb_cache::c_shrink_work' o='896' t='struct work_struct'/>
