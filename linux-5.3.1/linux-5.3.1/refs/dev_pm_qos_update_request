<dec f='linux-5.3.1/include/linux/pm_qos.h' l='154' type='int dev_pm_qos_update_request(struct dev_pm_qos_request * req, s32 new_value)'/>
<def f='linux-5.3.1/drivers/base/power/qos.c' l='468' ll='476' type='int dev_pm_qos_update_request(struct dev_pm_qos_request * req, s32 new_value)'/>
<dec f='linux-5.3.1/drivers/base/power/qos.c' l='477' type='int dev_pm_qos_update_request(struct dev_pm_qos_request * , s32 )'/>
<use f='linux-5.3.1/drivers/base/power/qos.c' l='477' c='dev_pm_qos_update_request'/>
<use f='linux-5.3.1/drivers/base/power/qos.c' l='477' u='a'/>
<doc f='linux-5.3.1/drivers/base/power/qos.c' l='450'>/**
 * dev_pm_qos_update_request - modifies an existing qos request
 * @req : handle to list element holding a dev_pm_qos request to use
 * @new_value: defines the qos request
 *
 * Updates an existing dev PM qos request along with updating the
 * target value.
 *
 * Attempts are made to make this code callable on hot code paths.
 *
 * Returns 1 if the aggregated constraint value has changed,
 * 0 if the aggregated constraint value has not changed,
 * -EINVAL in case of wrong parameters, -ENODEV if the device has been
 * removed from the system
 *
 * Callers should ensure that the target device is not RPM_SUSPENDED before
 * using this function for requests of type DEV_PM_QOS_FLAGS.
 */</doc>
<use f='linux-5.3.1/drivers/base/power/sysfs.c' l='242' u='c' c='pm_qos_resume_latency_us_store'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='723' u='c' c='store_scaling_min_freq'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='723' u='c' c='store_scaling_max_freq'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2530' u='c' c='cpufreq_boost_set_sw'/>
