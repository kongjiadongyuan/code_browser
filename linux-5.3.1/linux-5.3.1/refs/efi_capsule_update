<dec f='linux-5.3.1/include/linux/efi.h' l='1544' type='int efi_capsule_update(efi_capsule_header_t * capsule, phys_addr_t * pages)'/>
<def f='linux-5.3.1/drivers/firmware/efi/capsule.c' l='215' ll='283' type='int efi_capsule_update(efi_capsule_header_t * capsule, phys_addr_t * pages)'/>
<dec f='linux-5.3.1/drivers/firmware/efi/capsule.c' l='284' type='int efi_capsule_update(efi_capsule_header_t * , phys_addr_t * )'/>
<use f='linux-5.3.1/drivers/firmware/efi/capsule.c' l='284' c='efi_capsule_update'/>
<use f='linux-5.3.1/drivers/firmware/efi/capsule.c' l='284' u='a'/>
<doc f='linux-5.3.1/drivers/firmware/efi/capsule.c' l='182'>/**
 * efi_capsule_update - send a capsule to the firmware
 * @capsule: capsule to send to firmware
 * @pages: an array of capsule data pages
 *
 * Build a scatter gather list with EFI capsule block descriptors to
 * map the capsule described by @capsule with its data in @pages and
 * send it to the firmware via the UpdateCapsule() runtime service.
 *
 * @capsule must be a virtual mapping of the complete capsule update in the
 * kernel address space, as the capsule can be consumed immediately.
 * A capsule_header_t that describes the entire contents of the capsule
 * must be at the start of the first data page.
 *
 * Even though this function will validate that the firmware supports
 * the capsule guid, users will likely want to check that
 * efi_capsule_supported() returns true before calling this function
 * because it makes it easier to print helpful error messages.
 *
 * If the capsule is successfully submitted to the firmware, any
 * subsequent calls to efi_capsule_pending() will return true. @pages
 * must not be released or modified if this function returns
 * successfully.
 *
 * Callers must be prepared for this function to fail, which can
 * happen if we raced with system reboot or if there is already a
 * pending capsule that has a reset type that conflicts with the one
 * required by @capsule. Do NOT use efi_capsule_pending() to detect
 * this conflict since that would be racy. Instead, submit the capsule
 * to efi_capsule_update() and check the return value.
 *
 * Return 0 on success, a converted EFI status code on failure.
 */</doc>
