<dec f='linux-5.3.1/include/drm/drm_gem.h' l='332' type='int drm_gem_mmap(struct file * filp, struct vm_area_struct * vma)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1143' ll='1198' type='int drm_gem_mmap(struct file * filp, struct vm_area_struct * vma)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1199' type='int drm_gem_mmap(struct file * , struct vm_area_struct * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1199' c='drm_gem_mmap'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1199' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1128'>/**
 * drm_gem_mmap - memory map routine for GEM objects
 * @filp: DRM file pointer
 * @vma: VMA for the area to be mapped
 *
 * If a driver supports GEM object mapping, mmap calls on the DRM file
 * descriptor will end up here.
 *
 * Look up the GEM object based on the offset passed in (vma-&gt;vm_pgoff will
 * contain the fake offset we created when the GTT map ioctl was called on
 * the object) and map it with a call to drm_gem_mmap_obj().
 *
 * If the caller is not granted access to the buffer object, the mmap will fail
 * with EACCES. Please see the vma manager for more information.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.c' l='3129'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.c' l='3129'/>
