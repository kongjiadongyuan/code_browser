<dec f='linux-5.3.1/include/net/netlink.h' l='452' type='struct nlattr * nla_reserve_64bit(struct sk_buff * skb, int attrtype, int attrlen, int padattr)'/>
<use f='linux-5.3.1/kernel/taskstats.c' l='376' u='c' c='mk_reply'/>
<def f='linux-5.3.1/lib/nlattr.c' l='725' ll='738' type='struct nlattr * nla_reserve_64bit(struct sk_buff * skb, int attrtype, int attrlen, int padattr)'/>
<dec f='linux-5.3.1/lib/nlattr.c' l='739' type='struct nlattr * nla_reserve_64bit(struct sk_buff * , int , int , int )'/>
<use f='linux-5.3.1/lib/nlattr.c' l='739' c='nla_reserve_64bit'/>
<use f='linux-5.3.1/lib/nlattr.c' l='739' u='a'/>
<doc f='linux-5.3.1/lib/nlattr.c' l='711'>/**
 * nla_reserve_64bit - reserve room for attribute on the skb and align it
 * @skb: socket buffer to reserve room on
 * @attrtype: attribute type
 * @attrlen: length of attribute payload
 * @padattr: attribute type for the padding
 *
 * Adds a netlink attribute header to a socket buffer and reserves
 * room for the payload but does not copy it. It also ensure that this
 * attribute will have a 64-bit aligned nla_data() area.
 *
 * Returns NULL if the tailroom of the skb is insufficient to store
 * the attribute header and payload.
 */</doc>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='1171' u='c' c='rtnl_fill_stats'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='4713' u='c' c='rtnl_get_offload_stats'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='4790' u='c' c='rtnl_fill_statsinfo'/>
