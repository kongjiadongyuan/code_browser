<dec f='linux-5.3.1/include/drm/drm_blend.h' l='59' type='int drm_plane_create_blend_mode_property(struct drm_plane * plane, unsigned int supported_modes)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_blend.c' l='552' ll='597' type='int drm_plane_create_blend_mode_property(struct drm_plane * plane, unsigned int supported_modes)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_blend.c' l='598' type='int drm_plane_create_blend_mode_property(struct drm_plane * , unsigned int )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_blend.c' l='598' c='drm_plane_create_blend_mode_property'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_blend.c' l='598' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_blend.c' l='523'>/**
 * drm_plane_create_blend_mode_property - create a new blend mode property
 * @plane: drm plane
 * @supported_modes: bitmask of supported modes, must include
 *		     BIT(DRM_MODE_BLEND_PREMULTI). Current DRM assumption is
 *		     that alpha is premultiplied, and old userspace can break if
 *		     the property defaults to anything else.
 *
 * This creates a new property describing the blend mode.
 *
 * The property exposed to userspace is an enumeration property (see
 * drm_property_create_enum()) called &quot;pixel blend mode&quot; and has the
 * following enumeration values:
 *
 * &quot;None&quot;:
 *	Blend formula that ignores the pixel alpha.
 *
 * &quot;Pre-multiplied&quot;:
 *	Blend formula that assumes the pixel color values have been already
 *	pre-multiplied with the alpha channel values.
 *
 * &quot;Coverage&quot;:
 *	Blend formula that assumes the pixel color values have not been
 *	pre-multiplied and will do so when blending them to the background color
 *	values.
 *
 * RETURNS:
 * Zero for success or -errno
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_sprite.c' l='2340' u='c' c='skl_universal_plane_create'/>
