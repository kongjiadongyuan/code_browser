<dec f='linux-5.3.1/include/drm/drm_connector.h' l='904' type='int (*)(struct drm_connector *, struct drm_connector_state *, struct drm_property *, uint64_t)'/>
<offset>704</offset>
<doc f='linux-5.3.1/include/drm/drm_connector.h' l='862'>/**
	 * @atomic_set_property:
	 *
	 * Decode a driver-private property value and store the decoded value
	 * into the passed-in state structure. Since the atomic core decodes all
	 * standardized properties (even for extensions beyond the core set of
	 * properties which might not be implemented by all drivers) this
	 * requires drivers to subclass the state structure.
	 *
	 * Such driver-private properties should really only be implemented for
	 * truly hardware/vendor specific state. Instead it is preferred to
	 * standardize atomic extension and decode the properties used to expose
	 * such an extension in the core.
	 *
	 * Do not call this function directly, use
	 * drm_atomic_connector_set_property() instead.
	 *
	 * This callback is optional if the driver does not support any
	 * driver-private atomic properties.
	 *
	 * NOTE:
	 *
	 * This function is called in the state assembly phase of atomic
	 * modesets, which can be aborted for any reason (including on
	 * userspace&apos;s request to just check whether a configuration would be
	 * possible). Drivers MUST NOT touch any persistent state (hardware or
	 * software) or data structures except the passed in @state parameter.
	 *
	 * Also since userspace controls in which order properties are set this
	 * function must not do any input validation (since the state update is
	 * incomplete and hence likely inconsistent). Instead any such input
	 * validation must be done in the various atomic_check callbacks.
	 *
	 * RETURNS:
	 *
	 * 0 if the property has been found, -EINVAL if the property isn&apos;t
	 * implemented by the driver (which shouldn&apos;t ever happen, the core only
	 * asks for properties attached to this connector). No other validation
	 * is allowed by the driver. The core already checks that the property
	 * value is within the range (integer, valid enum value, ...) the driver
	 * set when registering the property.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_uapi.c' l='767' u='r' c='drm_atomic_connector_set_property'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_uapi.c' l='768' u='r' c='drm_atomic_connector_set_property'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/icl_dsi.c' l='1320' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp.c' l='6437' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp_mst.c' l='415' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_hdmi.c' l='2773' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_lvds.c' l='489' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_sdvo.c' l='2391' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/vlv_dsi.c' l='1589' u='w'/>
