<dec f='linux-5.3.1/include/linux/xarray.h' l='519' type='void * __xa_erase(struct xarray * , unsigned long index)'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='602' u='c' c='xa_erase_bh'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='626' u='c' c='xa_erase_irq'/>
<doc f='linux-5.3.1/include/linux/xarray.h' l='512'>/*
 * Versions of the normal API which require the caller to hold the
 * xa_lock.  If the GFP flags allow it, they will drop the lock to
 * allocate memory, then reacquire it afterwards.  These functions
 * may also re-enable interrupts if the XArray flags indicate the
 * locking should be interrupt safe.
 */</doc>
<def f='linux-5.3.1/lib/xarray.c' l='1323' ll='1327' type='void * __xa_erase(struct xarray * xa, unsigned long index)'/>
<dec f='linux-5.3.1/lib/xarray.c' l='1328' type='void * __xa_erase(struct xarray * , unsigned long )'/>
<use f='linux-5.3.1/lib/xarray.c' l='1328' c='__xa_erase'/>
<use f='linux-5.3.1/lib/xarray.c' l='1328' u='a'/>
<use f='linux-5.3.1/lib/xarray.c' l='1347' u='c' c='xa_erase'/>
<doc f='linux-5.3.1/lib/xarray.c' l='1311'>/**
 * __xa_erase() - Erase this entry from the XArray while locked.
 * @xa: XArray.
 * @index: Index into array.
 *
 * After this function returns, loading from @index will return %NULL.
 * If the index is part of a multi-index entry, all indices will be erased
 * and none of the entries will be part of a multi-index entry.
 *
 * Context: Any context.  Expects xa_lock to be held on entry.
 * Return: The entry which used to be at this index.
 */</doc>
