<dec f='linux-5.3.1/include/linux/blkdev.h' l='1065' type='void blk_queue_io_min(struct request_queue * q, unsigned int min)'/>
<def f='linux-5.3.1/block/blk-settings.c' l='420' ll='423' type='void blk_queue_io_min(struct request_queue * q, unsigned int min)'/>
<dec f='linux-5.3.1/block/blk-settings.c' l='424' type='void blk_queue_io_min(struct request_queue * , unsigned int )'/>
<use f='linux-5.3.1/block/blk-settings.c' l='424' c='blk_queue_io_min'/>
<use f='linux-5.3.1/block/blk-settings.c' l='424' u='a'/>
<doc f='linux-5.3.1/block/blk-settings.c' l='406'>/**
 * blk_queue_io_min - set minimum request size for the queue
 * @q:	the request queue for the device
 * @min:  smallest I/O size in bytes
 *
 * Description:
 *   Storage devices may report a granularity or preferred minimum I/O
 *   size which is the smallest request the device can perform without
 *   incurring a performance penalty.  For disk drives this is often the
 *   physical block size.  For RAID arrays it is often the stripe chunk
 *   size.  A properly aligned multiple of minimum_io_size is the
 *   preferred request size for workloads where a high number of I/O
 *   operations is desired.
 */</doc>
<use f='linux-5.3.1/drivers/block/loop.c' l='1115' u='c' c='__loop_clr_fd'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='1538' u='c' c='loop_set_block_size'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='2863' u='c' c='sd_read_block_limits'/>
