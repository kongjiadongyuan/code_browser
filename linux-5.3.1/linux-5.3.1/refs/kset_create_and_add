<dec f='linux-5.3.1/include/linux/kobject.h' l='203' type='struct kset * kset_create_and_add(const char * name, const struct kset_uevent_ops * u, struct kobject * parent_kobj)'/>
<use f='linux-5.3.1/drivers/base/bus.c' l='856' u='c' c='bus_register'/>
<use f='linux-5.3.1/drivers/base/bus.c' l='863' u='c' c='bus_register'/>
<use f='linux-5.3.1/drivers/base/bus.c' l='1213' u='c' c='buses_init'/>
<use f='linux-5.3.1/drivers/base/bus.c' l='1217' u='c' c='buses_init'/>
<use f='linux-5.3.1/drivers/base/class.c' l='574' u='c' c='classes_init'/>
<use f='linux-5.3.1/drivers/base/core.c' l='2572' u='c' c='devices_init'/>
<use f='linux-5.3.1/drivers/base/swnode.c' l='863' u='c' c='software_node_init'/>
<use f='linux-5.3.1/drivers/firmware/efi/efivars.c' l='677' u='c' c='efivars_sysfs_init'/>
<use f='linux-5.3.1/drivers/firmware/efi/esrt.c' l='405' u='c' c='esrt_sysfs_init'/>
<use f='linux-5.3.1/drivers/firmware/efi/runtime-map.c' l='111' u='c' c='add_sysfs_runtime_map_entry'/>
<use f='linux-5.3.1/drivers/firmware/memmap.c' l='184' u='c' c='add_sysfs_fw_map_entry'/>
<use f='linux-5.3.1/drivers/iommu/iommu.c' l='2043' u='c' c='iommu_init'/>
<use f='linux-5.3.1/drivers/pci/slot.c' l='404' u='c' c='pci_slot_init'/>
<use f='linux-5.3.1/fs/nfs/sysfs.c' l='58' u='c' c='nfs_sysfs_init'/>
<use f='linux-5.3.1/kernel/params.c' l='933' u='c' c='param_sysfs_init'/>
<def f='linux-5.3.1/lib/kobject.c' l='991' ll='1007' type='struct kset * kset_create_and_add(const char * name, const struct kset_uevent_ops * uevent_ops, struct kobject * parent_kobj)'/>
<dec f='linux-5.3.1/lib/kobject.c' l='1008' type='struct kset * kset_create_and_add(const char * , const struct kset_uevent_ops * , struct kobject * )'/>
<use f='linux-5.3.1/lib/kobject.c' l='1008' c='kset_create_and_add'/>
<use f='linux-5.3.1/lib/kobject.c' l='1008' u='a'/>
<doc f='linux-5.3.1/lib/kobject.c' l='977'>/**
 * kset_create_and_add() - Create a struct kset dynamically and add it to sysfs.
 *
 * @name: the name for the kset
 * @uevent_ops: a struct kset_uevent_ops for the kset
 * @parent_kobj: the parent kobject of this kset, if any.
 *
 * This function creates a kset structure dynamically and registers it
 * with sysfs.  When you are finished with this structure, call
 * kset_unregister() and the structure will be dynamically freed when it
 * is no longer being used.
 *
 * If the kset was not able to be created, NULL will be returned.
 */</doc>
<use f='linux-5.3.1/mm/slub.c' l='5850' u='c' c='slab_sysfs_init'/>
<use f='linux-5.3.1/net/core/net-sysfs.c' l='1519' u='c' c='register_queue_kobjects'/>
