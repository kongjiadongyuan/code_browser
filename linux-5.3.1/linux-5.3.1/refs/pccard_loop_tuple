<dec f='linux-5.3.1/drivers/pcmcia/cs_internal.h' l='167' type='int pccard_loop_tuple(struct pcmcia_socket * s, unsigned int function, cisdata_t code, cisparse_t * parse, void * priv_data, int (*)(tuple_t *, cisparse_t *, void *) loop_tuple)'/>
<def f='linux-5.3.1/drivers/pcmcia/pcmcia_cis.c' l='81' ll='122' type='int pccard_loop_tuple(struct pcmcia_socket * s, unsigned int function, cisdata_t code, cisparse_t * parse, void * priv_data, int (*)(tuple_t *, cisparse_t *, void *) loop_tuple)'/>
<use f='linux-5.3.1/drivers/pcmcia/pcmcia_cis.c' l='274' u='c' c='pcmcia_loop_config'/>
<use f='linux-5.3.1/drivers/pcmcia/pcmcia_cis.c' l='329' u='c' c='pcmcia_loop_tuple'/>
<doc f='linux-5.3.1/drivers/pcmcia/pcmcia_cis.c' l='66'>/**
 * pccard_loop_tuple() - loop over tuples in the CIS
 * @s:		the struct pcmcia_socket where the card is inserted
 * @function:	the device function we loop for
 * @code:	which CIS code shall we look for?
 * @parse:	buffer where the tuple shall be parsed (or NULL, if no parse)
 * @priv_data:	private data to be passed to the loop_tuple function.
 * @loop_tuple:	function to call for each CIS entry of type @function. IT
 *		gets passed the raw tuple, the paresed tuple (if @parse is
 *		set) and @priv_data.
 *
 * pccard_loop_tuple() loops over all CIS entries of type @function, and
 * calls the @loop_tuple function for each entry. If the call to @loop_tuple
 * returns 0, the loop exits. Returns 0 on success or errorcode otherwise.
 */</doc>
