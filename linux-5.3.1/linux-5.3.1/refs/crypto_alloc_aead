<dec f='linux-5.3.1/include/crypto/aead.h' l='172' type='struct crypto_aead * crypto_alloc_aead(const char * alg_name, u32 type, u32 mask)'/>
<def f='linux-5.3.1/crypto/aead.c' l='378' ll='381' type='struct crypto_aead * crypto_alloc_aead(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-5.3.1/crypto/aead.c' l='382' type='struct crypto_aead * crypto_alloc_aead(const char * , u32 , u32 )'/>
<use f='linux-5.3.1/crypto/aead.c' l='382' c='crypto_alloc_aead'/>
<use f='linux-5.3.1/crypto/aead.c' l='382' u='a'/>
<doc f='linux-5.3.1/include/crypto/aead.h' l='158'>/**
 * crypto_alloc_aead() - allocate AEAD cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	     AEAD cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for an AEAD. The returned struct
 * crypto_aead is the cipher handle that is required for any subsequent
 * API invocation for that AEAD.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='736' u='c' c='esp_init_aead'/>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='791' u='c' c='esp_init_authenc'/>
<use f='linux-5.3.1/net/mac80211/aead_api.c' l='91' u='c' c='aead_key_setup_encrypt'/>
<use f='linux-5.3.1/net/mac80211/aes_gmac.c' l='62' u='c' c='ieee80211_aes_gmac_key_setup'/>
