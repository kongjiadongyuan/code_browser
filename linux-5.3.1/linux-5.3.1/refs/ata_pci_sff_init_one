<dec f='linux-5.3.1/include/linux/libata.h' l='1882' type='int ata_pci_sff_init_one(struct pci_dev * pdev, const struct ata_port_info *const * ppi, struct scsi_host_template * sht, void * host_priv, int hflags)'/>
<def f='linux-5.3.1/drivers/ata/libata-sff.c' l='2521' ll='2526' type='int ata_pci_sff_init_one(struct pci_dev * pdev, const struct ata_port_info *const * ppi, struct scsi_host_template * sht, void * host_priv, int hflag)'/>
<dec f='linux-5.3.1/drivers/ata/libata-sff.c' l='2527' type='int ata_pci_sff_init_one(struct pci_dev * , const struct ata_port_info *const * , struct scsi_host_template * , void * , int )'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='2527' c='ata_pci_sff_init_one'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='2527' u='a'/>
<doc f='linux-5.3.1/drivers/ata/libata-sff.c' l='2499'>/**
 *	ata_pci_sff_init_one - Initialize/register PIO-only PCI IDE controller
 *	@pdev: Controller to be initialized
 *	@ppi: array of port_info, must be enough for two ports
 *	@sht: scsi_host_template to use when registering the host
 *	@host_priv: host private_data
 *	@hflag: host flags
 *
 *	This is a helper function which can be called from a driver&apos;s
 *	xxx_init_one() probe function if the hardware uses traditional
 *	IDE taskfile registers and is PIO only.
 *
 *	ASSUMPTION:
 *	Nobody makes a single channel controller that appears solely as
 *	the secondary legacy port on PCI.
 *
 *	LOCKING:
 *	Inherited from PCI layer (may sleep).
 *
 *	RETURNS:
 *	Zero on success, negative on errno-based value on error.
 */</doc>
