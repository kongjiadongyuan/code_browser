<dec f='linux-5.3.1/include/linux/mm.h' l='2450' type='void page_cache_sync_readahead(struct address_space * mapping, struct file_ra_state * ra, struct file * filp, unsigned long offset, unsigned long size)'/>
<use f='linux-5.3.1/fs/ext4/dir.c' l='174' u='c' c='ext4_readdir'/>
<use f='linux-5.3.1/mm/filemap.c' l='2071' u='c' c='generic_file_buffered_read'/>
<use f='linux-5.3.1/mm/filemap.c' l='2440' u='c' c='do_sync_mmap_readahead'/>
<def f='linux-5.3.1/mm/readahead.c' l='509' ll='528' type='void page_cache_sync_readahead(struct address_space * mapping, struct file_ra_state * ra, struct file * filp, unsigned long offset, unsigned long req_size)'/>
<dec f='linux-5.3.1/mm/readahead.c' l='529' type='void page_cache_sync_readahead(struct address_space * , struct file_ra_state * , struct file * , unsigned long , unsigned long )'/>
<use f='linux-5.3.1/mm/readahead.c' l='529' c='page_cache_sync_readahead'/>
<use f='linux-5.3.1/mm/readahead.c' l='529' u='a'/>
<doc f='linux-5.3.1/mm/readahead.c' l='495'>/**
 * page_cache_sync_readahead - generic file readahead
 * @mapping: address_space which holds the pagecache and I/O vectors
 * @ra: file_ra_state which holds the readahead state
 * @filp: passed on to -&gt;readpage() and -&gt;readpages()
 * @offset: start offset into @mapping, in pagecache page-sized units
 * @req_size: hint: total size of the read which the caller is performing in
 *            pagecache pages
 *
 * page_cache_sync_readahead() should be called when a cache miss happened:
 * it will submit the read.  The readahead logic may decide to piggyback more
 * pages onto the read request if access patterns suggest it will improve
 * performance.
 */</doc>
