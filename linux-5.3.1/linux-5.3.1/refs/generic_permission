<dec f='linux-5.3.1/include/linux/fs.h' l='2816' type='int generic_permission(struct inode * , int )'/>
<use f='linux-5.3.1/fs/kernfs/inode.c' l='287' u='c' c='kernfs_iop_permission'/>
<use f='linux-5.3.1/fs/libfs.c' l='1243'/>
<use f='linux-5.3.1/fs/libfs.c' l='1243'/>
<def f='linux-5.3.1/fs/namei.c' l='332' ll='371' type='int generic_permission(struct inode * inode, int mask)'/>
<dec f='linux-5.3.1/fs/namei.c' l='372' type='int generic_permission(struct inode * , int )'/>
<use f='linux-5.3.1/fs/namei.c' l='372' c='generic_permission'/>
<use f='linux-5.3.1/fs/namei.c' l='372' u='a'/>
<use f='linux-5.3.1/fs/namei.c' l='391' u='c' c='do_inode_permission'/>
<doc f='linux-5.3.1/fs/namei.c' l='318'>/**
 * generic_permission -  check for access rights on a Posix-like filesystem
 * @inode:	inode to check access rights for
 * @mask:	right to check for (%MAY_READ, %MAY_WRITE, %MAY_EXEC, ...)
 *
 * Used to check for read/write/execute permissions on a file.
 * We use &quot;fsuid&quot; for this, letting us set arbitrary permissions
 * for filesystem access without changing the &quot;normal&quot; uids which
 * are used for other things.
 *
 * generic_permission is rcu-walk aware. It returns -ECHILD in case an rcu-walk
 * request cannot be satisfied (eg. requires blocking or too much complexity).
 * It would then be called again in ref-walk mode.
 */</doc>
<use f='linux-5.3.1/fs/nfs/dir.c' l='2608' u='c' c='nfs_permission'/>
<use f='linux-5.3.1/fs/proc/base.c' l='735' u='c' c='proc_pid_permission'/>
<use f='linux-5.3.1/fs/proc/base.c' l='3390' u='c' c='proc_tid_comm_permission'/>
<use f='linux-5.3.1/fs/proc/fd.c' l='302' u='c' c='proc_fd_permission'/>
