<dec f='linux-5.3.1/include/linux/sunrpc/xprt.h' l='392' type='void xprt_adjust_cwnd(struct rpc_xprt * xprt, struct rpc_task * task, int result)'/>
<def f='linux-5.3.1/net/sunrpc/xprt.c' l='489' ll='510' type='void xprt_adjust_cwnd(struct rpc_xprt * xprt, struct rpc_task * task, int result)'/>
<dec f='linux-5.3.1/net/sunrpc/xprt.c' l='511' type='void xprt_adjust_cwnd(struct rpc_xprt * , struct rpc_task * , int )'/>
<use f='linux-5.3.1/net/sunrpc/xprt.c' l='511' c='xprt_adjust_cwnd'/>
<use f='linux-5.3.1/net/sunrpc/xprt.c' l='511' u='a'/>
<doc f='linux-5.3.1/net/sunrpc/xprt.c' l='473'>/**
 * xprt_adjust_cwnd - adjust transport congestion window
 * @xprt: pointer to xprt
 * @task: recently completed RPC request used to adjust window
 * @result: result code of completed RPC request
 *
 * The transport code maintains an estimate on the maximum number of out-
 * standing RPC requests, using a smoothed version of the congestion
 * avoidance implemented in 44BSD. This is basically the Van Jacobson
 * congestion algorithm: If a retransmit occurs, the congestion window is
 * halved; otherwise, it is incremented by 1/cwnd when
 *
 *	-	a reply is received and
 *	-	a full number of requests are outstanding and
 *	-	the congestion window hasn&apos;t been updated recently.
 */</doc>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='1403' u='c' c='xs_udp_data_read_skb'/>
<use f='linux-5.3.1/net/sunrpc/xprtsock.c' l='1681' u='c' c='xs_udp_timer'/>
