<dec f='linux-5.3.1/include/linux/libata.h' l='1918' type='int ata_pci_bmdma_init_one(struct pci_dev * pdev, const struct ata_port_info *const * ppi, struct scsi_host_template * sht, void * host_priv, int hflags)'/>
<def f='linux-5.3.1/drivers/ata/libata-sff.c' l='3239' ll='3245' type='int ata_pci_bmdma_init_one(struct pci_dev * pdev, const struct ata_port_info *const * ppi, struct scsi_host_template * sht, void * host_priv, int hflags)'/>
<dec f='linux-5.3.1/drivers/ata/libata-sff.c' l='3246' type='int ata_pci_bmdma_init_one(struct pci_dev * , const struct ata_port_info *const * , struct scsi_host_template * , void * , int )'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='3246' c='ata_pci_bmdma_init_one'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='3246' u='a'/>
<doc f='linux-5.3.1/drivers/ata/libata-sff.c' l='3222'>/**
 *	ata_pci_bmdma_init_one - Initialize/register BMDMA PCI IDE controller
 *	@pdev: Controller to be initialized
 *	@ppi: array of port_info, must be enough for two ports
 *	@sht: scsi_host_template to use when registering the host
 *	@host_priv: host private_data
 *	@hflags: host flags
 *
 *	This function is similar to ata_pci_sff_init_one() but also
 *	takes care of BMDMA initialization.
 *
 *	LOCKING:
 *	Inherited from PCI layer (may sleep).
 *
 *	RETURNS:
 *	Zero on success, negative on errno-based value on error.
 */</doc>
<use f='linux-5.3.1/drivers/ata/pata_amd.c' l='575' u='c' c='amd_init_one'/>
<use f='linux-5.3.1/drivers/ata/pata_oldpiix.c' l='248' u='c' c='oldpiix_init_one'/>
<use f='linux-5.3.1/drivers/ata/pata_sch.c' l='164' u='c' c='sch_init_one'/>
