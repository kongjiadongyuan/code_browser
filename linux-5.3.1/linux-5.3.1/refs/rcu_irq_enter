<dec f='linux-5.3.1/include/linux/rcutree.h' l='45' type='void rcu_irq_enter()'/>
<def f='linux-5.3.1/kernel/rcu/tree.c' l='860' ll='864' type='void rcu_irq_enter()'/>
<use f='linux-5.3.1/kernel/rcu/tree.c' l='877' u='c' c='rcu_irq_enter_irqson'/>
<doc f='linux-5.3.1/kernel/rcu/tree.c' l='838'>/**
 * rcu_irq_enter - inform RCU that current CPU is entering irq away from idle
 *
 * Enter an interrupt handler, which might possibly result in exiting
 * idle mode, in other words, entering the mode in which read-side critical
 * sections can occur.  The caller must have disabled interrupts.
 *
 * Note that the Linux kernel is fully capable of entering an interrupt
 * handler that it never exits, for example when doing upcalls to user mode!
 * This code assumes that the idle loop never does upcalls to user mode.
 * If your architecture&apos;s idle loop does do upcalls to user mode (or does
 * anything else that results in unbalanced calls to the irq_enter() and
 * irq_exit() functions), RCU will give you what you deserve, good and hard.
 * But very infrequently and irreproducibly.
 *
 * Use things like work queues to work around this limitation.
 *
 * You have been warned.
 *
 * If you add or remove a call to rcu_irq_enter(), be sure to test with
 * CONFIG_RCU_EQS_DEBUG=y.
 */</doc>
<use f='linux-5.3.1/kernel/softirq.c' l='347' u='c' c='irq_enter'/>
