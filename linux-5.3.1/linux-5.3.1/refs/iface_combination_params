<def f='linux-5.3.1/include/net/cfg80211.h' l='976' ll='981'/>
<use f='linux-5.3.1/include/net/cfg80211.h' l='7137' c='cfg80211_check_combinations'/>
<use f='linux-5.3.1/include/net/cfg80211.h' l='7152' c='cfg80211_iter_combinations'/>
<size>64</size>
<doc f='linux-5.3.1/include/net/cfg80211.h' l='959'>/**
 * struct iface_combination_params - input parameters for interface combinations
 *
 * Used to pass interface combination parameters
 *
 * @num_different_channels: the number of different channels we want
 *	to use for verification
 * @radar_detect: a bitmap where each bit corresponds to a channel
 *	width where radar detection is needed, as in the definition of
 *	&amp;struct ieee80211_iface_combination.@radar_detect_widths
 * @iftype_num: array with the number of interfaces of each interface
 *	type.  The index is the interface type as specified in &amp;enum
 *	nl80211_iftype.
 * @new_beacon_int: set this to the beacon interval of a new interface
 *	that&apos;s not operating yet, if such is to be checked as part of
 *	the verification
 */</doc>
<mbr r='iface_combination_params::num_different_channels' o='0' t='int'/>
<mbr r='iface_combination_params::radar_detect' o='32' t='u8'/>
<mbr r='iface_combination_params::iftype_num' o='64' t='int [13]'/>
<mbr r='iface_combination_params::new_beacon_int' o='480' t='u32'/>
<use f='linux-5.3.1/net/mac80211/util.c' l='3772' c='ieee80211_check_combinations'/>
<use f='linux-5.3.1/net/mac80211/util.c' l='3864' c='ieee80211_max_num_channels'/>
<size>64</size>
<use f='linux-5.3.1/net/wireless/util.c' l='1668' c='cfg80211_iter_combinations'/>
<use f='linux-5.3.1/net/wireless/util.c' l='1785' c='cfg80211_check_combinations'/>
<size>64</size>
