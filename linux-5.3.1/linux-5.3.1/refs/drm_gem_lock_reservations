<dec f='linux-5.3.1/include/drm/drm_gem.h' l='389' type='int drm_gem_lock_reservations(struct drm_gem_object ** objs, int count, struct ww_acquire_ctx * acquire_ctx)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1278' ll='1327' type='int drm_gem_lock_reservations(struct drm_gem_object ** objs, int count, struct ww_acquire_ctx * acquire_ctx)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1328' type='int drm_gem_lock_reservations(struct drm_gem_object ** , int , struct ww_acquire_ctx * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1328' c='drm_gem_lock_reservations'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1328' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='1265'>/**
 * drm_gem_lock_reservations - Sets up the ww context and acquires
 * the lock on an array of GEM objects.
 *
 * Once you&apos;ve locked your reservations, you&apos;ll want to set up space
 * for your shared fences (if applicable), submit your job, then
 * drm_gem_unlock_reservations().
 *
 * @objs: drm_gem_objects to lock
 * @count: Number of objects in @objs
 * @acquire_ctx: struct ww_acquire_ctx that will be initialized as
 * part of tracking this set of locked reservations.
 */</doc>
