<dec f='linux-5.3.1/include/linux/input/mt.h' l='118' type='int input_mt_assign_slots(struct input_dev * dev, int * slots, const struct input_mt_pos * pos, int num_pos, int dmax)'/>
<def f='linux-5.3.1/drivers/input/input-mt.c' l='437' ll='457' type='int input_mt_assign_slots(struct input_dev * dev, int * slots, const struct input_mt_pos * pos, int num_pos, int dmax)'/>
<dec f='linux-5.3.1/drivers/input/input-mt.c' l='458' type='int input_mt_assign_slots(struct input_dev * , int * , const struct input_mt_pos * , int , int )'/>
<use f='linux-5.3.1/drivers/input/input-mt.c' l='458' c='input_mt_assign_slots'/>
<use f='linux-5.3.1/drivers/input/input-mt.c' l='458' u='a'/>
<doc f='linux-5.3.1/drivers/input/input-mt.c' l='419'>/**
 * input_mt_assign_slots() - perform a best-match assignment
 * @dev: input device with allocated MT slots
 * @slots: the slot assignment to be filled
 * @pos: the position array to match
 * @num_pos: number of positions
 * @dmax: maximum ABS_MT_POSITION displacement (zero for infinite)
 *
 * Performs a best match against the current contacts and returns
 * the slot assignment list. New contacts are assigned to unused
 * slots.
 *
 * The assignments are balanced so that all coordinate displacements are
 * below the euclidian distance dmax. If no such assignment can be found,
 * some contacts are assigned to unused slots.
 *
 * Returns zero on success, or negative error in case of failure.
 */</doc>
<use f='linux-5.3.1/drivers/input/mouse/alps.c' l='517' u='c' c='alps_report_mt_data'/>
<use f='linux-5.3.1/drivers/input/mouse/cypress_ps2.c' l='536' u='c' c='cypress_process_packet'/>
<use f='linux-5.3.1/drivers/input/mouse/synaptics.c' l='995' u='c' c='synaptics_report_mt_data'/>
