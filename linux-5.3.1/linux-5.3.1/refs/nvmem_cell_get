<dec f='linux-5.3.1/include/linux/nvmem-consumer.h' l='58' type='struct nvmem_cell * nvmem_cell_get(struct device * dev, const char * id)'/>
<def f='linux-5.3.1/drivers/nvmem/core.c' l='816' ll='831' type='struct nvmem_cell * nvmem_cell_get(struct device * dev, const char * id)'/>
<dec f='linux-5.3.1/drivers/nvmem/core.c' l='832' type='struct nvmem_cell * nvmem_cell_get(struct device * , const char * )'/>
<use f='linux-5.3.1/drivers/nvmem/core.c' l='832' c='nvmem_cell_get'/>
<use f='linux-5.3.1/drivers/nvmem/core.c' l='832' u='a'/>
<use f='linux-5.3.1/drivers/nvmem/core.c' l='857' u='c' c='devm_nvmem_cell_get'/>
<use f='linux-5.3.1/drivers/nvmem/core.c' l='1101' u='c' c='nvmem_cell_read_u16'/>
<use f='linux-5.3.1/drivers/nvmem/core.c' l='1138' u='c' c='nvmem_cell_read_u32'/>
<doc f='linux-5.3.1/drivers/nvmem/core.c' l='804'>/**
 * nvmem_cell_get() - Get nvmem cell of device form a given cell name
 *
 * @dev: Device that requests the nvmem cell.
 * @id: nvmem cell name to get (this corresponds with the name from the
 *      nvmem-cell-names property for DT systems and with the con_id from
 *      the lookup entry for non-DT systems).
 *
 * Return: Will be an ERR_PTR() on error or a valid pointer
 * to a struct nvmem_cell.  The nvmem_cell will be freed by the
 * nvmem_cell_put().
 */</doc>
<doc f='linux-5.3.1/include/linux/nvmem-consumer.h' l='57'>/* Cell based interface */</doc>
<use f='linux-5.3.1/net/ethernet/eth.c' l='579' u='c' c='nvmem_get_mac_address'/>
