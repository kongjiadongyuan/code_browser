<dec f='linux-5.3.1/include/linux/thermal.h' l='451' type='struct thermal_cooling_device * devm_thermal_of_cooling_device_register(struct device * dev, struct device_node * np, char * type, void * devdata, const struct thermal_cooling_device_ops * ops)'/>
<def f='linux-5.3.1/drivers/thermal/thermal_core.c' l='1078' ll='1101' type='struct thermal_cooling_device * devm_thermal_of_cooling_device_register(struct device * dev, struct device_node * np, char * type, void * devdata, const struct thermal_cooling_device_ops * ops)'/>
<dec f='linux-5.3.1/drivers/thermal/thermal_core.c' l='1102' type='struct thermal_cooling_device * devm_thermal_of_cooling_device_register(struct device * , struct device_node * , char * , void * , const struct thermal_cooling_device_ops * )'/>
<use f='linux-5.3.1/drivers/thermal/thermal_core.c' l='1102' c='devm_thermal_of_cooling_device_register'/>
<use f='linux-5.3.1/drivers/thermal/thermal_core.c' l='1102' u='a'/>
<doc f='linux-5.3.1/drivers/thermal/thermal_core.c' l='1061'>/**
 * devm_thermal_of_cooling_device_register() - register an OF thermal cooling
 *					       device
 * @dev:	a valid struct device pointer of a sensor device.
 * @np:		a pointer to a device tree node.
 * @type:	the thermal cooling device type.
 * @devdata:	device private data.
 * @ops:	standard thermal cooling devices callbacks.
 *
 * This function will register a cooling device with device tree node reference.
 * This interface function adds a new thermal cooling device (fan/processor/...)
 * to /sys/class/thermal/ folder as cooling_device[0-*]. It tries to bind itself
 * to all the thermal zone devices registered at the same time.
 *
 * Return: a pointer to the created struct thermal_cooling_device or an
 * ERR_PTR. Caller must check return value with IS_ERR*() helpers.
 */</doc>
