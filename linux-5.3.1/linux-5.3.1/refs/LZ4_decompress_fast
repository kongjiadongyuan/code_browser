<dec f='linux-5.3.1/include/linux/lz4.h' l='271' type='int LZ4_decompress_fast(const char * source, char * dest, int originalSize)'/>
<doc f='linux-5.3.1/include/linux/lz4.h' l='252'>/**
 * LZ4_decompress_fast() - Decompresses data from &apos;source&apos; into &apos;dest&apos;
 * @source: source address of the compressed data
 * @dest: output buffer address of the uncompressed data
 *	which must be already allocated with &apos;originalSize&apos; bytes
 * @originalSize: is the original and therefore uncompressed size
 *
 * Decompresses data from &apos;source&apos; into &apos;dest&apos;.
 * This function fully respect memory boundaries for properly formed
 * compressed data.
 * It is a bit faster than LZ4_decompress_safe().
 * However, it does not provide any protection against intentionally
 * modified data stream (malicious input).
 * Use this function in trusted environment only
 * (data to decode comes from a trusted source).
 *
 * Return: number of bytes read from the source buffer
 *	or a negative result if decompression fails.
 */</doc>
<def f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='467' ll='473' type='int LZ4_decompress_fast(const char * source, char * dest, int originalSize)'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='637' u='c' c='LZ4_decompress_fast_continue'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='645' u='c' c='LZ4_decompress_fast_continue'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='691' u='c' c='LZ4_decompress_fast_usingDict'/>
<dec f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='700' type='int LZ4_decompress_fast(const char * , char * , int )'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='700' c='LZ4_decompress_fast'/>
<use f='linux-5.3.1/lib/lz4/lz4_decompress.c' l='700' u='a'/>
