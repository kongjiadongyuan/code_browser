<dec f='linux-5.3.1/include/crypto/kpp.h' l='105' type='struct crypto_kpp * crypto_alloc_kpp(const char * alg_name, u32 type, u32 mask)'/>
<def f='linux-5.3.1/crypto/kpp.c' l='84' ll='87' type='struct crypto_kpp * crypto_alloc_kpp(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-5.3.1/crypto/kpp.c' l='88' type='struct crypto_kpp * crypto_alloc_kpp(const char * , u32 , u32 )'/>
<use f='linux-5.3.1/crypto/kpp.c' l='88' c='crypto_alloc_kpp'/>
<use f='linux-5.3.1/crypto/kpp.c' l='88' u='a'/>
<doc f='linux-5.3.1/include/crypto/kpp.h' l='93'>/**
 * crypto_alloc_kpp() - allocate KPP tfm handle
 * @alg_name: is the name of the kpp algorithm (e.g. &quot;dh&quot;, &quot;ecdh&quot;)
 * @type: specifies the type of the algorithm
 * @mask: specifies the mask for the algorithm
 *
 * Allocate a handle for kpp algorithm. The returned struct crypto_kpp
 * is required for any following API invocation
 *
 * Return: allocated handle in case of success; IS_ERR() is true in case of
 *	   an error, PTR_ERR() returns the error code.
 */</doc>
