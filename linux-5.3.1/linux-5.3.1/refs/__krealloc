<dec f='linux-5.3.1/include/linux/slab.h' l='187' type='void * __krealloc(const void * , size_t , gfp_t )'/>
<doc f='linux-5.3.1/include/linux/slab.h' l='184'>/*
 * Common kmalloc functions provided by all allocators
 */</doc>
<def f='linux-5.3.1/mm/slab_common.c' l='1620' ll='1627' type='void * __krealloc(const void * p, size_t new_size, gfp_t flags)'/>
<dec f='linux-5.3.1/mm/slab_common.c' l='1628' type='void * __krealloc(const void * , size_t , gfp_t )'/>
<use f='linux-5.3.1/mm/slab_common.c' l='1628' c='__krealloc'/>
<use f='linux-5.3.1/mm/slab_common.c' l='1628' u='a'/>
<doc f='linux-5.3.1/mm/slab_common.c' l='1608'>/**
 * __krealloc - like krealloc() but don&apos;t free @p.
 * @p: object to reallocate memory for.
 * @new_size: how many bytes of memory are required.
 * @flags: the type of memory to allocate.
 *
 * This function is like krealloc() except it never frees the originally
 * allocated buffer. Use this if you don&apos;t want to free the buffer immediately
 * like, for example, with RCU.
 *
 * Return: pointer to the allocated memory or %NULL in case of error
 */</doc>
<use f='linux-5.3.1/net/netfilter/nf_conntrack_extend.c' l='72' u='c' c='nf_ct_ext_add'/>
