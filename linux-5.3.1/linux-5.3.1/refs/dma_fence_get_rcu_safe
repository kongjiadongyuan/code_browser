<def f='linux-5.3.1/include/linux/dma-fence.h' l='306' ll='338' type='struct dma_fence * dma_fence_get_rcu_safe(struct dma_fence ** fencep)'/>
<use f='linux-5.3.1/include/linux/reservation.h' l='268' u='c' c='reservation_object_get_excl_rcu'/>
<doc f='linux-5.3.1/include/linux/dma-fence.h' l='290'>/**
 * dma_fence_get_rcu_safe  - acquire a reference to an RCU tracked fence
 * @fencep: pointer to fence to increase refcount of
 *
 * Function returns NULL if no refcount could be obtained, or the fence.
 * This function handles acquiring a reference to a fence that may be
 * reallocated within the RCU grace period (such as with SLAB_TYPESAFE_BY_RCU),
 * so long as the caller is using RCU on the pointer to the fence.
 *
 * An alternative mechanism is to employ a seqlock to protect a bunch of
 * fences, such as used by struct reservation_object. When using a seqlock,
 * the seqlock must be taken before and checked after a reference to the
 * fence is acquired (as shown here).
 *
 * The caller is required to hold the RCU read lock.
 */</doc>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence-chain.c' l='26' u='c' c='dma_fence_chain_get_prev'/>
<use f='linux-5.3.1/drivers/dma-buf/reservation.c' l='295' u='c' c='reservation_object_copy_fences'/>
<use f='linux-5.3.1/include/drm/drm_syncobj.h' l='108' u='c' c='drm_syncobj_fence_get'/>
