<dec f='linux-5.3.1/include/drm/drm_damage_helper.h' l='75' type='void drm_atomic_helper_damage_iter_init(struct drm_atomic_helper_damage_iter * iter, const struct drm_plane_state * old_state, const struct drm_plane_state * new_state)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='269' ll='293' type='void drm_atomic_helper_damage_iter_init(struct drm_atomic_helper_damage_iter * iter, const struct drm_plane_state * old_state, const struct drm_plane_state * state)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='294' type='void drm_atomic_helper_damage_iter_init(struct drm_atomic_helper_damage_iter * , const struct drm_plane_state * , const struct drm_plane_state * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='294' c='drm_atomic_helper_damage_iter_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='294' u='a'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='366' u='c' c='drm_atomic_helper_damage_merged'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_damage_helper.c' l='251'>/**
 * drm_atomic_helper_damage_iter_init - Initialize the damage iterator.
 * @iter: The iterator to initialize.
 * @old_state: Old plane state for validation.
 * @state: Plane state from which to iterate the damage clips.
 *
 * Initialize an iterator, which clips plane damage
 * &amp;drm_plane_state.fb_damage_clips to plane &amp;drm_plane_state.src. This iterator
 * returns full plane src in case damage is not present because either
 * user-space didn&apos;t sent or driver discarded it (it want to do full plane
 * update). Currently this iterator returns full plane src in case plane src
 * changed but that can be changed in future to return damage.
 *
 * For the case when plane is not visible or plane update should not happen the
 * first call to iter_next will return false. Note that this helper use clipped
 * &amp;drm_plane_state.src, so driver calling this helper should have called
 * drm_atomic_helper_check_plane_state() earlier.
 */</doc>
