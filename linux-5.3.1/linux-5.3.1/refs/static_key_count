<dec f='linux-5.3.1/include/linux/jump_label.h' l='227' type='int static_key_count(struct static_key * key)'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/bugs.c' l='543' macro='1' u='c' c='spectre_v2_user_select_mitigation'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/bugs.c' l='1345' macro='1' u='c' c='stibp_state'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/bugs.c' l='1354' macro='1' u='c' c='ibpb_state'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/bugs.c' l='1356' macro='1' u='c' c='ibpb_state'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='242' macro='1' u='c' c='cgroup_ssid_enabled'/>
<use f='linux-5.3.1/kernel/cgroup/cpuset.c' l='665' u='c' c='nr_cpusets'/>
<def f='linux-5.3.1/kernel/jump_label.c' l='104' ll='113' type='int static_key_count(struct static_key * key)'/>
<dec f='linux-5.3.1/kernel/jump_label.c' l='114' type='int static_key_count(struct static_key * )'/>
<use f='linux-5.3.1/kernel/jump_label.c' l='114' c='static_key_count'/>
<use f='linux-5.3.1/kernel/jump_label.c' l='114' u='a'/>
<use f='linux-5.3.1/kernel/jump_label.c' l='394' macro='1' u='c' c='jump_label_type'/>
<doc f='linux-5.3.1/kernel/jump_label.c' l='95'>/*
 * There are similar definitions for the !CONFIG_JUMP_LABEL case in jump_label.h.
 * The use of &apos;atomic_read()&apos; requires atomic.h and its problematic for some
 * kernel headers such as kernel.h and others. Since static_key_count() is not
 * used in the branch statements as it is for the !CONFIG_JUMP_LABEL case its ok
 * to have it be a function here. Similarly, for &apos;static_key_enable()&apos; and
 * &apos;static_key_disable()&apos;, which require bug.h. This should allow jump_label.h
 * to be included from most/all places for CONFIG_JUMP_LABEL.
 */</doc>
<use f='linux-5.3.1/kernel/sched/clock.c' l='195' u='c' c='clear_sched_clock_stable'/>
<use f='linux-5.3.1/kernel/sysctl.c' l='3403' macro='1' u='c' c='proc_do_static_key'/>
<use f='linux-5.3.1/kernel/tracepoint.c' l='233' macro='1' u='c' c='tracepoint_add_func'/>
<use f='linux-5.3.1/kernel/tracepoint.c' l='254' macro='1' u='c' c='tracepoint_add_func'/>
<use f='linux-5.3.1/kernel/tracepoint.c' l='281' macro='1' u='c' c='tracepoint_remove_func'/>
<use f='linux-5.3.1/kernel/tracepoint.c' l='284' macro='1' u='c' c='tracepoint_remove_func'/>
<use f='linux-5.3.1/lib/once.c' l='17' macro='1' u='c' c='once_deferred'/>
