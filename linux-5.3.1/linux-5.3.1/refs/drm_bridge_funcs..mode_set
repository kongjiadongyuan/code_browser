<dec f='linux-5.3.1/include/drm/drm_bridge.h' l='198' type='void (*)(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *)'/>
<offset>384</offset>
<doc f='linux-5.3.1/include/drm/drm_bridge.h' l='172'>/**
	 * @mode_set:
	 *
	 * This callback should set the given mode on the bridge. It is called
	 * after the @mode_set callback for the preceding element in the display
	 * pipeline has been called already. If the bridge is the first element
	 * then this would be &amp;drm_encoder_helper_funcs.mode_set. The display
	 * pipe (i.e.  clocks and timing signals) is off when this function is
	 * called.
	 *
	 * The adjusted_mode parameter is the mode output by the CRTC for the
	 * first bridge in the chain. It can be different from the mode
	 * parameter that contains the desired mode for the connector at the end
	 * of the bridges chain, for instance when the first bridge in the chain
	 * performs scaling. The adjusted mode is mostly useful for the first
	 * bridge in the chain and is likely irrelevant for the other bridges.
	 *
	 * For atomic drivers the adjusted_mode is the mode stored in
	 * &amp;drm_crtc_state.adjusted_mode.
	 *
	 * NOTE:
	 *
	 * If a need arises to store and access modes adjusted for other
	 * locations than the connection between the CRTC and the first bridge,
	 * the DRM framework will have to be extended with DRM bridge states.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_bridge.c' l='303' u='r' c='drm_bridge_mode_set'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_bridge.c' l='304' u='r' c='drm_bridge_mode_set'/>
