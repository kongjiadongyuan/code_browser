<dec f='linux-5.3.1/include/linux/umh.h' l='35' type='int call_usermodehelper(const char * path, char ** argv, char ** envp, int wait)'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup-v1.c' l='824' u='c' c='cgroup1_release_agent'/>
<use f='linux-5.3.1/kernel/reboot.c' l='433' u='c' c='run_cmd'/>
<def f='linux-5.3.1/kernel/umh.c' l='618' ll='629' type='int call_usermodehelper(const char * path, char ** argv, char ** envp, int wait)'/>
<dec f='linux-5.3.1/kernel/umh.c' l='630' type='int call_usermodehelper(const char * , char ** , char ** , int )'/>
<use f='linux-5.3.1/kernel/umh.c' l='630' c='call_usermodehelper'/>
<use f='linux-5.3.1/kernel/umh.c' l='630' u='a'/>
<doc f='linux-5.3.1/kernel/umh.c' l='605'>/**
 * call_usermodehelper() - prepare and start a usermode application
 * @path: path to usermode executable
 * @argv: arg vector for process
 * @envp: environment for process
 * @wait: wait for the application to finish and return status.
 *        when UMH_NO_WAIT don&apos;t wait at all, but you get no useful error back
 *        when the program couldn&apos;t be exec&apos;ed. This makes it safe to call
 *        from interrupt context.
 *
 * This function is the equivalent to use call_usermodehelper_setup() and
 * call_usermodehelper_exec().
 */</doc>
