<def f='linux-5.3.1/arch/x86/include/asm/orc_types.h' l='73' ll='80'/>
<use f='linux-5.3.1/arch/x86/include/asm/module.h' l='12'/>
<size>6</size>
<doc f='linux-5.3.1/arch/x86/include/asm/orc_types.h' l='65'>/*
 * This struct is more or less a vastly simplified version of the DWARF Call
 * Frame Information standard.  It contains only the necessary parts of DWARF
 * CFI, simplified for ease of access by the in-kernel unwinder.  It tells the
 * unwinder how to find the previous SP and BP (and sometimes entry regs) on
 * the stack for a given code address.  Each instance of the struct corresponds
 * to one or more code locations.
 */</doc>
<mbr r='orc_entry::sp_offset' o='0' t='s16'/>
<mbr r='orc_entry::bp_offset' o='16' t='s16'/>
<mbr r='orc_entry::sp_reg' o='32' t='unsigned int'/>
<mbr r='orc_entry::bp_reg' o='36' t='unsigned int'/>
<mbr r='orc_entry::type' o='40' t='unsigned int'/>
<mbr r='orc_entry::end' o='42' t='unsigned int'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='15'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='16'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='20'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='30' c='__orc_find'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='30' c='__orc_find'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='60' c='orc_module_find'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='111' c='orc_ftrace_find'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='124'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='132'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='141' c='orc_find'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='143' c='orc_find'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='192' c='orc_sort_swap'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='192' c='orc_sort_swap'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='193' c='orc_sort_swap'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='212' c='orc_sort_cmp'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='237' c='unwind_module_init'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='266' c='unwind_init'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='270' c='unwind_init'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='271' c='unwind_init'/>
<use f='linux-5.3.1/arch/x86/kernel/unwind_orc.c' l='385' c='unwind_next_frame'/>
<size>6</size>
<def f='linux-5.3.1/tools/objtool/arch/x86/include/asm/orc_types.h' l='73' ll='80'/>
<use f='linux-5.3.1/tools/objtool/check.h' l='47'/>
<size>6</size>
<doc f='linux-5.3.1/tools/objtool/arch/x86/include/asm/orc_types.h' l='65'>/*
 * This struct is more or less a vastly simplified version of the DWARF Call
 * Frame Information standard.  It contains only the necessary parts of DWARF
 * CFI, simplified for ease of access by the in-kernel unwinder.  It tells the
 * unwinder how to find the previous SP and BP (and sometimes entry regs) on
 * the stack for a given code address.  Each instance of the struct corresponds
 * to one or more code locations.
 */</doc>
<mbr r='orc_entry::sp_offset' o='0' t='s16'/>
<mbr r='orc_entry::bp_offset' o='16' t='s16'/>
<mbr r='orc_entry::sp_reg' o='32' t='unsigned int'/>
<mbr r='orc_entry::bp_reg' o='36' t='unsigned int'/>
<mbr r='orc_entry::type' o='40' t='unsigned int'/>
<mbr r='orc_entry::end' o='42' t='unsigned int'/>
<use f='linux-5.3.1/tools/objtool/orc_dump.c' l='65' c='orc_dump'/>
<size>6</size>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='18' c='create_orc'/>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='86' c='create_orc_entry'/>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='88' c='create_orc_entry'/>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='97' c='create_orc_entry'/>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='125' c='create_orc_sections'/>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='147' c='create_orc_sections'/>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='172' c='create_orc_sections'/>
<use f='linux-5.3.1/tools/objtool/orc_gen.c' l='183' c='create_orc_sections'/>
<size>6</size>
