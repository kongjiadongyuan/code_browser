<dec f='linux-5.3.1/include/linux/fs_context.h' l='146' type='int vfs_get_super(struct fs_context * fc, enum vfs_get_super_keying keying, int (*)(struct super_block *, struct fs_context *) fill_super)'/>
<use f='linux-5.3.1/fs/proc/root.c' l='161' u='c' c='proc_get_tree'/>
<def f='linux-5.3.1/fs/super.c' l='1156' ll='1195' type='int vfs_get_super(struct fs_context * fc, enum vfs_get_super_keying keying, int (*)(struct super_block *, struct fs_context *) fill_super)'/>
<dec f='linux-5.3.1/fs/super.c' l='1196' type='int vfs_get_super(struct fs_context * , enum vfs_get_super_keying , int (*)(struct super_block *, struct fs_context *) )'/>
<use f='linux-5.3.1/fs/super.c' l='1196' c='vfs_get_super'/>
<use f='linux-5.3.1/fs/super.c' l='1196' u='a'/>
<use f='linux-5.3.1/fs/super.c' l='1202' u='c' c='get_tree_nodev'/>
<use f='linux-5.3.1/fs/super.c' l='1210' u='c' c='get_tree_single'/>
<doc f='linux-5.3.1/fs/super.c' l='1131'>/**
 * vfs_get_super - Get a superblock with a search key set in s_fs_info.
 * @fc: The filesystem context holding the parameters
 * @keying: How to distinguish superblocks
 * @fill_super: Helper to initialise a new superblock
 *
 * Search for a superblock and create a new one if not found.  The search
 * criterion is controlled by @keying.  If the search fails, a new superblock
 * is created and @fill_super() is called to initialise it.
 *
 * @keying can take one of a number of values:
 *
 * (1) vfs_get_single_super - Only one superblock of this type may exist on the
 *     system.  This is typically used for special system filesystems.
 *
 * (2) vfs_get_keyed_super - Multiple superblocks may exist, but they must have
 *     distinct keys (where the key is in s_fs_info).  Searching for the same
 *     key again will turn up the superblock for that key.
 *
 * (3) vfs_get_independent_super - Multiple superblocks may exist and are
 *     unkeyed.  Each call will get a new superblock.
 *
 * A permissions check is made by sget_fc() unless we&apos;re getting a superblock
 * for a kernel-internal mount or a submount.
 */</doc>
<use f='linux-5.3.1/ipc/mqueue.c' l='368' u='c' c='mqueue_get_tree'/>
<use f='linux-5.3.1/net/sunrpc/rpc_pipe.c' l='1420' u='c' c='rpc_fs_get_tree'/>
