<dec f='linux-5.3.1/include/drm/drm_vma_manager.h' l='64' type='void drm_vma_offset_manager_init(struct drm_vma_offset_manager * mgr, unsigned long page_offset, unsigned long size)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem.c' l='98' u='c' c='drm_gem_init'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_vma_manager.c' l='85' ll='90' type='void drm_vma_offset_manager_init(struct drm_vma_offset_manager * mgr, unsigned long page_offset, unsigned long size)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_vma_manager.c' l='91' type='void drm_vma_offset_manager_init(struct drm_vma_offset_manager * , unsigned long , unsigned long )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_vma_manager.c' l='91' c='drm_vma_offset_manager_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_vma_manager.c' l='91' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_vma_manager.c' l='70'>/**
 * drm_vma_offset_manager_init - Initialize new offset-manager
 * @mgr: Manager object
 * @page_offset: Offset of available memory area (page-based)
 * @size: Size of available address space range (page-based)
 *
 * Initialize a new offset-manager. The offset and area size available for the
 * manager are given as @page_offset and @size. Both are interpreted as
 * page-numbers, not bytes.
 *
 * Adding/removing nodes from the manager is locked internally and protected
 * against concurrent access. However, node allocation and destruction is left
 * for the caller. While calling into the vma-manager, a given node must
 * always be guaranteed to be referenced.
 */</doc>
