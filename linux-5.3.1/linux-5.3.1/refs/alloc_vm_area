<dec f='linux-5.3.1/include/linux/vmalloc.h' l='184' type='struct vm_struct * alloc_vm_area(size_t size, pte_t ** ptes)'/>
<doc f='linux-5.3.1/include/linux/vmalloc.h' l='183'>/* Allocate/destroy a &apos;vmalloc&apos; VM area. */</doc>
<def f='linux-5.3.1/mm/vmalloc.c' l='3081' ll='3101' type='struct vm_struct * alloc_vm_area(size_t size, pte_t ** ptes)'/>
<dec f='linux-5.3.1/mm/vmalloc.c' l='3102' type='struct vm_struct * alloc_vm_area(size_t , pte_t ** )'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='3102' c='alloc_vm_area'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='3102' u='a'/>
<doc f='linux-5.3.1/mm/vmalloc.c' l='3067'>/**
 * alloc_vm_area - allocate a range of kernel address space
 * @size:	   size of the area
 * @ptes:	   returns the PTEs for the address space
 *
 * Returns:	NULL on failure, vm_struct on success
 *
 * This function reserves a range of kernel address space, and
 * allocates pagetables to map that range.  No actual mappings
 * are created.
 *
 * If @ptes is non-NULL, pointers to the PTEs (in init_mm)
 * allocated for the VM area are returned.
 */</doc>
