<dec f='linux-5.3.1/include/net/rtnetlink.h' l='169' type='struct net * rtnl_get_net_ns_capable(struct sock * sk, int netnsid)'/>
<use f='linux-5.3.1/net/core/net_namespace.c' l='905' u='c' c='rtnl_net_getid'/>
<use f='linux-5.3.1/net/core/net_namespace.c' l='990' u='c' c='rtnl_valid_dump_net_req'/>
<def f='linux-5.3.1/net/core/rtnetlink.c' l='1864' ll='1880' type='struct net * rtnl_get_net_ns_capable(struct sock * sk, int netnsid)'/>
<dec f='linux-5.3.1/net/core/rtnetlink.c' l='1881' type='struct net * rtnl_get_net_ns_capable(struct sock * , int )'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='1881' c='rtnl_get_net_ns_capable'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='1881' u='a'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='1964' u='c' c='rtnl_dump_ifinfo'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='2846' u='c' c='rtnl_dellink'/>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='3330' u='c' c='rtnl_getlink'/>
<doc f='linux-5.3.1/net/core/rtnetlink.c' l='1856'>/**
 * rtnl_get_net_ns_capable - Get netns if sufficiently privileged.
 * @sk: netlink socket
 * @netnsid: network namespace identifier
 *
 * Returns the network namespace identified by netnsid on success or an error
 * pointer on failure.
 */</doc>
<use f='linux-5.3.1/net/ipv4/devinet.c' l='1756' u='c' c='inet_valid_dump_ifaddr_req'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='5103' u='c' c='inet6_valid_dump_ifaddr_req'/>
<use f='linux-5.3.1/net/ipv6/addrconf.c' l='5294' u='c' c='inet6_rtm_getaddr'/>
