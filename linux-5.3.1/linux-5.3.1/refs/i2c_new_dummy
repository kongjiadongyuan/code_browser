<dec f='linux-5.3.1/include/linux/i2c.h' l='467' type='struct i2c_client * i2c_new_dummy(struct i2c_adapter * adap, u16 address)'/>
<doc f='linux-5.3.1/include/linux/i2c.h' l='463'>/* For devices that use several addresses, use i2c_new_dummy() to make
 * client handles for the extra addresses.
 */</doc>
<def f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='915' ll='921' type='struct i2c_client * i2c_new_dummy(struct i2c_adapter * adapter, u16 address)'/>
<dec f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='922' type='struct i2c_client * i2c_new_dummy(struct i2c_adapter * , u16 )'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='922' c='i2c_new_dummy'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='922' u='a'/>
<use f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='1005' u='c' c='i2c_new_secondary_device'/>
<doc f='linux-5.3.1/drivers/i2c/i2c-core-base.c' l='901'>/**
 * i2c_new_dummy - return a new i2c device bound to a dummy driver
 * @adapter: the adapter managing the device
 * @address: seven bit address to be used
 * Context: can sleep
 *
 * This deprecated function has the same functionality as @i2c_new_dummy_device,
 * it just returns NULL instead of an ERR_PTR in case of an error for
 * compatibility with current I2C API. It will be removed once all users are
 * converted.
 *
 * This returns the new i2c client, which should be saved for later use with
 * i2c_unregister_device(); or NULL to indicate an error.
 */</doc>
