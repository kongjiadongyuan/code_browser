<dec f='linux-5.3.1/include/crypto/public_key.h' l='77' type='int create_signature(struct kernel_pkey_params * , const void * , void * )'/>
<def f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='122' ll='127' type='int create_signature(struct kernel_pkey_params * params, const void * data, void * enc)'/>
<dec f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='128' type='int create_signature(struct kernel_pkey_params * , const void * , void * )'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='128' c='create_signature'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='128' u='a'/>
<doc f='linux-5.3.1/crypto/asymmetric_keys/signature.c' l='109'>/**
 * create_signature - Sign some data using an asymmetric key
 * @params: Various parameters
 * @data: Data blob to be signed, length params-&gt;data_len
 * @enc: Signature buffer, length params-&gt;enc_len
 *
 * Sign the specified data blob using the private key specified by params-&gt;key.
 * The signature is wrapped in an encoding if params-&gt;encoding is specified
 * (eg. &quot;pkcs1&quot;).  If the encoding needs to know the digest type, this can be
 * passed through params-&gt;hash_algo (eg. &quot;sha1&quot;).
 *
 * Returns the length of the data placed in the signature buffer or an error.
 */</doc>
