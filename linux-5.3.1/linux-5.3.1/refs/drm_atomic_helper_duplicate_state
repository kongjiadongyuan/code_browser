<dec f='linux-5.3.1/include/drm/drm_atomic_helper.h' l='127' type='struct drm_atomic_state * drm_atomic_helper_duplicate_state(struct drm_device * dev, struct drm_modeset_acquire_ctx * ctx)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3062' ll='3123' type='struct drm_atomic_state * drm_atomic_helper_duplicate_state(struct drm_device * dev, struct drm_modeset_acquire_ctx * ctx)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3124' type='struct drm_atomic_state * drm_atomic_helper_duplicate_state(struct drm_device * , struct drm_modeset_acquire_ctx * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3124' c='drm_atomic_helper_duplicate_state'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3124' u='a'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3162' u='c' c='drm_atomic_helper_suspend'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3038'>/**
 * drm_atomic_helper_duplicate_state - duplicate an atomic state object
 * @dev: DRM device
 * @ctx: lock acquisition context
 *
 * Makes a copy of the current atomic state by looping over all objects and
 * duplicating their respective states. This is used for example by suspend/
 * resume support code to save the state prior to suspend such that it can
 * be restored upon resume.
 *
 * Note that this treats atomic state as persistent between save and restore.
 * Drivers must make sure that this is possible and won&apos;t result in confusion
 * or erroneous behaviour.
 *
 * Note that if callers haven&apos;t already acquired all modeset locks this might
 * return -EDEADLK, which must be handled by calling drm_modeset_backoff().
 *
 * Returns:
 * A pointer to the copy of the atomic state object on success or an
 * ERR_PTR()-encoded error code on failure.
 *
 * See also:
 * drm_atomic_helper_suspend(), drm_atomic_helper_resume()
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='4276' u='c' c='intel_prepare_reset'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='15802' u='c' c='sanitize_watermarks'/>
