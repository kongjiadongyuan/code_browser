<dec f='linux-5.3.1/include/linux/mm.h' l='1636' type='int clear_page_dirty_for_io(struct page * page)'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_shmem.c' l='258' u='c' c='shmem_writeback'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='1747' u='c' c='mpage_release_unused_pages'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='2234' u='c' c='mpage_submit_page'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='2075' u='c' c='nfs_wb_page'/>
<use f='linux-5.3.1/mm/migrate.c' l='863' u='c' c='writeout'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2232' u='c' c='write_cache_pages'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2377' u='c' c='write_one_page'/>
<def f='linux-5.3.1/mm/page-writeback.c' l='2649' ll='2707' type='int clear_page_dirty_for_io(struct page * page)'/>
<dec f='linux-5.3.1/mm/page-writeback.c' l='2708' type='int clear_page_dirty_for_io(struct page * )'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2708' c='clear_page_dirty_for_io'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2708' u='a'/>
<doc f='linux-5.3.1/mm/page-writeback.c' l='2635'>/*
 * Clear a page&apos;s dirty flag, while caring for dirty memory accounting.
 * Returns true if the page was previously dirty.
 *
 * This is for preparing to put the page under writeout.  We leave the page
 * tagged as dirty in the xarray so that a concurrent write-for-sync
 * can discover it via a PAGECACHE_TAG_DIRTY walk.  The -&gt;writepage
 * implementation will run either set_page_writeback() or set_page_dirty(),
 * at which stage we bring the page&apos;s dirty flag and xarray dirty tag
 * back into sync.
 *
 * This incoherency between the page&apos;s dirty flag and xarray tag is
 * unfortunate, but it only exists while the page is locked.
 */</doc>
<use f='linux-5.3.1/mm/vmscan.c' l='863' u='c' c='pageout'/>
