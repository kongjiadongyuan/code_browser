<dec f='linux-5.3.1/include/drm/drm_fb_helper.h' l='285' type='int drm_fbdev_generic_setup(struct drm_device * dev, unsigned int preferred_bpp)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_fb_helper.c' l='2368' ll='2402' type='int drm_fbdev_generic_setup(struct drm_device * dev, unsigned int preferred_bpp)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_fb_helper.c' l='2403' type='int drm_fbdev_generic_setup(struct drm_device * , unsigned int )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_fb_helper.c' l='2403' c='drm_fbdev_generic_setup'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_fb_helper.c' l='2403' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_fb_helper.c' l='2342'>/**
 * drm_fbdev_generic_setup() - Setup generic fbdev emulation
 * @dev: DRM device
 * @preferred_bpp: Preferred bits per pixel for the device.
 *                 @dev-&gt;mode_config.preferred_depth is used if this is zero.
 *
 * This function sets up generic fbdev emulation for drivers that supports
 * dumb buffers with a virtual address and that can be mmap&apos;ed. If the driver
 * does not support these functions, it could use drm_fb_helper_fbdev_setup().
 *
 * Restore, hotplug events and teardown are all taken care of. Drivers that do
 * suspend/resume need to call drm_fb_helper_set_suspend_unlocked() themselves.
 * Simple drivers might use drm_mode_config_helper_suspend().
 *
 * Drivers that set the dirty callback on their framebuffer will get a shadow
 * fbdev buffer that is blitted onto the real buffer. This is done in order to
 * make deferred I/O work with all kinds of buffers.
 *
 * This function is safe to call even when there are no connectors present.
 * Setup will be retried on the next hotplug event.
 *
 * The fbdev is destroyed by drm_dev_unregister().
 *
 * Returns:
 * Zero on success or negative error code on failure.
 */</doc>
