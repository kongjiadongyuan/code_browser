<def f='linux-5.3.1/include/linux/rculist.h' l='536' ll='552' type='void hlist_add_tail_rcu(struct hlist_node * n, struct hlist_head * h)'/>
<doc f='linux-5.3.1/include/linux/rculist.h' l='517'>/**
 * hlist_add_tail_rcu
 * @n: the element to add to the hash list.
 * @h: the list to add to.
 *
 * Description:
 * Adds the specified element to the specified hlist,
 * while permitting racing traversals.
 *
 * The caller must take whatever precautions are necessary
 * (such as holding appropriate locks) to avoid racing
 * with another list-mutation primitive, such as hlist_add_head_rcu()
 * or hlist_del_rcu(), running on this same list.
 * However, it is perfectly legal to run concurrently with
 * the _rcu list-traversal primitives, such as
 * hlist_for_each_entry_rcu(), used to prevent memory-consistency
 * problems on Alpha CPUs.  Regardless of the type of CPU, the
 * list-traversal primitive must be guarded by rcu_read_lock().
 */</doc>
<use f='linux-5.3.1/include/net/sock.h' l='710' u='c' c='sk_add_node_rcu'/>
<use f='linux-5.3.1/include/net/sock.h' l='718' u='c' c='sk_add_node_tail_rcu'/>
<use f='linux-5.3.1/net/ipv4/inet_hashtables.c' l='203' u='c' c='inet_hash2'/>
<use f='linux-5.3.1/net/ipv4/inet_hashtables.c' l='558' u='c' c='__inet_hash'/>
<use f='linux-5.3.1/net/ipv4/udp.c' l='324' u='c' c='udp_lib_get_port'/>
<use f='linux-5.3.1/security/security.c' l='423' u='c' c='security_add_hooks'/>
