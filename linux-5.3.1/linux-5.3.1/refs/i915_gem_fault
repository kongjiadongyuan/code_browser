<dec f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.h' l='2584' type='vm_fault_t i915_gem_fault(struct vm_fault * vmf)'/>
<def f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_mman.c' l='218' ll='369' type='vm_fault_t i915_gem_fault(struct vm_fault * vmf)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/gem/i915_gem_mman.c' l='200'>/**
 * i915_gem_fault - fault a page into the GTT
 * @vmf: fault info
 *
 * The fault handler is set up by drm_gem_mmap() when a object is GTT mapped
 * from userspace.  The fault handler takes care of binding the object to
 * the GTT (if needed), allocating and programming a fence register (again,
 * only if needed based on whether the old reg is still valid or the object
 * is tiled) and inserting a new PTE into the faulting process.
 *
 * Note that the faulting process may involve evicting existing objects
 * from the GTT and/or fence registers to make room.  So performance may
 * suffer if the GTT working set is large or there are few fence registers
 * left.
 *
 * The current feature set supported by i915_gem_fault() and thus GTT mmaps
 * is exposed via I915_PARAM_MMAP_GTT_VERSION (see i915_gem_mmap_gtt_version).
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.c' l='3119'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_drv.c' l='3119'/>
