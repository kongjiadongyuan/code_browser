<dec f='linux-5.3.1/include/linux/memblock.h' l='315' type='int memblock_set_node(phys_addr_t base, phys_addr_t size, struct memblock_type * type, int nid)'/>
<use f='linux-5.3.1/arch/x86/mm/numa.c' l='491' u='c' c='numa_clear_kernel_node_hotplug'/>
<use f='linux-5.3.1/arch/x86/mm/numa.c' l='540' u='c' c='numa_register_memblks'/>
<use f='linux-5.3.1/arch/x86/mm/numa.c' l='631' u='c' c='numa_init'/>
<use f='linux-5.3.1/arch/x86/mm/numa.c' l='633' u='c' c='numa_init'/>
<def f='linux-5.3.1/mm/memblock.c' l='1237' ll='1252' type='int memblock_set_node(phys_addr_t base, phys_addr_t size, struct memblock_type * type, int nid)'/>
<doc f='linux-5.3.1/mm/memblock.c' l='1224'>/**
 * memblock_set_node - set node ID on memblock regions
 * @base: base of area to set node ID for
 * @size: size of area to set node ID for
 * @type: memblock type to set node ID for
 * @nid: node ID to set
 *
 * Set the nid of memblock @type regions in [@base, @base + @size) to @nid.
 * Regions which cross the area boundaries are split as necessary.
 *
 * Return:
 * 0 on success, -errno on failure.
 */</doc>
