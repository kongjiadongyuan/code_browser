<dec f='linux-5.3.1/include/drm/drm_atomic_helper.h' l='135' type='int drm_atomic_helper_page_flip(struct drm_crtc * crtc, struct drm_framebuffer * fb, struct drm_pending_vblank_event * event, uint32_t flags, struct drm_modeset_acquire_ctx * ctx)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3317' ll='3341' type='int drm_atomic_helper_page_flip(struct drm_crtc * crtc, struct drm_framebuffer * fb, struct drm_pending_vblank_event * event, uint32_t flags, struct drm_modeset_acquire_ctx * ctx)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3342' type='int drm_atomic_helper_page_flip(struct drm_crtc * , struct drm_framebuffer * , struct drm_pending_vblank_event * , uint32_t , struct drm_modeset_acquire_ctx * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3342' c='drm_atomic_helper_page_flip'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3342' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='3300'>/**
 * drm_atomic_helper_page_flip - execute a legacy page flip
 * @crtc: DRM crtc
 * @fb: DRM framebuffer
 * @event: optional DRM event to signal upon completion
 * @flags: flip flags for non-vblank sync&apos;ed updates
 * @ctx: lock acquisition context
 *
 * Provides a default &amp;drm_crtc_funcs.page_flip implementation
 * using the atomic driver interface.
 *
 * Returns:
 * Returns 0 on success, negative errno numbers on failure.
 *
 * See also:
 * drm_atomic_helper_page_flip_target()
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_simple_kms_helper.c' l='120'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_simple_kms_helper.c' l='120'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='14112'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='14112'/>
