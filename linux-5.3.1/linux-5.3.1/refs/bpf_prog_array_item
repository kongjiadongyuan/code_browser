<def f='linux-5.3.1/include/linux/bpf.h' l='508' ll='511'/>
<use f='linux-5.3.1/include/linux/bpf.h' l='515'/>
<size>24</size>
<doc f='linux-5.3.1/include/linux/bpf.h' l='496'>/* an array of programs to be executed under rcu_lock.
 *
 * Typical usage:
 * ret = BPF_PROG_RUN_ARRAY(&amp;bpf_prog_array, ctx, BPF_PROG_RUN);
 *
 * the structure returned by bpf_prog_array_alloc() should be populated
 * with program pointers and the last pointer must be NULL.
 * The user has to keep refcnt on the program and make sure the program
 * is removed from the array before bpf_prog_put().
 * The &apos;struct bpf_prog_array *&apos; should only be replaced with xchg()
 * since other cpus are walking the array of pointers in parallel.
 */</doc>
<mbr r='bpf_prog_array_item::prog' o='0' t='struct bpf_prog *'/>
<mbr r='bpf_prog_array_item::cgroup_storage' o='64' t='struct bpf_cgroup_storage *[2]'/>
<use f='linux-5.3.1/kernel/bpf/core.c' l='1790' c='bpf_prog_array_alloc'/>
<use f='linux-5.3.1/kernel/bpf/core.c' l='1806' c='bpf_prog_array_length'/>
<use f='linux-5.3.1/kernel/bpf/core.c' l='1817' c='bpf_prog_array_is_empty'/>
<use f='linux-5.3.1/kernel/bpf/core.c' l='1829' c='bpf_prog_array_copy_core'/>
<use f='linux-5.3.1/kernel/bpf/core.c' l='1874' c='bpf_prog_array_delete_safe'/>
<use f='linux-5.3.1/kernel/bpf/core.c' l='1889' c='bpf_prog_array_copy'/>
<size>24</size>
