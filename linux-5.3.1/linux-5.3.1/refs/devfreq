<def f='linux-5.3.1/include/linux/devfreq.h' l='148' ll='181'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='298' c='devfreq_add_device'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='306' c='devfreq_remove_device'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='311' c='devm_devfreq_add_device'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='320' c='devm_devfreq_remove_device'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='324' c='devfreq_suspend_device'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='329' c='devfreq_resume_device'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='344' c='devfreq_register_opp_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='350' c='devfreq_unregister_opp_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='356' c='devm_devfreq_register_opp_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='362' c='devm_devfreq_unregister_opp_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='366' c='devfreq_register_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='373' c='devfreq_unregister_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='381' c='devm_devfreq_register_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='389' c='devm_devfreq_unregister_notifier'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='395' c='devfreq_get_devfreq_by_phandle'/>
<use f='linux-5.3.1/include/linux/devfreq.h' l='401' c='devfreq_update_stats'/>
<size>1872</size>
<doc f='linux-5.3.1/include/linux/devfreq.h' l='109'>/**
 * struct devfreq - Device devfreq structure
 * @node:	list node - contains the devices with devfreq that have been
 *		registered.
 * @lock:	a mutex to protect accessing devfreq.
 * @dev:	device registered by devfreq class. dev.parent is the device
 *		using devfreq.
 * @profile:	device-specific devfreq profile
 * @governor:	method how to choose frequency based on the usage.
 * @governor_name:	devfreq governor name for use with this devfreq
 * @nb:		notifier block used to notify devfreq object that it should
 *		reevaluate operable frequencies. Devfreq users may use
 *		devfreq.nb to the corresponding register notifier call chain.
 * @work:	delayed work for load monitoring.
 * @previous_freq:	previously configured frequency value.
 * @data:	Private data of the governor. The devfreq framework does not
 *		touch this.
 * @min_freq:	Limit minimum frequency requested by user (0: none)
 * @max_freq:	Limit maximum frequency requested by user (0: none)
 * @scaling_min_freq:	Limit minimum frequency requested by OPP interface
 * @scaling_max_freq:	Limit maximum frequency requested by OPP interface
 * @stop_polling:	 devfreq polling status of a device.
 * @suspend_freq:	 frequency of a device set during suspend phase.
 * @resume_freq:	 frequency of a device set in resume phase.
 * @suspend_count:	 suspend requests counter for a device.
 * @total_trans:	Number of devfreq transitions
 * @trans_table:	Statistics of devfreq transitions
 * @time_in_state:	Statistics of devfreq states
 * @last_stat_updated:	The last time stat updated
 * @transition_notifier_list: list head of DEVFREQ_TRANSITION_NOTIFIER notifier
 *
 * This structure stores the devfreq information for a give device.
 *
 * Note that when a governor accesses entries in struct devfreq in its
 * functions except for the context of callbacks defined in struct
 * devfreq_governor, the governor should protect its access with the
 * struct mutex lock in struct devfreq. A governor may use this mutex
 * to protect its own private data in void *data as well.
 */</doc>
<mbr r='devfreq::node' o='0' t='struct list_head'/>
<mbr r='devfreq::lock' o='128' t='struct mutex'/>
<mbr r='devfreq::dev' o='384' t='struct device'/>
<mbr r='devfreq::profile' o='6080' t='struct devfreq_dev_profile *'/>
<mbr r='devfreq::governor' o='6144' t='const struct devfreq_governor *'/>
<mbr r='devfreq::governor_name' o='6208' t='char [16]'/>
<mbr r='devfreq::nb' o='6336' t='struct notifier_block'/>
<mbr r='devfreq::work' o='6528' t='struct delayed_work'/>
<mbr r='devfreq::previous_freq' o='7232' t='unsigned long'/>
<mbr r='devfreq::last_status' o='7296' t='struct devfreq_dev_status'/>
<mbr r='devfreq::data' o='7552' t='void *'/>
<mbr r='devfreq::min_freq' o='7616' t='unsigned long'/>
<mbr r='devfreq::max_freq' o='7680' t='unsigned long'/>
<mbr r='devfreq::scaling_min_freq' o='7744' t='unsigned long'/>
<mbr r='devfreq::scaling_max_freq' o='7808' t='unsigned long'/>
<mbr r='devfreq::stop_polling' o='7872' t='bool'/>
<mbr r='devfreq::suspend_freq' o='7936' t='unsigned long'/>
<mbr r='devfreq::resume_freq' o='8000' t='unsigned long'/>
<mbr r='devfreq::suspend_count' o='8064' t='atomic_t'/>
<mbr r='devfreq::total_trans' o='8096' t='unsigned int'/>
<mbr r='devfreq::trans_table' o='8128' t='unsigned int *'/>
<mbr r='devfreq::time_in_state' o='8192' t='unsigned long *'/>
<mbr r='devfreq::last_stat_updated' o='8256' t='unsigned long'/>
<mbr r='devfreq::transition_notifier_list' o='8320' t='struct srcu_notifier_head'/>
