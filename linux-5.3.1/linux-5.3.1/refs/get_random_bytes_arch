<dec f='linux-5.3.1/include/linux/random.h' l='43' type='int get_random_bytes_arch(void * buf, int nbytes)'/>
<def f='linux-5.3.1/drivers/char/random.c' l='1837' ll='1856' type='int get_random_bytes_arch(void * buf, int nbytes)'/>
<dec f='linux-5.3.1/drivers/char/random.c' l='1857' type='int get_random_bytes_arch(void * , int )'/>
<use f='linux-5.3.1/drivers/char/random.c' l='1857' c='get_random_bytes_arch'/>
<use f='linux-5.3.1/drivers/char/random.c' l='1857' u='a'/>
<doc f='linux-5.3.1/drivers/char/random.c' l='1825'>/*
 * This function will use the architecture-specific hardware random
 * number generator if it is available.  The arch-specific hw RNG will
 * almost certainly be faster than what we can do in software, but it
 * is impossible to verify that it is implemented securely (as
 * opposed, to, say, the AES encryption of a sequence number using a
 * key known by the NSA).  So it&apos;s useful if we need the speed, but
 * only if we&apos;re willing to trust the hardware manufacturer not to
 * have put in a back door.
 *
 * Return number of bytes filled in.
 */</doc>
<use f='linux-5.3.1/lib/vsprintf.c' l='724' u='c' c='initialize_ptr_random'/>
