<def f='linux-5.3.1/include/linux/sfp.h' l='486' ll='495'/>
<use f='linux-5.3.1/include/linux/sfp.h' l='558' c='sfp_register_upstream'/>
<size>64</size>
<doc f='linux-5.3.1/include/linux/sfp.h' l='469'>/**
 * struct sfp_upstream_ops - upstream operations structure
 * @attach: called when the sfp socket driver is bound to the upstream
 *   (mandatory).
 * @detach: called when the sfp socket driver is unbound from the upstream
 *   (mandatory).
 * @module_insert: called after a module has been detected to determine
 *   whether the module is supported for the upstream device.
 * @module_remove: called after the module has been removed.
 * @link_down: called when the link is non-operational for whatever
 *   reason.
 * @link_up: called when the link is operational.
 * @connect_phy: called when an I2C accessible PHY has been detected
 *   on the module.
 * @disconnect_phy: called when a module with an I2C accessible PHY has
 *   been removed.
 */</doc>
<mbr r='sfp_upstream_ops::attach' o='0' t='void (*)(void *, struct sfp_bus *)'/>
<mbr r='sfp_upstream_ops::detach' o='64' t='void (*)(void *, struct sfp_bus *)'/>
<mbr r='sfp_upstream_ops::module_insert' o='128' t='int (*)(void *, const struct sfp_eeprom_id *)'/>
<mbr r='sfp_upstream_ops::module_remove' o='192' t='void (*)(void *)'/>
<mbr r='sfp_upstream_ops::link_down' o='256' t='void (*)(void *)'/>
<mbr r='sfp_upstream_ops::link_up' o='320' t='void (*)(void *)'/>
<mbr r='sfp_upstream_ops::connect_phy' o='384' t='int (*)(void *, struct phy_device *)'/>
<mbr r='sfp_upstream_ops::disconnect_phy' o='448' t='void (*)(void *)'/>
