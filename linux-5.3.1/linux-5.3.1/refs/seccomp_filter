<use f='linux-5.3.1/include/linux/seccomp.h' l='31'/>
<def f='linux-5.3.1/kernel/seccomp.c' l='128' ll='135'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='131'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='255' c='seccomp_run_filters'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='259' c='seccomp_run_filters'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='316' c='is_ancestor'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='317' c='is_ancestor'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='430' c='seccomp_prepare_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='432' c='seccomp_prepare_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='476' c='seccomp_prepare_user_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='480' c='seccomp_prepare_user_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='511' c='seccomp_attach_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='514' c='seccomp_attach_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='552' c='__get_seccomp_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='560' c='get_seccomp_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='566' c='seccomp_filter_free'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='574' c='__put_seccomp_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='578' c='__put_seccomp_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='725' c='seccomp_next_notify_id'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='736' c='seccomp_do_user_notification'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='791' c='__seccomp_filter'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='981' c='seccomp_notify_release'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1011' c='seccomp_notify_recv'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1080' c='seccomp_notify_send'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1125' c='seccomp_notify_id_valid'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1156' c='seccomp_notify_ioctl'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1174' c='seccomp_notify_poll'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1203' c='init_listener'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1206' c='init_listener'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='1255' c='seccomp_set_mode_filter'/>
<size>64</size>
<doc f='linux-5.3.1/kernel/seccomp.c' l='105'>/**
 * struct seccomp_filter - container for seccomp BPF programs
 *
 * @usage: reference count to manage the object lifetime.
 *         get/put helpers should be used when accessing an instance
 *         outside of a lifetime-guarded section.  In general, this
 *         is only needed for handling filters shared across tasks.
 * @log: true if all actions except for SECCOMP_RET_ALLOW should be logged
 * @prev: points to a previously installed, or inherited, filter
 * @prog: the BPF program to evaluate
 * @notif: the struct that holds all notification related information
 * @notify_lock: A lock for all notification-related accesses.
 *
 * seccomp_filter objects are organized in a tree linked via the @prev
 * pointer.  For any task, it appears to be a singly-linked list starting
 * with current-&gt;seccomp.filter, the most recently attached or inherited filter.
 * However, multiple filters may share a @prev node, by way of fork(), which
 * results in a unidirectional tree existing in memory.  This is similar to
 * how namespaces work.
 *
 * seccomp_filter objects should never be modified after being attached
 * to a task_struct (other than @usage).
 */</doc>
<mbr r='seccomp_filter::usage' o='0' t='refcount_t'/>
<mbr r='seccomp_filter::log' o='32' t='bool'/>
<mbr r='seccomp_filter::prev' o='64' t='struct seccomp_filter *'/>
<mbr r='seccomp_filter::prog' o='128' t='struct bpf_prog *'/>
<mbr r='seccomp_filter::notif' o='192' t='struct notification *'/>
<mbr r='seccomp_filter::notify_lock' o='256' t='struct mutex'/>
