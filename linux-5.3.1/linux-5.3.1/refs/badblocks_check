<dec f='linux-5.3.1/include/linux/badblocks.h' l='44' type='int badblocks_check(struct badblocks * bb, sector_t s, int sectors, sector_t * first_bad, int * bad_sectors)'/>
<def f='linux-5.3.1/block/badblocks.c' l='53' ll='125' type='int badblocks_check(struct badblocks * bb, sector_t s, int sectors, sector_t * first_bad, int * bad_sectors)'/>
<dec f='linux-5.3.1/block/badblocks.c' l='126' type='int badblocks_check(struct badblocks * , sector_t , int , sector_t * , int * )'/>
<use f='linux-5.3.1/block/badblocks.c' l='126' c='badblocks_check'/>
<use f='linux-5.3.1/block/badblocks.c' l='126' u='a'/>
<doc f='linux-5.3.1/block/badblocks.c' l='19'>/**
 * badblocks_check() - check a given range for bad sectors
 * @bb:		the badblocks structure that holds all badblock information
 * @s:		sector (start) at which to check for badblocks
 * @sectors:	number of sectors to check for badblocks
 * @first_bad:	pointer to store location of the first badblock
 * @bad_sectors: pointer to store number of badblocks after @first_bad
 *
 * We can record which blocks on each device are &apos;bad&apos; and so just
 * fail those blocks, or that stripe, rather than the whole device.
 * Entries in the bad-block table are 64bits wide.  This comprises:
 * Length of bad-range, in sectors: 0-511 for lengths 1-512
 * Start of bad-range, sector offset, 54 bits (allows 8 exbibytes)
 *  A &apos;shift&apos; can be set so that larger blocks are tracked and
 *  consequently larger devices can be covered.
 * &apos;Acknowledged&apos; flag - 1 bit. - the most significant bit.
 *
 * Locking of the bad-block table uses a seqlock so badblocks_check
 * might need to retry if it is very unlucky.
 * We will sometimes want to check for bad blocks in a bi_end_io function,
 * so we use the write_seqlock_irq variant.
 *
 * When looking for a bad block we specify a range and want to
 * know if any block in the range is bad.  So we binary-search
 * to the last range that starts at-or-before the given endpoint,
 * (or &quot;before the sector after the target range&quot;)
 * then see if it ends after the given start.
 *
 * Return:
 *  0: there are no known bad blocks in the range
 *  1: there are known bad block which are all acknowledged
 * -1: there are bad blocks which have not yet been acknowledged in metadata.
 * plus the start/length of the first bad section we overlap.
 */</doc>
<use f='linux-5.3.1/drivers/md/md.h' l='214' u='c' c='is_badblock'/>
