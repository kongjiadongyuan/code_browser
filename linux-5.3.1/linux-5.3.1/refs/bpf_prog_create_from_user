<dec f='linux-5.3.1/include/linux/filter.h' l='826' type='int bpf_prog_create_from_user(struct bpf_prog ** pfp, struct sock_fprog * fprog, bpf_aux_classic_check_t trans, bool save_orig)'/>
<use f='linux-5.3.1/kernel/seccomp.c' l='458' u='c' c='seccomp_prepare_filter'/>
<def f='linux-5.3.1/net/core/filter.c' l='1383' ll='1423' type='int bpf_prog_create_from_user(struct bpf_prog ** pfp, struct sock_fprog * fprog, bpf_aux_classic_check_t trans, bool save_orig)'/>
<dec f='linux-5.3.1/net/core/filter.c' l='1424' type='int bpf_prog_create_from_user(struct bpf_prog ** , struct sock_fprog * , bpf_aux_classic_check_t , bool )'/>
<use f='linux-5.3.1/net/core/filter.c' l='1424' c='bpf_prog_create_from_user'/>
<use f='linux-5.3.1/net/core/filter.c' l='1424' u='a'/>
<doc f='linux-5.3.1/net/core/filter.c' l='1372'>/**
 *	bpf_prog_create_from_user - create an unattached filter from user buffer
 *	@pfp: the unattached filter that is created
 *	@fprog: the filter program
 *	@trans: post-classic verifier transformation handler
 *	@save_orig: save classic BPF program
 *
 * This function effectively does the same as bpf_prog_create(), only
 * that it builds up its insns buffer from user space provided buffer.
 * It also allows for passing a bpf_aux_classic_check_t handler.
 */</doc>
<use f='linux-5.3.1/net/packet/af_packet.c' l='1545' u='c' c='fanout_set_data_cbpf'/>
