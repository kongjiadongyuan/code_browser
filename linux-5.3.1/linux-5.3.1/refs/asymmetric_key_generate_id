<dec f='linux-5.3.1/include/keys/asymmetric-type.h' l='65' type='struct asymmetric_key_id * asymmetric_key_generate_id(const void * val_1, size_t len_1, const void * val_2, size_t len_2)'/>
<def f='linux-5.3.1/crypto/asymmetric_keys/asymmetric_type.c' l='135' ll='150' type='struct asymmetric_key_id * asymmetric_key_generate_id(const void * val_1, size_t len_1, const void * val_2, size_t len_2)'/>
<dec f='linux-5.3.1/crypto/asymmetric_keys/asymmetric_type.c' l='151' type='struct asymmetric_key_id * asymmetric_key_generate_id(const void * , size_t , const void * , size_t )'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/asymmetric_type.c' l='151' c='asymmetric_key_generate_id'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/asymmetric_type.c' l='151' u='a'/>
<doc f='linux-5.3.1/crypto/asymmetric_keys/asymmetric_type.c' l='126'>/**
 * asymmetric_key_generate_id: Construct an asymmetric key ID
 * @val_1: First binary blob
 * @len_1: Length of first binary blob
 * @val_2: Second binary blob
 * @len_2: Length of second binary blob
 *
 * Construct an asymmetric key ID from a pair of binary blobs.
 */</doc>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='656' u='c' c='pkcs7_note_signed_info'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/pkcs7_parser.c' l='661' u='c' c='pkcs7_note_signed_info'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/x509_cert_parser.c' l='124' u='c' c='x509_cert_parse'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/x509_cert_parser.c' l='497' u='c' c='x509_process_extension'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/x509_cert_parser.c' l='641' u='c' c='x509_akid_note_kid'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/x509_cert_parser.c' l='680' u='c' c='x509_akid_note_serial'/>
