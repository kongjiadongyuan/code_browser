<dec f='linux-5.3.1/include/linux/netdevice.h' l='4335' type='struct sk_buff * __skb_gso_segment(struct sk_buff * skb, netdev_features_t features, bool tx_path)'/>
<use f='linux-5.3.1/include/linux/netdevice.h' l='4356' u='c' c='skb_gso_segment'/>
<use f='linux-5.3.1/include/net/udp.h' l='482' u='c' c='udp_rcv_segment'/>
<def f='linux-5.3.1/net/core/dev.c' l='3074' ll='3116' type='struct sk_buff * __skb_gso_segment(struct sk_buff * skb, netdev_features_t features, bool tx_path)'/>
<dec f='linux-5.3.1/net/core/dev.c' l='3117' type='struct sk_buff * __skb_gso_segment(struct sk_buff * , netdev_features_t , bool )'/>
<use f='linux-5.3.1/net/core/dev.c' l='3117' c='__skb_gso_segment'/>
<use f='linux-5.3.1/net/core/dev.c' l='3117' u='a'/>
<doc f='linux-5.3.1/net/core/dev.c' l='3061'>/**
 *	__skb_gso_segment - Perform segmentation on skb.
 *	@skb: buffer to segment
 *	@features: features for the output path (see dev-&gt;features)
 *	@tx_path: whether it is called in TX path
 *
 *	This function segments the given skb and returns a list of segments.
 *
 *	It may return NULL if the skb requires no segmentation.  This is
 *	only possible when GSO is used for verifying header integrity.
 *
 *	Segmentation preserves SKB_SGO_CB_OFFSET bytes of previous skb cb.
 */</doc>
