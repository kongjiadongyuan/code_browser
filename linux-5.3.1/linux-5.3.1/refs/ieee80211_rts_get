<dec f='linux-5.3.1/include/net/mac80211.h' l='4851' type='void ieee80211_rts_get(struct ieee80211_hw * hw, struct ieee80211_vif * vif, const void * frame, size_t frame_len, const struct ieee80211_tx_info * frame_txctl, struct ieee80211_rts * rts)'/>
<doc f='linux-5.3.1/include/net/mac80211.h' l='4837'>/**
 * ieee80211_rts_get - RTS frame generation function
 * @hw: pointer obtained from ieee80211_alloc_hw().
 * @vif: &amp;struct ieee80211_vif pointer from the add_interface callback.
 * @frame: pointer to the frame that is going to be protected by the RTS.
 * @frame_len: the frame length (in octets).
 * @frame_txctl: &amp;struct ieee80211_tx_info of the frame.
 * @rts: The buffer where to store the RTS frame.
 *
 * If the RTS frames are generated by the host system (i.e., not in
 * hardware/firmware), the low-level driver uses this function to receive
 * the next RTS frame from the 802.11 code. The low-level is responsible
 * for calling this function before and RTS frame is needed.
 */</doc>
<def f='linux-5.3.1/net/mac80211/tx.c' l='4824' ll='4837' type='void ieee80211_rts_get(struct ieee80211_hw * hw, struct ieee80211_vif * vif, const void * frame, size_t frame_len, const struct ieee80211_tx_info * frame_txctl, struct ieee80211_rts * rts)'/>
<dec f='linux-5.3.1/net/mac80211/tx.c' l='4838' type='void ieee80211_rts_get(struct ieee80211_hw * , struct ieee80211_vif * , const void * , size_t , const struct ieee80211_tx_info * , struct ieee80211_rts * )'/>
<use f='linux-5.3.1/net/mac80211/tx.c' l='4838' c='ieee80211_rts_get'/>
<use f='linux-5.3.1/net/mac80211/tx.c' l='4838' u='a'/>
