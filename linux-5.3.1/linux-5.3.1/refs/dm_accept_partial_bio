<dec f='linux-5.3.1/include/linux/device-mapper.h' l='424' type='void dm_accept_partial_bio(struct bio * bio, unsigned int n_sectors)'/>
<def f='linux-5.3.1/drivers/md/dm.c' l='1203' ll='1212' type='void dm_accept_partial_bio(struct bio * bio, unsigned int n_sectors)'/>
<dec f='linux-5.3.1/drivers/md/dm.c' l='1213' type='void dm_accept_partial_bio(struct bio * , unsigned int )'/>
<use f='linux-5.3.1/drivers/md/dm.c' l='1213' c='dm_accept_partial_bio'/>
<use f='linux-5.3.1/drivers/md/dm.c' l='1213' u='a'/>
<doc f='linux-5.3.1/drivers/md/dm.c' l='1175'>/*
 * A target may call dm_accept_partial_bio only from the map routine.  It is
 * allowed for all bio types except REQ_PREFLUSH and REQ_OP_ZONE_RESET.
 *
 * dm_accept_partial_bio informs the dm that the target only wants to process
 * additional n_sectors sectors of the bio and the rest of the data should be
 * sent in a next bio.
 *
 * A diagram that explains the arithmetics:
 * +--------------------+---------------+-------+
 * |         1          |       2       |   3   |
 * +--------------------+---------------+-------+
 *
 * &lt;-------------- *tio-&gt;len_ptr ---------------&gt;
 *                      &lt;------- bi_size -------&gt;
 *                      &lt;-- n_sectors --&gt;
 *
 * Region 1 was already iterated over with bio_advance or similar function.
 *	(it may be empty if the target doesn&apos;t use bio_advance)
 * Region 2 is the remaining bio size that the target wants to process.
 *	(it may be empty if region 1 is non-empty, although there is no reason
 *	 to make it empty)
 * The target requires that region 3 is to be sent in the next bio.
 *
 * If the target wants to receive multiple copies of the bio (via num_*bios, etc),
 * the partially processed part (the sum of regions 1+2) must be the same for all
 * copies of the bio.
 */</doc>
