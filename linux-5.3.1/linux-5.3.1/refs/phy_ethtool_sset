<dec f='linux-5.3.1/include/linux/phy.h' l='1136' type='int phy_ethtool_sset(struct phy_device * phydev, struct ethtool_cmd * cmd)'/>
<def f='linux-5.3.1/drivers/net/phy/phy.c' l='268' ll='312' type='int phy_ethtool_sset(struct phy_device * phydev, struct ethtool_cmd * cmd)'/>
<dec f='linux-5.3.1/drivers/net/phy/phy.c' l='313' type='int phy_ethtool_sset(struct phy_device * , struct ethtool_cmd * )'/>
<use f='linux-5.3.1/drivers/net/phy/phy.c' l='313' c='phy_ethtool_sset'/>
<use f='linux-5.3.1/drivers/net/phy/phy.c' l='313' u='a'/>
<doc f='linux-5.3.1/drivers/net/phy/phy.c' l='255'>/**
 * phy_ethtool_sset - generic ethtool sset function, handles all the details
 * @phydev: target phy_device struct
 * @cmd: ethtool_cmd
 *
 * A few notes about parameter checking:
 *
 * - We don&apos;t set port or transceiver, so we don&apos;t care what they
 *   were set to.
 * - phy_start_aneg() will make sure forced settings are sane, and
 *   choose the next best ones from the ones selected, so we don&apos;t
 *   care if ethtool tries to give us bad values.
 */</doc>
