<dec f='linux-5.3.1/include/linux/blkdev.h' l='1198' type='int __blkdev_issue_zeroout(struct block_device * bdev, sector_t sector, sector_t nr_sects, gfp_t gfp_mask, struct bio ** biop, unsigned int flags)'/>
<def f='linux-5.3.1/block/blk-lib.c' l='324' ll='342' type='int __blkdev_issue_zeroout(struct block_device * bdev, sector_t sector, sector_t nr_sects, gfp_t gfp_mask, struct bio ** biop, unsigned int flags)'/>
<dec f='linux-5.3.1/block/blk-lib.c' l='343' type='int __blkdev_issue_zeroout(struct block_device * , sector_t , sector_t , gfp_t , struct bio ** , unsigned int )'/>
<use f='linux-5.3.1/block/blk-lib.c' l='343' c='__blkdev_issue_zeroout'/>
<use f='linux-5.3.1/block/blk-lib.c' l='343' u='a'/>
<doc f='linux-5.3.1/block/blk-lib.c' l='305'>/**
 * __blkdev_issue_zeroout - generate number of zero filed write bios
 * @bdev:	blockdev to issue
 * @sector:	start sector
 * @nr_sects:	number of sectors to write
 * @gfp_mask:	memory allocation flags (for bio_alloc)
 * @biop:	pointer to anchor bio
 * @flags:	controls detailed behavior
 *
 * Description:
 *  Zero-fill a block range, either using hardware offload or by explicitly
 *  writing zeroes to the device.
 *
 *  If a device is using logical block provisioning, the underlying space will
 *  not be released if %flags contains BLKDEV_ZERO_NOUNMAP.
 *
 *  If %flags contains BLKDEV_ZERO_NOFALLBACK, the function will return
 *  -EOPNOTSUPP if no explicit hardware offload for zeroing is provided.
 */</doc>
