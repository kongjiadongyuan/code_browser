<def f='linux-5.3.1/include/linux/reciprocal_div.h' l='39' ll='43'/>
<dec f='linux-5.3.1/include/linux/reciprocal_div.h' l='102' type='struct reciprocal_value_adv reciprocal_value_adv(u32 d, u8 prec)'/>
<use f='linux-5.3.1/include/linux/reciprocal_div.h' l='102' c='reciprocal_value_adv'/>
<def f='linux-5.3.1/lib/math/reciprocal_div.c' l='31' ll='68' type='struct reciprocal_value_adv reciprocal_value_adv(u32 d, u8 prec)'/>
<use f='linux-5.3.1/lib/math/reciprocal_div.c' l='31' c='reciprocal_value_adv'/>
<use f='linux-5.3.1/lib/math/reciprocal_div.c' l='33' c='reciprocal_value_adv'/>
<dec f='linux-5.3.1/lib/math/reciprocal_div.c' l='69' type='struct reciprocal_value_adv reciprocal_value_adv(u32 , u8 )'/>
<use f='linux-5.3.1/lib/math/reciprocal_div.c' l='69' c='reciprocal_value_adv'/>
<use f='linux-5.3.1/lib/math/reciprocal_div.c' l='69' u='a'/>
<size>8</size>
<doc f='linux-5.3.1/include/linux/reciprocal_div.h' l='45'>/* &quot;reciprocal_value_adv&quot; implements the advanced version of the algorithm
 * described in Figure 4.2 of the paper except when &quot;divisor &gt; (1U &lt;&lt; 31)&quot; whose
 * ceil(log2(d)) result will be 32 which then requires u128 divide on host. The
 * exception case could be easily handled before calling &quot;reciprocal_value_adv&quot;.
 *
 * The advanced version requires more complex calculation to get the reciprocal
 * multiplier and other control variables, but then could reduce the required
 * emulation operations.
 *
 * It makes no sense to use this advanced version for host divide emulation,
 * those extra complexities for calculating multiplier etc could completely
 * waive our saving on emulation operations.
 *
 * However, it makes sense to use it for JIT divide code generation for which
 * we are willing to trade performance of JITed code with that of host. As shown
 * by the following pseudo code, the required emulation operations could go down
 * from 6 (the basic version) to 3 or 4.
 *
 * To use the result of &quot;reciprocal_value_adv&quot;, suppose we want to calculate
 * n/d, the pseudo C code will be:
 *
 *   struct reciprocal_value_adv rvalue;
 *   u8 pre_shift, exp;
 *
 *   // handle exception case.
 *   if (d &gt;= (1U &lt;&lt; 31)) {
 *     result = n &gt;= d;
 *     return;
 *   }
 *
 *   rvalue = reciprocal_value_adv(d, 32)
 *   exp = rvalue.exp;
 *   if (rvalue.is_wide_m &amp;&amp; !(d &amp; 1)) {
 *     // floor(log2(d &amp; (2^32 -d)))
 *     pre_shift = fls(d &amp; -d) - 1;
 *     rvalue = reciprocal_value_adv(d &gt;&gt; pre_shift, 32 - pre_shift);
 *   } else {
 *     pre_shift = 0;
 *   }
 *
 *   // code generation starts.
 *   if (imm == 1U &lt;&lt; exp) {
 *     result = n &gt;&gt; exp;
 *   } else if (rvalue.is_wide_m) {
 *     // pre_shift must be zero when reached here.
 *     t = (n * rvalue.m) &gt;&gt; 32;
 *     result = n - t;
 *     result &gt;&gt;= 1;
 *     result += t;
 *     result &gt;&gt;= rvalue.sh - 1;
 *   } else {
 *     if (pre_shift)
 *       result = n &gt;&gt; pre_shift;
 *     result = ((u64)result * rvalue.m) &gt;&gt; 32;
 *     result &gt;&gt;= rvalue.sh;
 *   }
 */</doc>
<mbr r='reciprocal_value_adv::m' o='0' t='u32'/>
<mbr r='reciprocal_value_adv::sh' o='32' t='u8'/>
<mbr r='reciprocal_value_adv::exp' o='40' t='u8'/>
<mbr r='reciprocal_value_adv::is_wide_m' o='48' t='bool'/>
