<dec f='linux-5.3.1/include/linux/refcount.h' l='113' type='bool refcount_dec_and_mutex_lock(refcount_t * r, struct mutex * lock)'/>
<use f='linux-5.3.1/include/linux/kref.h' l='75' u='c' c='kref_put_mutex'/>
<use f='linux-5.3.1/fs/lockd/host.c' l='300' u='c' c='nlmclnt_release_host'/>
<def f='linux-5.3.1/lib/refcount.c' l='314' ll='326' type='bool refcount_dec_and_mutex_lock(refcount_t * r, struct mutex * lock)'/>
<dec f='linux-5.3.1/lib/refcount.c' l='327' type='bool refcount_dec_and_mutex_lock(refcount_t * , struct mutex * )'/>
<use f='linux-5.3.1/lib/refcount.c' l='327' c='refcount_dec_and_mutex_lock'/>
<use f='linux-5.3.1/lib/refcount.c' l='327' u='a'/>
<doc f='linux-5.3.1/lib/refcount.c' l='298'>/**
 * refcount_dec_and_mutex_lock - return holding mutex if able to decrement
 *                               refcount to 0
 * @r: the refcount
 * @lock: the mutex to be locked
 *
 * Similar to atomic_dec_and_mutex_lock(), it will WARN on underflow and fail
 * to decrement when saturated at UINT_MAX.
 *
 * Provides release memory ordering, such that prior loads and stores are done
 * before, and provides a control dependency such that free() must come after.
 * See the comment on top.
 *
 * Return: true and hold mutex if able to decrement refcount to 0, false
 *         otherwise
 */</doc>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='130' u='c' c='refcount_dec_and_rtnl_lock'/>
<use f='linux-5.3.1/net/sched/act_api.c' l='129' u='c' c='__tcf_action_put'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1281' u='c' c='__tcf_block_put'/>
