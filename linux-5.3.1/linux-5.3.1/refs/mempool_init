<dec f='linux-5.3.1/include/linux/mempool.h' l='37' type='int mempool_init(mempool_t * pool, int min_nr, mempool_alloc_t * alloc_fn, mempool_free_t * free_fn, void * pool_data)'/>
<use f='linux-5.3.1/include/linux/mempool.h' l='62' u='c' c='mempool_init_slab_pool'/>
<use f='linux-5.3.1/include/linux/mempool.h' l='82' u='c' c='mempool_init_kmalloc_pool'/>
<use f='linux-5.3.1/include/linux/mempool.h' l='101' u='c' c='mempool_init_page_pool'/>
<use f='linux-5.3.1/block/bounce.c' l='117' u='c' c='init_emergency_isa_pool'/>
<def f='linux-5.3.1/mm/mempool.c' l='228' ll='234' type='int mempool_init(mempool_t * pool, int min_nr, mempool_alloc_t * alloc_fn, mempool_free_t * free_fn, void * pool_data)'/>
<dec f='linux-5.3.1/mm/mempool.c' l='235' type='int mempool_init(mempool_t * , int , mempool_alloc_t * , mempool_free_t * , void * )'/>
<use f='linux-5.3.1/mm/mempool.c' l='235' c='mempool_init'/>
<use f='linux-5.3.1/mm/mempool.c' l='235' u='a'/>
<doc f='linux-5.3.1/mm/mempool.c' l='214'>/**
 * mempool_init - initialize a memory pool
 * @pool:      pointer to the memory pool that should be initialized
 * @min_nr:    the minimum number of elements guaranteed to be
 *             allocated for this pool.
 * @alloc_fn:  user-defined element-allocation function.
 * @free_fn:   user-defined element-freeing function.
 * @pool_data: optional private data available to the user-defined functions.
 *
 * Like mempool_create(), but initializes the pool in (i.e. embedded in another
 * structure).
 *
 * Return: %0 on success, negative error code otherwise.
 */</doc>
