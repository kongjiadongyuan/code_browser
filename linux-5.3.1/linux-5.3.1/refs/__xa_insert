<dec f='linux-5.3.1/include/linux/xarray.h' l='523' type='int __xa_insert(struct xarray * , unsigned long index, void * entry, gfp_t )'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='736' u='c' c='xa_insert'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='765' u='c' c='xa_insert_bh'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='794' u='c' c='xa_insert_irq'/>
<def f='linux-5.3.1/lib/xarray.c' l='1472' ll='1494' type='int __xa_insert(struct xarray * xa, unsigned long index, void * entry, gfp_t gfp)'/>
<dec f='linux-5.3.1/lib/xarray.c' l='1495' type='int __xa_insert(struct xarray * , unsigned long , void * , gfp_t )'/>
<use f='linux-5.3.1/lib/xarray.c' l='1495' c='__xa_insert'/>
<use f='linux-5.3.1/lib/xarray.c' l='1495' u='a'/>
<doc f='linux-5.3.1/lib/xarray.c' l='1456'>/**
 * __xa_insert() - Store this entry in the XArray if no entry is present.
 * @xa: XArray.
 * @index: Index into array.
 * @entry: New entry.
 * @gfp: Memory allocation flags.
 *
 * Inserting a NULL entry will store a reserved entry (like xa_reserve())
 * if no entry is present.  Inserting will fail if a reserved entry is
 * present, even though loading from this index will return NULL.
 *
 * Context: Any context.  Expects xa_lock to be held on entry.  May
 * release and reacquire xa_lock if @gfp flags permit.
 * Return: 0 if the store succeeded.  -EBUSY if another entry was present.
 * -ENOMEM if memory could not be allocated.
 */</doc>
