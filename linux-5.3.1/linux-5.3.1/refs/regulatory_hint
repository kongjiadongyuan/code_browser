<dec f='linux-5.3.1/include/net/cfg80211.h' l='5371' type='int regulatory_hint(struct wiphy * wiphy, const char * alpha2)'/>
<doc f='linux-5.3.1/include/net/cfg80211.h' l='5346'>/**
 * regulatory_hint - driver hint to the wireless core a regulatory domain
 * @wiphy: the wireless device giving the hint (used only for reporting
 *	conflicts)
 * @alpha2: the ISO/IEC 3166 alpha2 the driver claims its regulatory domain
 * 	should be in. If @rd is set this should be NULL. Note that if you
 * 	set this to NULL you should still set rd-&gt;alpha2 to some accepted
 * 	alpha2.
 *
 * Wireless drivers can use this function to hint to the wireless core
 * what it believes should be the current regulatory domain by
 * giving it an ISO/IEC 3166 alpha2 country code it knows its regulatory
 * domain should be in or by providing a completely build regulatory domain.
 * If the driver provides an ISO/IEC 3166 alpha2 userspace will be queried
 * for a regulatory domain structure for the respective country.
 *
 * The wiphy must have been registered to cfg80211 prior to this call.
 * For cfg80211 drivers this means you must first use wiphy_register(),
 * for mac80211 drivers you must first use ieee80211_register_hw().
 *
 * Drivers should check the return value, its possible you can get
 * an -ENOMEM.
 *
 * Return: 0 on success. -ENOMEM.
 */</doc>
<def f='linux-5.3.1/net/wireless/reg.c' l='3000' ll='3025' type='int regulatory_hint(struct wiphy * wiphy, const char * alpha2)'/>
<dec f='linux-5.3.1/net/wireless/reg.c' l='3026' type='int regulatory_hint(struct wiphy * , const char * )'/>
<use f='linux-5.3.1/net/wireless/reg.c' l='3026' c='regulatory_hint'/>
<use f='linux-5.3.1/net/wireless/reg.c' l='3026' u='a'/>
<doc f='linux-5.3.1/net/wireless/reg.c' l='2999'>/* Driver hints */</doc>
