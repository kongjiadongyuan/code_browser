<dec f='linux-5.3.1/include/drm/drm_gem_framebuffer_helper.h' l='26' type='struct drm_framebuffer * drm_gem_fb_create(struct drm_device * dev, struct drm_file * file, const struct drm_mode_fb_cmd2 * mode_cmd)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='222' ll='228' type='struct drm_framebuffer * drm_gem_fb_create(struct drm_device * dev, struct drm_file * file, const struct drm_mode_fb_cmd2 * mode_cmd)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='229' type='struct drm_framebuffer * drm_gem_fb_create(struct drm_device * , struct drm_file * , const struct drm_mode_fb_cmd2 * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='229' c='drm_gem_fb_create'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='229' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='200'>/**
 * drm_gem_fb_create() - Helper function for the
 *                       &amp;drm_mode_config_funcs.fb_create callback
 * @dev: DRM device
 * @file: DRM file that holds the GEM handle(s) backing the framebuffer
 * @mode_cmd: Metadata from the userspace framebuffer creation request
 *
 * This function creates a new framebuffer object described by
 * &amp;drm_mode_fb_cmd2. This description includes handles for the buffer(s)
 * backing the framebuffer.
 *
 * If your hardware has special alignment or pitch requirements these should be
 * checked before calling this function. The function does buffer size
 * validation. Use drm_gem_fb_create_with_dirty() if you need framebuffer
 * flushing.
 *
 * Drivers can use this as their &amp;drm_mode_config_funcs.fb_create callback.
 * The ADDFB2 IOCTL calls into this callback.
 *
 * Returns:
 * Pointer to a &amp;drm_framebuffer on success or an error pointer on failure.
 */</doc>
