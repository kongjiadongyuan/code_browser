<def f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='88' ll='103'/>
<use f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='134'/>
<size>48</size>
<doc f='linux-5.3.1/include/linux/pinctrl/pinctrl.h' l='69'>/**
 * struct pinctrl_ops - global pin control operations, to be implemented by
 * pin controller drivers.
 * @get_groups_count: Returns the count of total number of groups registered.
 * @get_group_name: return the group name of the pin group
 * @get_group_pins: return an array of pins corresponding to a certain
 *	group selector @pins, and the size of the array in @num_pins
 * @pin_dbg_show: optional debugfs display hook that will provide per-device
 *	info for a certain pin in debugfs
 * @dt_node_to_map: parse a device tree &quot;pin configuration node&quot;, and create
 *	mapping table entries for it. These are returned through the @map and
 *	@num_maps output parameters. This function is optional, and may be
 *	omitted for pinctrl drivers that do not support device tree.
 * @dt_free_map: free mapping table entries created via @dt_node_to_map. The
 *	top-level @map pointer must be freed, along with any dynamically
 *	allocated members of the mapping table entries themselves. This
 *	function is optional, and may be omitted for pinctrl drivers that do
 *	not support device tree.
 */</doc>
<mbr r='pinctrl_ops::get_groups_count' o='0' t='int (*)(struct pinctrl_dev *)'/>
<mbr r='pinctrl_ops::get_group_name' o='64' t='const char *(*)(struct pinctrl_dev *, unsigned int)'/>
<mbr r='pinctrl_ops::get_group_pins' o='128' t='int (*)(struct pinctrl_dev *, unsigned int, const unsigned int **, unsigned int *)'/>
<mbr r='pinctrl_ops::pin_dbg_show' o='192' t='void (*)(struct pinctrl_dev *, struct seq_file *, unsigned int)'/>
<mbr r='pinctrl_ops::dt_node_to_map' o='256' t='int (*)(struct pinctrl_dev *, struct device_node *, struct pinctrl_map **, unsigned int *)'/>
<mbr r='pinctrl_ops::dt_free_map' o='320' t='void (*)(struct pinctrl_dev *, struct pinctrl_map *, unsigned int)'/>
