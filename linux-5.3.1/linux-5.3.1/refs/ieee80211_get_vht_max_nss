<dec f='linux-5.3.1/include/linux/ieee80211.h' l='1709' type='int ieee80211_get_vht_max_nss(struct ieee80211_vht_cap * cap, enum ieee80211_vht_chanwidth bw, int mcs, bool ext_nss_bw_capable)'/>
<doc f='linux-5.3.1/include/linux/ieee80211.h' l='1695'>/**
 * ieee80211_get_vht_max_nss - return max NSS for a given bandwidth/MCS
 * @cap: VHT capabilities of the peer
 * @bw: bandwidth to use
 * @mcs: MCS index to use
 * @ext_nss_bw_capable: indicates whether or not the local transmitter
 *	(rate scaling algorithm) can deal with the new logic
 *	(dot11VHTExtendedNSSBWCapable)
 *
 * Due to the VHT Extended NSS Bandwidth Support, the maximum NSS can
 * vary for a given BW/MCS. This function parses the data.
 *
 * Note: This function is exported by cfg80211.
 */</doc>
<def f='linux-5.3.1/net/wireless/util.c' l='1976' ll='2078' type='int ieee80211_get_vht_max_nss(struct ieee80211_vht_cap * cap, enum ieee80211_vht_chanwidth bw, int mcs, bool ext_nss_bw_capable)'/>
<dec f='linux-5.3.1/net/wireless/util.c' l='2079' type='int ieee80211_get_vht_max_nss(struct ieee80211_vht_cap * , enum ieee80211_vht_chanwidth , int , bool )'/>
<use f='linux-5.3.1/net/wireless/util.c' l='2079' c='ieee80211_get_vht_max_nss'/>
<use f='linux-5.3.1/net/wireless/util.c' l='2079' u='a'/>
