<dec f='linux-5.3.1/include/scsi/scsi_device.h' l='405' type='int scsi_get_vpd_page(struct scsi_device * , u8 page, unsigned char * buf, int buf_len)'/>
<def f='linux-5.3.1/drivers/scsi/scsi.c' l='355' ll='391' type='int scsi_get_vpd_page(struct scsi_device * sdev, u8 page, unsigned char * buf, int buf_len)'/>
<dec f='linux-5.3.1/drivers/scsi/scsi.c' l='392' type='int scsi_get_vpd_page(struct scsi_device * , u8 , unsigned char * , int )'/>
<use f='linux-5.3.1/drivers/scsi/scsi.c' l='392' c='scsi_get_vpd_page'/>
<use f='linux-5.3.1/drivers/scsi/scsi.c' l='392' u='a'/>
<doc f='linux-5.3.1/drivers/scsi/scsi.c' l='341'>/**
 * scsi_get_vpd_page - Get Vital Product Data from a SCSI device
 * @sdev: The device to ask
 * @page: Which Vital Product Data to return
 * @buf: where to store the VPD
 * @buf_len: number of bytes in the VPD buffer area
 *
 * SCSI devices may optionally supply Vital Product Data.  Each &apos;page&apos;
 * of VPD is defined in the appropriate SCSI document (eg SPC, SBC).
 * If the device supports this VPD page, this routine returns a pointer
 * to a buffer containing the data from that page.  The caller is
 * responsible for calling kfree() on this pointer when it is no longer
 * needed.  If we cannot retrieve the VPD page this routine returns %NULL.
 */</doc>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='2860' u='c' c='sd_read_block_limits'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='2927' u='c' c='sd_read_block_characteristics'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='2974' u='c' c='sd_read_block_provisioning'/>
<use f='linux-5.3.1/drivers/scsi/sd.c' l='3006' u='c' c='sd_read_write_same'/>
