<dec f='linux-5.3.1/include/linux/firmware.h' l='47' type='int request_firmware_nowait(struct module * module, bool uevent, const char * name, struct device * device, gfp_t gfp, void * context, void (*)(const struct firmware *, void *) cont)'/>
<def f='linux-5.3.1/drivers/base/firmware_loader/main.c' l='1006' ll='1046' type='int request_firmware_nowait(struct module * module, bool uevent, const char * name, struct device * device, gfp_t gfp, void * context, void (*)(const struct firmware *, void *) cont)'/>
<dec f='linux-5.3.1/drivers/base/firmware_loader/main.c' l='1047' type='int request_firmware_nowait(struct module * , bool , const char * , struct device * , gfp_t , void * , void (*)(const struct firmware *, void *) )'/>
<use f='linux-5.3.1/drivers/base/firmware_loader/main.c' l='1047' c='request_firmware_nowait'/>
<use f='linux-5.3.1/drivers/base/firmware_loader/main.c' l='1047' u='a'/>
<doc f='linux-5.3.1/drivers/base/firmware_loader/main.c' l='983'>/**
 * request_firmware_nowait() - asynchronous version of request_firmware
 * @module: module requesting the firmware
 * @uevent: sends uevent to copy the firmware image if this flag
 *	is non-zero else the firmware copy must be done manually.
 * @name: name of firmware file
 * @device: device for which firmware is being loaded
 * @gfp: allocation flags
 * @context: will be passed over to @cont, and
 *	@fw may be %NULL if firmware request fails.
 * @cont: function will be called asynchronously when the firmware
 *	request is over.
 *
 *	Caller must hold the reference count of @device.
 *
 *	Asynchronous variant of request_firmware() for user contexts:
 *		- sleep for as small periods as possible since it may
 *		  increase kernel boot time of built-in device drivers
 *		  requesting firmware in their -&gt;probe() methods, if
 *		  @gfp is GFP_KERNEL.
 *
 *		- can&apos;t sleep at all if @gfp is GFP_ATOMIC.
 **/</doc>
<use f='linux-5.3.1/net/wireless/reg.c' l='1072' u='c' c='query_regdb_file'/>
