<dec f='linux-5.3.1/drivers/gpu/drm/drm_crtc_internal.h' l='142' type='int drm_mode_object_add(struct drm_device * dev, struct drm_mode_object * obj, uint32_t obj_type)'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_crtc.c' l='253' u='c' c='drm_crtc_init_with_planes'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_encoder.c' l='119' u='c' c='drm_encoder_init'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_mode_object.c' l='77' ll='81' type='int drm_mode_object_add(struct drm_device * dev, struct drm_mode_object * obj, uint32_t obj_type)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_mode_object.c' l='65'>/**
 * drm_mode_object_add - allocate a new modeset identifier
 * @dev: DRM device
 * @obj: object pointer, used to generate unique ID
 * @obj_type: object type
 *
 * Create a unique identifier based on @ptr in @dev&apos;s identifier space.  Used
 * for tracking modes, CRTCs and connectors.
 *
 * Returns:
 * Zero on success, error code on failure.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_plane.c' l='193' u='c' c='drm_universal_plane_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_property.c' l='122' u='c' c='drm_property_create'/>
