<dec f='linux-5.3.1/include/crypto/internal/skcipher.h' l='275' type='struct skcipher_instance * skcipher_alloc_instance_simple(struct crypto_template * tmpl, struct rtattr ** tb, struct crypto_alg ** cipher_alg_ret)'/>
<use f='linux-5.3.1/crypto/cbc.c' l='57' u='c' c='crypto_cbc_create'/>
<use f='linux-5.3.1/crypto/ctr.c' l='132' u='c' c='crypto_ctr_create'/>
<def f='linux-5.3.1/crypto/skcipher.c' l='1165' ll='1232' type='struct skcipher_instance * skcipher_alloc_instance_simple(struct crypto_template * tmpl, struct rtattr ** tb, struct crypto_alg ** cipher_alg_ret)'/>
<dec f='linux-5.3.1/crypto/skcipher.c' l='1233' type='struct skcipher_instance * skcipher_alloc_instance_simple(struct crypto_template * , struct rtattr ** , struct crypto_alg ** )'/>
<use f='linux-5.3.1/crypto/skcipher.c' l='1233' c='skcipher_alloc_instance_simple'/>
<use f='linux-5.3.1/crypto/skcipher.c' l='1233' u='a'/>
<doc f='linux-5.3.1/crypto/skcipher.c' l='1147'>/**
 * skcipher_alloc_instance_simple - allocate instance of simple block cipher mode
 *
 * Allocate an skcipher_instance for a simple block cipher mode of operation,
 * e.g. cbc or ecb.  The instance context will have just a single crypto_spawn,
 * that for the underlying cipher.  The {min,max}_keysize, ivsize, blocksize,
 * alignmask, and priority are set from the underlying cipher but can be
 * overridden if needed.  The tfm context defaults to skcipher_ctx_simple, and
 * default -&gt;setkey(), -&gt;init(), and -&gt;exit() methods are installed.
 *
 * @tmpl: the template being instantiated
 * @tb: the template parameters
 * @cipher_alg_ret: on success, a pointer to the underlying cipher algorithm is
 *		    returned here.  It must be dropped with crypto_mod_put().
 *
 * Return: a pointer to the new instance, or an ERR_PTR().  The caller still
 *	   needs to register the instance.
 */</doc>
