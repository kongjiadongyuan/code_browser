<dec f='linux-5.3.1/include/linux/device.h' l='714' type='void * devm_of_iomap(struct device * dev, struct device_node * node, int index, resource_size_t * size)'/>
<def f='linux-5.3.1/lib/devres.c' l='187' ll='197' type='void * devm_of_iomap(struct device * dev, struct device_node * node, int index, resource_size_t * size)'/>
<dec f='linux-5.3.1/lib/devres.c' l='198' type='void * devm_of_iomap(struct device * , struct device_node * , int , resource_size_t * )'/>
<use f='linux-5.3.1/lib/devres.c' l='198' c='devm_of_iomap'/>
<use f='linux-5.3.1/lib/devres.c' l='198' u='a'/>
<doc f='linux-5.3.1/lib/devres.c' l='165'>/*
 * devm_of_iomap - Requests a resource and maps the memory mapped IO
 *		   for a given device_node managed by a given device
 *
 * Checks that a resource is a valid memory region, requests the memory
 * region and ioremaps it. All operations are managed and will be undone
 * on driver detach of the device.
 *
 * This is to be used when a device requests/maps resources described
 * by other device tree nodes (children or otherwise).
 *
 * @dev:	The device &quot;managing&quot; the resource
 * @node:       The device-tree node where the resource resides
 * @index:	index of the MMIO range in the &quot;reg&quot; property
 * @size:	Returns the size of the resource (pass NULL if not needed)
 * Returns a pointer to the requested and mapped memory or an ERR_PTR() encoded
 * error code on failure. Usage example:
 *
 *	base = devm_of_iomap(&amp;pdev-&gt;dev, node, 0, NULL);
 *	if (IS_ERR(base))
 *		return PTR_ERR(base);
 */</doc>
