<dec f='linux-5.3.1/include/linux/kernfs.h' l='361' type='void kernfs_break_active_protection(struct kernfs_node * kn)'/>
<def f='linux-5.3.1/fs/kernfs/dir.c' l='1371' ll='1378' type='void kernfs_break_active_protection(struct kernfs_node * kn)'/>
<use f='linux-5.3.1/fs/kernfs/dir.c' l='1442' u='c' c='kernfs_remove_self'/>
<doc f='linux-5.3.1/fs/kernfs/dir.c' l='1357'>/**
 * kernfs_break_active_protection - break out of active protection
 * @kn: the self kernfs_node
 *
 * The caller must be running off of a kernfs operation which is invoked
 * with an active reference - e.g. one of kernfs_ops.  Each invocation of
 * this function must also be matched with an invocation of
 * kernfs_unbreak_active_protection().
 *
 * This function releases the active reference of @kn the caller is
 * holding.  Once this function is called, @kn may be removed at any point
 * and the caller is solely responsible for ensuring that the objects it
 * dereferences are accessible.
 */</doc>
<use f='linux-5.3.1/fs/sysfs/file.c' l='430' u='c' c='sysfs_break_active_protection'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup-v1.c' l='852' u='c' c='cgroup1_rename'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup-v1.c' l='853' u='c' c='cgroup1_rename'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='1612' u='c' c='cgroup_kn_lock_live'/>
<use f='linux-5.3.1/kernel/cgroup/cpuset.c' l='2282' u='c' c='cpuset_write_resmask'/>
