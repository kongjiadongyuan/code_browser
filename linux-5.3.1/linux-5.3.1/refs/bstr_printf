<dec f='linux-5.3.1/include/linux/string.h' l='212' type='int bstr_printf(char * buf, size_t size, const char * fmt, const u32 * bin_buf)'/>
<use f='linux-5.3.1/lib/seq_buf.c' l='121' u='c' c='seq_buf_bprintf'/>
<def f='linux-5.3.1/lib/vsprintf.c' l='2896' ll='3083' type='int bstr_printf(char * buf, size_t size, const char * fmt, const u32 * bin_buf)'/>
<dec f='linux-5.3.1/lib/vsprintf.c' l='3084' type='int bstr_printf(char * , size_t , const char * , const u32 * )'/>
<use f='linux-5.3.1/lib/vsprintf.c' l='3084' c='bstr_printf'/>
<use f='linux-5.3.1/lib/vsprintf.c' l='3084' u='a'/>
<doc f='linux-5.3.1/lib/vsprintf.c' l='2874'>/**
 * bstr_printf - Format a string from binary arguments and place it in a buffer
 * @buf: The buffer to place the result into
 * @size: The size of the buffer, including the trailing null space
 * @fmt: The format string to use
 * @bin_buf: Binary arguments for the format string
 *
 * This function like C99 vsnprintf, but the difference is that vsnprintf gets
 * arguments from stack, and bstr_printf gets arguments from @bin_buf which is
 * a binary buffer that generated by vbin_printf.
 *
 * The format follows C99 vsnprintf, but has some extensions:
 *  see vsnprintf comment for details.
 *
 * The return value is the number of characters which would
 * be generated for the given input, excluding the trailing
 * &apos;\0&apos;, as per ISO C99. If you want to have the exact
 * number of characters written into @buf as return value
 * (not including the trailing &apos;\0&apos;), use vscnprintf(). If the
 * return is greater than or equal to @size, the resulting
 * string is truncated.
 */</doc>
