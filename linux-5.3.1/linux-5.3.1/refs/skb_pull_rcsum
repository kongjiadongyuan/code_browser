<dec f='linux-5.3.1/include/linux/skbuff.h' l='3280' type='void * skb_pull_rcsum(struct sk_buff * skb, unsigned int len)'/>
<use f='linux-5.3.1/include/net/udp.h' l='162' u='c' c='udp_csum_pull_header'/>
<def f='linux-5.3.1/net/core/skbuff.c' l='3611' ll='3619' type='void * skb_pull_rcsum(struct sk_buff * skb, unsigned int len)'/>
<dec f='linux-5.3.1/net/core/skbuff.c' l='3620' type='void * skb_pull_rcsum(struct sk_buff * , unsigned int )'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='3620' c='skb_pull_rcsum'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='3620' u='a'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='4971' u='c' c='skb_checksum_trimmed'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='5316' u='c' c='skb_vlan_untag'/>
<doc f='linux-5.3.1/net/core/skbuff.c' l='3600'>/**
 *	skb_pull_rcsum - pull skb and update receive checksum
 *	@skb: buffer to update
 *	@len: length of data pulled
 *
 *	This function performs an skb_pull on the packet and updates
 *	the CHECKSUM_COMPLETE checksum.  It should be used on
 *	receive path processing instead of skb_pull unless you know
 *	that the checksum difference is zero (e.g., a valid IP header)
 *	or you are setting ip_summed to CHECKSUM_NONE.
 */</doc>
<use f='linux-5.3.1/net/ipv4/ip_tunnel_core.c' l='94' u='c' c='__iptunnel_pull_header'/>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='538' u='c' c='esp6_input_done2'/>
