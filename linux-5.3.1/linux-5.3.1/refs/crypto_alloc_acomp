<dec f='linux-5.3.1/include/crypto/acompress.h' l='107' type='struct crypto_acomp * crypto_alloc_acomp(const char * alg_name, u32 type, u32 mask)'/>
<def f='linux-5.3.1/crypto/acompress.c' l='105' ll='109' type='struct crypto_acomp * crypto_alloc_acomp(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-5.3.1/crypto/acompress.c' l='110' type='struct crypto_acomp * crypto_alloc_acomp(const char * , u32 , u32 )'/>
<use f='linux-5.3.1/crypto/acompress.c' l='110' c='crypto_alloc_acomp'/>
<use f='linux-5.3.1/crypto/acompress.c' l='110' u='a'/>
<doc f='linux-5.3.1/include/crypto/acompress.h' l='93'>/**
 * crypto_alloc_acomp() -- allocate ACOMPRESS tfm handle
 * @alg_name:	is the cra_name / name or cra_driver_name / driver name of the
 *		compression algorithm e.g. &quot;deflate&quot;
 * @type:	specifies the type of the algorithm
 * @mask:	specifies the mask for the algorithm
 *
 * Allocate a handle for a compression algorithm. The returned struct
 * crypto_acomp is the handle that is required for any subsequent
 * API invocation for the compression operations.
 *
 * Return:	allocated handle in case of success; IS_ERR() is true in case
 *		of an error, PTR_ERR() returns the error code.
 */</doc>
