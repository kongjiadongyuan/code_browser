<def f='linux-5.3.1/include/linux/skbuff.h' l='2692' ll='2701' type='void skb_orphan(struct sk_buff * skb)'/>
<doc f='linux-5.3.1/include/linux/skbuff.h' l='2684'>/**
 *	skb_orphan - orphan a buffer
 *	@skb: buffer to orphan
 *
 *	If a buffer currently has an owner then we call the owner&apos;s
 *	destructor function and make the @skb unowned. The buffer continues
 *	to exist but is no longer charged to its former owner.
 */</doc>
<use f='linux-5.3.1/include/net/sock.h' l='2133' u='c' c='skb_set_owner_r'/>
<use f='linux-5.3.1/include/net/sock.h' l='2445' u='c' c='sk_eat_skb'/>
<use f='linux-5.3.1/drivers/net/loopback.c' l='79' u='c' c='loopback_xmit'/>
<use f='linux-5.3.1/net/core/datagram.c' l='344' u='c' c='__skb_free_datagram_locked'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='4409' u='c' c='sock_queue_err_skb'/>
<use f='linux-5.3.1/net/core/sock.c' l='1975' u='c' c='skb_set_owner_w'/>
<use f='linux-5.3.1/net/core/sock.c' l='2027' u='c' c='skb_orphan_partial'/>
<use f='linux-5.3.1/net/ipv4/ip_fragment.c' l='481' u='c' c='ip_defrag'/>
<use f='linux-5.3.1/net/ipv4/ip_input.c' l='497' u='c' c='ip_rcv_core'/>
<use f='linux-5.3.1/net/ipv4/tcp_output.c' l='1079' u='c' c='__tcp_transmit_skb'/>
<use f='linux-5.3.1/net/ipv6/ip6_input.c' l='254' u='c' c='ip6_rcv_core'/>
<use f='linux-5.3.1/net/ipv6/netfilter/nf_conntrack_reasm.c' l='464' u='c' c='nf_ct_frag6_gather'/>
<use f='linux-5.3.1/net/mac80211/status.c' l='888' u='c' c='__ieee80211_tx_status'/>
<use f='linux-5.3.1/include/net/sctp/sctp.h' l='402' u='c' c='sctp_skb_set_owner_r'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='1442' u='c' c='do_one_broadcast'/>
