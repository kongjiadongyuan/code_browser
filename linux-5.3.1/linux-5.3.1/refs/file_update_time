<dec f='linux-5.3.1/include/linux/fs.h' l='3302' type='int file_update_time(struct file * file)'/>
<use f='linux-5.3.1/drivers/video/fbdev/core/fb_defio.c' l='106' u='c' c='fb_deferred_io_mkwrite'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='6225' u='c' c='ext4_page_mkwrite'/>
<def f='linux-5.3.1/fs/inode.c' l='1867' ll='1899' type='int file_update_time(struct file * file)'/>
<dec f='linux-5.3.1/fs/inode.c' l='1900' type='int file_update_time(struct file * )'/>
<use f='linux-5.3.1/fs/inode.c' l='1900' c='file_update_time'/>
<use f='linux-5.3.1/fs/inode.c' l='1900' u='a'/>
<use f='linux-5.3.1/fs/inode.c' l='1918' u='c' c='file_modified'/>
<doc f='linux-5.3.1/fs/inode.c' l='1854'>/**
 *	file_update_time	-	update mtime and ctime time
 *	@file: file accessed
 *
 *	Update the mtime and ctime members of an inode and mark the inode
 *	for writeback.  Note that this function is meant exclusively for
 *	usage in the file write path of filesystems, and filesystems may
 *	choose to explicitly ignore update via this function with the
 *	S_NOCMTIME inode flag, e.g. for network filesystem where these
 *	timestamps are handled by the server.  This can return an error for
 *	file systems who need to allocate space in order to update an inode.
 */</doc>
<use f='linux-5.3.1/fs/kernfs/file.c' l='386' u='c' c='kernfs_vma_page_mkwrite'/>
<use f='linux-5.3.1/fs/pipe.c' l='507' u='c' c='pipe_write'/>
<use f='linux-5.3.1/mm/filemap.c' l='2724' u='c' c='filemap_page_mkwrite'/>
<use f='linux-5.3.1/mm/filemap.c' l='3406' u='c' c='__generic_file_write_iter'/>
<use f='linux-5.3.1/mm/memory.c' l='2248' u='c' c='fault_dirty_shared_page'/>
