<dec f='linux-5.3.1/include/linux/timekeeping.h' l='289' type='void read_persistent_wall_and_boot_offset(struct timespec64 * wall_clock, struct timespec64 * boot_offset)'/>
<def f='linux-5.3.1/kernel/time/timekeeping.c' l='1503' ll='1509' type='void read_persistent_wall_and_boot_offset(struct timespec64 * wall_time, struct timespec64 * boot_offset)'/>
<use f='linux-5.3.1/kernel/time/timekeeping.c' l='1539' u='c' c='timekeeping_init'/>
<doc f='linux-5.3.1/kernel/time/timekeeping.c' l='1491'>/**
 * read_persistent_wall_and_boot_offset - Read persistent clock, and also offset
 *                                        from the boot.
 *
 * Weak dummy function for arches that do not yet support it.
 * wall_time	- current time as returned by persistent clock
 * boot_offset	- offset that is defined as wall_time - boot_time
 * The default function calculates offset based on the current value of
 * local_clock(). This way architectures that support sched_clock() but don&apos;t
 * support dedicated boot time clock will provide the best estimate of the
 * boot time.
 */</doc>
