<dec f='linux-5.3.1/include/linux/sched/mm.h' l='113' type='struct mm_struct * get_task_mm(struct task_struct * task)'/>
<doc f='linux-5.3.1/include/linux/sched/mm.h' l='112'>/* Grab a reference to a task&apos;s mm, if it is not already going away */</doc>
<use f='linux-5.3.1/fs/proc/array.c' l='407' u='c' c='proc_pid_status'/>
<use f='linux-5.3.1/fs/proc/array.c' l='453' u='c' c='do_task_stat'/>
<use f='linux-5.3.1/fs/proc/array.c' l='639' u='c' c='proc_pid_statm'/>
<use f='linux-5.3.1/fs/proc/base.c' l='346' u='c' c='get_task_cmdline'/>
<use f='linux-5.3.1/fs/proc/base.c' l='2024' u='c' c='map_files_get_link'/>
<use f='linux-5.3.1/fs/proc/base.c' l='2129' u='c' c='proc_map_files_lookup'/>
<use f='linux-5.3.1/fs/proc/base.c' l='2188' u='c' c='proc_map_files_readdir'/>
<use f='linux-5.3.1/fs/proc/base.c' l='2703' u='c' c='proc_coredump_filter_read'/>
<use f='linux-5.3.1/fs/proc/base.c' l='2738' u='c' c='proc_coredump_filter_write'/>
<use f='linux-5.3.1/fs/proc/task_mmu.c' l='1148' u='c' c='clear_refs_write'/>
<use f='linux-5.3.1/kernel/cgroup/cpuset.c' l='1598' u='c' c='update_tasks_nodemask'/>
<use f='linux-5.3.1/kernel/cgroup/cpuset.c' l='2128' u='c' c='cpuset_attach'/>
<use f='linux-5.3.1/kernel/events/core.c' l='9119' u='c' c='perf_event_addr_filters_apply'/>
<def f='linux-5.3.1/kernel/fork.c' l='1187' ll='1201' type='struct mm_struct * get_task_mm(struct task_struct * task)'/>
<dec f='linux-5.3.1/kernel/fork.c' l='1202' type='struct mm_struct * get_task_mm(struct task_struct * )'/>
<use f='linux-5.3.1/kernel/fork.c' l='1202' c='get_task_mm'/>
<use f='linux-5.3.1/kernel/fork.c' l='1202' u='a'/>
<use f='linux-5.3.1/kernel/fork.c' l='1213' u='c' c='mm_access'/>
<doc f='linux-5.3.1/kernel/fork.c' l='1178'>/**
 * get_task_mm - acquire a reference to the task&apos;s mm
 *
 * Returns %NULL if the task has no mm.  Checks PF_KTHREAD (meaning
 * this kernel workthread has transiently adopted a user mm with use_mm,
 * to do its AIO) is not set and if so returns a reference to it, after
 * bumping up the use count.  User must release the mm via mmput()
 * after use.  Typically used by /proc and ptrace.
 */</doc>
<use f='linux-5.3.1/kernel/ptrace.c' l='48' u='c' c='ptrace_access_vm'/>
<use f='linux-5.3.1/kernel/sys.c' l='1780' u='c' c='getrusage'/>
<use f='linux-5.3.1/kernel/trace/trace_output.c' l='1105' u='c' c='trace_user_stack_print'/>
<use f='linux-5.3.1/kernel/tsacct.c' l='92' u='c' c='xacct_add_tsk'/>
<use f='linux-5.3.1/mm/memory.c' l='4380' u='c' c='access_process_vm'/>
<use f='linux-5.3.1/mm/mempolicy.c' l='1524' u='c' c='kernel_migrate_pages'/>
<use f='linux-5.3.1/mm/migrate.c' l='1795' u='c' c='kernel_move_pages'/>
<use f='linux-5.3.1/mm/util.c' l='742' u='c' c='get_cmdline'/>
