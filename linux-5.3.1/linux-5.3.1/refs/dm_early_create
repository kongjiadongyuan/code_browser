<dec f='linux-5.3.1/include/linux/device-mapper.h' l='433' type='int dm_early_create(struct dm_ioctl * dmi, struct dm_target_spec ** spec_array, char ** target_params_array)'/>
<doc f='linux-5.3.1/include/linux/device-mapper.h' l='429'>/*
 * Device mapper functions to parse and create devices specified by the
 * parameter &quot;dm-mod.create=&quot;
 */</doc>
<def f='linux-5.3.1/drivers/md/dm-ioctl.c' l='2040' ll='2127' type='int dm_early_create(struct dm_ioctl * dmi, struct dm_target_spec ** spec_array, char ** target_params_array)'/>
<doc f='linux-5.3.1/drivers/md/dm-ioctl.c' l='2023'>/**
 * dm_early_create - create a mapped device in early boot.
 *
 * @dmi: Contains main information of the device mapping to be created.
 * @spec_array: array of pointers to struct dm_target_spec. Describes the
 * mapping table of the device.
 * @target_params_array: array of strings with the parameters to a specific
 * target.
 *
 * Instead of having the struct dm_target_spec and the parameters for every
 * target embedded at the end of struct dm_ioctl (as performed in a normal
 * ioctl), pass them as arguments, so the caller doesn&apos;t need to serialize them.
 * The size of the spec_array and target_params_array is given by
 * @dmi-&gt;target_count.
 * This function is supposed to be called in early boot, so locking mechanisms
 * to protect against concurrent loads are not required.
 */</doc>
