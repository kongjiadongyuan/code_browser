<dec f='linux-5.3.1/include/linux/rcupdate.h' l='76' type='int'/>
<dec f='linux-5.3.1/include/linux/rcutree.h' l='53' type='int'/>
<use f='linux-5.3.1/kernel/rcu/srcutree.c' l='914' u='r' c='__synchronize_srcu'/>
<def f='linux-5.3.1/kernel/rcu/tree.c' l='127' type='int'/>
<dec f='linux-5.3.1/kernel/rcu/tree.c' l='128' type='typeof (rcu_scheduler_active)'/>
<use f='linux-5.3.1/kernel/rcu/tree.c' l='128'/>
<use f='linux-5.3.1/kernel/rcu/tree.c' l='128' u='a'/>
<use f='linux-5.3.1/kernel/rcu/tree.c' l='2626' u='r' c='rcu_blocking_is_gp'/>
<use f='linux-5.3.1/kernel/rcu/tree.c' l='3028' u='r' c='rcutree_online_cpu'/>
<use f='linux-5.3.1/kernel/rcu/tree.c' l='3267' u='w' c='rcu_scheduler_starting'/>
<use f='linux-5.3.1/kernel/rcu/tree_exp.h' l='436' u='r' c='sync_rcu_exp_select_cpus'/>
<use f='linux-5.3.1/kernel/rcu/tree_exp.h' l='820' u='r' c='synchronize_rcu_expedited'/>
<doc f='linux-5.3.1/kernel/rcu/tree.c' l='115'>/*
 * The rcu_scheduler_active variable is initialized to the value
 * RCU_SCHEDULER_INACTIVE and transitions RCU_SCHEDULER_INIT just before the
 * first task is spawned.  So when this variable is RCU_SCHEDULER_INACTIVE,
 * RCU can assume that there is but one task, allowing RCU to (for example)
 * optimize synchronize_rcu() to a simple barrier().  When this variable
 * is RCU_SCHEDULER_INIT, RCU must actually do all the hard work required
 * to detect real grace periods.  This variable is also used to suppress
 * boot-time false positives from lockdep-RCU error checking.  Finally, it
 * transitions from RCU_SCHEDULER_INIT to RCU_SCHEDULER_RUNNING after RCU
 * is fully initialized, including all of its kthreads having been spawned.
 */</doc>
<use f='linux-5.3.1/kernel/rcu/update.c' l='124' u='r' c='rcu_gp_is_normal'/>
<use f='linux-5.3.1/kernel/rcu/update.c' l='140' u='r' c='rcu_gp_is_expedited'/>
<use f='linux-5.3.1/kernel/rcu/update.c' l='205' u='w' c='rcu_set_runtime_mode'/>
