<dec f='linux-5.3.1/include/linux/dma-mapping.h' l='462' type='int dma_mmap_attrs(struct device * dev, struct vm_area_struct * vma, void * cpu_addr, dma_addr_t dma_addr, size_t size, unsigned long attrs)'/>
<use f='linux-5.3.1/include/linux/dma-mapping.h' l='808' u='c' c='dma_mmap_wc'/>
<def f='linux-5.3.1/kernel/dma/mapping.c' l='224' ll='233' type='int dma_mmap_attrs(struct device * dev, struct vm_area_struct * vma, void * cpu_addr, dma_addr_t dma_addr, size_t size, unsigned long attrs)'/>
<dec f='linux-5.3.1/kernel/dma/mapping.c' l='234' type='int dma_mmap_attrs(struct device * , struct vm_area_struct * , void * , dma_addr_t , size_t , unsigned long )'/>
<use f='linux-5.3.1/kernel/dma/mapping.c' l='234' c='dma_mmap_attrs'/>
<use f='linux-5.3.1/kernel/dma/mapping.c' l='234' u='a'/>
<doc f='linux-5.3.1/kernel/dma/mapping.c' l='211'>/**
 * dma_mmap_attrs - map a coherent DMA allocation into user space
 * @dev: valid struct device pointer, or NULL for ISA and EISA-like devices
 * @vma: vm_area_struct describing requested user mapping
 * @cpu_addr: kernel CPU-view address returned from dma_alloc_attrs
 * @dma_addr: device-view address returned from dma_alloc_attrs
 * @size: size of memory originally requested in dma_alloc_attrs
 * @attrs: attributes of mapping properties requested in dma_alloc_attrs
 *
 * Map a coherent DMA buffer previously allocated by dma_alloc_attrs into user
 * space.  The coherent DMA buffer must not be freed by the driver until the
 * user space mapping has been released.
 */</doc>
