<dec f='linux-5.3.1/fs/nfs/delegation.h' l='44' type='int nfs4_inode_return_delegation(struct inode * inode)'/>
<def f='linux-5.3.1/fs/nfs/delegation.c' l='603' ll='614' type='int nfs4_inode_return_delegation(struct inode * inode)'/>
<use f='linux-5.3.1/fs/nfs/delegation.c' l='628' u='c' c='nfs4_inode_make_writeable'/>
<doc f='linux-5.3.1/fs/nfs/delegation.c' l='593'>/**
 * nfs_inode_return_delegation - synchronously return a delegation
 * @inode: inode to process
 *
 * This routine will always flush any dirty data to disk on the
 * assumption that if we need to return the delegation, then
 * we should stop caching.
 *
 * Returns zero on success, or a negative errno value.
 */</doc>
<use f='linux-5.3.1/fs/nfs/nfs4proc.c' l='1802' u='c' c='nfs4_return_incompatible_delegation'/>
<use f='linux-5.3.1/fs/nfs/nfs4proc.c' l='4442' u='c' c='nfs4_proc_remove'/>
<use f='linux-5.3.1/fs/nfs/nfs4proc.c' l='4485' u='c' c='nfs4_proc_unlink_setup'/>
<use f='linux-5.3.1/fs/nfs/nfs4proc.c' l='4524' u='c' c='nfs4_proc_rename_setup'/>
