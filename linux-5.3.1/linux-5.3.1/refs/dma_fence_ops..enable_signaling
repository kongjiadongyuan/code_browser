<dec f='linux-5.3.1/include/linux/dma-fence.h' l='172' type='bool (*)(struct dma_fence *)'/>
<offset>192</offset>
<doc f='linux-5.3.1/include/linux/dma-fence.h' l='137'>/**
	 * @enable_signaling:
	 *
	 * Enable software signaling of fence.
	 *
	 * For fence implementations that have the capability for hw-&gt;hw
	 * signaling, they can implement this op to enable the necessary
	 * interrupts, or insert commands into cmdstream, etc, to avoid these
	 * costly operations for the common case where only hw-&gt;hw
	 * synchronization is required.  This is called in the first
	 * dma_fence_wait() or dma_fence_add_callback() path to let the fence
	 * implementation know that there is another driver waiting on the
	 * signal (ie. hw-&gt;sw case).
	 *
	 * This function can be called from atomic context, but not
	 * from irq context, so normal spinlocks can be used.
	 *
	 * A return value of false indicates the fence already passed,
	 * or some failure occurred that made it impossible to enable
	 * signaling. True indicates successful enabling.
	 *
	 * &amp;dma_fence.error may be set in enable_signaling, but only when false
	 * is returned.
	 *
	 * Since many implementations can call dma_fence_signal() even when before
	 * @enable_signaling has been called there&apos;s a race window, where the
	 * dma_fence_signal() might result in the final fence reference being
	 * released and its memory freed. To avoid this, implementations of this
	 * callback should grab their own reference using dma_fence_get(), to be
	 * released when the fence is signalled (through e.g. the interrupt
	 * handler).
	 *
	 * This callback is optional. If this callback is not present, then the
	 * driver must always have signaling enabled.
	 */</doc>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence-array.c' l='97' u='w'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence-chain.c' l='191' u='w'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence.c' l='306' u='r' c='dma_fence_enable_sw_signaling'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence.c' l='311' u='r' c='dma_fence_enable_sw_signaling'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence.c' l='366' u='r' c='dma_fence_add_callback'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence.c' l='369' u='r' c='dma_fence_add_callback'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence.c' l='497' u='r' c='dma_fence_default_wait'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-fence.c' l='500' u='r' c='dma_fence_default_wait'/>
<use f='linux-5.3.1/include/linux/seqno-fence.h' l='94' u='r' c='seqno_fence_init'/>
<use f='linux-5.3.1/drivers/dma-buf/seqno-fence.c' l='34' u='r' c='seqno_enable_signaling'/>
<use f='linux-5.3.1/drivers/dma-buf/seqno-fence.c' l='66' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='110' u='w'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/i915_request.c' l='116' u='w'/>
