<dec f='linux-5.3.1/include/linux/sched/wake_q.h' l='60' type='void wake_q_add_safe(struct wake_q_head * head, struct task_struct * task)'/>
<use f='linux-5.3.1/kernel/futex.c' l='1487' u='c' c='mark_wake_futex'/>
<use f='linux-5.3.1/kernel/locking/rwsem.c' l='547' u='c' c='rwsem_mark_wake'/>
<def f='linux-5.3.1/kernel/sched/core.c' l='472' ll='476' type='void wake_q_add_safe(struct wake_q_head * head, struct task_struct * task)'/>
<doc f='linux-5.3.1/kernel/sched/core.c' l='455'>/**
 * wake_q_add_safe() - safely queue a wakeup for &apos;later&apos; waking.
 * @head: the wake_q_head to add @task to
 * @task: the task to queue for &apos;later&apos; wakeup
 *
 * Queue a task for later wakeup, most likely by the wake_up_q() call in the
 * same context, _HOWEVER_ this is not guaranteed, the wakeup can come
 * instantly.
 *
 * This function must be used as-if it were wake_up_process(); IOW the task
 * must be ready to be woken at this location.
 *
 * This function is essentially a task-safe equivalent to wake_q_add(). Callers
 * that already hold reference to @task can call the &apos;safe&apos; version and trust
 * wake_q to do the right thing depending whether or not the @task is already
 * queued for wakeup.
 */</doc>
