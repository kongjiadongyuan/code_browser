<dec f='linux-5.3.1/include/crypto/rng.h' l='90' type='struct crypto_rng * crypto_alloc_rng(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-5.3.1/include/crypto/rng.h' l='70'>/**
 * crypto_alloc_rng() -- allocate RNG handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      message digest cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for a random number generator. The returned struct
 * crypto_rng is the cipher handle that is required for any subsequent
 * API invocation for that random number generator.
 *
 * For all random number generators, this call creates a new private copy of
 * the random number generator that does not share a state with other
 * instances. The only exception is the &quot;krng&quot; random number generator which
 * is a kernel crypto API use case for the get_random_bytes() function of the
 * /dev/random driver.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<use f='linux-5.3.1/crypto/drbg.c' l='1515' u='c' c='drbg_prepare_hrng'/>
<def f='linux-5.3.1/crypto/rng.c' l='110' ll='113' type='struct crypto_rng * crypto_alloc_rng(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-5.3.1/crypto/rng.c' l='114' type='struct crypto_rng * crypto_alloc_rng(const char * , u32 , u32 )'/>
<use f='linux-5.3.1/crypto/rng.c' l='114' c='crypto_alloc_rng'/>
<use f='linux-5.3.1/crypto/rng.c' l='114' u='a'/>
<use f='linux-5.3.1/crypto/rng.c' l='123' u='c' c='crypto_get_default_rng'/>
