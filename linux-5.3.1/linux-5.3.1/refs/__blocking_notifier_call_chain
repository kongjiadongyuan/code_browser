<dec f='linux-5.3.1/include/linux/notifier.h' l='172' type='int __blocking_notifier_call_chain(struct blocking_notifier_head * nh, unsigned long val, void * v, int nr_to_call, int * nr_calls)'/>
<def f='linux-5.3.1/kernel/notifier.c' l='306' ll='324' type='int __blocking_notifier_call_chain(struct blocking_notifier_head * nh, unsigned long val, void * v, int nr_to_call, int * nr_calls)'/>
<dec f='linux-5.3.1/kernel/notifier.c' l='325' type='int __blocking_notifier_call_chain(struct blocking_notifier_head * , unsigned long , void * , int , int * )'/>
<use f='linux-5.3.1/kernel/notifier.c' l='325' c='__blocking_notifier_call_chain'/>
<use f='linux-5.3.1/kernel/notifier.c' l='325' u='a'/>
<use f='linux-5.3.1/kernel/notifier.c' l='330' u='c' c='blocking_notifier_call_chain'/>
<doc f='linux-5.3.1/kernel/notifier.c' l='288'>/**
 *	__blocking_notifier_call_chain - Call functions in a blocking notifier chain
 *	@nh: Pointer to head of the blocking notifier chain
 *	@val: Value passed unmodified to notifier function
 *	@v: Pointer passed unmodified to notifier function
 *	@nr_to_call: See comment for notifier_call_chain.
 *	@nr_calls: See comment for notifier_call_chain.
 *
 *	Calls each function in a notifier chain in turn.  The functions
 *	run in a process context, so they are allowed to block.
 *
 *	If the return value of the notifier can be and&apos;ed
 *	with %NOTIFY_STOP_MASK then blocking_notifier_call_chain()
 *	will return immediately, with the return value of
 *	the notifier function which halted execution.
 *	Otherwise the return value is the return value
 *	of the last notifier function called.
 */</doc>
<use f='linux-5.3.1/kernel/power/main.c' l='86' u='c' c='__pm_notifier_call_chain'/>
