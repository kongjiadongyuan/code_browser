<dec f='linux-5.3.1/include/net/cfg80211.h' l='5087' type='int ieee80211_data_to_8023_exthdr(struct sk_buff * skb, struct ethhdr * ehdr, const u8 * addr, enum nl80211_iftype iftype, u8 data_offset)'/>
<use f='linux-5.3.1/include/net/cfg80211.h' l='5101' u='c' c='ieee80211_data_to_8023'/>
<doc f='linux-5.3.1/include/net/cfg80211.h' l='5077'>/**
 * ieee80211_data_to_8023_exthdr - convert an 802.11 data frame to 802.3
 * @skb: the 802.11 data frame
 * @ehdr: pointer to a &amp;struct ethhdr that will get the header, instead
 *	of it being pushed into the SKB
 * @addr: the device MAC address
 * @iftype: the virtual interface type
 * @data_offset: offset of payload after the 802.11 header
 * Return: 0 on success. Non-zero on error.
 */</doc>
<use f='linux-5.3.1/net/mac80211/rx.c' l='2602' u='c' c='__ieee80211_rx_h_amsdu'/>
<def f='linux-5.3.1/net/wireless/util.c' l='441' ll='548' type='int ieee80211_data_to_8023_exthdr(struct sk_buff * skb, struct ethhdr * ehdr, const u8 * addr, enum nl80211_iftype iftype, u8 data_offset)'/>
<dec f='linux-5.3.1/net/wireless/util.c' l='549' type='int ieee80211_data_to_8023_exthdr(struct sk_buff * , struct ethhdr * , const u8 * , enum nl80211_iftype , u8 )'/>
<use f='linux-5.3.1/net/wireless/util.c' l='549' c='ieee80211_data_to_8023_exthdr'/>
<use f='linux-5.3.1/net/wireless/util.c' l='549' u='a'/>
