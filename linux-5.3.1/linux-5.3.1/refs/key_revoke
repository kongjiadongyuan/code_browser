<dec f='linux-5.3.1/include/linux/key.h' l='273' type='void key_revoke(struct key * key)'/>
<use f='linux-5.3.1/fs/nfs/nfs4idmap.c' l='244' u='c' c='nfs_idmap_quit'/>
<use f='linux-5.3.1/net/dns_resolver/dns_key.c' l='377' u='c' c='exit_dns_resolver'/>
<def f='linux-5.3.1/security/keys/key.c' l='1038' ll='1062' type='void key_revoke(struct key * key)'/>
<dec f='linux-5.3.1/security/keys/key.c' l='1063' type='void key_revoke(struct key * )'/>
<use f='linux-5.3.1/security/keys/key.c' l='1063' c='key_revoke'/>
<use f='linux-5.3.1/security/keys/key.c' l='1063' u='a'/>
<doc f='linux-5.3.1/security/keys/key.c' l='1029'>/**
 * key_revoke - Revoke a key.
 * @key: The key to be revoked.
 *
 * Mark a key as being revoked and ask the type to free up its resources.  The
 * revocation timeout is set and the key and all its links will be
 * automatically garbage collected after key_gc_delay amount of time if they
 * are not manually dealt with first.
 */</doc>
<use f='linux-5.3.1/security/keys/keyctl.c' l='403' u='c' c='keyctl_revoke_key'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='66' u='c' c='complete_request_key'/>
