<dec f='linux-5.3.1/include/linux/clk.h' l='260' type='void clk_bulk_unprepare(int num_clks, const struct clk_bulk_data * clks)'/>
<use f='linux-5.3.1/include/linux/clk.h' l='931' u='c' c='clk_bulk_prepare_enable'/>
<use f='linux-5.3.1/include/linux/clk.h' l='940' u='c' c='clk_bulk_disable_unprepare'/>
<def f='linux-5.3.1/drivers/clk/clk-bulk.c' l='158' ll='162' type='void clk_bulk_unprepare(int num_clks, const struct clk_bulk_data * clks)'/>
<dec f='linux-5.3.1/drivers/clk/clk-bulk.c' l='163' type='void clk_bulk_unprepare(int , const struct clk_bulk_data * )'/>
<use f='linux-5.3.1/drivers/clk/clk-bulk.c' l='163' c='clk_bulk_unprepare'/>
<use f='linux-5.3.1/drivers/clk/clk-bulk.c' l='163' u='a'/>
<use f='linux-5.3.1/drivers/clk/clk-bulk.c' l='191' u='c' c='clk_bulk_prepare'/>
<doc f='linux-5.3.1/drivers/clk/clk-bulk.c' l='150'>/**
 * clk_bulk_unprepare - undo preparation of a set of clock sources
 * @num_clks: the number of clk_bulk_data
 * @clks: the clk_bulk_data table being unprepared
 *
 * clk_bulk_unprepare may sleep, which differentiates it from clk_bulk_disable.
 * Returns 0 on success, -EERROR otherwise.
 */</doc>
