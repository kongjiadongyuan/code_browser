<dec f='linux-5.3.1/include/net/cfg80211.h' l='5120' type='void ieee80211_amsdu_to_8023s(struct sk_buff * skb, struct sk_buff_head * list, const u8 * addr, enum nl80211_iftype iftype, const unsigned int extra_headroom, const u8 * check_da, const u8 * check_sa)'/>
<doc f='linux-5.3.1/include/net/cfg80211.h' l='5104'>/**
 * ieee80211_amsdu_to_8023s - decode an IEEE 802.11n A-MSDU frame
 *
 * Decode an IEEE 802.11 A-MSDU and convert it to a list of 802.3 frames.
 * The @list will be empty if the decode fails. The @skb must be fully
 * header-less before being passed in here; it is freed in this function.
 *
 * @skb: The input A-MSDU frame without any headers.
 * @list: The output list of 802.3 frames. It must be allocated and
 *	initialized by by the caller.
 * @addr: The device MAC address.
 * @iftype: The device interface type.
 * @extra_headroom: The hardware extra headroom for SKBs in the @list.
 * @check_da: DA to check in the inner ethernet header, or NULL
 * @check_sa: SA to check in the inner ethernet header, or NULL
 */</doc>
<use f='linux-5.3.1/net/mac80211/rx.c' l='2608' u='c' c='__ieee80211_rx_h_amsdu'/>
<def f='linux-5.3.1/net/wireless/util.c' l='644' ll='724' type='void ieee80211_amsdu_to_8023s(struct sk_buff * skb, struct sk_buff_head * list, const u8 * addr, enum nl80211_iftype iftype, const unsigned int extra_headroom, const u8 * check_da, const u8 * check_sa)'/>
<dec f='linux-5.3.1/net/wireless/util.c' l='725' type='void ieee80211_amsdu_to_8023s(struct sk_buff * , struct sk_buff_head * , const u8 * , enum nl80211_iftype , const unsigned int , const u8 * , const u8 * )'/>
<use f='linux-5.3.1/net/wireless/util.c' l='725' c='ieee80211_amsdu_to_8023s'/>
<use f='linux-5.3.1/net/wireless/util.c' l='725' u='a'/>
