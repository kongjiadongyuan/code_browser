<dec f='linux-5.3.1/include/linux/cpufreq.h' l='204' type='void cpufreq_update_policy(unsigned int cpu)'/>
<use f='linux-5.3.1/drivers/acpi/processor_thermal.c' l='126' u='c' c='cpufreq_set_cur_state'/>
<def f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2472' ll='2491' type='void cpufreq_update_policy(unsigned int cpu)'/>
<dec f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2492' type='void cpufreq_update_policy(unsigned int )'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2492' c='cpufreq_update_policy'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2492' u='a'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2506' u='c' c='cpufreq_update_limits'/>
<doc f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2463'>/**
 * cpufreq_update_policy - Re-evaluate an existing cpufreq policy.
 * @cpu: CPU to re-evaluate the policy for.
 *
 * Update the current frequency for the cpufreq policy of @cpu and use
 * cpufreq_set_policy() to re-apply the min and max limits, which triggers the
 * evaluation of policy notifiers and the cpufreq driver&apos;s -&gt;verify() callback
 * for the policy in question, among other things.
 */</doc>
<use f='linux-5.3.1/drivers/cpufreq/intel_pstate.c' l='895' u='c' c='intel_pstate_update_policies'/>
<use f='linux-5.3.1/drivers/cpufreq/intel_pstate.c' l='929' u='c' c='intel_pstate_update_limits'/>
