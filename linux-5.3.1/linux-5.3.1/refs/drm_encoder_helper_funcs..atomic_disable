<dec f='linux-5.3.1/include/drm/drm_modeset_helper_vtables.h' l='702' type='void (*)(struct drm_encoder *, struct drm_atomic_state *)'/>
<offset>576</offset>
<doc f='linux-5.3.1/include/drm/drm_modeset_helper_vtables.h' l='682'>/**
	 * @atomic_disable:
	 *
	 * This callback should be used to disable the encoder. With the atomic
	 * drivers it is called before this encoder&apos;s CRTC has been shut off
	 * using their own &amp;drm_crtc_helper_funcs.atomic_disable hook. If that
	 * sequence is too simple drivers can just add their own driver private
	 * encoder hooks and call them from CRTC&apos;s callback by looping over all
	 * encoders connected to it using for_each_encoder_on_crtc().
	 *
	 * This callback is a variant of @disable that provides the atomic state
	 * to the driver. If @atomic_disable is implemented, @disable is not
	 * called by the helpers.
	 *
	 * This hook is only used by atomic helpers. Atomic drivers don&apos;t need
	 * to implement it if there&apos;s no need to disable anything at the encoder
	 * level. To ensure that runtime PM handling (using either DPMS or the
	 * new &quot;ACTIVE&quot; property) works @atomic_disable must be the inverse of
	 * @atomic_enable.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='1036' u='r' c='disable_outputs'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='1037' u='r' c='disable_outputs'/>
