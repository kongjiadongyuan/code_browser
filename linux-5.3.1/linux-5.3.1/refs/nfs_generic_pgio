<dec f='linux-5.3.1/fs/nfs/internal.h' l='258' type='int nfs_generic_pgio(struct nfs_pageio_descriptor * , struct nfs_pgio_header * )'/>
<def f='linux-5.3.1/fs/nfs/pagelist.c' l='758' ll='816' type='int nfs_generic_pgio(struct nfs_pageio_descriptor * desc, struct nfs_pgio_header * hdr)'/>
<dec f='linux-5.3.1/fs/nfs/pagelist.c' l='817' type='int nfs_generic_pgio(struct nfs_pageio_descriptor * , struct nfs_pgio_header * )'/>
<use f='linux-5.3.1/fs/nfs/pagelist.c' l='817' c='nfs_generic_pgio'/>
<use f='linux-5.3.1/fs/nfs/pagelist.c' l='817' u='a'/>
<use f='linux-5.3.1/fs/nfs/pagelist.c' l='830' u='c' c='nfs_generic_pg_pgios'/>
<doc f='linux-5.3.1/fs/nfs/pagelist.c' l='750'>/*
 * Create an RPC task for the given read or write request and kick it.
 * The page must have been locked by the caller.
 *
 * It may happen that the page we&apos;re passed is not marked dirty.
 * This is the case if nfs_updatepage detects a conflicting request
 * that has been written but not committed.
 */</doc>
