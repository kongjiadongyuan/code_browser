<dec f='linux-5.3.1/include/linux/async.h' l='38' type='async_cookie_t async_schedule_node(async_func_t func, void * data, int node)'/>
<use f='linux-5.3.1/include/linux/async.h' l='54' u='c' c='async_schedule'/>
<use f='linux-5.3.1/include/linux/async.h' l='90' u='c' c='async_schedule_dev'/>
<def f='linux-5.3.1/kernel/async.c' l='231' ll='234' type='async_cookie_t async_schedule_node(async_func_t func, void * data, int node)'/>
<dec f='linux-5.3.1/kernel/async.c' l='235' type='async_cookie_t async_schedule_node(async_func_t , void * , int )'/>
<use f='linux-5.3.1/kernel/async.c' l='235' c='async_schedule_node'/>
<use f='linux-5.3.1/kernel/async.c' l='235' u='a'/>
<doc f='linux-5.3.1/kernel/async.c' l='218'>/**
 * async_schedule_node - NUMA specific version of async_schedule
 * @func: function to execute asynchronously
 * @data: data pointer to pass to the function
 * @node: NUMA node that we want to schedule this on or close to
 *
 * Returns an async_cookie_t that may be used for checkpointing later.
 * Note: This function may be called from atomic or non-atomic contexts.
 *
 * The node requested will be honored on a best effort basis. If the node
 * has no CPUs associated with it then the work is distributed among all
 * available CPUs.
 */</doc>
