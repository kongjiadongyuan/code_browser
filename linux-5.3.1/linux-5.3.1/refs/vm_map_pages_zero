<dec f='linux-5.3.1/include/linux/mm.h' l='2564' type='int vm_map_pages_zero(struct vm_area_struct * vma, struct page ** pages, unsigned long num)'/>
<def f='linux-5.3.1/mm/memory.c' l='1569' ll='1573' type='int vm_map_pages_zero(struct vm_area_struct * vma, struct page ** pages, unsigned long num)'/>
<dec f='linux-5.3.1/mm/memory.c' l='1574' type='int vm_map_pages_zero(struct vm_area_struct * , struct page ** , unsigned long )'/>
<use f='linux-5.3.1/mm/memory.c' l='1574' c='vm_map_pages_zero'/>
<use f='linux-5.3.1/mm/memory.c' l='1574' u='a'/>
<doc f='linux-5.3.1/mm/memory.c' l='1556'>/**
 * vm_map_pages_zero - map range of kernel pages starts with zero offset
 * @vma: user vma to map to
 * @pages: pointer to array of source kernel pages
 * @num: number of pages in page array
 *
 * Similar to vm_map_pages(), except that it explicitly sets the offset
 * to 0. This function is intended for the drivers that did not consider
 * vm_pgoff.
 *
 * Context: Process context. Called by mmap handlers.
 * Return: 0 on success and error code otherwise.
 */</doc>
