<dec f='linux-5.3.1/include/linux/hid.h' l='1020' type='int hid_hw_start(struct hid_device * hdev, unsigned int connect_mask)'/>
<use f='linux-5.3.1/drivers/hid/hid-a4tech.c' l='134' u='c' c='a4_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-apple.c' l='395' u='c' c='apple_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-belkin.c' l='59' u='c' c='belkin_probe'/>
<def f='linux-5.3.1/drivers/hid/hid-core.c' l='1972' ll='1989' type='int hid_hw_start(struct hid_device * hdev, unsigned int connect_mask)'/>
<dec f='linux-5.3.1/drivers/hid/hid-core.c' l='1990' type='int hid_hw_start(struct hid_device * , unsigned int )'/>
<use f='linux-5.3.1/drivers/hid/hid-core.c' l='1990' c='hid_hw_start'/>
<use f='linux-5.3.1/drivers/hid/hid-core.c' l='1990' u='a'/>
<use f='linux-5.3.1/drivers/hid/hid-core.c' l='2213' u='c' c='hid_device_probe'/>
<doc f='linux-5.3.1/drivers/hid/hid-core.c' l='1963'>/**
 * hid_hw_start - start underlying HW
 * @hdev: hid device
 * @connect_mask: which outputs to connect, see HID_CONNECT_*
 *
 * Call this in probe function *after* hid_parse. This will setup HW
 * buffers and start the device (if not defeirred to device open).
 * hid_hw_stop must be called if this was successful.
 */</doc>
<use f='linux-5.3.1/drivers/hid/hid-cypress.c' l='109' u='c' c='cp_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-generic.c' l='67' u='c' c='hid_generic_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-lg.c' l='806' u='c' c='lg_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-microsoft.c' l='388' u='c' c='ms_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-ntrig.c' l='928' u='c' c='ntrig_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-petalynx.c' l='79' u='c' c='pl_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-pl.c' l='191' u='c' c='pl_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-samsung.c' l='169' u='c' c='samsung_probe'/>
<use f='linux-5.3.1/drivers/hid/hid-sony.c' l='2863' u='c' c='sony_probe'/>
