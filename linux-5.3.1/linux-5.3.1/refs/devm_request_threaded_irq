<dec f='linux-5.3.1/include/linux/interrupt.h' l='184' type='int devm_request_threaded_irq(struct device * dev, unsigned int irq, irq_handler_t handler, irq_handler_t thread_fn, unsigned long irqflags, const char * devname, void * dev_id)'/>
<use f='linux-5.3.1/include/linux/interrupt.h' l='193' u='c' c='devm_request_irq'/>
<use f='linux-5.3.1/drivers/i2c/i2c-smbus.c' l='146' u='c' c='smbalert_probe'/>
<use f='linux-5.3.1/drivers/pci/pcie/aer.c' l='1392' u='c' c='aer_probe'/>
<def f='linux-5.3.1/kernel/irq/devres.c' l='51' ll='79' type='int devm_request_threaded_irq(struct device * dev, unsigned int irq, irq_handler_t handler, irq_handler_t thread_fn, unsigned long irqflags, const char * devname, void * dev_id)'/>
<dec f='linux-5.3.1/kernel/irq/devres.c' l='80' type='int devm_request_threaded_irq(struct device * , unsigned int , irq_handler_t , irq_handler_t , unsigned long , const char * , void * )'/>
<use f='linux-5.3.1/kernel/irq/devres.c' l='80' c='devm_request_threaded_irq'/>
<use f='linux-5.3.1/kernel/irq/devres.c' l='80' u='a'/>
<doc f='linux-5.3.1/kernel/irq/devres.c' l='32'>/**
 *	devm_request_threaded_irq - allocate an interrupt line for a managed device
 *	@dev: device to request interrupt for
 *	@irq: Interrupt line to allocate
 *	@handler: Function to be called when the IRQ occurs
 *	@thread_fn: function to be called in a threaded interrupt context. NULL
 *		    for devices which handle everything in @handler
 *	@irqflags: Interrupt type flags
 *	@devname: An ascii name for the claiming device, dev_name(dev) if NULL
 *	@dev_id: A cookie passed back to the handler function
 *
 *	Except for the extra @dev argument, this function takes the
 *	same arguments and performs the same function as
 *	request_threaded_irq().  IRQs requested with this function will be
 *	automatically freed on driver detach.
 *
 *	If an IRQ allocated with this function needs to be freed
 *	separately, devm_free_irq() must be used.
 */</doc>
