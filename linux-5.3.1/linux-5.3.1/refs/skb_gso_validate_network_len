<dec f='linux-5.3.1/include/linux/skbuff.h' l='3460' type='bool skb_gso_validate_network_len(const struct sk_buff * skb, unsigned int mtu)'/>
<def f='linux-5.3.1/net/core/skbuff.c' l='5248' ll='5251' type='bool skb_gso_validate_network_len(const struct sk_buff * skb, unsigned int mtu)'/>
<dec f='linux-5.3.1/net/core/skbuff.c' l='5252' type='bool skb_gso_validate_network_len(const struct sk_buff * , unsigned int )'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='5252' c='skb_gso_validate_network_len'/>
<use f='linux-5.3.1/net/core/skbuff.c' l='5252' u='a'/>
<doc f='linux-5.3.1/net/core/skbuff.c' l='5238'>/**
 * skb_gso_validate_network_len - Will a split GSO skb fit into a given MTU?
 *
 * @skb: GSO skb
 * @mtu: MTU to validate against
 *
 * skb_gso_validate_network_len validates if a given skb will fit a
 * wanted MTU once split. It considers L3 headers, L4 headers, and the
 * payload.
 */</doc>
<use f='linux-5.3.1/net/ipv4/ip_forward.c' l='58' u='c' c='ip_exceeds_mtu'/>
<use f='linux-5.3.1/net/ipv4/ip_output.c' l='249' u='c' c='ip_finish_output_gso'/>
<use f='linux-5.3.1/net/ipv4/xfrm4_output.c' l='30' u='c' c='xfrm4_tunnel_check_size'/>
<use f='linux-5.3.1/net/ipv6/ip6_output.c' l='414' u='c' c='ip6_pkt_too_big'/>
<use f='linux-5.3.1/net/ipv6/xfrm6_output.c' l='81' u='c' c='xfrm6_tunnel_check_size'/>
