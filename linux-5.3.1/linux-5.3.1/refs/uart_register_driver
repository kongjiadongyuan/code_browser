<dec f='linux-5.3.1/include/linux/serial_core.h' l='410' type='int uart_register_driver(struct uart_driver * uart)'/>
<doc f='linux-5.3.1/include/linux/serial_core.h' l='407'>/*
 * Port/driver registration/removal
 */</doc>
<use f='linux-5.3.1/drivers/tty/serial/8250/8250_core.c' l='1163' u='c' c='serial8250_init'/>
<def f='linux-5.3.1/drivers/tty/serial/serial_core.c' l='2512' ll='2568' type='int uart_register_driver(struct uart_driver * drv)'/>
<dec f='linux-5.3.1/drivers/tty/serial/serial_core.c' l='3077' type='int uart_register_driver(struct uart_driver * )'/>
<use f='linux-5.3.1/drivers/tty/serial/serial_core.c' l='3077' c='uart_register_driver'/>
<use f='linux-5.3.1/drivers/tty/serial/serial_core.c' l='3077' u='a'/>
<doc f='linux-5.3.1/drivers/tty/serial/serial_core.c' l='2499'>/**
 *	uart_register_driver - register a driver with the uart core layer
 *	@drv: low level driver structure
 *
 *	Register a uart driver with the core driver.  We in turn register
 *	with the tty layer, and initialise the core driver per-port state.
 *
 *	We have a proc file in /proc/tty/driver which is named after the
 *	normal driver.
 *
 *	drv-&gt;port should be NULL, and the per-port structures should be
 *	registered using uart_add_one_port after this call has succeeded.
 */</doc>
