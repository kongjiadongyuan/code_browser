<dec f='linux-5.3.1/include/linux/nfs_page.h' l='116' type='struct nfs_page * nfs_create_request(struct nfs_open_context * ctx, struct page * page, unsigned int offset, unsigned int count)'/>
<use f='linux-5.3.1/fs/nfs/direct.c' l='502' u='c' c='nfs_direct_read_schedule_iovec'/>
<use f='linux-5.3.1/fs/nfs/direct.c' l='919' u='c' c='nfs_direct_write_schedule_iovec'/>
<def f='linux-5.3.1/fs/nfs/pagelist.c' l='345' ll='359' type='struct nfs_page * nfs_create_request(struct nfs_open_context * ctx, struct page * page, unsigned int offset, unsigned int count)'/>
<doc f='linux-5.3.1/fs/nfs/pagelist.c' l='334'>/**
 * nfs_create_request - Create an NFS read/write request.
 * @ctx: open context to use
 * @page: page to write
 * @offset: starting offset within the page for the write
 * @count: number of bytes to read/write
 *
 * The page must be locked by the caller. This makes sure we never
 * create two different requests for the same page.
 * User should ensure it is safe to sleep in this function.
 */</doc>
<use f='linux-5.3.1/fs/nfs/read.c' l='128' u='c' c='nfs_readpage_async'/>
<use f='linux-5.3.1/fs/nfs/read.c' l='384' u='c' c='readpage_async_filler'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='1170' u='c' c='nfs_setup_write_request'/>
