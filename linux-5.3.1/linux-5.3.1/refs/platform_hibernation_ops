<def f='linux-5.3.1/include/linux/suspend.h' l='414' ll='425'/>
<use f='linux-5.3.1/include/linux/suspend.h' l='445' c='hibernation_set_ops'/>
<size>80</size>
<doc f='linux-5.3.1/include/linux/suspend.h' l='362'>/**
 * struct platform_hibernation_ops - hibernation platform support
 *
 * The methods in this structure allow a platform to carry out special
 * operations required by it during a hibernation transition.
 *
 * All the methods below, except for @recover(), must be implemented.
 *
 * @begin: Tell the platform driver that we&apos;re starting hibernation.
 *	Called right after shrinking memory and before freezing devices.
 *
 * @end: Called by the PM core right after resuming devices, to indicate to
 *	the platform that the system has returned to the working state.
 *
 * @pre_snapshot: Prepare the platform for creating the hibernation image.
 *	Called right after devices have been frozen and before the nonboot
 *	CPUs are disabled (runs with IRQs on).
 *
 * @finish: Restore the previous state of the platform after the hibernation
 *	image has been created *or* put the platform into the normal operation
 *	mode after the hibernation (the same method is executed in both cases).
 *	Called right after the nonboot CPUs have been enabled and before
 *	thawing devices (runs with IRQs on).
 *
 * @prepare: Prepare the platform for entering the low power state.
 *	Called right after the hibernation image has been saved and before
 *	devices are prepared for entering the low power state.
 *
 * @enter: Put the system into the low power state after the hibernation image
 *	has been saved to disk.
 *	Called after the nonboot CPUs have been disabled and all of the low
 *	level devices have been shut down (runs with IRQs off).
 *
 * @leave: Perform the first stage of the cleanup after the system sleep state
 *	indicated by @set_target() has been left.
 *	Called right after the control has been passed from the boot kernel to
 *	the image kernel, before the nonboot CPUs are enabled and before devices
 *	are resumed.  Executed with interrupts disabled.
 *
 * @pre_restore: Prepare system for the restoration from a hibernation image.
 *	Called right after devices have been frozen and before the nonboot
 *	CPUs are disabled (runs with IRQs on).
 *
 * @restore_cleanup: Clean up after a failing image restoration.
 *	Called right after the nonboot CPUs have been enabled and before
 *	thawing devices (runs with IRQs on).
 *
 * @recover: Recover the platform from a failure to suspend devices.
 *	Called by the PM core if the suspending of devices during hibernation
 *	fails.  This callback is optional and should only be implemented by
 *	platforms which require special recovery actions in that situation.
 */</doc>
<mbr r='platform_hibernation_ops::begin' o='0' t='int (*)(pm_message_t)'/>
<mbr r='platform_hibernation_ops::end' o='64' t='void (*)(void)'/>
<mbr r='platform_hibernation_ops::pre_snapshot' o='128' t='int (*)(void)'/>
<mbr r='platform_hibernation_ops::finish' o='192' t='void (*)(void)'/>
<mbr r='platform_hibernation_ops::prepare' o='256' t='int (*)(void)'/>
<mbr r='platform_hibernation_ops::enter' o='320' t='int (*)(void)'/>
<mbr r='platform_hibernation_ops::leave' o='384' t='void (*)(void)'/>
<mbr r='platform_hibernation_ops::pre_restore' o='448' t='int (*)(void)'/>
<mbr r='platform_hibernation_ops::restore_cleanup' o='512' t='void (*)(void)'/>
<mbr r='platform_hibernation_ops::recover' o='576' t='void (*)(void)'/>
<use f='linux-5.3.1/drivers/acpi/sleep.c' l='1179'/>
<use f='linux-5.3.1/drivers/acpi/sleep.c' l='1229'/>
<size>80</size>
<use f='linux-5.3.1/kernel/power/hibernate.c' l='67'/>
<use f='linux-5.3.1/kernel/power/hibernate.c' l='78' c='hibernation_set_ops'/>
<size>80</size>
