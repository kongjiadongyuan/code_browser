<dec f='linux-5.3.1/include/linux/property.h' l='43' type='int device_property_read_u64_array(struct device * dev, const char * propname, u64 * val, size_t nval)'/>
<use f='linux-5.3.1/include/linux/property.h' l='145' u='c' c='device_property_read_u64'/>
<use f='linux-5.3.1/include/linux/property.h' l='165' u='c' c='device_property_count_u64'/>
<def f='linux-5.3.1/drivers/base/property.c' l='153' ll='157' type='int device_property_read_u64_array(struct device * dev, const char * propname, u64 * val, size_t nval)'/>
<dec f='linux-5.3.1/drivers/base/property.c' l='158' type='int device_property_read_u64_array(struct device * , const char * , u64 * , size_t )'/>
<use f='linux-5.3.1/drivers/base/property.c' l='158' c='device_property_read_u64_array'/>
<use f='linux-5.3.1/drivers/base/property.c' l='158' u='a'/>
<doc f='linux-5.3.1/drivers/base/property.c' l='135'>/**
 * device_property_read_u64_array - return a u64 array property of a device
 * @dev: Device to get the property of
 * @propname: Name of the property
 * @val: The values are stored here or %NULL to return the number of values
 * @nval: Size of the @val array
 *
 * Function reads an array of u64 properties with @propname from the device
 * firmware description and stores them to @val if found.
 *
 * Return: number of values if @val was %NULL,
 *         %0 if the property was found (success),
 *	   %-EINVAL if given arguments are not valid,
 *	   %-ENODATA if the property does not have a value,
 *	   %-EPROTO if the property is not an array of numbers,
 *	   %-EOVERFLOW if the size of the property is not as expected.
 *	   %-ENXIO if no suitable firmware interface is present.
 */</doc>
