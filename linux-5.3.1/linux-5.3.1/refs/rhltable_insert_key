<def f='linux-5.3.1/include/linux/rhashtable.h' l='855' ll='861' type='int rhltable_insert_key(struct rhltable * hlt, const void * key, struct rhlist_head * list, const struct rhashtable_params params)'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='886' u='c' c='rhltable_insert'/>
<doc f='linux-5.3.1/include/linux/rhashtable.h' l='839'>/**
 * rhltable_insert_key - insert object into hash list table
 * @hlt:	hash list table
 * @key:	the pointer to the key
 * @list:	pointer to hash list head inside object
 * @params:	hash table parameters
 *
 * Will take the per bucket bitlock to protect against mutual mutations
 * on the same bucket. Multiple insertions may occur in parallel unless
 * they map to the same bucket.
 *
 * It is safe to call this function from atomic context.
 *
 * Will trigger an automatic deferred table resizing if residency in the
 * table grows beyond 70%.
 */</doc>
<use f='linux-5.3.1/net/ipv4/ipmr.c' l='1257' u='c' c='ipmr_mfc_add'/>
