<dec f='linux-5.3.1/include/linux/mailbox_client.h' l='44' type='int mbox_flush(struct mbox_chan * chan, unsigned long timeout)'/>
<def f='linux-5.3.1/drivers/mailbox/mailbox.c' l='297' ll='309' type='int mbox_flush(struct mbox_chan * chan, unsigned long timeout)'/>
<dec f='linux-5.3.1/drivers/mailbox/mailbox.c' l='310' type='int mbox_flush(struct mbox_chan * , unsigned long )'/>
<use f='linux-5.3.1/drivers/mailbox/mailbox.c' l='310' c='mbox_flush'/>
<use f='linux-5.3.1/drivers/mailbox/mailbox.c' l='310' u='a'/>
<doc f='linux-5.3.1/drivers/mailbox/mailbox.c' l='283'>/**
 * mbox_flush - flush a mailbox channel
 * @chan: mailbox channel to flush
 * @timeout: time, in milliseconds, to allow the flush operation to succeed
 *
 * Mailbox controllers that need to work in atomic context can implement the
 * -&gt;flush() callback to busy loop until a transmission has been completed.
 * The implementation must call mbox_chan_txdone() upon success. Clients can
 * call the mbox_flush() function at any time after mbox_send_message() to
 * flush the transmission. After the function returns success, the mailbox
 * transmission is guaranteed to have completed.
 *
 * Returns: 0 on success or a negative error code on failure.
 */</doc>
