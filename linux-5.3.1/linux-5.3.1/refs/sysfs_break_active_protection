<dec f='linux-5.3.1/include/linux/sysfs.h' l='240' type='struct kernfs_node * sysfs_break_active_protection(struct kobject * kobj, const struct attribute * attr)'/>
<use f='linux-5.3.1/drivers/scsi/scsi_sysfs.c' l='734' u='c' c='sdev_store_delete'/>
<def f='linux-5.3.1/fs/sysfs/file.c' l='422' ll='432' type='struct kernfs_node * sysfs_break_active_protection(struct kobject * kobj, const struct attribute * attr)'/>
<dec f='linux-5.3.1/fs/sysfs/file.c' l='433' type='struct kernfs_node * sysfs_break_active_protection(struct kobject * , const struct attribute * )'/>
<use f='linux-5.3.1/fs/sysfs/file.c' l='433' c='sysfs_break_active_protection'/>
<use f='linux-5.3.1/fs/sysfs/file.c' l='433' u='a'/>
<doc f='linux-5.3.1/fs/sysfs/file.c' l='412'>/**
 * sysfs_break_active_protection - break &quot;active&quot; protection
 * @kobj: The kernel object @attr is associated with.
 * @attr: The attribute to break the &quot;active&quot; protection for.
 *
 * With sysfs, just like kernfs, deletion of an attribute is postponed until
 * all active .show() and .store() callbacks have finished unless this function
 * is called. Hence this function is useful in methods that implement self
 * deletion.
 */</doc>
<doc f='linux-5.3.1/fs/sysfs/file.c' l='435'>/**
 * sysfs_unbreak_active_protection - restore &quot;active&quot; protection
 * @kn: Pointer returned by sysfs_break_active_protection().
 *
 * Undo the effects of sysfs_break_active_protection(). Since this function
 * calls kernfs_put() on the kernfs node that corresponds to the &apos;attr&apos;
 * argument passed to sysfs_break_active_protection() that attribute may have
 * been removed between the sysfs_break_active_protection() and
 * sysfs_unbreak_active_protection() calls, it is not safe to access @kn after
 * this function has returned.
 */</doc>
