<dec f='linux-5.3.1/include/linux/smp.h' l='104' type='void smp_call_function(smp_call_func_t func, void * info, int wait)'/>
<doc f='linux-5.3.1/include/linux/smp.h' l='101'>/*
 * Call a function on all other processors
 */</doc>
<use f='linux-5.3.1/drivers/tty/sysrq.c' l='229' u='c' c='sysrq_showregs_othercpus'/>
<def f='linux-5.3.1/kernel/smp.c' l='506' ll='511' type='void smp_call_function(smp_call_func_t func, void * info, int wait)'/>
<dec f='linux-5.3.1/kernel/smp.c' l='512' type='void smp_call_function(smp_call_func_t , void * , int )'/>
<use f='linux-5.3.1/kernel/smp.c' l='512' c='smp_call_function'/>
<use f='linux-5.3.1/kernel/smp.c' l='512' u='a'/>
<use f='linux-5.3.1/kernel/smp.c' l='616' u='c' c='on_each_cpu'/>
<use f='linux-5.3.1/kernel/smp.c' l='745' u='c' c='kick_all_cpus_sync'/>
<doc f='linux-5.3.1/kernel/smp.c' l='491'>/**
 * smp_call_function(): Run a function on all other CPUs.
 * @func: The function to run. This must be fast and non-blocking.
 * @info: An arbitrary pointer to pass to the function.
 * @wait: If true, wait (atomically) until function has completed
 *        on other CPUs.
 *
 * Returns 0.
 *
 * If @wait is true, then returns once @func has returned; otherwise
 * it returns just before the target cpu calls @func.
 *
 * You must not call this function with disabled interrupts or from a
 * hardware interrupt handler or from a bottom half handler.
 */</doc>
