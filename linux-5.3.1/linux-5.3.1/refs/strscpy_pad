<dec f='linux-5.3.1/include/linux/string.h' l='36' type='ssize_t strscpy_pad(char * dest, const char * src, size_t count)'/>
<doc f='linux-5.3.1/include/linux/string.h' l='35'>/* Wraps calls to strscpy()/memset(), no arch specific code required */</doc>
<def f='linux-5.3.1/lib/string.c' l='259' ll='270' type='ssize_t strscpy_pad(char * dest, const char * src, size_t count)'/>
<dec f='linux-5.3.1/lib/string.c' l='271' type='ssize_t strscpy_pad(char * , const char * , size_t )'/>
<use f='linux-5.3.1/lib/string.c' l='271' c='strscpy_pad'/>
<use f='linux-5.3.1/lib/string.c' l='271' u='a'/>
<doc f='linux-5.3.1/lib/string.c' l='240'>/**
 * strscpy_pad() - Copy a C-string into a sized buffer
 * @dest: Where to copy the string to
 * @src: Where to copy the string from
 * @count: Size of destination buffer
 *
 * Copy the string, or as much of it as fits, into the dest buffer.  The
 * behavior is undefined if the string buffers overlap.  The destination
 * buffer is always %NUL terminated, unless it&apos;s zero-sized.
 *
 * If the source string is shorter than the destination buffer, zeros
 * the tail of the destination buffer.
 *
 * For full explanation of why you may want to consider using the
 * &apos;strscpy&apos; functions please see the function docstring for strscpy().
 *
 * Return: The number of characters copied (not including the trailing
 *         %NUL) or -E2BIG if the destination buffer wasn&apos;t big enough.
 */</doc>
