<dec f='linux-5.3.1/include/crypto/gf128mul.h' l='248' type='struct gf128mul_64k * gf128mul_init_64k_bbe(const be128 * g)'/>
<doc f='linux-5.3.1/include/crypto/gf128mul.h' l='243'>/* First initialize with the constant factor with which you
 * want to multiply and then call gf128mul_64k_bbe with the other
 * factor in the first argument, and the table in the second.
 * Afterwards, the result is stored in *a.
 */</doc>
<def f='linux-5.3.1/crypto/gf128mul.c' l='260' ll='299' type='struct gf128mul_64k * gf128mul_init_64k_bbe(const be128 * g)'/>
<dec f='linux-5.3.1/crypto/gf128mul.c' l='300' type='struct gf128mul_64k * gf128mul_init_64k_bbe(const be128 * )'/>
<use f='linux-5.3.1/crypto/gf128mul.c' l='300' c='gf128mul_init_64k_bbe'/>
<use f='linux-5.3.1/crypto/gf128mul.c' l='300' u='a'/>
<doc f='linux-5.3.1/crypto/gf128mul.c' l='255'>/* additional explanation
 * t[0][BYTE] contains g*BYTE
 * t[1][BYTE] contains g*x^8*BYTE
 *  ..
 * t[15][BYTE] contains g*x^120*BYTE */</doc>
