<dec f='linux-5.3.1/include/linux/cpufreq.h' l='198' type='struct cpufreq_policy * cpufreq_cpu_acquire(unsigned int cpu)'/>
<def f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='272' ll='287' type='struct cpufreq_policy * cpufreq_cpu_acquire(unsigned int cpu)'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2474' u='c' c='cpufreq_update_policy'/>
<doc f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='260'>/**
 * cpufreq_cpu_acquire - Find policy for a CPU, mark it as busy and lock it.
 * @cpu: CPU to find the policy for.
 *
 * Call cpufreq_cpu_get() to get a reference on the cpufreq policy for @cpu and
 * if the policy returned by it is not NULL, acquire its rwsem for writing.
 * Return the policy if it is active or release it and return NULL otherwise.
 *
 * The policy returned by this function has to be released with the help of
 * cpufreq_cpu_release() in order to release its rwsem and balance its usage
 * counter properly.
 */</doc>
<use f='linux-5.3.1/drivers/cpufreq/intel_pstate.c' l='900' u='c' c='intel_pstate_update_max_freq'/>
