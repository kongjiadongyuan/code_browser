<dec f='linux-5.3.1/include/linux/netdevice.h' l='3616' type='int netif_rx(struct sk_buff * skb)'/>
<use f='linux-5.3.1/drivers/net/loopback.c' l='92' u='c' c='loopback_xmit'/>
<def f='linux-5.3.1/net/core/dev.c' l='4544' ll='4554' type='int netif_rx(struct sk_buff * skb)'/>
<dec f='linux-5.3.1/net/core/dev.c' l='4555' type='int netif_rx(struct sk_buff * )'/>
<use f='linux-5.3.1/net/core/dev.c' l='4555' c='netif_rx'/>
<use f='linux-5.3.1/net/core/dev.c' l='4555' u='a'/>
<doc f='linux-5.3.1/net/core/dev.c' l='4529'>/**
 *	netif_rx	-	post buffer to the network code
 *	@skb: buffer to post
 *
 *	This function receives a packet from a device driver and queues it for
 *	the upper (protocol) levels to process.  It always succeeds. The buffer
 *	may be dropped during processing for congestion control or by the
 *	protocol layers.
 *
 *	return values:
 *	NET_RX_SUCCESS	(no congestion)
 *	NET_RX_DROP     (packet was dropped)
 *
 */</doc>
<use f='linux-5.3.1/net/core/filter.c' l='2041' u='c' c='__bpf_rx_skb_no_mac'/>
<use f='linux-5.3.1/net/core/gro_cells.c' l='23' u='c' c='gro_cells_receive'/>
<use f='linux-5.3.1/net/ipv4/ipmr.c' l='634' u='c' c='__pim_rcv'/>
<use f='linux-5.3.1/net/ipv6/exthdrs.c' l='402' u='c' c='ipv6_srh_rcv'/>
<use f='linux-5.3.1/net/ipv6/sit.c' l='690' u='c' c='ipip6_rcv'/>
<use f='linux-5.3.1/net/mac80211/status.c' l='687' u='c' c='ieee80211_tx_monitor'/>
<use f='linux-5.3.1/net/mac80211/status.c' l='696' u='c' c='ieee80211_tx_monitor'/>
