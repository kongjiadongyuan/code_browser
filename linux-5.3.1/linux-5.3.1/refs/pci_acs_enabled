<dec f='linux-5.3.1/include/linux/pci.h' l='2188' type='bool pci_acs_enabled(struct pci_dev * pdev, u16 acs_flags)'/>
<use f='linux-5.3.1/drivers/iommu/iommu.c' l='1116' u='c' c='get_pci_function_alias_group'/>
<use f='linux-5.3.1/drivers/iommu/iommu.c' l='1122' u='c' c='get_pci_function_alias_group'/>
<def f='linux-5.3.1/drivers/pci/pci.c' l='3331' ll='3393' type='bool pci_acs_enabled(struct pci_dev * pdev, u16 acs_flags)'/>
<use f='linux-5.3.1/drivers/pci/pci.c' l='3412' u='c' c='pci_acs_path_enabled'/>
<doc f='linux-5.3.1/drivers/pci/pci.c' l='3315'>/**
 * pci_acs_enabled - test ACS against required flags for a given device
 * @pdev: device to test
 * @acs_flags: required PCI ACS flags
 *
 * Return true if the device supports the provided flags.  Automatically
 * filters out flags that are not implemented on multifunction devices.
 *
 * Note that this interface checks the effective ACS capabilities of the
 * device rather than the actual capabilities.  For instance, most single
 * function endpoints are not required to support ACS because they have no
 * opportunity for peer-to-peer access.  We therefore return &apos;true&apos;
 * regardless of whether the device exposes an ACS capability.  This makes
 * it much easier for callers of this function to ignore the actual type
 * or topology of the device when testing ACS support.
 */</doc>
