<dec f='linux-5.3.1/include/linux/rhashtable.h' l='248' type='int rhashtable_walk_start_check(struct rhashtable_iter * iter)'/>
<use f='linux-5.3.1/include/linux/rhashtable.h' l='252' u='c' c='rhashtable_walk_start'/>
<def f='linux-5.3.1/lib/rhashtable.c' l='707' ll='767' type='int rhashtable_walk_start_check(struct rhashtable_iter * iter)'/>
<dec f='linux-5.3.1/lib/rhashtable.c' l='768' type='int rhashtable_walk_start_check(struct rhashtable_iter * )'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='768' c='rhashtable_walk_start_check'/>
<use f='linux-5.3.1/lib/rhashtable.c' l='768' u='a'/>
<doc f='linux-5.3.1/lib/rhashtable.c' l='689'>/**
 * rhashtable_walk_start_check - Start a hash table walk
 * @iter:	Hash table iterator
 *
 * Start a hash table walk at the current iterator position.  Note that we take
 * the RCU lock in all cases including when we return an error.  So you must
 * always call rhashtable_walk_stop to clean up.
 *
 * Returns zero if successful.
 *
 * Returns -EAGAIN if resize event occured.  Note that the iterator
 * will rewind back to the beginning and you may use it immediately
 * by calling rhashtable_walk_next.
 *
 * rhashtable_walk_start is defined as an inline variant that returns
 * void. This is preferred in cases where the caller would ignore
 * resize events and always continue.
 */</doc>
