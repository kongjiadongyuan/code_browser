<dec f='linux-5.3.1/include/linux/clk-provider.h' l='795' type='int clk_hw_register(struct device * dev, struct clk_hw * hw)'/>
<use f='linux-5.3.1/drivers/clk/clk-composite.c' l='294' u='c' c='clk_hw_register_composite'/>
<use f='linux-5.3.1/drivers/clk/clk-divider.c' l='509' u='c' c='_register_divider'/>
<use f='linux-5.3.1/drivers/clk/clk-fixed-factor.c' l='98' u='c' c='__clk_hw_register_fixed_factor'/>
<use f='linux-5.3.1/drivers/clk/clk-fixed-rate.c' l='82' u='c' c='clk_hw_register_fixed_rate_with_accuracy'/>
<use f='linux-5.3.1/drivers/clk/clk-fractional-divider.c' l='187' u='c' c='clk_hw_register_fractional_divider'/>
<use f='linux-5.3.1/drivers/clk/clk-gate.c' l='173' u='c' c='clk_hw_register_gate'/>
<use f='linux-5.3.1/drivers/clk/clk-gpio.c' l='151' u='c' c='clk_register_gpio'/>
<use f='linux-5.3.1/drivers/clk/clk-mux.c' l='192' u='c' c='clk_hw_register_mux_table'/>
<def f='linux-5.3.1/drivers/clk/clk.c' l='3693' ll='3696' type='int clk_hw_register(struct device * dev, struct clk_hw * hw)'/>
<dec f='linux-5.3.1/drivers/clk/clk.c' l='3697' type='int clk_hw_register(struct device * , struct clk_hw * )'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='3697' c='clk_hw_register'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='3697' u='a'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='3886' u='c' c='devm_clk_hw_register'/>
<doc f='linux-5.3.1/drivers/clk/clk.c' l='3683'>/**
 * clk_hw_register - register a clk_hw and return an error code
 * @dev: device that is registering this clock
 * @hw: link to hardware-specific clock data
 *
 * clk_hw_register is the primary interface for populating the clock tree with
 * new clock nodes. It returns an integer equal to zero indicating success or
 * less than zero indicating failure. Drivers must test for an error code after
 * calling clk_hw_register().
 */</doc>
