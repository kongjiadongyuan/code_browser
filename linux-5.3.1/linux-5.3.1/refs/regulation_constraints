<def f='linux-5.3.1/include/linux/regulator/machine.h' l='138' ll='195'/>
<use f='linux-5.3.1/include/linux/regulator/machine.h' l='238'/>
<size>176</size>
<doc f='linux-5.3.1/include/linux/regulator/machine.h' l='86'>/**
 * struct regulation_constraints - regulator operating constraints.
 *
 * This struct describes regulator and board/machine specific constraints.
 *
 * @name: Descriptive name for the constraints, used for display purposes.
 *
 * @min_uV: Smallest voltage consumers may set.
 * @max_uV: Largest voltage consumers may set.
 * @uV_offset: Offset applied to voltages from consumer to compensate for
 *             voltage drops.
 *
 * @min_uA: Smallest current consumers may set.
 * @max_uA: Largest current consumers may set.
 * @ilim_uA: Maximum input current.
 * @system_load: Load that isn&apos;t captured by any consumer requests.
 *
 * @max_spread: Max possible spread between coupled regulators
 * @valid_modes_mask: Mask of modes which may be configured by consumers.
 * @valid_ops_mask: Operations which may be performed by consumers.
 *
 * @always_on: Set if the regulator should never be disabled.
 * @boot_on: Set if the regulator is enabled when the system is initially
 *           started.  If the regulator is not enabled by the hardware or
 *           bootloader then it will be enabled when the constraints are
 *           applied.
 * @apply_uV: Apply the voltage constraint when initialising.
 * @ramp_disable: Disable ramp delay when initialising or when setting voltage.
 * @soft_start: Enable soft start so that voltage ramps slowly.
 * @pull_down: Enable pull down when regulator is disabled.
 * @over_current_protection: Auto disable on over current event.
 *
 * @input_uV: Input voltage for regulator when supplied by another regulator.
 *
 * @state_disk: State for regulator when system is suspended in disk mode.
 * @state_mem: State for regulator when system is suspended in mem mode.
 * @state_standby: State for regulator when system is suspended in standby
 *                 mode.
 * @initial_state: Suspend state to set by default.
 * @initial_mode: Mode to set at startup.
 * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
 * @settling_time: Time to settle down after voltage change when voltage
 *		   change is non-linear (unit: microseconds).
 * @settling_time_up: Time to settle down after voltage increase when voltage
 *		      change is non-linear (unit: microseconds).
 * @settling_time_down : Time to settle down after voltage decrease when
 *			 voltage change is non-linear (unit: microseconds).
 * @active_discharge: Enable/disable active discharge. The enum
 *		      regulator_active_discharge values are used for
 *		      initialisation.
 * @enable_time: Turn-on time of the rails (unit: microseconds)
 */</doc>
<mbr r='regulation_constraints::name' o='0' t='const char *'/>
<mbr r='regulation_constraints::min_uV' o='64' t='int'/>
<mbr r='regulation_constraints::max_uV' o='96' t='int'/>
<mbr r='regulation_constraints::uV_offset' o='128' t='int'/>
<mbr r='regulation_constraints::min_uA' o='160' t='int'/>
<mbr r='regulation_constraints::max_uA' o='192' t='int'/>
<mbr r='regulation_constraints::ilim_uA' o='224' t='int'/>
<mbr r='regulation_constraints::system_load' o='256' t='int'/>
<mbr r='regulation_constraints::max_spread' o='320' t='u32 *'/>
<mbr r='regulation_constraints::max_uV_step' o='384' t='int'/>
<mbr r='regulation_constraints::valid_modes_mask' o='416' t='unsigned int'/>
<mbr r='regulation_constraints::valid_ops_mask' o='448' t='unsigned int'/>
<mbr r='regulation_constraints::input_uV' o='480' t='int'/>
<mbr r='regulation_constraints::state_disk' o='512' t='struct regulator_state'/>
<mbr r='regulation_constraints::state_mem' o='704' t='struct regulator_state'/>
<mbr r='regulation_constraints::state_standby' o='896' t='struct regulator_state'/>
<mbr r='regulation_constraints::initial_state' o='1088' t='suspend_state_t'/>
<mbr r='regulation_constraints::initial_mode' o='1120' t='unsigned int'/>
<mbr r='regulation_constraints::ramp_delay' o='1152' t='unsigned int'/>
<mbr r='regulation_constraints::settling_time' o='1184' t='unsigned int'/>
<mbr r='regulation_constraints::settling_time_up' o='1216' t='unsigned int'/>
<mbr r='regulation_constraints::settling_time_down' o='1248' t='unsigned int'/>
<mbr r='regulation_constraints::enable_time' o='1280' t='unsigned int'/>
<mbr r='regulation_constraints::active_discharge' o='1312' t='unsigned int'/>
<mbr r='regulation_constraints::always_on' o='1344' t='unsigned int'/>
<mbr r='regulation_constraints::boot_on' o='1345' t='unsigned int'/>
<mbr r='regulation_constraints::apply_uV' o='1346' t='unsigned int'/>
<mbr r='regulation_constraints::ramp_disable' o='1347' t='unsigned int'/>
<mbr r='regulation_constraints::soft_start' o='1348' t='unsigned int'/>
<mbr r='regulation_constraints::pull_down' o='1349' t='unsigned int'/>
<mbr r='regulation_constraints::over_current_protection' o='1350' t='unsigned int'/>
