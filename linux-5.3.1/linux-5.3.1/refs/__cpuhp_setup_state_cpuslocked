<dec f='linux-5.3.1/include/linux/cpuhotplug.h' l='192' type='int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char * name, bool invoke, int (*)(unsigned int) startup, int (*)(unsigned int) teardown, bool multi_instance)'/>
<use f='linux-5.3.1/include/linux/cpuhotplug.h' l='220' u='c' c='cpuhp_setup_state_cpuslocked'/>
<use f='linux-5.3.1/include/linux/cpuhotplug.h' l='249' u='c' c='cpuhp_setup_state_nocalls_cpuslocked'/>
<def f='linux-5.3.1/kernel/cpu.c' l='1733' ll='1789' type='int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char * name, bool invoke, int (*)(unsigned int) startup, int (*)(unsigned int) teardown, bool multi_instance)'/>
<dec f='linux-5.3.1/kernel/cpu.c' l='1790' type='int __cpuhp_setup_state_cpuslocked(enum cpuhp_state , const char * , bool , int (*)(unsigned int) , int (*)(unsigned int) , bool )'/>
<use f='linux-5.3.1/kernel/cpu.c' l='1790' c='__cpuhp_setup_state_cpuslocked'/>
<use f='linux-5.3.1/kernel/cpu.c' l='1790' u='a'/>
<use f='linux-5.3.1/kernel/cpu.c' l='1801' u='c' c='__cpuhp_setup_state'/>
<doc f='linux-5.3.1/kernel/cpu.c' l='1716'>/**
 * __cpuhp_setup_state_cpuslocked - Setup the callbacks for an hotplug machine state
 * @state:		The state to setup
 * @invoke:		If true, the startup function is invoked for cpus where
 *			cpu state &gt;= @state
 * @startup:		startup callback function
 * @teardown:		teardown callback function
 * @multi_instance:	State is set up for multiple instances which get
 *			added afterwards.
 *
 * The caller needs to hold cpus read locked while calling this function.
 * Returns:
 *   On success:
 *      Positive state number if @state is CPUHP_AP_ONLINE_DYN
 *      0 for all other states
 *   On failure: proper (negative) error code
 */</doc>
