<dec f='linux-5.3.1/include/linux/skbuff.h' l='2991' type='bool skb_page_frag_refill(unsigned int sz, struct page_frag * pfrag, gfp_t prio)'/>
<def f='linux-5.3.1/net/core/sock.c' l='2348' ll='2379' type='bool skb_page_frag_refill(unsigned int sz, struct page_frag * pfrag, gfp_t gfp)'/>
<dec f='linux-5.3.1/net/core/sock.c' l='2380' type='bool skb_page_frag_refill(unsigned int , struct page_frag * , gfp_t )'/>
<use f='linux-5.3.1/net/core/sock.c' l='2380' c='skb_page_frag_refill'/>
<use f='linux-5.3.1/net/core/sock.c' l='2380' u='a'/>
<use f='linux-5.3.1/net/core/sock.c' l='2384' u='c' c='sk_page_frag_refill'/>
<doc f='linux-5.3.1/net/core/sock.c' l='2338'>/**
 * skb_page_frag_refill - check that a page_frag contains enough room
 * @sz: minimum size of the fragment we want to get
 * @pfrag: pointer to page_frag
 * @gfp: priority for memory allocation
 *
 * Note: While this allocator tries to use high order pages, there is
 * no guarantee that allocations succeed. Therefore, @sz MUST be
 * less or equal than PAGE_SIZE.
 */</doc>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='254' u='c' c='esp6_output_head'/>
<use f='linux-5.3.1/net/ipv6/esp6.c' l='365' u='c' c='esp6_output_tail'/>
