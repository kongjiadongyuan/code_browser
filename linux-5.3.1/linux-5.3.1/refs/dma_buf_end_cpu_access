<dec f='linux-5.3.1/include/linux/dma-buf.h' l='414' type='int dma_buf_end_cpu_access(struct dma_buf * dma_buf, enum dma_data_direction dir)'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='384' u='c' c='dma_buf_ioctl'/>
<def f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='972' ll='983' type='int dma_buf_end_cpu_access(struct dma_buf * dmabuf, enum dma_data_direction direction)'/>
<dec f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='984' type='int dma_buf_end_cpu_access(struct dma_buf * , enum dma_data_direction )'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='984' c='dma_buf_end_cpu_access'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='984' u='a'/>
<doc f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='960'>/**
 * dma_buf_end_cpu_access - Must be called after accessing a dma_buf from the
 * cpu in the kernel context. Calls end_cpu_access to allow exporter-specific
 * actions. Coherency is only guaranteed in the specified range for the
 * specified access direction.
 * @dmabuf:	[in]	buffer to complete cpu access for.
 * @direction:	[in]	length of range for cpu access.
 *
 * This terminates CPU access started with dma_buf_begin_cpu_access().
 *
 * Can return negative error values, returns 0 on success.
 */</doc>
