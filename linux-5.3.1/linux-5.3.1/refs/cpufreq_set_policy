<dec f='linux-5.3.1/include/linux/cpufreq.h' l='201' type='int cpufreq_set_policy(struct cpufreq_policy * policy, struct cpufreq_policy * new_policy)'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='783' u='c' c='store_scaling_governor'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='1080' u='c' c='cpufreq_init_policy'/>
<use f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='1114' u='c' c='refresh_frequency_limits'/>
<def f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2362' ll='2461' type='int cpufreq_set_policy(struct cpufreq_policy * policy, struct cpufreq_policy * new_policy)'/>
<doc f='linux-5.3.1/drivers/cpufreq/cpufreq.c' l='2345'>/**
 * cpufreq_set_policy - Modify cpufreq policy parameters.
 * @policy: Policy object to modify.
 * @new_policy: New policy data.
 *
 * Pass @new_policy to the cpufreq driver&apos;s -&gt;verify() callback, run the
 * installed policy notifiers for it with the CPUFREQ_ADJUST value, pass it to
 * the driver&apos;s -&gt;verify() callback again and run the notifiers for it again
 * with the CPUFREQ_NOTIFY value.  Next, copy the min and max parameters
 * of @new_policy to @policy and either invoke the driver&apos;s -&gt;setpolicy()
 * callback (if present) or carry out a governor update for @policy.  That is,
 * run the current governor&apos;s -&gt;limits() callback (if the governor field in
 * @new_policy points to the same object as the one in @policy) or replace the
 * governor for @policy with the new one stored in @new_policy.
 *
 * The cpuinfo part of @policy is not updated by this function.
 */</doc>
