<dec f='linux-5.3.1/fs/nfs/internal.h' l='428' type='void nfs_start_io_direct(struct inode * inode)'/>
<use f='linux-5.3.1/fs/nfs/direct.c' l='604' u='c' c='nfs_file_direct_read'/>
<use f='linux-5.3.1/fs/nfs/direct.c' l='1032' u='c' c='nfs_file_direct_write'/>
<def f='linux-5.3.1/fs/nfs/io.c' l='122' ll='135' type='void nfs_start_io_direct(struct inode * inode)'/>
<doc f='linux-5.3.1/fs/nfs/io.c' l='106'>/**
 * nfs_end_io_direct - declare the file is being used for direct i/o
 * @inode: file inode
 *
 * Declare that a direct I/O operation is about to start, and ensure
 * that we block all buffered I/O.
 * On exit, the function ensures that the NFS_INO_ODIRECT flag is set,
 * and holds a shared lock on inode-&gt;i_rwsem to ensure that the flag
 * cannot be changed.
 * In practice, this means that direct I/O operations are allowed to
 * execute in parallel, thanks to the shared lock, whereas buffered I/O
 * operations need to wait to grab an exclusive lock in order to clear
 * NFS_INO_ODIRECT.
 * Note that buffered writes and truncates both take a write lock on
 * inode-&gt;i_rwsem, meaning that those are serialised w.r.t. O_DIRECT.
 */</doc>
