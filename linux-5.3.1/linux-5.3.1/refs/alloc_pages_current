<dec f='linux-5.3.1/include/linux/gfp.h' l='504' type='struct page * alloc_pages_current(gfp_t gfp_mask, unsigned int order)'/>
<use f='linux-5.3.1/include/linux/gfp.h' l='509' u='c' c='alloc_pages'/>
<def f='linux-5.3.1/mm/mempolicy.c' l='2138' ll='2158' type='struct page * alloc_pages_current(gfp_t gfp, unsigned int order)'/>
<dec f='linux-5.3.1/mm/mempolicy.c' l='2159' type='struct page * alloc_pages_current(gfp_t , unsigned int )'/>
<use f='linux-5.3.1/mm/mempolicy.c' l='2159' c='alloc_pages_current'/>
<use f='linux-5.3.1/mm/mempolicy.c' l='2159' u='a'/>
<doc f='linux-5.3.1/mm/mempolicy.c' l='2123'>/**
 * 	alloc_pages_current - Allocate pages.
 *
 *	@gfp:
 *		%GFP_USER   user allocation,
 *      	%GFP_KERNEL kernel allocation,
 *      	%GFP_HIGHMEM highmem allocation,
 *      	%GFP_FS     don&apos;t call back into a file system.
 *      	%GFP_ATOMIC don&apos;t sleep.
 *	@order: Power of two of allocation size in pages. 0 is a single page.
 *
 *	Allocate a page from the kernel page pool.  When not in
 *	interrupt context and apply the current process NUMA policy.
 *	Returns NULL when no page can be allocated.
 */</doc>
