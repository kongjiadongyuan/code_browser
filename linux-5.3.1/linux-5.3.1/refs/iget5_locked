<dec f='linux-5.3.1/include/linux/fs.h' l='2983' type='struct inode * iget5_locked(struct super_block * , unsigned long , int (*)(struct inode *, void *) test, int (*)(struct inode *, void *) set, void * )'/>
<use f='linux-5.3.1/fs/block_dev.c' l='905' u='c' c='bdget'/>
<def f='linux-5.3.1/fs/inode.c' l='1129' ll='1146' type='struct inode * iget5_locked(struct super_block * sb, unsigned long hashval, int (*)(struct inode *, void *) test, int (*)(struct inode *, void *) set, void * data)'/>
<dec f='linux-5.3.1/fs/inode.c' l='1147' type='struct inode * iget5_locked(struct super_block * , unsigned long , int (*)(struct inode *, void *) , int (*)(struct inode *, void *) , void * )'/>
<use f='linux-5.3.1/fs/inode.c' l='1147' c='iget5_locked'/>
<use f='linux-5.3.1/fs/inode.c' l='1147' u='a'/>
<doc f='linux-5.3.1/fs/inode.c' l='1109'>/**
 * iget5_locked - obtain an inode from a mounted file system
 * @sb:		super block of file system
 * @hashval:	hash value (usually inode number) to get
 * @test:	callback used for comparisons between inodes
 * @set:	callback used to initialize a new struct inode
 * @data:	opaque data pointer to pass to @test and @set
 *
 * Search for the inode specified by @hashval and @data in the inode cache,
 * and if present it is return it with an increased reference count. This is
 * a generalized version of iget_locked() for file systems where the inode
 * number is not sufficient for unique identification of an inode.
 *
 * If the inode is not in cache, allocate a new inode and return it locked,
 * hashed, and with the I_NEW flag set. The file system gets to fill it in
 * before unlocking it via unlock_new_inode().
 *
 * Note both @test and @set are called with the inode_hash_lock held, so can&apos;t
 * sleep.
 */</doc>
<use f='linux-5.3.1/fs/isofs/inode.c' l='1543' u='c' c='__isofs_iget'/>
<use f='linux-5.3.1/fs/nfs/inode.c' l='443' u='c' c='nfs_fhget'/>
