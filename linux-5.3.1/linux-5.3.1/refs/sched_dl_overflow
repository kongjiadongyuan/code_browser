<dec f='linux-5.3.1/kernel/sched/sched.h' l='312' type='int sched_dl_overflow(struct task_struct * p, int policy, const struct sched_attr * attr)'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='4745' u='c' c='__sched_setscheduler'/>
<def f='linux-5.3.1/kernel/sched/deadline.c' l='2505' ll='2558' type='int sched_dl_overflow(struct task_struct * p, int policy, const struct sched_attr * attr)'/>
<doc f='linux-5.3.1/kernel/sched/deadline.c' l='2497'>/*
 * We must be sure that accepting a new task (or allowing changing the
 * parameters of an existing one) is consistent with the bandwidth
 * constraints. If yes, this function also accordingly updates the currently
 * allocated bandwidth to reflect the new situation.
 *
 * This function is called while holding p&apos;s rq-&gt;lock.
 */</doc>
