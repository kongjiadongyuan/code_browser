<dec f='linux-5.3.1/include/linux/mm.h' l='1620' type='int __set_page_dirty_nobuffers(struct page * page)'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='3936' u='c' c='ext4_journalled_set_page_dirty'/>
<use f='linux-5.3.1/fs/nfs/file.c' l='509'/>
<use f='linux-5.3.1/fs/nfs/file.c' l='509'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='810' u='c' c='nfs_mark_request_dirty'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='1378' u='c' c='nfs_updatepage'/>
<use f='linux-5.3.1/fs/nfs/write.c' l='1789' u='c' c='nfs_commit_resched_write'/>
<def f='linux-5.3.1/mm/page-writeback.c' l='2461' ll='2490' type='int __set_page_dirty_nobuffers(struct page * page)'/>
<dec f='linux-5.3.1/mm/page-writeback.c' l='2491' type='int __set_page_dirty_nobuffers(struct page * )'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2491' c='__set_page_dirty_nobuffers'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2491' u='a'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2528' u='c' c='redirty_page_for_writepage'/>
<doc f='linux-5.3.1/mm/page-writeback.c' l='2449'>/*
 * For address_spaces which do not use buffers.  Just tag the page as dirty in
 * the xarray.
 *
 * This is also used when a single buffer is being dirtied: we want to set the
 * page dirty in that case, but not all the buffers.  This is a &quot;bottom-up&quot;
 * dirtying, whereas __set_page_dirty_buffers() is a &quot;top-down&quot; dirtying.
 *
 * The caller must ensure this doesn&apos;t race with truncation.  Most will simply
 * hold the page lock, but e.g. zap_pte_range() calls with the page mapped and
 * the pte lock held, which also locks out truncation.
 */</doc>
