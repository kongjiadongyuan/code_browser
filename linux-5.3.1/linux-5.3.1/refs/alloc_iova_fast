<dec f='linux-5.3.1/include/linux/iova.h' l='151' type='unsigned long alloc_iova_fast(struct iova_domain * iovad, unsigned long size, unsigned long limit_pfn, bool flush_rcache)'/>
<use f='linux-5.3.1/drivers/iommu/amd_iommu.c' l='1711' u='c' c='dma_ops_alloc_iova'/>
<use f='linux-5.3.1/drivers/iommu/amd_iommu.c' l='1715' u='c' c='dma_ops_alloc_iova'/>
<use f='linux-5.3.1/drivers/iommu/intel-iommu.c' l='3385' u='c' c='intel_alloc_iova'/>
<use f='linux-5.3.1/drivers/iommu/intel-iommu.c' l='3390' u='c' c='intel_alloc_iova'/>
<def f='linux-5.3.1/drivers/iommu/iova.c' l='411' ll='438' type='unsigned long alloc_iova_fast(struct iova_domain * iovad, unsigned long size, unsigned long limit_pfn, bool flush_rcache)'/>
<dec f='linux-5.3.1/drivers/iommu/iova.c' l='439' type='unsigned long alloc_iova_fast(struct iova_domain * , unsigned long , unsigned long , bool )'/>
<use f='linux-5.3.1/drivers/iommu/iova.c' l='439' c='alloc_iova_fast'/>
<use f='linux-5.3.1/drivers/iommu/iova.c' l='439' u='a'/>
<doc f='linux-5.3.1/drivers/iommu/iova.c' l='401'>/**
 * alloc_iova_fast - allocates an iova from rcache
 * @iovad: - iova domain in question
 * @size: - size of page frames to allocate
 * @limit_pfn: - max limit address
 * @flush_rcache: - set to flush rcache on regular allocation failure
 * This function tries to satisfy an iova allocation from the rcache,
 * and falls back to regular allocation on failure. If regular allocation
 * fails too and the flush_rcache flag is set then the rcache will be flushed.
*/</doc>
