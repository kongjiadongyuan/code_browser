<dec f='linux-5.3.1/include/linux/mm.h' l='1061' type='void put_user_pages_dirty_lock(struct page ** pages, unsigned long npages)'/>
<def f='linux-5.3.1/mm/gup.c' l='108' ll='111' type='void put_user_pages_dirty_lock(struct page ** pages, unsigned long npages)'/>
<dec f='linux-5.3.1/mm/gup.c' l='112' type='void put_user_pages_dirty_lock(struct page ** , unsigned long )'/>
<use f='linux-5.3.1/mm/gup.c' l='112' c='put_user_pages_dirty_lock'/>
<use f='linux-5.3.1/mm/gup.c' l='112' u='a'/>
<doc f='linux-5.3.1/mm/gup.c' l='93'>/**
 * put_user_pages_dirty_lock() - release and dirty an array of gup-pinned pages
 * @pages:  array of pages to be marked dirty and released.
 * @npages: number of pages in the @pages array.
 *
 * For each page in the @pages array, make that page (or its head page, if a
 * compound page) dirty, if it was previously listed as clean. Then, release
 * the page using put_user_page().
 *
 * Please see the put_user_page() documentation for details.
 *
 * This is just like put_user_pages_dirty(), except that it invokes
 * set_page_dirty_lock(), instead of set_page_dirty().
 *
 */</doc>
