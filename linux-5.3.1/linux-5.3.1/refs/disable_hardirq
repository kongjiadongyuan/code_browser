<dec f='linux-5.3.1/include/linux/interrupt.h' l='223' type='bool disable_hardirq(unsigned int irq)'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000/e1000_main.c' l='5229' u='c' c='e1000_netpoll'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='6762' u='c' c='e1000_intr_msix'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='6768' u='c' c='e1000_intr_msix'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='6774' u='c' c='e1000_intr_msix'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='6799' u='c' c='e1000_netpoll'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='6804' u='c' c='e1000_netpoll'/>
<def f='linux-5.3.1/kernel/irq/manage.c' l='576' ll='582' type='bool disable_hardirq(unsigned int irq)'/>
<dec f='linux-5.3.1/kernel/irq/manage.c' l='583' type='bool disable_hardirq(unsigned int )'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='583' c='disable_hardirq'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='583' u='a'/>
<doc f='linux-5.3.1/kernel/irq/manage.c' l='559'>/**
 *	disable_hardirq - disables an irq and waits for hardirq completion
 *	@irq: Interrupt to disable
 *
 *	Disable the selected interrupt line.  Enables and Disables are
 *	nested.
 *	This function waits for any pending hard IRQ handlers for this
 *	interrupt to complete before returning. If you use this function while
 *	holding a resource the hard IRQ handler may need you will deadlock.
 *
 *	When used to optimistically disable an interrupt from atomic context
 *	the return value must be checked.
 *
 *	Returns: false if a threaded handler is active.
 *
 *	This function may be called - with care - from IRQ context.
 */</doc>
