<dec f='linux-5.3.1/include/linux/netdevice.h' l='2626' type='int register_netdevice(struct net_device * dev)'/>
<def f='linux-5.3.1/net/core/dev.c' l='8637' ll='8786' type='int register_netdevice(struct net_device * dev)'/>
<dec f='linux-5.3.1/net/core/dev.c' l='8787' type='int register_netdevice(struct net_device * )'/>
<use f='linux-5.3.1/net/core/dev.c' l='8787' c='register_netdevice'/>
<use f='linux-5.3.1/net/core/dev.c' l='8787' u='a'/>
<use f='linux-5.3.1/net/core/dev.c' l='8852' u='c' c='register_netdev'/>
<doc f='linux-5.3.1/net/core/dev.c' l='8620'>/**
 *	register_netdevice	- register a network device
 *	@dev: device to register
 *
 *	Take a completed network device structure and add it to the kernel
 *	interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier
 *	chain. 0 is returned on success. A negative errno code is returned
 *	on a failure to set up the device, or if the name is a duplicate.
 *
 *	Callers must hold the rtnl semaphore. You may want
 *	register_netdev() instead of this.
 *
 *	BUGS:
 *	The locking appears insufficient to guarantee two parallel registers
 *	will not get the same name.
 */</doc>
<use f='linux-5.3.1/net/core/rtnetlink.c' l='3208' u='c' c='__rtnl_newlink'/>
<use f='linux-5.3.1/net/ipv4/ip_tunnel.c' l='269' u='c' c='__ip_tunnel_create'/>
<use f='linux-5.3.1/net/ipv4/ip_tunnel.c' l='1141' u='c' c='ip_tunnel_newlink'/>
<use f='linux-5.3.1/net/ipv4/ipmr.c' l='581' u='c' c='ipmr_reg_vif'/>
<use f='linux-5.3.1/net/ipv6/sit.c' l='208' u='c' c='ipip6_tunnel_create'/>
<use f='linux-5.3.1/net/mac80211/iface.c' l='1881' u='c' c='ieee80211_if_add'/>
