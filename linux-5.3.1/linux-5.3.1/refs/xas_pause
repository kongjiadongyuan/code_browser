<dec f='linux-5.3.1/include/linux/xarray.h' l='1469' type='void xas_pause(struct xa_state * )'/>
<def f='linux-5.3.1/lib/xarray.c' l='963' ll='981' type='void xas_pause(struct xa_state * xas)'/>
<dec f='linux-5.3.1/lib/xarray.c' l='982' type='void xas_pause(struct xa_state * )'/>
<use f='linux-5.3.1/lib/xarray.c' l='982' c='xas_pause'/>
<use f='linux-5.3.1/lib/xarray.c' l='982' u='a'/>
<doc f='linux-5.3.1/lib/xarray.c' l='948'>/**
 * xas_pause() - Pause a walk to drop a lock.
 * @xas: XArray operation state.
 *
 * Some users need to pause a walk and drop the lock they&apos;re holding in
 * order to yield to a higher priority thread or carry out an operation
 * on an entry.  Those users should call this function before they drop
 * the lock.  It resets the @xas to be suitable for the next iteration
 * of the loop after the user has reacquired the lock.  If most entries
 * found during a walk require you to call xas_pause(), the xa_for_each()
 * iterator may be more appropriate.
 *
 * Note that xas_pause() only works for forward iteration.  If a user needs
 * to pause a reverse iteration, we will need a xas_pause_rev().
 */</doc>
<use f='linux-5.3.1/mm/memfd.c' l='48' u='c' c='memfd_tag_pins'/>
<use f='linux-5.3.1/mm/memfd.c' l='107' u='c' c='memfd_wait_for_pins'/>
<use f='linux-5.3.1/mm/page-writeback.c' l='2116' u='c' c='tag_pages_for_writeback'/>
<use f='linux-5.3.1/mm/shmem.c' l='702' u='c' c='shmem_partial_swap_usage'/>
<use f='linux-5.3.1/mm/shmem.c' l='1138' u='c' c='shmem_find_swap_entries'/>
