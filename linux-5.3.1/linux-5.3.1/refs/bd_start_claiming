<dec f='linux-5.3.1/include/linux/fs.h' l='2601' type='struct block_device * bd_start_claiming(struct block_device * bdev, void * holder)'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='946' u='c' c='loop_set_fd'/>
<def f='linux-5.3.1/fs/block_dev.c' l='1142' ll='1188' type='struct block_device * bd_start_claiming(struct block_device * bdev, void * holder)'/>
<dec f='linux-5.3.1/fs/block_dev.c' l='1189' type='struct block_device * bd_start_claiming(struct block_device * , void * )'/>
<use f='linux-5.3.1/fs/block_dev.c' l='1189' c='bd_start_claiming'/>
<use f='linux-5.3.1/fs/block_dev.c' l='1189' u='a'/>
<use f='linux-5.3.1/fs/block_dev.c' l='1700' u='c' c='blkdev_get'/>
<doc f='linux-5.3.1/fs/block_dev.c' l='1119'>/**
 * bd_start_claiming - start claiming a block device
 * @bdev: block device of interest
 * @holder: holder trying to claim @bdev
 *
 * @bdev is about to be opened exclusively.  Check @bdev can be opened
 * exclusively and mark that an exclusive open is in progress.  Each
 * successful call to this function must be matched with a call to
 * either bd_finish_claiming() or bd_abort_claiming() (which do not
 * fail).
 *
 * This function is used to gain exclusive access to the block device
 * without actually causing other exclusive open attempts to fail. It
 * should be used when the open sequence itself requires exclusive
 * access but may subsequently fail.
 *
 * CONTEXT:
 * Might sleep.
 *
 * RETURNS:
 * Pointer to the block device containing @bdev on success, ERR_PTR()
 * value on failure.
 */</doc>
