<dec f='include/stdlib.h' l='817' type='void * bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)'/>
<def f='include/x86_64-linux-gnu/bits/stdlib-bsearch.h' l='19' ll='43' macro='1' type='void * bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)'/>
<doc f='include/stdlib.h' l='815'>/* Do a binary search for KEY in BASE, which consists of NMEMB elements
   of SIZE bytes each, using COMPAR to perform the comparisons.  */</doc>
<dec f='linux-5.3.1/include/linux/bsearch.h' l='7' type='void * bsearch(const void * key, const void * base, size_t num, size_t size, int (*)(const void *, const void *) cmp)'/>
<use f='linux-5.3.1/arch/x86/kernel/alternative.c' l='989' u='c' c='poke_int3_handler'/>
<use f='linux-5.3.1/drivers/base/regmap/regcache.c' l='651' u='c' c='regcache_lookup_reg'/>
<use f='linux-5.3.1/drivers/tty/vt/vt.c' l='2536' u='c' c='is_double_width'/>
<use f='linux-5.3.1/kernel/module.c' l='562' u='c' c='find_exported_symbol_in_section'/>
<use f='linux-5.3.1/kernel/module.c' l='2531' u='c' c='lookup_exported_symbol'/>
<def f='linux-5.3.1/lib/bsearch.c' l='31' ll='52' type='void * bsearch(const void * key, const void * base, size_t num, size_t size, int (*)(const void *, const void *) cmp)'/>
<dec f='linux-5.3.1/lib/bsearch.c' l='53' type='void * bsearch(const void * , const void * , size_t , size_t , int (*)(const void *, const void *) )'/>
<use f='linux-5.3.1/lib/bsearch.c' l='53' c='bsearch'/>
<use f='linux-5.3.1/lib/bsearch.c' l='53' u='a'/>
<use f='linux-5.3.1/lib/bsearch.c' l='54'/>
<doc f='linux-5.3.1/lib/bsearch.c' l='13'>/*
 * bsearch - binary search an array of elements
 * @key: pointer to item being searched for
 * @base: pointer to first element to search
 * @num: number of elements
 * @size: size of each element
 * @cmp: pointer to comparison function
 *
 * This function does a binary search on the given array.  The
 * contents of the array should already be in ascending sorted order
 * under the provided comparison function.
 *
 * Note that the key need not have the same type as the elements in
 * the array, e.g. key could be a string and the comparison function
 * could compare the string with the struct&apos;s name field.  However, if
 * the key and elements in the array are of the same type, you can use
 * the same comparison function for both sort() and bsearch().
 */</doc>
<use f='linux-5.3.1/lib/extable.c' l='119' u='c' c='search_extable'/>
<use f='linux-5.3.1/scripts/asn1_compiler.c' l='442' u='c' c='tokenise'/>
<use f='linux-5.3.1/scripts/asn1_compiler.c' l='1012' u='c' c='parse_type'/>
