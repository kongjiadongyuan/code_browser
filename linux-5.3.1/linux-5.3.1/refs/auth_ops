<use f='linux-5.3.1/include/linux/sunrpc/svcauth.h' l='84'/>
<def f='linux-5.3.1/include/linux/sunrpc/svcauth.h' l='128' ll='136'/>
<use f='linux-5.3.1/include/linux/sunrpc/svcauth.h' l='157' c='svc_auth_register'/>
<use f='linux-5.3.1/include/linux/sunrpc/svc.h' l='243'/>
<size>56</size>
<doc f='linux-5.3.1/include/linux/sunrpc/svcauth.h' l='88'>/*
 * Each authentication flavour registers an auth_ops
 * structure.
 * name is simply the name.
 * flavour gives the auth flavour. It determines where the flavour is registered
 * accept() is given a request and should verify it.
 *   It should inspect the authenticator and verifier, and possibly the data.
 *    If there is a problem with the authentication *authp should be set.
 *    The return value of accept() can indicate:
 *      OK - authorised. client and credential are set in rqstp.
 *           reqbuf points to arguments
 *           resbuf points to good place for results.  verfier
 *             is (probably) already in place.  Certainly space is
 *	       reserved for it.
 *      DROP - simply drop the request. It may have been deferred
 *      GARBAGE - rpc garbage_args error
 *      SYSERR - rpc system_err error
 *      DENIED - authp holds reason for denial.
 *      COMPLETE - the reply is encoded already and ready to be sent; no
 *		further processing is necessary.  (This is used for processing
 *		null procedure calls which are used to set up encryption
 *		contexts.)
 *
 *   accept is passed the proc number so that it can accept NULL rpc requests
 *   even if it cannot authenticate the client (as is sometimes appropriate).
 *
 * release() is given a request after the procedure has been run.
 *  It should sign/encrypt the results if needed
 * It should return:
 *    OK - the resbuf is ready to be sent
 *    DROP - the reply should be quitely dropped
 *    DENIED - authp holds a reason for MSG_DENIED
 *    SYSERR - rpc system_err
 *
 * domain_release()
 *   This call releases a domain.
 * set_client()
 *   Givens a pending request (struct svc_rqst), finds and assigns
 *   an appropriate &apos;auth_domain&apos; as the client.
 */</doc>
<mbr r='auth_ops::name' o='0' t='char *'/>
<mbr r='auth_ops::owner' o='64' t='struct module *'/>
<mbr r='auth_ops::flavour' o='128' t='int'/>
<mbr r='auth_ops::accept' o='192' t='int (*)(struct svc_rqst *, __be32 *)'/>
<mbr r='auth_ops::release' o='256' t='int (*)(struct svc_rqst *)'/>
<mbr r='auth_ops::domain_release' o='320' t='void (*)(struct auth_domain *)'/>
<mbr r='auth_ops::set_client' o='384' t='int (*)(struct svc_rqst *)'/>
<use f='linux-5.3.1/net/sunrpc/auth_gss/svcauth_gss.c' l='792'/>
<use f='linux-5.3.1/net/sunrpc/auth_gss/svcauth_gss.c' l='1803'/>
<size>56</size>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='28'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='29'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='31'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='32'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='33'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='32'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='33'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='36' c='svc_get_auth_ops'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='39' c='svc_get_auth_ops'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='52' c='svc_put_auth_ops'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='61' c='svc_authenticate'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='96' c='svc_authorise'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='109' c='svc_auth_register'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='111' c='svc_auth_register'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='115' c='svc_auth_register'/>
<use f='linux-5.3.1/net/sunrpc/svcauth.c' l='115' c='svc_auth_register'/>
<size>56</size>
<use f='linux-5.3.1/net/sunrpc/svcauth_unix.c' l='38'/>
<use f='linux-5.3.1/net/sunrpc/svcauth_unix.c' l='39'/>
<use f='linux-5.3.1/net/sunrpc/svcauth_unix.c' l='784'/>
<use f='linux-5.3.1/net/sunrpc/svcauth_unix.c' l='869'/>
<size>56</size>
