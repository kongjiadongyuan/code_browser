<dec f='linux-5.3.1/include/crypto/hash.h' l='252' type='struct crypto_ahash * crypto_alloc_ahash(const char * alg_name, u32 type, u32 mask)'/>
<doc f='linux-5.3.1/include/crypto/hash.h' l='238'>/**
 * crypto_alloc_ahash() - allocate ahash cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	      ahash cipher
 * @type: specifies the type of the cipher
 * @mask: specifies the mask for the cipher
 *
 * Allocate a cipher handle for an ahash. The returned struct
 * crypto_ahash is the cipher handle that is required for any subsequent
 * API invocation for that ahash.
 *
 * Return: allocated cipher handle in case of success; IS_ERR() is true in case
 *	   of an error, PTR_ERR() returns the error code.
 */</doc>
<def f='linux-5.3.1/crypto/ahash.c' l='559' ll='563' type='struct crypto_ahash * crypto_alloc_ahash(const char * alg_name, u32 type, u32 mask)'/>
<dec f='linux-5.3.1/crypto/ahash.c' l='564' type='struct crypto_ahash * crypto_alloc_ahash(const char * , u32 , u32 )'/>
<use f='linux-5.3.1/crypto/ahash.c' l='564' c='crypto_alloc_ahash'/>
<use f='linux-5.3.1/crypto/ahash.c' l='564' u='a'/>
<use f='linux-5.3.1/net/ipv4/tcp.c' l='3703' u='c' c='__tcp_alloc_md5sig_pool'/>
<use f='linux-5.3.1/net/ipv6/ah6.c' l='687' u='c' c='ah6_init_state'/>
