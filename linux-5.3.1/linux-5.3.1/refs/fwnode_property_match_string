<dec f='linux-5.3.1/include/linux/property.h' l='72' type='int fwnode_property_match_string(const struct fwnode_handle * fwnode, const char * propname, const char * string)'/>
<use f='linux-5.3.1/drivers/base/property.c' l='225' u='c' c='device_property_match_string'/>
<def f='linux-5.3.1/drivers/base/property.c' l='425' ll='452' type='int fwnode_property_match_string(const struct fwnode_handle * fwnode, const char * propname, const char * string)'/>
<dec f='linux-5.3.1/drivers/base/property.c' l='453' type='int fwnode_property_match_string(const struct fwnode_handle * , const char * , const char * )'/>
<use f='linux-5.3.1/drivers/base/property.c' l='453' c='fwnode_property_match_string'/>
<use f='linux-5.3.1/drivers/base/property.c' l='453' u='a'/>
<doc f='linux-5.3.1/drivers/base/property.c' l='410'>/**
 * fwnode_property_match_string - find a string in an array and return index
 * @fwnode: Firmware node to get the property of
 * @propname: Name of the property holding the array
 * @string: String to look for
 *
 * Find a given string in a string array and if it is found return the
 * index back.
 *
 * Return: %0 if the property was found (success),
 *	   %-EINVAL if given arguments are not valid,
 *	   %-ENODATA if the property does not have a value,
 *	   %-EPROTO if the property is not an array of strings,
 *	   %-ENXIO if no suitable firmware interface is present.
 */</doc>
