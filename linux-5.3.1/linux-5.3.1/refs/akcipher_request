<def f='linux-5.3.1/include/crypto/akcipher.h' l='33' ll='40'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='93'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='94'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='95'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='96'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='161' c='akcipher_request_set_tfm'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='168' c='crypto_akcipher_reqtfm'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='191' c='akcipher_request_alloc'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='194' c='akcipher_request_alloc'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='208' c='akcipher_request_free'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='224' c='akcipher_request_set_callback'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='246' c='akcipher_request_set_crypt'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='285' c='crypto_akcipher_encrypt'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='309' c='crypto_akcipher_decrypt'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='333' c='crypto_akcipher_sign'/>
<use f='linux-5.3.1/include/crypto/akcipher.h' l='360' c='crypto_akcipher_verify'/>
<use f='linux-5.3.1/include/crypto/internal/akcipher.h' l='31' c='akcipher_request_ctx'/>
<use f='linux-5.3.1/include/crypto/internal/akcipher.h' l='47' c='akcipher_request_complete'/>
<use f='linux-5.3.1/crypto/akcipher.c' l='117' c='akcipher_default_op'/>
<size>72</size>
<doc f='linux-5.3.1/include/crypto/akcipher.h' l='12'>/**
 * struct akcipher_request - public key request
 *
 * @base:	Common attributes for async crypto requests
 * @src:	Source data
 *		For verify op this is signature + digest, in that case
 *		total size of @src is @src_len + @dst_len.
 * @dst:	Destination data (Should be NULL for verify op)
 * @src_len:	Size of the input buffer
 *		For verify op it&apos;s size of signature part of @src, this part
 *		is supposed to be operated by cipher.
 * @dst_len:	Size of @dst buffer (for all ops except verify).
 *		It needs to be at least	as big as the expected result
 *		depending on the operation.
 *		After operation it will be updated with the actual size of the
 *		result.
 *		In case of error where the dst sgl size was insufficient,
 *		it will be updated to the size required for the operation.
 *		For verify op this is size of digest part in @src.
 * @__ctx:	Start of private context data
 */</doc>
<mbr r='akcipher_request::base' o='0' t='struct crypto_async_request'/>
<mbr r='akcipher_request::src' o='384' t='struct scatterlist *'/>
<mbr r='akcipher_request::dst' o='448' t='struct scatterlist *'/>
<mbr r='akcipher_request::src_len' o='512' t='unsigned int'/>
<mbr r='akcipher_request::dst_len' o='544' t='unsigned int'/>
<mbr r='akcipher_request::__ctx' o='576' t='void *[]'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/public_key.c' l='167' c='software_key_eds_op'/>
<use f='linux-5.3.1/crypto/asymmetric_keys/public_key.c' l='255' c='public_key_verify_signature'/>
<size>72</size>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='103'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='173' c='pkcs1pad_encrypt_sign_complete'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='215' c='pkcs1pad_encrypt_sign_complete_cb'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='228' c='pkcs1pad_encrypt'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='276' c='pkcs1pad_decrypt_complete'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='333' c='pkcs1pad_decrypt_complete_cb'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='345' c='pkcs1pad_decrypt'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='378' c='pkcs1pad_sign'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='435' c='pkcs1pad_verify_complete'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='511' c='pkcs1pad_verify_complete_cb'/>
<use f='linux-5.3.1/crypto/rsa-pkcs1pad.c' l='531' c='pkcs1pad_verify'/>
<size>72</size>
<use f='linux-5.3.1/crypto/rsa.c' l='54' c='rsa_enc'/>
<use f='linux-5.3.1/crypto/rsa.c' l='93' c='rsa_dec'/>
<size>72</size>
