<dec f='linux-5.3.1/include/linux/transport_class.h' l='66' type='void transport_setup_device(struct device * )'/>
<use f='linux-5.3.1/include/linux/transport_class.h' l='73' u='c' c='transport_register_device'/>
<use f='linux-5.3.1/drivers/ata/libata-transport.c' l='292' u='c' c='ata_tport_add'/>
<use f='linux-5.3.1/drivers/ata/libata-transport.c' l='422' u='c' c='ata_tlink_add'/>
<use f='linux-5.3.1/drivers/ata/libata-transport.c' l='673' u='c' c='ata_tdev_add'/>
<def f='linux-5.3.1/drivers/base/transport_class.c' l='144' ll='147' type='void transport_setup_device(struct device * dev)'/>
<dec f='linux-5.3.1/drivers/base/transport_class.c' l='148' type='void transport_setup_device(struct device * )'/>
<use f='linux-5.3.1/drivers/base/transport_class.c' l='148' c='transport_setup_device'/>
<use f='linux-5.3.1/drivers/base/transport_class.c' l='148' u='a'/>
<doc f='linux-5.3.1/drivers/base/transport_class.c' l='129'>/**
 * transport_setup_device - declare a new dev for transport class association but don&apos;t make it visible yet.
 * @dev: the generic device representing the entity being added
 *
 * Usually, dev represents some component in the HBA system (either
 * the HBA itself or a device remote across the HBA bus).  This
 * routine is simply a trigger point to see if any set of transport
 * classes wishes to associate with the added device.  This allocates
 * storage for the class device and initialises it, but does not yet
 * add it to the system or add attributes to it (you do this with
 * transport_add_device).  If you have no need for a separate setup
 * and add operations, use transport_register_device (see
 * transport_class.h).
 */</doc>
<use f='linux-5.3.1/drivers/scsi/scsi_scan.c' l='452' u='c' c='scsi_alloc_target'/>
<use f='linux-5.3.1/drivers/scsi/scsi_sysfs.c' l='1586' u='c' c='scsi_sysfs_device_initialize'/>
