<dec f='linux-5.3.1/include/linux/libata.h' l='1876' type='int ata_pci_sff_prepare_host(struct pci_dev * pdev, const struct ata_port_info *const * ppi, struct ata_host ** r_host)'/>
<def f='linux-5.3.1/drivers/ata/libata-sff.c' l='2301' ll='2329' type='int ata_pci_sff_prepare_host(struct pci_dev * pdev, const struct ata_port_info *const * ppi, struct ata_host ** r_host)'/>
<dec f='linux-5.3.1/drivers/ata/libata-sff.c' l='2330' type='int ata_pci_sff_prepare_host(struct pci_dev * , const struct ata_port_info *const * , struct ata_host ** )'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='2330' c='ata_pci_sff_prepare_host'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='2330' u='a'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='2477' u='c' c='ata_pci_init_one'/>
<use f='linux-5.3.1/drivers/ata/libata-sff.c' l='3213' u='c' c='ata_pci_bmdma_prepare_host'/>
<doc f='linux-5.3.1/drivers/ata/libata-sff.c' l='2286'>/**
 *	ata_pci_sff_prepare_host - helper to prepare PCI PIO-only SFF ATA host
 *	@pdev: target PCI device
 *	@ppi: array of port_info, must be enough for two ports
 *	@r_host: out argument for the initialized ATA host
 *
 *	Helper to allocate PIO-only SFF ATA host for @pdev, acquire
 *	all PCI resources and initialize it accordingly in one go.
 *
 *	LOCKING:
 *	Inherited from calling layer (may sleep).
 *
 *	RETURNS:
 *	0 on success, -errno otherwise.
 */</doc>
