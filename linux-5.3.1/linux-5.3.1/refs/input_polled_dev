<def f='linux-5.3.1/include/linux/input-polldev.h' l='34' ll='50'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='37'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='38'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='39'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='52' c='input_allocate_polled_device'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='53' c='devm_input_allocate_polled_device'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='54' c='input_free_polled_device'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='55' c='input_register_polled_device'/>
<use f='linux-5.3.1/include/linux/input-polldev.h' l='56' c='input_unregister_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='21' c='input_polldev_queue_work'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='34' c='input_polled_device_work'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='35' c='input_polled_device_work'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='35' c='input_polled_device_work'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='35' c='input_polled_device_work'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='43' c='input_open_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='59' c='input_close_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='72' c='input_polldev_get_poll'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='81' c='input_polldev_set_poll'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='118' c='input_polldev_get_max'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='128' c='input_polldev_get_min'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='157' c='input_allocate_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='159' c='input_allocate_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='161' c='input_allocate_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='176'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='189' c='devm_input_polldev_release'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='201' c='devm_input_polldev_unregister'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='234' c='devm_input_allocate_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='236' c='devm_input_allocate_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='267' c='input_free_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='291' c='input_register_polled_device'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='352' c='input_unregister_polled_device'/>
<size>152</size>
<doc f='linux-5.3.1/include/linux/input-polldev.h' l='12'>/**
 * struct input_polled_dev - simple polled input device
 * @private: private driver data.
 * @open: driver-supplied method that prepares device for polling
 *	(enabled the device and maybe flushes device state).
 * @close: driver-supplied method that is called when device is no
 *	longer being polled. Used to put device into low power mode.
 * @poll: driver-supplied method that polls the device and posts
 *	input events (mandatory).
 * @poll_interval: specifies how often the poll() method should be called.
 *	Defaults to 500 msec unless overridden when registering the device.
 * @poll_interval_max: specifies upper bound for the poll interval.
 *	Defaults to the initial value of @poll_interval.
 * @poll_interval_min: specifies lower bound for the poll interval.
 *	Defaults to 0.
 * @input: input device structure associated with the polled device.
 *	Must be properly initialized by the driver (id, name, phys, bits).
 *
 * Polled input device provides a skeleton for supporting simple input
 * devices that do not raise interrupts but have to be periodically
 * scanned or polled to detect changes in their state.
 */</doc>
<mbr r='input_polled_dev::private' o='0' t='void *'/>
<mbr r='input_polled_dev::open' o='64' t='void (*)(struct input_polled_dev *)'/>
<mbr r='input_polled_dev::close' o='128' t='void (*)(struct input_polled_dev *)'/>
<mbr r='input_polled_dev::poll' o='192' t='void (*)(struct input_polled_dev *)'/>
<mbr r='input_polled_dev::poll_interval' o='256' t='unsigned int'/>
<mbr r='input_polled_dev::poll_interval_max' o='288' t='unsigned int'/>
<mbr r='input_polled_dev::poll_interval_min' o='320' t='unsigned int'/>
<mbr r='input_polled_dev::input' o='384' t='struct input_dev *'/>
<mbr r='input_polled_dev::work' o='448' t='struct delayed_work'/>
<mbr r='input_polled_dev::devres_managed' o='1152' t='bool'/>
