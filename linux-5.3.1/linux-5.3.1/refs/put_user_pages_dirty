<dec f='linux-5.3.1/include/linux/mm.h' l='1060' type='void put_user_pages_dirty(struct page ** pages, unsigned long npages)'/>
<def f='linux-5.3.1/mm/gup.c' l='87' ll='90' type='void put_user_pages_dirty(struct page ** pages, unsigned long npages)'/>
<dec f='linux-5.3.1/mm/gup.c' l='91' type='void put_user_pages_dirty(struct page ** , unsigned long )'/>
<use f='linux-5.3.1/mm/gup.c' l='91' c='put_user_pages_dirty'/>
<use f='linux-5.3.1/mm/gup.c' l='91' u='a'/>
<doc f='linux-5.3.1/mm/gup.c' l='68'>/**
 * put_user_pages_dirty() - release and dirty an array of gup-pinned pages
 * @pages:  array of pages to be marked dirty and released.
 * @npages: number of pages in the @pages array.
 *
 * &quot;gup-pinned page&quot; refers to a page that has had one of the get_user_pages()
 * variants called on that page.
 *
 * For each page in the @pages array, make that page (or its head page, if a
 * compound page) dirty, if it was previously listed as clean. Then, release
 * the page using put_user_page().
 *
 * Please see the put_user_page() documentation for details.
 *
 * set_page_dirty(), which does not lock the page, is used here.
 * Therefore, it is the caller&apos;s responsibility to ensure that this is
 * safe. If not, then put_user_pages_dirty_lock() should be called instead.
 *
 */</doc>
