<dec f='linux-5.3.1/drivers/pcmcia/cs_internal.h' l='121' type='void pcmcia_parse_uevents(struct pcmcia_socket * socket, unsigned int events)'/>
<use f='linux-5.3.1/drivers/pcmcia/cistpl.c' l='1593' u='c' c='pccard_store_cis'/>
<def f='linux-5.3.1/drivers/pcmcia/cs.c' l='725' ll='736' type='void pcmcia_parse_uevents(struct pcmcia_socket * s, u_int events)'/>
<dec f='linux-5.3.1/drivers/pcmcia/cs.c' l='737' type='void pcmcia_parse_uevents(struct pcmcia_socket * , unsigned int )'/>
<use f='linux-5.3.1/drivers/pcmcia/cs.c' l='737' c='pcmcia_parse_uevents'/>
<use f='linux-5.3.1/drivers/pcmcia/cs.c' l='737' u='a'/>
<doc f='linux-5.3.1/drivers/pcmcia/cs.c' l='714'>/**
 * pcmcia_parse_uevents() - tell pccardd to issue manual commands
 * @s:		the PCMCIA socket we wan&apos;t to command
 * @events:	events to pass to pccardd
 *
 * userspace-issued insert, eject, suspend and resume commands must be
 * handled by pccardd to avoid any sysfs-related deadlocks. Valid events
 * are PCMCIA_UEVENT_EJECT (for eject), PCMCIA_UEVENT__INSERT (for insert),
 * PCMCIA_UEVENT_RESUME (for resume), PCMCIA_UEVENT_SUSPEND (for suspend)
 * and PCMCIA_UEVENT_REQUERY (for re-querying the PCMCIA card).
 */</doc>
<use f='linux-5.3.1/drivers/pcmcia/ds.c' l='305' u='c' c='pcmcia_device_probe'/>
<use f='linux-5.3.1/drivers/pcmcia/ds.c' l='782' u='c' c='pcmcia_load_firmware'/>
<use f='linux-5.3.1/drivers/pcmcia/ds.c' l='1110' u='c' c='allow_func_id_match_store'/>
<use f='linux-5.3.1/drivers/pcmcia/socket_sysfs.c' l='89' u='c' c='pccard_store_insert'/>
<use f='linux-5.3.1/drivers/pcmcia/socket_sysfs.c' l='115' u='c' c='pccard_store_card_pm_state'/>
<use f='linux-5.3.1/drivers/pcmcia/socket_sysfs.c' l='118' u='c' c='pccard_store_card_pm_state'/>
<use f='linux-5.3.1/drivers/pcmcia/socket_sysfs.c' l='136' u='c' c='pccard_store_eject'/>
<use f='linux-5.3.1/drivers/pcmcia/socket_sysfs.c' l='197' u='c' c='pccard_store_resource'/>
