<def f='linux-5.3.1/include/net/mac802154.h' l='208' ll='233'/>
<use f='linux-5.3.1/include/net/mac802154.h' l='415' c='ieee802154_alloc_hw'/>
<size>120</size>
<doc f='linux-5.3.1/include/net/mac802154.h' l='133'>/* struct ieee802154_ops - callbacks from mac802154 to the driver
 *
 * This structure contains various callbacks that the driver may
 * handle or, in some cases, must handle, for example to transmit
 * a frame.
 *
 * start: Handler that 802.15.4 module calls for device initialization.
 *	  This function is called before the first interface is attached.
 *
 * stop:  Handler that 802.15.4 module calls for device cleanup.
 *	  This function is called after the last interface is removed.
 *
 * xmit_sync:
 *	  Handler that 802.15.4 module calls for each transmitted frame.
 *	  skb cntains the buffer starting from the IEEE 802.15.4 header.
 *	  The low-level driver should send the frame based on available
 *	  configuration. This is called by a workqueue and useful for
 *	  synchronous 802.15.4 drivers.
 *	  This function should return zero or negative errno.
 *
 *	  WARNING:
 *	  This will be deprecated soon. We don&apos;t accept synced xmit callbacks
 *	  drivers anymore.
 *
 * xmit_async:
 *	  Handler that 802.15.4 module calls for each transmitted frame.
 *	  skb cntains the buffer starting from the IEEE 802.15.4 header.
 *	  The low-level driver should send the frame based on available
 *	  configuration.
 *	  This function should return zero or negative errno.
 *
 * ed:    Handler that 802.15.4 module calls for Energy Detection.
 *	  This function should place the value for detected energy
 *	  (usually device-dependant) in the level pointer and return
 *	  either zero or negative errno. Called with pib_lock held.
 *
 * set_channel:
 * 	  Set radio for listening on specific channel.
 *	  Set the device for listening on specified channel.
 *	  Returns either zero, or negative errno. Called with pib_lock held.
 *
 * set_hw_addr_filt:
 *	  Set radio for listening on specific address.
 *	  Set the device for listening on specified address.
 *	  Returns either zero, or negative errno.
 *
 * set_txpower:
 *	  Set radio transmit power in mBm. Called with pib_lock held.
 *	  Returns either zero, or negative errno.
 *
 * set_lbt
 *	  Enables or disables listen before talk on the device. Called with
 *	  pib_lock held.
 *	  Returns either zero, or negative errno.
 *
 * set_cca_mode
 *	  Sets the CCA mode used by the device. Called with pib_lock held.
 *	  Returns either zero, or negative errno.
 *
 * set_cca_ed_level
 *	  Sets the CCA energy detection threshold in mBm. Called with pib_lock
 *	  held.
 *	  Returns either zero, or negative errno.
 *
 * set_csma_params
 *	  Sets the CSMA parameter set for the PHY. Called with pib_lock held.
 *	  Returns either zero, or negative errno.
 *
 * set_frame_retries
 *	  Sets the retransmission attempt limit. Called with pib_lock held.
 *	  Returns either zero, or negative errno.
 *
 * set_promiscuous_mode
 *	  Enables or disable promiscuous mode.
 */</doc>
<mbr r='ieee802154_ops::owner' o='0' t='struct module *'/>
<mbr r='ieee802154_ops::start' o='64' t='int (*)(struct ieee802154_hw *)'/>
<mbr r='ieee802154_ops::stop' o='128' t='void (*)(struct ieee802154_hw *)'/>
<mbr r='ieee802154_ops::xmit_sync' o='192' t='int (*)(struct ieee802154_hw *, struct sk_buff *)'/>
<mbr r='ieee802154_ops::xmit_async' o='256' t='int (*)(struct ieee802154_hw *, struct sk_buff *)'/>
<mbr r='ieee802154_ops::ed' o='320' t='int (*)(struct ieee802154_hw *, u8 *)'/>
<mbr r='ieee802154_ops::set_channel' o='384' t='int (*)(struct ieee802154_hw *, u8, u8)'/>
<mbr r='ieee802154_ops::set_hw_addr_filt' o='448' t='int (*)(struct ieee802154_hw *, struct ieee802154_hw_addr_filt *, unsigned long)'/>
<mbr r='ieee802154_ops::set_txpower' o='512' t='int (*)(struct ieee802154_hw *, s32)'/>
<mbr r='ieee802154_ops::set_lbt' o='576' t='int (*)(struct ieee802154_hw *, bool)'/>
<mbr r='ieee802154_ops::set_cca_mode' o='640' t='int (*)(struct ieee802154_hw *, const struct wpan_phy_cca *)'/>
<mbr r='ieee802154_ops::set_cca_ed_level' o='704' t='int (*)(struct ieee802154_hw *, s32)'/>
<mbr r='ieee802154_ops::set_csma_params' o='768' t='int (*)(struct ieee802154_hw *, u8, u8, u8)'/>
<mbr r='ieee802154_ops::set_frame_retries' o='832' t='int (*)(struct ieee802154_hw *, s8)'/>
<mbr r='ieee802154_ops::set_promiscuous_mode' o='896' t='int (*)(struct ieee802154_hw *, const bool)'/>
