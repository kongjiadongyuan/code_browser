<dec f='linux-5.3.1/fs/nfs/internal.h' l='424' type='void nfs_start_io_read(struct inode * inode)'/>
<doc f='linux-5.3.1/fs/nfs/internal.h' l='423'>/* io.c */</doc>
<use f='linux-5.3.1/fs/nfs/file.c' l='167' u='c' c='nfs_file_read'/>
<def f='linux-5.3.1/fs/nfs/io.c' l='42' ll='55' type='void nfs_start_io_read(struct inode * inode)'/>
<doc f='linux-5.3.1/fs/nfs/io.c' l='26'>/**
 * nfs_start_io_read - declare the file is being used for buffered reads
 * @inode: file inode
 *
 * Declare that a buffered read operation is about to start, and ensure
 * that we block all direct I/O.
 * On exit, the function ensures that the NFS_INO_ODIRECT flag is unset,
 * and holds a shared lock on inode-&gt;i_rwsem to ensure that the flag
 * cannot be changed.
 * In practice, this means that buffered read operations are allowed to
 * execute in parallel, thanks to the shared lock, whereas direct I/O
 * operations need to wait to grab an exclusive lock in order to set
 * NFS_INO_ODIRECT.
 * Note that buffered writes and truncates both take a write lock on
 * inode-&gt;i_rwsem, meaning that those are serialised w.r.t. the reads.
 */</doc>
