<dec f='linux-5.3.1/arch/x86/include/asm/mmu_context.h' l='180' type='void enter_lazy_tlb(struct mm_struct * mm, struct task_struct * tsk)'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/common.c' l='1851' u='c' c='cpu_init'/>
<def f='linux-5.3.1/arch/x86/mm/tlb.c' l='461' ll='467' type='void enter_lazy_tlb(struct mm_struct * mm, struct task_struct * tsk)'/>
<doc f='linux-5.3.1/arch/x86/mm/tlb.c' l='448'>/*
 * Please ignore the name of this function.  It should be called
 * switch_to_kernel_thread().
 *
 * enter_lazy_tlb() is a hint from the scheduler that we are entering a
 * kernel thread or other context without an mm.  Acceptable implementations
 * include doing nothing whatsoever, switching to init_mm, or various clever
 * lazy tricks to try to minimize TLB flushes.
 *
 * The scheduler reserves the right to call enter_lazy_tlb() several times
 * in a row.  It will notify us that we&apos;re going back to a real mm by
 * calling switch_mm_irqs_off().
 */</doc>
<use f='linux-5.3.1/kernel/exit.c' l='544' u='c' c='exit_mm'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='3240' u='c' c='context_switch'/>
<use f='linux-5.3.1/kernel/sched/core.c' l='6513' u='c' c='sched_init'/>
<use f='linux-5.3.1/mm/mmu_context.c' l='61' u='c' c='unuse_mm'/>
