<dec f='linux-5.3.1/kernel/cgroup/cgroup-internal.h' l='229' type='int cgroup_migrate(struct task_struct * leader, bool threadgroup, struct cgroup_mgctx * mgctx)'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup-v1.c' l='143' u='c' c='cgroup_transfer_tasks'/>
<def f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2759' ll='2781' type='int cgroup_migrate(struct task_struct * leader, bool threadgroup, struct cgroup_mgctx * mgctx)'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2817' u='c' c='cgroup_attach_task'/>
<doc f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2741'>/**
 * cgroup_migrate - migrate a process or task to a cgroup
 * @leader: the leader of the process or the task to migrate
 * @threadgroup: whether @leader points to the whole process or a single task
 * @mgctx: migration context
 *
 * Migrate a process or task denoted by @leader.  If migrating a process,
 * the caller must be holding cgroup_threadgroup_rwsem.  The caller is also
 * responsible for invoking cgroup_migrate_add_src() and
 * cgroup_migrate_prepare_dst() on the targets before invoking this
 * function and following up with cgroup_migrate_finish().
 *
 * As long as a controller&apos;s -&gt;can_attach() doesn&apos;t fail, this function is
 * guaranteed to succeed.  This means that, excluding -&gt;can_attach()
 * failure, when migrating multiple targets, the success or failure can be
 * decided for all targets by invoking group_migrate_prepare_dst() before
 * actually starting migrating.
 */</doc>
