<dec f='linux-5.3.1/include/drm/drm_client.h' l='105' type='int drm_client_init(struct drm_device * dev, struct drm_client_dev * client, const char * name, const struct drm_client_funcs * funcs)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_client.c' l='79' ll='113' type='int drm_client_init(struct drm_device * dev, struct drm_client_dev * client, const char * name, const struct drm_client_funcs * funcs)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_client.c' l='114' type='int drm_client_init(struct drm_device * , struct drm_client_dev * , const char * , const struct drm_client_funcs * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_client.c' l='114' c='drm_client_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_client.c' l='114' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_client.c' l='64'>/**
 * drm_client_init - Initialise a DRM client
 * @dev: DRM device
 * @client: DRM client
 * @name: Client name
 * @funcs: DRM client functions (optional)
 *
 * This initialises the client and opens a &amp;drm_file.
 * Use drm_client_register() to complete the process.
 * The caller needs to hold a reference on @dev before calling this function.
 * The client is freed when the &amp;drm_device is unregistered. See drm_client_release().
 *
 * Returns:
 * Zero on success or negative error code on failure.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_fb_helper.c' l='488' u='c' c='drm_fb_helper_init'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_fb_helper.c' l='2382' u='c' c='drm_fbdev_generic_setup'/>
