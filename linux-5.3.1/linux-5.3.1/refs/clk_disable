<dec f='linux-5.3.1/include/linux/clk.h' l='517' type='void clk_disable(struct clk * clk)'/>
<use f='linux-5.3.1/include/linux/clk.h' l='917' u='c' c='clk_disable_unprepare'/>
<doc f='linux-5.3.1/include/linux/clk.h' l='503'>/**
 * clk_disable - inform the system when the clock source is no longer required.
 * @clk: clock source
 *
 * Inform the system that a clock source is no longer required by
 * a driver and may be shut down.
 *
 * May be called from atomic contexts.
 *
 * Implementation detail: if the clock source is shared between
 * multiple drivers, clk_enable() calls must be balanced by the
 * same number of clk_disable() calls for the clock source to be
 * disabled.
 */</doc>
<use f='linux-5.3.1/drivers/base/power/clock_ops.c' l='244' u='c' c='__pm_clk_remove'/>
<use f='linux-5.3.1/drivers/base/power/clock_ops.c' l='411' u='c' c='pm_clk_suspend'/>
<use f='linux-5.3.1/drivers/clk/clk-bulk.c' l='212' u='c' c='clk_bulk_disable'/>
<def f='linux-5.3.1/drivers/clk/clk.c' l='987' ll='993' type='void clk_disable(struct clk * clk)'/>
<dec f='linux-5.3.1/drivers/clk/clk.c' l='994' type='void clk_disable(struct clk * )'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='994' c='clk_disable'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='994' u='a'/>
<doc f='linux-5.3.1/drivers/clk/clk.c' l='975'>/**
 * clk_disable - gate a clock
 * @clk: the clk being gated
 *
 * clk_disable must not sleep, which differentiates it from clk_unprepare.  In
 * a simple case, clk_disable can be used instead of clk_unprepare to gate a
 * clk if the operation is fast and will never sleep.  One example is a
 * SoC-internal clk which is controlled via simple register writes.  In the
 * complex case a clk gate operation may require a fast and a slow part.  It is
 * this reason that clk_unprepare and clk_disable are not mutually exclusive.
 * In fact clk_disable must be called before clk_unprepare.
 */</doc>
<use f='linux-5.3.1/include/linux/amba/bus.h' l='143' u='c' c='amba_pclk_disable'/>
