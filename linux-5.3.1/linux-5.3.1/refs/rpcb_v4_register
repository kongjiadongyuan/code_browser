<dec f='linux-5.3.1/include/linux/sunrpc/clnt.h' l='173' type='int rpcb_v4_register(struct net * net, const u32 program, const u32 version, const struct sockaddr * address, const char * netid)'/>
<def f='linux-5.3.1/net/sunrpc/rpcb_clnt.c' l='598' ll='626' type='int rpcb_v4_register(struct net * net, const u32 program, const u32 version, const struct sockaddr * address, const char * netid)'/>
<doc f='linux-5.3.1/net/sunrpc/rpcb_clnt.c' l='554'>/**
 * rpcb_v4_register - set or unset a port registration with the local rpcbind
 * @net: target network namespace
 * @program: RPC program number of service to (un)register
 * @version: RPC version number of service to (un)register
 * @address: address family, IP address, and port to (un)register
 * @netid: netid of transport protocol to (un)register
 *
 * Returns zero if the registration request was dispatched successfully
 * and the rpcbind daemon returned success.  Otherwise, returns an errno
 * value that reflects the nature of the error (request could not be
 * dispatched, timed out, or rpcbind returned an error).
 *
 * RPC services invoke this function to advertise their contact
 * information via the system&apos;s rpcbind daemon.  RPC services
 * invoke this function once for each [program, version, address,
 * netid] tuple they wish to advertise.
 *
 * Callers may also unregister RPC services that are registered at a
 * specific address by setting the port number in @address to zero.
 * They may unregister all registered protocol families at once for
 * a service by passing a NULL @address argument.  If @netid is &quot;&quot;
 * then all netids for [program, version, address] are unregistered.
 *
 * This function uses rpcbind protocol version 4 to contact the
 * local rpcbind daemon.  The local rpcbind daemon must support
 * version 4 of the rpcbind protocol in order for these functions
 * to register a service successfully.
 *
 * Supported netids include &quot;udp&quot; and &quot;tcp&quot; for UDP and TCP over
 * IPv4, and &quot;udp6&quot; and &quot;tcp6&quot; for UDP and TCP over IPv6,
 * respectively.
 *
 * The contents of @address determine the address family and the
 * port to be registered.  The usual practice is to pass INADDR_ANY
 * as the raw address, but specifying a non-zero address is also
 * supported by this API if the caller wishes to advertise an RPC
 * service on a specific network interface.
 *
 * Note that passing in INADDR_ANY does not create the same service
 * registration as IN6ADDR_ANY.  The former advertises an RPC
 * service on any IPv4 address, but not on IPv6.  The latter
 * advertises the service on all IPv4 and IPv6 addresses.
 */</doc>
<use f='linux-5.3.1/net/sunrpc/svc.c' l='906' u='c' c='__svc_rpcb_register4'/>
<use f='linux-5.3.1/net/sunrpc/svc.c' l='954' u='c' c='__svc_rpcb_register6'/>
<use f='linux-5.3.1/net/sunrpc/svc.c' l='1100' u='c' c='__svc_unregister'/>
