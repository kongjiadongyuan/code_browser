<dec f='linux-5.3.1/include/linux/vmalloc.h' l='119' type='int remap_vmalloc_range(struct vm_area_struct * vma, void * addr, unsigned long pgoff)'/>
<def f='linux-5.3.1/mm/vmalloc.c' l='3035' ll='3041' type='int remap_vmalloc_range(struct vm_area_struct * vma, void * addr, unsigned long pgoff)'/>
<dec f='linux-5.3.1/mm/vmalloc.c' l='3042' type='int remap_vmalloc_range(struct vm_area_struct * , void * , unsigned long )'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='3042' c='remap_vmalloc_range'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='3042' u='a'/>
<doc f='linux-5.3.1/mm/vmalloc.c' l='3021'>/**
 * remap_vmalloc_range - map vmalloc pages to userspace
 * @vma:		vma to cover (map full range of vma)
 * @addr:		vmalloc memory
 * @pgoff:		number of pages into addr before first page to map
 *
 * Returns:	0 for success, -Exxx on failure
 *
 * This function checks that addr is a valid vmalloc&apos;ed area, and
 * that it is big enough to cover the vma. Will return failure if
 * that criteria isn&apos;t met.
 *
 * Similar to remap_pfn_range() (see mm/memory.c)
 */</doc>
