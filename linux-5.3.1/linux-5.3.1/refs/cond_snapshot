<def f='linux-5.3.1/kernel/trace/trace.h' l='236' ll='239'/>
<size>16</size>
<doc f='linux-5.3.1/kernel/trace/trace.h' l='198'>/**
 * struct cond_snapshot - conditional snapshot data and callback
 *
 * The cond_snapshot structure encapsulates a callback function and
 * data associated with the snapshot for a given tracing instance.
 *
 * When a snapshot is taken conditionally, by invoking
 * tracing_snapshot_cond(tr, cond_data), the cond_data passed in is
 * passed in turn to the cond_snapshot.update() function.  That data
 * can be compared by the update() implementation with the cond_data
 * contained wihin the struct cond_snapshot instance associated with
 * the trace_array.  Because the tr-&gt;max_lock is held throughout the
 * update() call, the update() function can directly retrieve the
 * cond_snapshot and cond_data associated with the per-instance
 * snapshot associated with the trace_array.
 *
 * The cond_snapshot.update() implementation can save data to be
 * associated with the snapshot if it decides to, and returns &apos;true&apos;
 * in that case, or it returns &apos;false&apos; if the conditional snapshot
 * shouldn&apos;t be taken.
 *
 * The cond_snapshot instance is created and associated with the
 * user-defined cond_data by tracing_cond_snapshot_enable().
 * Likewise, the cond_snapshot instance is destroyed and is no longer
 * associated with the trace instance by
 * tracing_cond_snapshot_disable().
 *
 * The method below is required.
 *
 * @update: When a conditional snapshot is invoked, the update()
 *	callback function is invoked with the tr-&gt;max_lock held.  The
 *	update() implementation signals whether or not to actually
 *	take the snapshot, by returning &apos;true&apos; if so, &apos;false&apos; if no
 *	snapshot should be taken.  Because the max_lock is held for
 *	the duration of update(), the implementation is safe to
 *	directly retrieven and save any implementation data it needs
 *	to in association with the snapshot.
 */</doc>
<mbr r='cond_snapshot::cond_data' o='0' t='void *'/>
<mbr r='cond_snapshot::update' o='64' t='cond_update_fn_t'/>
