<dec f='linux-5.3.1/include/linux/vmalloc.h' l='115' type='int remap_vmalloc_range_partial(struct vm_area_struct * vma, unsigned long uaddr, void * kaddr, unsigned long size)'/>
<use f='linux-5.3.1/fs/proc/vmcore.c' l='626' u='c' c='mmap_vmcore'/>
<def f='linux-5.3.1/mm/vmalloc.c' l='2982' ll='3018' type='int remap_vmalloc_range_partial(struct vm_area_struct * vma, unsigned long uaddr, void * kaddr, unsigned long size)'/>
<dec f='linux-5.3.1/mm/vmalloc.c' l='3019' type='int remap_vmalloc_range_partial(struct vm_area_struct * , unsigned long , void * , unsigned long )'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='3019' c='remap_vmalloc_range_partial'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='3019' u='a'/>
<use f='linux-5.3.1/mm/vmalloc.c' l='3038' u='c' c='remap_vmalloc_range'/>
<doc f='linux-5.3.1/mm/vmalloc.c' l='2966'>/**
 * remap_vmalloc_range_partial - map vmalloc pages to userspace
 * @vma:		vma to cover
 * @uaddr:		target user address to start at
 * @kaddr:		virtual address of vmalloc kernel memory
 * @size:		size of map area
 *
 * Returns:	0 for success, -Exxx on failure
 *
 * This function checks that @kaddr is a valid vmalloc&apos;ed area,
 * and that it is big enough to cover the range starting at
 * @uaddr in @vma. Will return failure if that criteria isn&apos;t
 * met.
 *
 * Similar to remap_pfn_range() (see mm/memory.c)
 */</doc>
