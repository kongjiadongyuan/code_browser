<dec f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_atomic.h' l='45' type='int intel_atomic_setup_scalers(struct drm_i915_private * dev_priv, struct intel_crtc * intel_crtc, struct intel_crtc_state * crtc_state)'/>
<def f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_atomic.c' l='310' ll='408' type='int intel_atomic_setup_scalers(struct drm_i915_private * dev_priv, struct intel_crtc * intel_crtc, struct intel_crtc_state * crtc_state)'/>
<doc f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_atomic.c' l='293'>/**
 * intel_atomic_setup_scalers() - setup scalers for crtc per staged requests
 * @dev_priv: i915 device
 * @intel_crtc: intel crtc
 * @crtc_state: incoming crtc_state to validate and setup scalers
 *
 * This function sets up scalers based on staged scaling requests for
 * a @crtc and its planes. It is called from crtc level check path. If request
 * is a supportable request, it attaches scalers to requested planes and crtc.
 *
 * This function takes into account the current scaler(s) in use by any planes
 * not being part of this atomic state
 *
 *  Returns:
 *         0 - scalers were setup succesfully
 *         error code - otherwise
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='11675' u='c' c='intel_crtc_atomic_check'/>
