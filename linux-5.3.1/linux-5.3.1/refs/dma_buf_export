<dec f='linux-5.3.1/include/linux/dma-buf.h' l='402' type='struct dma_buf * dma_buf_export(const struct dma_buf_export_info * exp_info)'/>
<def f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='506' ll='575' type='struct dma_buf * dma_buf_export(const struct dma_buf_export_info * exp_info)'/>
<dec f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='576' type='struct dma_buf * dma_buf_export(const struct dma_buf_export_info * )'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='576' c='dma_buf_export'/>
<use f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='576' u='a'/>
<doc f='linux-5.3.1/drivers/dma-buf/dma-buf.c' l='489'>/**
 * dma_buf_export - Creates a new dma_buf, and associates an anon file
 * with this buffer, so it can be exported.
 * Also connect the allocator specific data and ops to the buffer.
 * Additionally, provide a name string for exporter; useful in debugging.
 *
 * @exp_info:	[in]	holds all the export related information provided
 *			by the exporter. see &amp;struct dma_buf_export_info
 *			for further details.
 *
 * Returns, on success, a newly created dma_buf object, which wraps the
 * supplied private data and operations for dma_buf_ops. On either missing
 * ops, or error in allocating struct dma_buf, will return negative error.
 *
 * For most cases the easiest way to create @exp_info is through the
 * %DEFINE_DMA_BUF_EXPORT_INFO macro.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_prime.c' l='321' u='c' c='drm_gem_dmabuf_export'/>
