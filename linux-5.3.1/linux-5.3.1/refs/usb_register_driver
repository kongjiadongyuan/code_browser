<dec f='linux-5.3.1/include/linux/usb.h' l='1269' type='int usb_register_driver(struct usb_driver * , struct module * , const char * )'/>
<doc f='linux-5.3.1/include/linux/usb.h' l='1265'>/*
 * use these in module_init()/module_exit()
 * and don&apos;t forget MODULE_DEVICE_TABLE(usb, ...)
 */</doc>
<use f='linux-5.3.1/drivers/hid/usbhid/hid-core.c' l='1654' macro='1' u='c' c='hid_init'/>
<use f='linux-5.3.1/drivers/usb/class/usblp.c' l='1427' macro='1' u='c' c='usblp_driver_init'/>
<def f='linux-5.3.1/drivers/usb/core/driver.c' l='942' ll='981' type='int usb_register_driver(struct usb_driver * new_driver, struct module * owner, const char * mod_name)'/>
<dec f='linux-5.3.1/drivers/usb/core/driver.c' l='982' type='int usb_register_driver(struct usb_driver * , struct module * , const char * )'/>
<use f='linux-5.3.1/drivers/usb/core/driver.c' l='982' c='usb_register_driver'/>
<use f='linux-5.3.1/drivers/usb/core/driver.c' l='982' u='a'/>
<doc f='linux-5.3.1/drivers/usb/core/driver.c' l='926'>/**
 * usb_register_driver - register a USB interface driver
 * @new_driver: USB operations for the interface driver
 * @owner: module owner of this driver.
 * @mod_name: module name string
 *
 * Registers a USB interface driver with the USB core.  The list of
 * unattached interfaces will be rescanned whenever a new driver is
 * added, allowing the new driver to attach to any recognized interfaces.
 *
 * Return: A negative error code on failure and 0 on success.
 *
 * NOTE: if you want your driver to use the USB major number, you must call
 * usb_register_dev() to enable that functionality.  This function no longer
 * takes care of that.
 */</doc>
<use f='linux-5.3.1/drivers/usb/core/hub.c' l='5516' macro='1' u='c' c='usb_hub_init'/>
<use f='linux-5.3.1/drivers/usb/core/usb.c' l='1225' macro='1' u='c' c='usb_init'/>
<use f='linux-5.3.1/drivers/usb/storage/usb.c' l='1156' macro='1' u='c' c='usb_storage_driver_init'/>
