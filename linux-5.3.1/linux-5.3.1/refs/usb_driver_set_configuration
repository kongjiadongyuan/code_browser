<dec f='linux-5.3.1/include/linux/usb.h' l='1816' type='int usb_driver_set_configuration(struct usb_device * udev, int config)'/>
<doc f='linux-5.3.1/include/linux/usb.h' l='1815'>/* this request isn&apos;t really synchronous, but it belongs with the others */</doc>
<def f='linux-5.3.1/drivers/usb/core/message.c' l='2101' ll='2119' type='int usb_driver_set_configuration(struct usb_device * udev, int config)'/>
<dec f='linux-5.3.1/drivers/usb/core/message.c' l='2120' type='int usb_driver_set_configuration(struct usb_device * , int )'/>
<use f='linux-5.3.1/drivers/usb/core/message.c' l='2120' c='usb_driver_set_configuration'/>
<use f='linux-5.3.1/drivers/usb/core/message.c' l='2120' u='a'/>
<doc f='linux-5.3.1/drivers/usb/core/message.c' l='2081'>/**
 * usb_driver_set_configuration - Provide a way for drivers to change device configurations
 * @udev: the device whose configuration is being updated
 * @config: the configuration being chosen.
 * Context: In process context, must be able to sleep
 *
 * Device interface drivers are not allowed to change device configurations.
 * This is because changing configurations will destroy the interface the
 * driver is bound to and create new ones; it would be like a floppy-disk
 * driver telling the computer to replace the floppy-disk drive with a
 * tape drive!
 *
 * Still, in certain specialized circumstances the need may arise.  This
 * routine gets around the normal restrictions by using a work thread to
 * submit the change-config request.
 *
 * Return: 0 if the request was successfully queued, error code otherwise.
 * The caller has no way to know whether the queued request will eventually
 * succeed.
 */</doc>
