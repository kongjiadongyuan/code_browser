<dec f='linux-5.3.1/include/linux/percpu-refcount.h' l='109' type='int percpu_ref_init(struct percpu_ref * ref, percpu_ref_func_t * release, unsigned int flags, gfp_t gfp)'/>
<use f='linux-5.3.1/include/linux/genhd.h' l='681' u='c' c='hd_ref_init'/>
<use f='linux-5.3.1/block/blk-core.c' l='530' u='c' c='blk_alloc_queue_node'/>
<use f='linux-5.3.1/drivers/md/md.c' l='5319' u='c' c='mddev_init_writes_pending'/>
<use f='linux-5.3.1/fs/aio.c' l='750' u='c' c='ioctx_alloc'/>
<use f='linux-5.3.1/fs/aio.c' l='753' u='c' c='ioctx_alloc'/>
<use f='linux-5.3.1/fs/io_uring.c' l='403' u='c' c='io_ring_ctx_alloc'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='2006' u='c' c='cgroup_setup_root'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='5164' u='c' c='css_create'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='5219' u='c' c='cgroup_create'/>
<def f='linux-5.3.1/lib/percpu-refcount.c' l='60' ll='92' type='int percpu_ref_init(struct percpu_ref * ref, percpu_ref_func_t * release, unsigned int flags, gfp_t gfp)'/>
<dec f='linux-5.3.1/lib/percpu-refcount.c' l='93' type='int percpu_ref_init(struct percpu_ref * , percpu_ref_func_t * , unsigned int , gfp_t )'/>
<use f='linux-5.3.1/lib/percpu-refcount.c' l='93' c='percpu_ref_init'/>
<use f='linux-5.3.1/lib/percpu-refcount.c' l='93' u='a'/>
<doc f='linux-5.3.1/lib/percpu-refcount.c' l='46'>/**
 * percpu_ref_init - initialize a percpu refcount
 * @ref: percpu_ref to initialize
 * @release: function which will be called when refcount hits 0
 * @flags: PERCPU_REF_INIT_* flags
 * @gfp: allocation mask to use
 *
 * Initializes @ref.  If @flags is zero, @ref starts in percpu mode with a
 * refcount of 1; analagous to atomic_long_set(ref, 1).  See the
 * definitions of PERCPU_REF_INIT_* flags for flag behaviors.
 *
 * Note that @release must not sleep - it may potentially be called from RCU
 * callback context by percpu_ref_kill().
 */</doc>
