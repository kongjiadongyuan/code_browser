<dec f='linux-5.3.1/include/linux/hid.h' l='898' type='void hid_setup_resolution_multiplier(struct hid_device * hid)'/>
<def f='linux-5.3.1/drivers/hid/hid-core.c' l='1097' ll='1119' type='void hid_setup_resolution_multiplier(struct hid_device * hid)'/>
<dec f='linux-5.3.1/drivers/hid/hid-core.c' l='1120' type='void hid_setup_resolution_multiplier(struct hid_device * )'/>
<use f='linux-5.3.1/drivers/hid/hid-core.c' l='1120' c='hid_setup_resolution_multiplier'/>
<use f='linux-5.3.1/drivers/hid/hid-core.c' l='1120' u='a'/>
<use f='linux-5.3.1/drivers/hid/hid-core.c' l='1223' u='c' c='hid_open_report'/>
<doc f='linux-5.3.1/drivers/hid/hid-core.c' l='1074'>/*
 * hid_setup_resolution_multiplier - set up all resolution multipliers
 *
 * @device: hid device
 *
 * Search for all Resolution Multiplier Feature Reports and apply their
 * value to all matching Input items. This only updates the internal struct
 * fields.
 *
 * The Resolution Multiplier is applied by the hardware. If the multiplier
 * is anything other than 1, the hardware will send pre-multiplied events
 * so that the same physical interaction generates an accumulated
 *	accumulated_value = value * * multiplier
 * This may be achieved by sending
 * - &quot;value * multiplier&quot; for each event, or
 * - &quot;value&quot; but &quot;multiplier&quot; times as frequently, or
 * - a combination of the above
 * The only guarantee is that the same physical interaction always generates
 * an accumulated &apos;value * multiplier&apos;.
 *
 * This function must be called before any event processing and after
 * any SetRequest to the Resolution Multiplier.
 */</doc>
<use f='linux-5.3.1/drivers/hid/hid-input.c' l='1618' u='c' c='hidinput_change_resolution_multipliers'/>
