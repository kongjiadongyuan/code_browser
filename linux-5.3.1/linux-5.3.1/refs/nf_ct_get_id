<dec f='linux-5.3.1/include/net/netfilter/nf_conntrack.h' l='319' type='u32 nf_ct_get_id(const struct nf_conn * ct)'/>
<def f='linux-5.3.1/net/netfilter/nf_conntrack_core.c' l='463' ll='481' type='u32 nf_ct_get_id(const struct nf_conn * ct)'/>
<dec f='linux-5.3.1/net/netfilter/nf_conntrack_core.c' l='482' type='u32 nf_ct_get_id(const struct nf_conn * )'/>
<use f='linux-5.3.1/net/netfilter/nf_conntrack_core.c' l='482' c='nf_ct_get_id'/>
<use f='linux-5.3.1/net/netfilter/nf_conntrack_core.c' l='482' u='a'/>
<doc f='linux-5.3.1/net/netfilter/nf_conntrack_core.c' l='450'>/* Generate a almost-unique pseudo-id for a given conntrack.
 *
 * intentionally doesn&apos;t re-use any of the seeds used for hash
 * table location, we assume id gets exposed to userspace.
 *
 * Following nf_conn items do not change throughout lifetime
 * of the nf_conn:
 *
 * 1. nf_conn address
 * 2. nf_conn-&gt;master address (normally NULL)
 * 3. the associated net namespace
 * 4. the original direction tuple
 */</doc>
<use f='linux-5.3.1/net/netfilter/nf_conntrack_netlink.c' l='489' u='c' c='ctnetlink_dump_id'/>
<use f='linux-5.3.1/net/netfilter/nf_conntrack_netlink.c' l='1300' u='c' c='ctnetlink_del_conntrack'/>
