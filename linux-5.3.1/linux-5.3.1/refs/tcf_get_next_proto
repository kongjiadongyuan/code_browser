<dec f='linux-5.3.1/include/net/pkt_cls.h' l='44' type='struct tcf_proto * tcf_get_next_proto(struct tcf_chain * chain, struct tcf_proto * tp, bool rtnl_held)'/>
<def f='linux-5.3.1/net/sched/cls_api.c' l='1114' ll='1124' type='struct tcf_proto * tcf_get_next_proto(struct tcf_chain * chain, struct tcf_proto * tp, bool rtnl_held)'/>
<dec f='linux-5.3.1/net/sched/cls_api.c' l='1125' type='struct tcf_proto * tcf_get_next_proto(struct tcf_chain * , struct tcf_proto * , bool )'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1125' c='tcf_get_next_proto'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1125' u='a'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1962' u='c' c='tfilter_notify_chain'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='1963' u='c' c='tfilter_notify_chain'/>
<doc f='linux-5.3.1/net/sched/cls_api.c' l='1106'>/* Function to be used by all clients that want to iterate over all tp&apos;s on
 * chain. Users of this function must be tolerant to concurrent tp
 * insertion/deletion or ensure that no concurrent chain modification is
 * possible. Note that all netlink dump callbacks cannot guarantee to provide
 * consistent dump because rtnl lock is released each time skb is filled with
 * data and sent to user-space.
 */</doc>
<use f='linux-5.3.1/net/sched/sch_api.c' l='1933' u='c' c='tc_bind_tclass'/>
<use f='linux-5.3.1/net/sched/sch_api.c' l='1934' u='c' c='tc_bind_tclass'/>
