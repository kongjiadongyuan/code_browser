<dec f='linux-5.3.1/include/linux/mount.h' l='85' type='bool __mnt_is_readonly(struct vfsmount * mnt)'/>
<def f='linux-5.3.1/fs/namespace.c' l='246' ll='249' type='bool __mnt_is_readonly(struct vfsmount * mnt)'/>
<dec f='linux-5.3.1/fs/namespace.c' l='250' type='bool __mnt_is_readonly(struct vfsmount * )'/>
<use f='linux-5.3.1/fs/namespace.c' l='250' c='__mnt_is_readonly'/>
<use f='linux-5.3.1/fs/namespace.c' l='250' u='a'/>
<use f='linux-5.3.1/fs/namespace.c' l='292' u='c' c='mnt_is_readonly'/>
<use f='linux-5.3.1/fs/namespace.c' l='377' u='c' c='mnt_clone_write'/>
<use f='linux-5.3.1/fs/namespace.c' l='2444' u='c' c='change_mount_ro_state'/>
<doc f='linux-5.3.1/fs/namespace.c' l='235'>/*
 * __mnt_is_readonly: check whether a mount is read-only
 * @mnt: the mount to check for its write status
 *
 * This shouldn&apos;t be used directly ouside of the VFS.
 * It does not guarantee that the filesystem will stay
 * r/w, just that it is right *now*.  This can not and
 * should not be used in place of IS_RDONLY(inode).
 * mnt_want/drop_write() will _keep_ the filesystem
 * r/w.
 */</doc>
<use f='linux-5.3.1/fs/open.c' l='428' u='c' c='do_faccessat'/>
<use f='linux-5.3.1/fs/proc_namespace.c' l='119' u='c' c='show_vfsmnt'/>
