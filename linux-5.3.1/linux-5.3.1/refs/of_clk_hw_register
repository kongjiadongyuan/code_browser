<dec f='linux-5.3.1/include/linux/clk-provider.h' l='797' type='int of_clk_hw_register(struct device_node * node, struct clk_hw * hw)'/>
<use f='linux-5.3.1/drivers/clk/clk-fixed-factor.c' l='100' u='c' c='__clk_hw_register_fixed_factor'/>
<def f='linux-5.3.1/drivers/clk/clk.c' l='3710' ll='3713' type='int of_clk_hw_register(struct device_node * node, struct clk_hw * hw)'/>
<dec f='linux-5.3.1/drivers/clk/clk.c' l='3714' type='int of_clk_hw_register(struct device_node * , struct clk_hw * )'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='3714' c='of_clk_hw_register'/>
<use f='linux-5.3.1/drivers/clk/clk.c' l='3714' u='a'/>
<doc f='linux-5.3.1/drivers/clk/clk.c' l='3699'>/*
 * of_clk_hw_register - register a clk_hw and return an error code
 * @node: device_node of device that is registering this clock
 * @hw: link to hardware-specific clock data
 *
 * of_clk_hw_register() is the primary interface for populating the clock tree
 * with new clock nodes when a struct device is not available, but a struct
 * device_node is. It returns an integer equal to zero indicating success or
 * less than zero indicating failure. Drivers must test for an error code after
 * calling of_clk_hw_register().
 */</doc>
