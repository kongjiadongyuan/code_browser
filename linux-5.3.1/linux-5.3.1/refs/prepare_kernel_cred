<dec f='linux-5.3.1/include/linux/cred.h' l='166' type='struct cred * prepare_kernel_cred(struct task_struct * )'/>
<use f='linux-5.3.1/fs/nfs/nfs4idmap.c' l='205' u='c' c='nfs_idmap_init'/>
<def f='linux-5.3.1/kernel/cred.c' l='681' ll='729' type='struct cred * prepare_kernel_cred(struct task_struct * daemon)'/>
<dec f='linux-5.3.1/kernel/cred.c' l='730' type='struct cred * prepare_kernel_cred(struct task_struct * )'/>
<use f='linux-5.3.1/kernel/cred.c' l='730' c='prepare_kernel_cred'/>
<use f='linux-5.3.1/kernel/cred.c' l='730' u='a'/>
<doc f='linux-5.3.1/kernel/cred.c' l='663'>/**
 * prepare_kernel_cred - Prepare a set of credentials for a kernel service
 * @daemon: A userspace daemon to be used as a reference
 *
 * Prepare a set of credentials for a kernel service.  This can then be used to
 * override a task&apos;s own credentials so that work can be done on behalf of that
 * task that requires a different subjective context.
 *
 * @daemon is used to provide a base for the security record, but can be NULL.
 * If @daemon is supplied, then the security data will be derived from that;
 * otherwise they&apos;ll be set to 0 and no groups, full capabilities and no keys.
 *
 * The caller may change these controls afterwards if desired.
 *
 * Returns the new credentials or NULL if out of memory.
 *
 * Does not take, and does not return holding current-&gt;cred_replace_mutex.
 */</doc>
<use f='linux-5.3.1/kernel/umh.c' l='85' u='c' c='call_usermodehelper_exec_async'/>
<use f='linux-5.3.1/net/dns_resolver/dns_key.c' l='340' u='c' c='init_dns_resolver'/>
