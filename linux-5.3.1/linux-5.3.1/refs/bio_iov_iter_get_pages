<dec f='linux-5.3.1/include/linux/bio.h' l='442' type='int bio_iov_iter_get_pages(struct bio * bio, struct iov_iter * iter)'/>
<def f='linux-5.3.1/block/bio.c' l='944' ll='962' type='int bio_iov_iter_get_pages(struct bio * bio, struct iov_iter * iter)'/>
<doc f='linux-5.3.1/block/bio.c' l='924'>/**
 * bio_iov_iter_get_pages - add user or kernel pages to a bio
 * @bio: bio to add pages to
 * @iter: iov iterator describing the region to be added
 *
 * This takes either an iterator pointing to user memory, or one pointing to
 * kernel pages (BVEC iterator). If we&apos;re adding user pages, we pin them and
 * map them into the kernel. On IO completion, the caller should put those
 * pages. If we&apos;re adding kernel pages, and the caller told us it&apos;s safe to
 * do so, we just have to add the pages to the bio directly. We don&apos;t grab an
 * extra reference to those pages (the user should already have that), and we
 * don&apos;t put the page on IO completion. The caller needs to check if the bio is
 * flagged BIO_NO_PAGE_REF on IO completion. If it isn&apos;t, then pages should be
 * released.
 *
 * The function tries, but does not guarantee, to pin as many pages as
 * fit into the bio, or are requested in *iter, whatever is smaller. If
 * MM encounters an error pinning the requested pages, it stops. Error
 * is returned only if 0 pages could be pinned.
 */</doc>
<use f='linux-5.3.1/fs/block_dev.c' l='235' u='c' c='__blkdev_direct_IO_simple'/>
<use f='linux-5.3.1/fs/block_dev.c' l='386' u='c' c='__blkdev_direct_IO'/>
<use f='linux-5.3.1/fs/iomap/direct-io.c' l='275' u='c' c='iomap_dio_bio_actor'/>
