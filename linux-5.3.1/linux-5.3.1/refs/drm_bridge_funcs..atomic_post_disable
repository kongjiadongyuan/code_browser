<dec f='linux-5.3.1/include/drm/drm_bridge.h' l='335' type='void (*)(struct drm_bridge *, struct drm_atomic_state *)'/>
<offset>768</offset>
<doc f='linux-5.3.1/include/drm/drm_bridge.h' l='313'>/**
	 * @atomic_post_disable:
	 *
	 * This callback should disable the bridge. It is called right after the
	 * preceding element in the display pipe is disabled. If the preceding
	 * element is a bridge this means it&apos;s called after that bridge&apos;s
	 * @atomic_post_disable or @post_disable function. If the preceding
	 * element is a &amp;drm_encoder it&apos;s called right after the encoder&apos;s
	 * &amp;drm_encoder_helper_funcs.atomic_disable hook.
	 *
	 * The bridge must assume that the display pipe (i.e. clocks and timing
	 * signals) feeding it is no longer running when this callback is
	 * called.
	 *
	 * Note that this function will only be invoked in the context of an
	 * atomic commit. It will not be invoked from &amp;drm_bridge_post_disable.
	 * It would be prudent to also provide an implementation of
	 * @post_disable if you are expecting driver calls into
	 * &amp;drm_bridge_post_disable.
	 *
	 * The post_disable callback is optional.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_bridge.c' l='401' u='r' c='drm_atomic_bridge_post_disable'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_bridge.c' l='402' u='r' c='drm_atomic_bridge_post_disable'/>
