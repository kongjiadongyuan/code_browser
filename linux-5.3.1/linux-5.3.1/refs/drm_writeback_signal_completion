<dec f='linux-5.3.1/include/drm/drm_writeback.h' l='157' type='void drm_writeback_signal_completion(struct drm_writeback_connector * wb_connector, int status)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='363' ll='390' type='void drm_writeback_signal_completion(struct drm_writeback_connector * wb_connector, int status)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='391' type='void drm_writeback_signal_completion(struct drm_writeback_connector * , int )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='391' c='drm_writeback_signal_completion'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='391' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_writeback.c' l='347'>/**
 * drm_writeback_signal_completion - Signal the completion of a writeback job
 * @wb_connector: The writeback connector whose job is complete
 * @status: Status code to set in the writeback out_fence (0 for success)
 *
 * Drivers should call this to signal the completion of a previously queued
 * writeback job. It should be called as soon as possible after the hardware
 * has finished writing, and may be called from interrupt context.
 * It is the driver&apos;s responsibility to ensure that for a given connector, the
 * hardware completes writeback jobs in the same order as they are queued.
 *
 * Unless the driver is holding its own reference to the framebuffer, it must
 * not be accessed after calling this function.
 *
 * See also: drm_writeback_queue_job()
 */</doc>
