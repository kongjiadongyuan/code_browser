<dec f='linux-5.3.1/include/linux/mm.h' l='2435' type='vm_fault_t filemap_fault(struct vm_fault * vmf)'/>
<doc f='linux-5.3.1/include/linux/mm.h' l='2434'>/* generic vm_area_ops exported for stackable file systems */</doc>
<use f='linux-5.3.1/fs/aio.c' l='358'/>
<use f='linux-5.3.1/fs/aio.c' l='358'/>
<use f='linux-5.3.1/fs/ext4/inode.c' l='6313' u='c' c='ext4_filemap_fault'/>
<use f='linux-5.3.1/fs/nfs/file.c' l='578'/>
<use f='linux-5.3.1/fs/nfs/file.c' l='578'/>
<def f='linux-5.3.1/mm/filemap.c' l='2517' ll='2640' type='vm_fault_t filemap_fault(struct vm_fault * vmf)'/>
<dec f='linux-5.3.1/mm/filemap.c' l='2641' type='vm_fault_t filemap_fault(struct vm_fault * )'/>
<use f='linux-5.3.1/mm/filemap.c' l='2641' c='filemap_fault'/>
<use f='linux-5.3.1/mm/filemap.c' l='2641' u='a'/>
<use f='linux-5.3.1/mm/filemap.c' l='2744'/>
<use f='linux-5.3.1/mm/filemap.c' l='2744'/>
<doc f='linux-5.3.1/mm/filemap.c' l='2494'>/**
 * filemap_fault - read in file data for page fault handling
 * @vmf:	struct vm_fault containing details of the fault
 *
 * filemap_fault() is invoked via the vma operations vector for a
 * mapped memory region to read in file data during a page fault.
 *
 * The goto&apos;s are kind of ugly, but this streamlines the normal case of having
 * it in the page cache, and handles the special cases reasonably without
 * having a lot of duplicated code.
 *
 * vma-&gt;vm_mm-&gt;mmap_sem must be held on entry.
 *
 * If our return value has VM_FAULT_RETRY set, it&apos;s because the mmap_sem
 * may be dropped before doing I/O or by lock_page_maybe_drop_mmap().
 *
 * If our return value does not have VM_FAULT_RETRY set, the mmap_sem
 * has not been released.
 *
 * We never return with VM_FAULT_RETRY and a bit from VM_FAULT_ERROR set.
 *
 * Return: bitwise-OR of %VM_FAULT_ codes.
 */</doc>
