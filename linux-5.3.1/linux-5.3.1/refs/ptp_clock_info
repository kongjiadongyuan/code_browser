<def f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='119' ll='143'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='129'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='130'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='131'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='132'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='133'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='135'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='137'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='138'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='140'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='142'/>
<use f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='186' c='ptp_clock_register'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.h' l='3190'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='6195' c='tg3_ptp_adjfreq'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='6231' c='tg3_ptp_adjtime'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='6242' c='tg3_ptp_gettimex'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='6258' c='tg3_ptp_settime'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='6274' c='tg3_ptp_enable'/>
<use f='linux-5.3.1/drivers/net/ethernet/broadcom/tg3.c' l='6333'/>
<size>136</size>
<doc f='linux-5.3.1/include/linux/ptp_clock_kernel.h' l='38'>/**
 * struct ptp_clock_info - decribes a PTP hardware clock
 *
 * @owner:     The clock driver should set to THIS_MODULE.
 * @name:      A short &quot;friendly name&quot; to identify the clock and to
 *             help distinguish PHY based devices from MAC based ones.
 *             The string is not meant to be a unique id.
 * @max_adj:   The maximum possible frequency adjustment, in parts per billon.
 * @n_alarm:   The number of programmable alarms.
 * @n_ext_ts:  The number of external time stamp channels.
 * @n_per_out: The number of programmable periodic signals.
 * @n_pins:    The number of programmable pins.
 * @pps:       Indicates whether the clock supports a PPS callback.
 * @pin_config: Array of length &apos;n_pins&apos;. If the number of
 *              programmable pins is nonzero, then drivers must
 *              allocate and initialize this array.
 *
 * clock operations
 *
 * @adjfine:  Adjusts the frequency of the hardware clock.
 *            parameter scaled_ppm: Desired frequency offset from
 *            nominal frequency in parts per million, but with a
 *            16 bit binary fractional field.
 *
 * @adjfreq:  Adjusts the frequency of the hardware clock.
 *            This method is deprecated.  New drivers should implement
 *            the @adjfine method instead.
 *            parameter delta: Desired frequency offset from nominal frequency
 *            in parts per billion
 *
 * @adjtime:  Shifts the time of the hardware clock.
 *            parameter delta: Desired change in nanoseconds.
 *
 * @gettime64:  Reads the current time from the hardware clock.
 *              This method is deprecated.  New drivers should implement
 *              the @gettimex64 method instead.
 *              parameter ts: Holds the result.
 *
 * @gettimex64:  Reads the current time from the hardware clock and optionally
 *               also the system clock.
 *               parameter ts: Holds the PHC timestamp.
 *               parameter sts: If not NULL, it holds a pair of timestamps from
 *               the system clock. The first reading is made right before
 *               reading the lowest bits of the PHC timestamp and the second
 *               reading immediately follows that.
 *
 * @getcrosststamp:  Reads the current time from the hardware clock and
 *                   system clock simultaneously.
 *                   parameter cts: Contains timestamp (device,system) pair,
 *                   where system time is realtime and monotonic.
 *
 * @settime64:  Set the current time on the hardware clock.
 *              parameter ts: Time value to set.
 *
 * @enable:   Request driver to enable or disable an ancillary feature.
 *            parameter request: Desired resource to enable or disable.
 *            parameter on: Caller passes one to enable or zero to disable.
 *
 * @verify:   Confirm that a pin can perform a given function. The PTP
 *            Hardware Clock subsystem maintains the &apos;pin_config&apos;
 *            array on behalf of the drivers, but the PHC subsystem
 *            assumes that every pin can perform every function. This
 *            hook gives drivers a way of telling the core about
 *            limitations on specific pins. This function must return
 *            zero if the function can be assigned to this pin, and
 *            nonzero otherwise.
 *            parameter pin: index of the pin in question.
 *            parameter func: the desired function to use.
 *            parameter chan: the function channel index to use.
 *
 * @do_work:  Request driver to perform auxiliary (periodic) operations
 *	      Driver should return delay of the next auxiliary work scheduling
 *	      time (&gt;=0) or negative value in case further scheduling
 *	      is not required.
 *
 * Drivers should embed their ptp_clock_info within a private
 * structure, obtaining a reference to it using container_of().
 *
 * The callbacks must all return zero on success, non-zero otherwise.
 */</doc>
<mbr r='ptp_clock_info::owner' o='0' t='struct module *'/>
<mbr r='ptp_clock_info::name' o='64' t='char [16]'/>
<mbr r='ptp_clock_info::max_adj' o='192' t='s32'/>
<mbr r='ptp_clock_info::n_alarm' o='224' t='int'/>
<mbr r='ptp_clock_info::n_ext_ts' o='256' t='int'/>
<mbr r='ptp_clock_info::n_per_out' o='288' t='int'/>
<mbr r='ptp_clock_info::n_pins' o='320' t='int'/>
<mbr r='ptp_clock_info::pps' o='352' t='int'/>
<mbr r='ptp_clock_info::pin_config' o='384' t='struct ptp_pin_desc *'/>
<mbr r='ptp_clock_info::adjfine' o='448' t='int (*)(struct ptp_clock_info *, long)'/>
<mbr r='ptp_clock_info::adjfreq' o='512' t='int (*)(struct ptp_clock_info *, s32)'/>
<mbr r='ptp_clock_info::adjtime' o='576' t='int (*)(struct ptp_clock_info *, s64)'/>
<mbr r='ptp_clock_info::gettime64' o='640' t='int (*)(struct ptp_clock_info *, struct timespec64 *)'/>
<mbr r='ptp_clock_info::gettimex64' o='704' t='int (*)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *)'/>
<mbr r='ptp_clock_info::getcrosststamp' o='768' t='int (*)(struct ptp_clock_info *, struct system_device_crosststamp *)'/>
<mbr r='ptp_clock_info::settime64' o='832' t='int (*)(struct ptp_clock_info *, const struct timespec64 *)'/>
<mbr r='ptp_clock_info::enable' o='896' t='int (*)(struct ptp_clock_info *, struct ptp_clock_request *, int)'/>
<mbr r='ptp_clock_info::verify' o='960' t='int (*)(struct ptp_clock_info *, unsigned int, enum ptp_pin_function, unsigned int)'/>
<mbr r='ptp_clock_info::do_aux_work' o='1024' t='long (*)(struct ptp_clock_info *)'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/e1000.h' l='329'/>
<size>136</size>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/netdev.c' l='3903' c='e1000e_systim_reset'/>
<size>136</size>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/ptp.c' l='25' c='e1000e_phc_adjfreq'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/ptp.c' l='78' c='e1000e_phc_adjtime'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/ptp.c' l='152' c='e1000e_phc_getcrosststamp'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/ptp.c' l='173' c='e1000e_phc_gettimex'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/ptp.c' l='203' c='e1000e_phc_settime'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/ptp.c' l='230' c='e1000e_phc_enable'/>
<use f='linux-5.3.1/drivers/net/ethernet/intel/e1000e/ptp.c' l='256'/>
<size>136</size>
<use f='linux-5.3.1/drivers/ptp/ptp_private.h' l='32'/>
<use f='linux-5.3.1/drivers/ptp/ptp_chardev.c' l='18' c='ptp_disable_pinfunc'/>
<use f='linux-5.3.1/drivers/ptp/ptp_chardev.c' l='51' c='ptp_set_pinfunc'/>
<use f='linux-5.3.1/drivers/ptp/ptp_chardev.c' l='115' c='ptp_ioctl'/>
<size>136</size>
<use f='linux-5.3.1/drivers/ptp/ptp_clock.c' l='118' c='ptp_clock_adjtime'/>
<use f='linux-5.3.1/drivers/ptp/ptp_clock.c' l='183' c='ptp_aux_kworker'/>
<use f='linux-5.3.1/drivers/ptp/ptp_clock.c' l='194' c='ptp_clock_register'/>
<size>136</size>
<use f='linux-5.3.1/drivers/ptp/ptp_sysfs.c' l='41' c='extts_enable_store'/>
<use f='linux-5.3.1/drivers/ptp/ptp_sysfs.c' l='101' c='period_store'/>
<use f='linux-5.3.1/drivers/ptp/ptp_sysfs.c' l='129' c='pps_enable_store'/>
<use f='linux-5.3.1/drivers/ptp/ptp_sysfs.c' l='173' c='ptp_is_attribute_visible'/>
<use f='linux-5.3.1/drivers/ptp/ptp_sysfs.c' l='260' c='ptp_populate_pin_groups'/>
<size>136</size>
