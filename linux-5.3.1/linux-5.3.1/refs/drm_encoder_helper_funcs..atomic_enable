<dec f='linux-5.3.1/include/drm/drm_modeset_helper_vtables.h' l='725' type='void (*)(struct drm_encoder *, struct drm_atomic_state *)'/>
<offset>640</offset>
<doc f='linux-5.3.1/include/drm/drm_modeset_helper_vtables.h' l='705'>/**
	 * @atomic_enable:
	 *
	 * This callback should be used to enable the encoder. It is called
	 * after this encoder&apos;s CRTC has been enabled using their own
	 * &amp;drm_crtc_helper_funcs.atomic_enable hook. If that sequence is
	 * too simple drivers can just add their own driver private encoder
	 * hooks and call them from CRTC&apos;s callback by looping over all encoders
	 * connected to it using for_each_encoder_on_crtc().
	 *
	 * This callback is a variant of @enable that provides the atomic state
	 * to the driver. If @atomic_enable is implemented, @enable is not
	 * called by the helpers.
	 *
	 * This hook is only used by atomic helpers, it is the opposite of
	 * @atomic_disable. Atomic drivers don&apos;t need to implement it if there&apos;s
	 * no need to enable anything at the encoder level. To ensure that
	 * runtime PM handling works @atomic_enable must be the inverse of
	 * @atomic_disable.
	 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='1347' u='r' c='drm_atomic_helper_commit_modeset_enables'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='1348' u='r' c='drm_atomic_helper_commit_modeset_enables'/>
