<dec f='linux-5.3.1/include/linux/xarray.h' l='525' type='int __xa_alloc(struct xarray * , u32 * id, void * entry, struct xa_limit , gfp_t )'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='823' u='c' c='xa_alloc'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='852' u='c' c='xa_alloc_bh'/>
<use f='linux-5.3.1/include/linux/xarray.h' l='881' u='c' c='xa_alloc_irq'/>
<def f='linux-5.3.1/lib/xarray.c' l='1601' ll='1626' type='int __xa_alloc(struct xarray * xa, u32 * id, void * entry, struct xa_limit limit, gfp_t gfp)'/>
<dec f='linux-5.3.1/lib/xarray.c' l='1627' type='int __xa_alloc(struct xarray * , u32 * , void * , struct xa_limit , gfp_t )'/>
<use f='linux-5.3.1/lib/xarray.c' l='1627' c='__xa_alloc'/>
<use f='linux-5.3.1/lib/xarray.c' l='1627' u='a'/>
<use f='linux-5.3.1/lib/xarray.c' l='1657' u='c' c='__xa_alloc_cyclic'/>
<use f='linux-5.3.1/lib/xarray.c' l='1665' u='c' c='__xa_alloc_cyclic'/>
<doc f='linux-5.3.1/lib/xarray.c' l='1584'>/**
 * __xa_alloc() - Find somewhere to store this entry in the XArray.
 * @xa: XArray.
 * @id: Pointer to ID.
 * @limit: Range for allocated ID.
 * @entry: New entry.
 * @gfp: Memory allocation flags.
 *
 * Finds an empty entry in @xa between @limit.min and @limit.max,
 * stores the index into the @id pointer, then stores the entry at
 * that index.  A concurrent lookup will not see an uninitialised @id.
 *
 * Context: Any context.  Expects xa_lock to be held on entry.  May
 * release and reacquire xa_lock if @gfp flags permit.
 * Return: 0 on success, -ENOMEM if memory could not be allocated or
 * -EBUSY if there are no free entries in @limit.
 */</doc>
