<dec f='linux-5.3.1/include/drm/drm_dp_helper.h' l='1176' type='u8 drm_dp_dsc_sink_line_buf_depth(const u8 * dsc_dpcd)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_dp_helper.c' l='1440' ll='1466' type='u8 drm_dp_dsc_sink_line_buf_depth(const u8 * dsc_dpcd)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_dp_helper.c' l='1467' type='u8 drm_dp_dsc_sink_line_buf_depth(const u8 * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_helper.c' l='1467' c='drm_dp_dsc_sink_line_buf_depth'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_helper.c' l='1467' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_dp_helper.c' l='1425'>/**
 * drm_dp_dsc_sink_line_buf_depth() - Get the line buffer depth in bits
 * @dsc_dpcd: DSC capabilities from DPCD
 *
 * Read the DSC DPCD register to parse the line buffer depth in bits which is
 * number of bits of precision within the decoder line buffer supported by
 * the DSC sink. This is used to populate the DSC parameters in the
 * &amp;struct drm_dsc_config by the driver.
 * Driver creates an infoframe using these parameters to populate
 * &amp;struct drm_dsc_pps_infoframe. These are sent to the sink using DSC
 * infoframe using the helper function drm_dsc_pps_infoframe_pack()
 *
 * Returns:
 * Line buffer depth supported by DSC panel or 0 its invalid
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_vdsc.c' l='360' u='c' c='intel_dp_compute_dsc_params'/>
