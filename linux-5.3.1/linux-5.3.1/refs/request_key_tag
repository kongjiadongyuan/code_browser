<dec f='linux-5.3.1/include/linux/key.h' l='295' type='struct key * request_key_tag(struct key_type * type, const char * description, struct key_tag * domain_tag, const char * callout_info)'/>
<use f='linux-5.3.1/include/linux/key.h' l='323' u='c' c='request_key'/>
<use f='linux-5.3.1/net/dns_resolver/dns_query.c' l='128' macro='1' u='c' c='dns_query'/>
<def f='linux-5.3.1/security/keys/request_key.c' l='690' ll='712' type='struct key * request_key_tag(struct key_type * type, const char * description, struct key_tag * domain_tag, const char * callout_info)'/>
<dec f='linux-5.3.1/security/keys/request_key.c' l='713' type='struct key * request_key_tag(struct key_type * , const char * , struct key_tag * , const char * )'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='713' c='request_key_tag'/>
<use f='linux-5.3.1/security/keys/request_key.c' l='713' u='a'/>
<doc f='linux-5.3.1/security/keys/request_key.c' l='675'>/**
 * request_key_tag - Request a key and wait for construction
 * @type: Type of key.
 * @description: The searchable description of the key.
 * @domain_tag: The domain in which the key operates.
 * @callout_info: The data to pass to the instantiation upcall (or NULL).
 *
 * As for request_key_and_link() except that it does not add the returned key
 * to a keyring if found, new keys are always allocated in the user&apos;s quota,
 * the callout_info must be a NUL-terminated string and no auxiliary data can
 * be passed.
 *
 * Furthermore, it then works as wait_for_key_construction() to wait for the
 * completion of keys undergoing construction with a non-interruptible wait.
 */</doc>
