<dec f='linux-5.3.1/include/drm/drm_framebuffer.h' l='225' type='void drm_framebuffer_cleanup(struct drm_framebuffer * fb)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='821' ll='829' type='void drm_framebuffer_cleanup(struct drm_framebuffer * fb)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='830' type='void drm_framebuffer_cleanup(struct drm_framebuffer * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='830' c='drm_framebuffer_cleanup'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='830' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_framebuffer.c' l='804'>/**
 * drm_framebuffer_cleanup - remove a framebuffer object
 * @fb: framebuffer to remove
 *
 * Cleanup framebuffer. This function is intended to be used from the drivers
 * &amp;drm_framebuffer_funcs.destroy callback. It can also be used to clean up
 * driver private framebuffers embedded into a larger structure.
 *
 * Note that this function does not remove the fb from active usage - if it is
 * still used anywhere, hilarity can ensue since userspace could call getfb on
 * the id and get back -EINVAL. Obviously no concern at driver unload time.
 *
 * Also, the framebuffer will not be removed from the lookup idr - for
 * user-created framebuffers this will happen in in the rmfb ioctl. For
 * driver-private objects (e.g. for fbdev) drivers need to explicitly call
 * drm_framebuffer_unregister_private.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='101' u='c' c='drm_gem_fb_destroy'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_display.c' l='15339' u='c' c='intel_user_framebuffer_destroy'/>
