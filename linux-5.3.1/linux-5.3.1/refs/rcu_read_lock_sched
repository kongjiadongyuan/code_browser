<def f='linux-5.3.1/include/linux/rcupdate.h' l='696' ll='703' type='void rcu_read_lock_sched()'/>
<use f='linux-5.3.1/include/linux/percpu-refcount.h' l='189' u='c' c='percpu_ref_get_many'/>
<use f='linux-5.3.1/include/linux/percpu-refcount.h' l='226' u='c' c='percpu_ref_tryget'/>
<use f='linux-5.3.1/include/linux/percpu-refcount.h' l='260' u='c' c='percpu_ref_tryget_live'/>
<use f='linux-5.3.1/include/linux/percpu-refcount.h' l='288' u='c' c='percpu_ref_put_many'/>
<doc f='linux-5.3.1/include/linux/rcupdate.h' l='684'>/**
 * rcu_read_lock_sched() - mark the beginning of a RCU-sched critical section
 *
 * This is equivalent of rcu_read_lock(), but disables preemption.
 * Read-side critical sections can also be introduced by anything else
 * that disables preemption, including local_irq_disable() and friends.
 *
 * Note that rcu_read_lock_sched() and the matching rcu_read_unlock_sched()
 * must occur in the same context, for example, it is illegal to invoke
 * rcu_read_unlock_sched() from process context if the matching
 * rcu_read_lock_sched() was invoked from an NMI handler.
 */</doc>
<use f='linux-5.3.1/fs/file.c' l='592' u='c' c='__fd_install'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2438' u='c' c='sched_dl_global_validate'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2485' u='c' c='sched_dl_do_global'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2679' u='c' c='dl_task_can_attach'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2709' u='c' c='dl_cpuset_cpumask_can_shrink'/>
<use f='linux-5.3.1/kernel/sched/deadline.c' l='2730' u='c' c='dl_cpu_busy'/>
<use f='linux-5.3.1/kernel/trace/trace_events.c' l='1007' u='c' c='p_start'/>
<use f='linux-5.3.1/lib/bug.c' l='71' u='c' c='module_find_bug'/>
<use f='linux-5.3.1/lib/bug.c' l='215' u='c' c='generic_bug_clear_once'/>
