<dec f='linux-5.3.1/include/drm/drm_atomic_helper.h' l='93' type='void drm_atomic_helper_commit_planes_on_crtc(struct drm_crtc_state * old_crtc_state)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='2498' ll='2541' type='void drm_atomic_helper_commit_planes_on_crtc(struct drm_crtc_state * old_crtc_state)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='2542' type='void drm_atomic_helper_commit_planes_on_crtc(struct drm_crtc_state * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='2542' c='drm_atomic_helper_commit_planes_on_crtc'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='2542' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_atomic_helper.c' l='2481'>/**
 * drm_atomic_helper_commit_planes_on_crtc - commit plane state for a crtc
 * @old_crtc_state: atomic state object with the old crtc state
 *
 * This function commits the new plane state using the plane and atomic helper
 * functions for planes on the specific crtc. It assumes that the atomic state
 * has already been pushed into the relevant object state pointers, since this
 * step can no longer fail.
 *
 * This function is useful when plane updates should be done crtc-by-crtc
 * instead of one global step like drm_atomic_helper_commit_planes() does.
 *
 * This function can only be savely used when planes are not allowed to move
 * between different CRTCs because this function doesn&apos;t handle inter-CRTC
 * depencies. Callers need to ensure that either no such depencies exist,
 * resolve them through ordering of commit calls or through some other means.
 */</doc>
