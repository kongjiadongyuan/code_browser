<dec f='linux-5.3.1/include/net/sock.h' l='1596' type='struct sock * sk_clone_lock(const struct sock * sk, const gfp_t priority)'/>
<def f='linux-5.3.1/net/core/sock.c' l='1788' ll='1896' type='struct sock * sk_clone_lock(const struct sock * sk, const gfp_t priority)'/>
<dec f='linux-5.3.1/net/core/sock.c' l='1897' type='struct sock * sk_clone_lock(const struct sock * , const gfp_t )'/>
<use f='linux-5.3.1/net/core/sock.c' l='1897' c='sk_clone_lock'/>
<use f='linux-5.3.1/net/core/sock.c' l='1897' u='a'/>
<doc f='linux-5.3.1/net/core/sock.c' l='1781'>/**
 *	sk_clone_lock - clone a socket, and lock its clone
 *	@sk: the socket to clone
 *	@priority: for allocation (%GFP_KERNEL, %GFP_ATOMIC, etc)
 *
 *	Caller must unlock socket even in error path (bh_unlock_sock(newsk))
 */</doc>
<use f='linux-5.3.1/net/ipv4/inet_connection_sock.c' l='785' u='c' c='inet_csk_clone_lock'/>
