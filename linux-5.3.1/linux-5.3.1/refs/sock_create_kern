<dec f='linux-5.3.1/include/linux/net.h' l='234' type='int sock_create_kern(struct net * net, int family, int type, int proto, struct socket ** res)'/>
<use f='linux-5.3.1/fs/io_uring.c' l='3292' u='c' c='io_uring_get_fd'/>
<use f='linux-5.3.1/net/ipv4/af_inet.c' l='1629' u='c' c='inet_ctl_sock_create'/>
<def f='linux-5.3.1/net/socket.c' l='1485' ll='1488' type='int sock_create_kern(struct net * net, int family, int type, int protocol, struct socket ** res)'/>
<dec f='linux-5.3.1/net/socket.c' l='1489' type='int sock_create_kern(struct net * , int , int , int , struct socket ** )'/>
<use f='linux-5.3.1/net/socket.c' l='1489' c='sock_create_kern'/>
<use f='linux-5.3.1/net/socket.c' l='1489' u='a'/>
<doc f='linux-5.3.1/net/socket.c' l='1473'>/**
 *	sock_create_kern - creates a socket (kernel space)
 *	@net: net namespace
 *	@family: protocol family (AF_INET, ...)
 *	@type: communication type (SOCK_STREAM, ...)
 *	@protocol: protocol (0, ...)
 *	@res: new socket
 *
 *	A wrapper around __sock_create().
 *	Returns 0 or an error. This function internally uses GFP_KERNEL.
 */</doc>
