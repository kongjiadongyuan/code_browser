<dec f='linux-5.3.1/include/linux/fs.h' l='2249' type='struct super_block * sget_fc(struct fs_context * fc, int (*)(struct super_block *, struct fs_context *) test, int (*)(struct super_block *, struct fs_context *) set)'/>
<use f='linux-5.3.1/fs/kernfs/mount.c' l='308' u='c' c='kernfs_get_tree'/>
<def f='linux-5.3.1/fs/super.c' l='505' ll='559' type='struct super_block * sget_fc(struct fs_context * fc, int (*)(struct super_block *, struct fs_context *) test, int (*)(struct super_block *, struct fs_context *) set)'/>
<dec f='linux-5.3.1/fs/super.c' l='560' type='struct super_block * sget_fc(struct fs_context * , int (*)(struct super_block *, struct fs_context *) , int (*)(struct super_block *, struct fs_context *) )'/>
<use f='linux-5.3.1/fs/super.c' l='560' c='sget_fc'/>
<use f='linux-5.3.1/fs/super.c' l='560' u='a'/>
<use f='linux-5.3.1/fs/super.c' l='1178' u='c' c='vfs_get_super'/>
<doc f='linux-5.3.1/fs/super.c' l='487'>/**
 * sget_fc - Find or create a superblock
 * @fc:	Filesystem context.
 * @test: Comparison callback
 * @set: Setup callback
 *
 * Find or create a superblock using the parameters stored in the filesystem
 * context and the two callback functions.
 *
 * If an extant superblock is matched, then that will be returned with an
 * elevated reference count that the caller must transfer or discard.
 *
 * If no match is made, a new superblock will be allocated and basic
 * initialisation will be performed (s_type, s_fs_info and s_id will be set and
 * the set() callback will be invoked), the superblock will be published and it
 * will be returned in a partially constructed state with SB_BORN and SB_ACTIVE
 * as yet unset.
 */</doc>
