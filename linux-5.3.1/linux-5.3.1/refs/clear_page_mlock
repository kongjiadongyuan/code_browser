<dec f='linux-5.3.1/mm/internal.h' l='320' type='void clear_page_mlock(struct page * page)'/>
<doc f='linux-5.3.1/mm/internal.h' l='311'>/*
 * Clear the page&apos;s PageMlocked().  This can be useful in a situation where
 * we want to unconditionally remove a page from the pagecache -- e.g.,
 * on truncation or freeing.
 *
 * It is legal to call this function for any page, mlocked or not.
 * If called for a page that is still mapped by mlocked vmas, all we do
 * is revert to lazy LRU behaviour -- semantics are not broken.
 */</doc>
<use f='linux-5.3.1/mm/migrate.c' l='275' u='c' c='remove_migration_pte'/>
<def f='linux-5.3.1/mm/mlock.c' l='59' ll='82' type='void clear_page_mlock(struct page * page)'/>
<doc f='linux-5.3.1/mm/mlock.c' l='56'>/*
 *  LRU accounting for clear_page_mlock()
 */</doc>
<use f='linux-5.3.1/mm/rmap.c' l='1203' u='c' c='page_add_file_rmap'/>
<use f='linux-5.3.1/mm/rmap.c' l='1250' u='c' c='page_remove_file_rmap'/>
<use f='linux-5.3.1/mm/rmap.c' l='1285' u='c' c='page_remove_anon_compound_rmap'/>
<use f='linux-5.3.1/mm/rmap.c' l='1320' u='c' c='page_remove_rmap'/>
