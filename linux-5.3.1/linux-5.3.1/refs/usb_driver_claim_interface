<dec f='linux-5.3.1/include/linux/usb.h' l='841' type='int usb_driver_claim_interface(struct usb_driver * driver, struct usb_interface * iface, void * priv)'/>
<doc f='linux-5.3.1/include/linux/usb.h' l='840'>/* used these for multi-interface device registration */</doc>
<use f='linux-5.3.1/drivers/usb/core/devio.c' l='738' u='c' c='claimintf'/>
<def f='linux-5.3.1/drivers/usb/core/driver.c' l='504' ll='561' type='int usb_driver_claim_interface(struct usb_driver * driver, struct usb_interface * iface, void * priv)'/>
<dec f='linux-5.3.1/drivers/usb/core/driver.c' l='562' type='int usb_driver_claim_interface(struct usb_driver * , struct usb_interface * , void * )'/>
<use f='linux-5.3.1/drivers/usb/core/driver.c' l='562' c='usb_driver_claim_interface'/>
<use f='linux-5.3.1/drivers/usb/core/driver.c' l='562' u='a'/>
<doc f='linux-5.3.1/drivers/usb/core/driver.c' l='482'>/**
 * usb_driver_claim_interface - bind a driver to an interface
 * @driver: the driver to be bound
 * @iface: the interface to which it will be bound; must be in the
 *	usb device&apos;s active configuration
 * @priv: driver data associated with that interface
 *
 * This is used by usb device drivers that need to claim more than one
 * interface on a device when probing (audio and acm are current examples).
 * No device driver should directly modify internal usb_interface or
 * usb_device structure members.
 *
 * Few drivers should need to use this routine, since the most natural
 * way to bind to an interface is to return the private data from
 * the driver&apos;s probe() method.
 *
 * Callers must own the device lock, so driver probe() entries don&apos;t need
 * extra locking, but other call contexts may need to explicitly claim that
 * lock.
 *
 * Return: 0 on success.
 */</doc>
