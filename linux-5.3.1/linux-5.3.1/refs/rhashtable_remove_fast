<def f='linux-5.3.1/include/linux/rhashtable.h' l='1115' ll='1120' type='int rhashtable_remove_fast(struct rhashtable * ht, struct rhash_head * obj, const struct rhashtable_params params)'/>
<doc f='linux-5.3.1/include/linux/rhashtable.h' l='1100'>/**
 * rhashtable_remove_fast - remove object from hash table
 * @ht:		hash table
 * @obj:	pointer to hash head inside object
 * @params:	hash table parameters
 *
 * Since the hash chain is single linked, the removal operation needs to
 * walk the bucket chain upon removal. The removal operation is thus
 * considerable slow if the hash table is not correctly sized.
 *
 * Will automatically shrink the table if permitted when residency drops
 * below 30%.
 *
 * Returns zero on success, -ENOENT if the entry could not be found.
 */</doc>
<use f='linux-5.3.1/ipc/util.c' l='449' u='c' c='ipc_kht_remove'/>
<use f='linux-5.3.1/net/core/xdp.c' l='110' u='c' c='__mem_id_disconnect'/>
<use f='linux-5.3.1/net/ipv4/inet_fragment.c' l='210' u='c' c='inet_frag_kill'/>
<use f='linux-5.3.1/net/netlink/af_netlink.c' l='598' u='c' c='netlink_remove'/>
<use f='linux-5.3.1/net/sched/cls_api.c' l='630' u='c' c='tc_indr_block_dev_put'/>
<use f='linux-5.3.1/net/xfrm/xfrm_policy.c' l='1083' u='c' c='__xfrm_policy_inexact_prune_bin'/>
