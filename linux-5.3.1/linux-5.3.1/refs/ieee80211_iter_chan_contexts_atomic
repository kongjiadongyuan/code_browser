<dec f='linux-5.3.1/include/net/mac80211.h' l='5616' type='void ieee80211_iter_chan_contexts_atomic(struct ieee80211_hw * hw, void (*)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, void *) iter, void * iter_data)'/>
<doc f='linux-5.3.1/include/net/mac80211.h' l='5597'>/**
 * ieee80211_iter_chan_contexts_atomic - iterate channel contexts
 * @hw: pointre obtained from ieee80211_alloc_hw().
 * @iter: iterator function
 * @iter_data: data passed to iterator function
 *
 * Iterate all active channel contexts. This function is atomic and
 * doesn&apos;t acquire any locks internally that might be held in other
 * places while calling into the driver.
 *
 * The iterator will not find a context that&apos;s being added (during
 * the driver callback to add it) but will find it while it&apos;s being
 * removed.
 *
 * Note that during hardware restart, all contexts that existed
 * before the restart are considered already present so will be
 * found while iterating, whether they&apos;ve been re-added already
 * or not.
 */</doc>
<def f='linux-5.3.1/net/mac80211/chan.c' l='1781' ll='1796' type='void ieee80211_iter_chan_contexts_atomic(struct ieee80211_hw * hw, void (*)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, void *) iter, void * iter_data)'/>
<dec f='linux-5.3.1/net/mac80211/chan.c' l='1797' type='void ieee80211_iter_chan_contexts_atomic(struct ieee80211_hw * , void (*)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, void *) , void * )'/>
<use f='linux-5.3.1/net/mac80211/chan.c' l='1797' c='ieee80211_iter_chan_contexts_atomic'/>
<use f='linux-5.3.1/net/mac80211/chan.c' l='1797' u='a'/>
