<dec f='linux-5.3.1/include/linux/memblock.h' l='361' type='void * memblock_alloc_try_nid_raw(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<use f='linux-5.3.1/include/linux/memblock.h' l='377' u='c' c='memblock_alloc_raw'/>
<use f='linux-5.3.1/mm/hugetlb.c' l='2147' u='c' c='__alloc_bootmem_huge_page'/>
<def f='linux-5.3.1/mm/memblock.c' l='1503' ll='1520' type='void * memblock_alloc_try_nid_raw(phys_addr_t size, phys_addr_t align, phys_addr_t min_addr, phys_addr_t max_addr, int nid)'/>
<doc f='linux-5.3.1/mm/memblock.c' l='1484'>/**
 * memblock_alloc_try_nid_raw - allocate boot memory block without zeroing
 * memory and without panicking
 * @size: size of memory block to be allocated in bytes
 * @align: alignment of the region and block&apos;s size
 * @min_addr: the lower bound of the memory region from where the allocation
 *	  is preferred (phys address)
 * @max_addr: the upper bound of the memory region from where the allocation
 *	      is preferred (phys address), or %MEMBLOCK_ALLOC_ACCESSIBLE to
 *	      allocate only from memory limited by memblock.current_limit value
 * @nid: nid of the free area to find, %NUMA_NO_NODE for any node
 *
 * Public function, provides additional debug information (including caller
 * info), if enabled. Does not zero allocated memory, does not panic if request
 * cannot be satisfied.
 *
 * Return:
 * Virtual address of allocated memory block on success, NULL on failure.
 */</doc>
<use f='linux-5.3.1/mm/sparse-vmemmap.c' l='45' u='c' c='__earlyonly_bootmem_alloc'/>
<use f='linux-5.3.1/mm/sparse.c' l='478' u='c' c='sparse_buffer_init'/>
