<dec f='linux-5.3.1/include/net/mac80211.h' l='6331' type='bool ieee80211_txq_may_transmit(struct ieee80211_hw * hw, struct ieee80211_txq * txq)'/>
<doc f='linux-5.3.1/include/net/mac80211.h' l='6307'>/**
 * ieee80211_txq_may_transmit - check whether TXQ is allowed to transmit
 *
 * This function is used to check whether given txq is allowed to transmit by
 * the airtime scheduler, and can be used by drivers to access the airtime
 * fairness accounting without going using the scheduling order enfored by
 * next_txq().
 *
 * Returns %true if the airtime scheduler thinks the TXQ should be allowed to
 * transmit, and %false if it should be throttled. This function can also have
 * the side effect of rotating the TXQ in the scheduler rotation, which will
 * eventually bring the deficit to positive and allow the station to transmit
 * again.
 *
 * The API ieee80211_txq_may_transmit() also ensures that TXQ list will be
 * aligned aginst driver&apos;s own round-robin scheduler list. i.e it rotates
 * the TXQ list till it makes the requested node becomes the first entry
 * in TXQ list. Thus both the TXQ list and driver&apos;s list are in sync. If this
 * function returns %true, the driver is expected to schedule packets
 * for transmission, and then return the TXQ through ieee80211_return_txq().
 *
 * @hw: pointer as obtained from ieee80211_alloc_hw()
 * @txq: pointer obtained from station or virtual interface
 */</doc>
<def f='linux-5.3.1/net/mac80211/tx.c' l='3743' ll='3790' type='bool ieee80211_txq_may_transmit(struct ieee80211_hw * hw, struct ieee80211_txq * txq)'/>
<dec f='linux-5.3.1/net/mac80211/tx.c' l='3791' type='bool ieee80211_txq_may_transmit(struct ieee80211_hw * , struct ieee80211_txq * )'/>
<use f='linux-5.3.1/net/mac80211/tx.c' l='3791' c='ieee80211_txq_may_transmit'/>
<use f='linux-5.3.1/net/mac80211/tx.c' l='3791' u='a'/>
