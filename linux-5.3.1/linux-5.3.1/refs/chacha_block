<dec f='linux-5.3.1/include/crypto/chacha.h' l='37' type='void chacha_block(u32 * state, u8 * stream, int nrounds)'/>
<use f='linux-5.3.1/include/crypto/chacha.h' l='40' u='c' c='chacha20_block'/>
<def f='linux-5.3.1/lib/chacha.c' l='75' ll='88' type='void chacha_block(u32 * state, u8 * stream, int nrounds)'/>
<dec f='linux-5.3.1/lib/chacha.c' l='89' type='void chacha_block(u32 * , u8 * , int )'/>
<use f='linux-5.3.1/lib/chacha.c' l='89' c='chacha_block'/>
<use f='linux-5.3.1/lib/chacha.c' l='89' u='a'/>
<doc f='linux-5.3.1/lib/chacha.c' l='65'>/**
 * chacha_block - generate one keystream block and increment block counter
 * @state: input state matrix (16 32-bit words)
 * @stream: output keystream block (64 bytes)
 * @nrounds: number of rounds (20 or 12; 20 is recommended)
 *
 * This is the ChaCha core, a function from 64-byte strings to 64-byte strings.
 * The caller has already converted the endianness of the input.  This function
 * also handles incrementing the block counter in the input matrix.
 */</doc>
