<dec f='linux-5.3.1/include/linux/clocksource.h' l='204' type='void clocks_calc_mult_shift(u32 * mult, u32 * shift, u32 from, u32 to, u32 minsec)'/>
<use f='linux-5.3.1/include/linux/clockchips.h' l='195' u='c' c='clockevents_calc_mult_shift'/>
<use f='linux-5.3.1/arch/x86/kernel/tsc.c' l='136' u='c' c='__set_cyc2ns_scale'/>
<def f='linux-5.3.1/kernel/time/clocksource.c' l='44' ll='73' type='void clocks_calc_mult_shift(u32 * mult, u32 * shift, u32 from, u32 to, u32 maxsec)'/>
<dec f='linux-5.3.1/kernel/time/clocksource.c' l='74' type='void clocks_calc_mult_shift(u32 * , u32 * , u32 , u32 , u32 )'/>
<use f='linux-5.3.1/kernel/time/clocksource.c' l='74' c='clocks_calc_mult_shift'/>
<use f='linux-5.3.1/kernel/time/clocksource.c' l='74' u='a'/>
<use f='linux-5.3.1/kernel/time/clocksource.c' l='877' u='c' c='__clocksource_update_freq_scale'/>
<doc f='linux-5.3.1/kernel/time/clocksource.c' l='21'>/**
 * clocks_calc_mult_shift - calculate mult/shift factors for scaled math of clocks
 * @mult:	pointer to mult variable
 * @shift:	pointer to shift variable
 * @from:	frequency to convert from
 * @to:		frequency to convert to
 * @maxsec:	guaranteed runtime conversion range in seconds
 *
 * The function evaluates the shift/mult pair for the scaled math
 * operations of clocksources and clockevents.
 *
 * @to and @from are frequency values in HZ. For clock sources @to is
 * NSEC_PER_SEC == 1GHz and @from is the counter frequency. For clock
 * event @to is the counter frequency and @from is NSEC_PER_SEC.
 *
 * The @maxsec conversion range argument controls the time frame in
 * seconds which must be covered by the runtime conversion with the
 * calculated mult and shift factors. This guarantees that no 64bit
 * overflow happens when the input value of the conversion is
 * multiplied with the calculated mult factor. Larger ranges may
 * reduce the conversion accuracy by chosing smaller mult and shift
 * factors.
 */</doc>
