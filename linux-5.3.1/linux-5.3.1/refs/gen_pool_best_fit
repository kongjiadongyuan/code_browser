<dec f='linux-5.3.1/include/linux/genalloc.h' l='200' type='unsigned long gen_pool_best_fit(unsigned long * map, unsigned long size, unsigned long start, unsigned int nr, void * data, struct gen_pool * pool, unsigned long start_addr)'/>
<def f='linux-5.3.1/lib/genalloc.c' l='746' ll='769' type='unsigned long gen_pool_best_fit(unsigned long * map, unsigned long size, unsigned long start, unsigned int nr, void * data, struct gen_pool * pool, unsigned long start_addr)'/>
<dec f='linux-5.3.1/lib/genalloc.c' l='770' type='unsigned long gen_pool_best_fit(unsigned long * , unsigned long , unsigned long , unsigned int , void * , struct gen_pool * , unsigned long )'/>
<use f='linux-5.3.1/lib/genalloc.c' l='770' c='gen_pool_best_fit'/>
<use f='linux-5.3.1/lib/genalloc.c' l='770' u='a'/>
<doc f='linux-5.3.1/lib/genalloc.c' l='733'>/**
 * gen_pool_best_fit - find the best fitting region of memory
 * macthing the size requirement (no alignment constraint)
 * @map: The address to base the search on
 * @size: The bitmap size in bits
 * @start: The bitnumber to start searching at
 * @nr: The number of zeroed bits we&apos;re looking for
 * @data: additional data - unused
 * @pool: pool to find the fit region memory from
 *
 * Iterate over the bitmap to find the smallest free region
 * which we can allocate the memory.
 */</doc>
