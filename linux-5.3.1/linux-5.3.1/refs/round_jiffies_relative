<dec f='linux-5.3.1/include/linux/timer.h' l='211' type='unsigned long round_jiffies_relative(unsigned long j)'/>
<use f='linux-5.3.1/arch/x86/kernel/check.c' l='171' u='c' c='check_corruption'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/core.c' l='1432' u='c' c='mce_timer_fn'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/core.c' l='1432' u='c' c='mce_timer_fn'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/core.c' l='1432' u='c' c='mce_timer_fn'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/core.c' l='1432' u='c' c='mce_timer_fn'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/core.c' l='1432' u='c' c='mce_timer_fn'/>
<use f='linux-5.3.1/arch/x86/kernel/cpu/mce/core.c' l='1432' u='c' c='mce_timer_fn'/>
<use f='linux-5.3.1/drivers/ata/libata-scsi.c' l='4646' u='c' c='ata_scsi_scan_host'/>
<use f='linux-5.3.1/drivers/edac/edac_device.c' l='370' u='c' c='edac_device_workq_function'/>
<use f='linux-5.3.1/drivers/edac/edac_device.c' l='400' u='c' c='edac_device_workq_setup'/>
<use f='linux-5.3.1/drivers/edac/edac_device.c' l='432' u='c' c='edac_device_reset_delay_period'/>
<use f='linux-5.3.1/drivers/edac/edac_pci.c' l='189' u='c' c='edac_pci_workq_function'/>
<use f='linux-5.3.1/drivers/input/input-polldev.c' l='27' u='c' c='input_polldev_queue_work'/>
<def f='linux-5.3.1/kernel/time/timer.c' l='400' ll='403' type='unsigned long round_jiffies_relative(unsigned long j)'/>
<dec f='linux-5.3.1/kernel/time/timer.c' l='404' type='unsigned long round_jiffies_relative(unsigned long )'/>
<use f='linux-5.3.1/kernel/time/timer.c' l='404' c='round_jiffies_relative'/>
<use f='linux-5.3.1/kernel/time/timer.c' l='404' u='a'/>
<doc f='linux-5.3.1/kernel/time/timer.c' l='385'>/**
 * round_jiffies_relative - function to round jiffies to a full second
 * @j: the time in (relative) jiffies that should be rounded
 *
 * round_jiffies_relative() rounds a time delta  in the future (in jiffies)
 * up or down to (approximately) full seconds. This is useful for timers
 * for which the exact time they fire does not matter too much, as long as
 * they fire approximately every X seconds.
 *
 * By rounding these timers to whole seconds, all such timers will fire
 * at the same time, rather than at various times spread out. The goal
 * of this is to have the CPU wake up less, which saves power.
 *
 * The return value is the rounded version of the @j parameter.
 */</doc>
<use f='linux-5.3.1/mm/vmstat.c' l='1799' u='c' c='vmstat_update'/>
<use f='linux-5.3.1/mm/vmstat.c' l='1889' u='c' c='vmstat_shepherd'/>
<use f='linux-5.3.1/mm/vmstat.c' l='1901' u='c' c='start_shepherd_timer'/>
<use f='linux-5.3.1/net/mac80211/offchannel.c' l='428' u='c' c='ieee80211_start_next_roc'/>
<use f='linux-5.3.1/net/mac80211/scan.c' l='553' u='c' c='ieee80211_run_deferred_scan'/>
<use f='linux-5.3.1/net/rfkill/core.c' l='975' u='c' c='rfkill_poll'/>
<use f='linux-5.3.1/net/rfkill/core.c' l='1040' u='c' c='rfkill_register'/>
<use f='linux-5.3.1/net/sunrpc/cache.c' l='492' u='c' c='do_cache_clean'/>
