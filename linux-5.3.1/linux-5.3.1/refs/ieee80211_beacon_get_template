<dec f='linux-5.3.1/include/net/mac80211.h' l='4673' type='struct sk_buff * ieee80211_beacon_get_template(struct ieee80211_hw * hw, struct ieee80211_vif * vif, struct ieee80211_mutable_offsets * offs)'/>
<doc f='linux-5.3.1/include/net/mac80211.h' l='4653'>/**
 * ieee80211_beacon_get_template - beacon template generation function
 * @hw: pointer obtained from ieee80211_alloc_hw().
 * @vif: &amp;struct ieee80211_vif pointer from the add_interface callback.
 * @offs: &amp;struct ieee80211_mutable_offsets pointer to struct that will
 *	receive the offsets that may be updated by the driver.
 *
 * If the driver implements beaconing modes, it must use this function to
 * obtain the beacon template.
 *
 * This function should be used if the beacon frames are generated by the
 * device, and then the driver must use the returned beacon as the template
 * The driver or the device are responsible to update the DTIM and, when
 * applicable, the CSA count.
 *
 * The driver is responsible for freeing the returned skb.
 *
 * Return: The beacon template. %NULL on error.
 */</doc>
<def f='linux-5.3.1/net/mac80211/tx.c' l='4608' ll='4614' type='struct sk_buff * ieee80211_beacon_get_template(struct ieee80211_hw * hw, struct ieee80211_vif * vif, struct ieee80211_mutable_offsets * offs)'/>
<dec f='linux-5.3.1/net/mac80211/tx.c' l='4615' type='struct sk_buff * ieee80211_beacon_get_template(struct ieee80211_hw * , struct ieee80211_vif * , struct ieee80211_mutable_offsets * )'/>
<use f='linux-5.3.1/net/mac80211/tx.c' l='4615' c='ieee80211_beacon_get_template'/>
<use f='linux-5.3.1/net/mac80211/tx.c' l='4615' u='a'/>
