<dec f='linux-5.3.1/include/drm/drm_dp_mst_helper.h' l='636' type='int drm_dp_update_payload_part2(struct drm_dp_mst_topology_mgr * mgr)'/>
<def f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2415' ll='2441' type='int drm_dp_update_payload_part2(struct drm_dp_mst_topology_mgr * mgr)'/>
<dec f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2442' type='int drm_dp_update_payload_part2(struct drm_dp_mst_topology_mgr * )'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2442' c='drm_dp_update_payload_part2'/>
<use f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2442' u='a'/>
<doc f='linux-5.3.1/drivers/gpu/drm/drm_dp_mst_topology.c' l='2406'>/**
 * drm_dp_update_payload_part2() - Execute payload update part 2
 * @mgr: manager to use.
 *
 * This iterates over all proposed virtual channels, and tries to
 * allocate space in the link for them. For 0-&gt;slots transitions,
 * this step writes the remote VC payload commands. For slots-&gt;0
 * this just resets some internal state.
 */</doc>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp_mst.c' l='240' u='c' c='intel_mst_post_disable_dp'/>
<use f='linux-5.3.1/drivers/gpu/drm/i915/display/intel_dp_mst.c' l='358' u='c' c='intel_mst_enable_dp'/>
