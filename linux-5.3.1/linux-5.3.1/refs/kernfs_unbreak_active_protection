<dec f='linux-5.3.1/include/linux/kernfs.h' l='362' type='void kernfs_unbreak_active_protection(struct kernfs_node * kn)'/>
<def f='linux-5.3.1/fs/kernfs/dir.c' l='1395' ll='1409' type='void kernfs_unbreak_active_protection(struct kernfs_node * kn)'/>
<use f='linux-5.3.1/fs/kernfs/dir.c' l='1482' u='c' c='kernfs_remove_self'/>
<doc f='linux-5.3.1/fs/kernfs/dir.c' l='1380'>/**
 * kernfs_unbreak_active_protection - undo kernfs_break_active_protection()
 * @kn: the self kernfs_node
 *
 * If kernfs_break_active_protection() was called, this function must be
 * invoked before finishing the kernfs operation.  Note that while this
 * function restores the active reference, it doesn&apos;t and can&apos;t actually
 * restore the active protection - @kn may already or be in the process of
 * being removed.  Once kernfs_break_active_protection() is invoked, that
 * protection is irreversibly gone for the kernfs operation instance.
 *
 * While this function may be called at any point after
 * kernfs_break_active_protection() is invoked, its most useful location
 * would be right before the enclosing kernfs operation returns.
 */</doc>
<use f='linux-5.3.1/fs/sysfs/file.c' l='450' u='c' c='sysfs_unbreak_active_protection'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup-v1.c' l='863' u='c' c='cgroup1_rename'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup-v1.c' l='864' u='c' c='cgroup1_rename'/>
<use f='linux-5.3.1/kernel/cgroup/cgroup.c' l='1574' u='c' c='cgroup_kn_unlock'/>
<use f='linux-5.3.1/kernel/cgroup/cpuset.c' l='2310' u='c' c='cpuset_write_resmask'/>
