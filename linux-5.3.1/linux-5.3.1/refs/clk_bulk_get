<dec f='linux-5.3.1/include/linux/clk.h' l='310' type='int clk_bulk_get(struct device * dev, int num_clks, struct clk_bulk_data * clks)'/>
<doc f='linux-5.3.1/include/linux/clk.h' l='290'>/**
 * clk_bulk_get - lookup and obtain a number of references to clock producer.
 * @dev: device for clock &quot;consumer&quot;
 * @num_clks: the number of clk_bulk_data
 * @clks: the clk_bulk_data table of consumer
 *
 * This helper function allows drivers to get several clk consumers in one
 * operation. If any of the clk cannot be acquired then any clks
 * that were obtained will be freed before returning to the caller.
 *
 * Returns 0 if all clocks specified in clk_bulk_data table are obtained
 * successfully, or valid IS_ERR() condition containing errno.
 * The implementation uses @dev and @clk_bulk_data.id to determine the
 * clock consumer, and thereby the clock producer.
 * The clock returned is stored in each @clk_bulk_data.clk field.
 *
 * Drivers must assume that the clock source is not enabled.
 *
 * clk_bulk_get should not be called from within interrupt context.
 */</doc>
<def f='linux-5.3.1/drivers/clk/clk-bulk.c' l='111' ll='115' type='int clk_bulk_get(struct device * dev, int num_clks, struct clk_bulk_data * clks)'/>
<dec f='linux-5.3.1/drivers/clk/clk-bulk.c' l='116' type='int clk_bulk_get(struct device * , int , struct clk_bulk_data * )'/>
<use f='linux-5.3.1/drivers/clk/clk-bulk.c' l='116' c='clk_bulk_get'/>
<use f='linux-5.3.1/drivers/clk/clk-bulk.c' l='116' u='a'/>
<use f='linux-5.3.1/drivers/clk/clk-devres.c' l='69' u='c' c='__devm_clk_bulk_get'/>
