<dec f='linux-5.3.1/include/linux/kthread.h' l='55' type='int kthread_stop(struct task_struct * k)'/>
<use f='linux-5.3.1/drivers/block/loop.c' l='883' u='c' c='loop_unprepare_queue'/>
<use f='linux-5.3.1/drivers/char/hw_random/core.c' l='165' u='c' c='hwrng_init'/>
<use f='linux-5.3.1/drivers/char/hw_random/core.c' l='535' u='c' c='hwrng_unregister'/>
<use f='linux-5.3.1/drivers/md/md.c' l='7661' u='c' c='md_unregister_thread'/>
<use f='linux-5.3.1/drivers/pcmcia/cs.c' l='214' u='c' c='pcmcia_unregister_socket'/>
<use f='linux-5.3.1/drivers/scsi/hosts.c' l='323' u='c' c='scsi_host_dev_release'/>
<use f='linux-5.3.1/drivers/scsi/hosts.c' l='500' u='c' c='scsi_host_alloc'/>
<use f='linux-5.3.1/drivers/usb/storage/usb.c' l='812' u='c' c='usb_stor_release_resources'/>
<use f='linux-5.3.1/fs/ext4/super.c' l='1045' u='c' c='ext4_put_super'/>
<use f='linux-5.3.1/fs/ext4/super.c' l='3366' u='c' c='ext4_destroy_lazyinit_thread'/>
<use f='linux-5.3.1/fs/ext4/super.c' l='4649' u='c' c='ext4_fill_super'/>
<use f='linux-5.3.1/fs/ext4/super.c' l='5375' u='c' c='ext4_remount'/>
<use f='linux-5.3.1/fs/io_uring.c' l='2547' u='c' c='io_sq_thread_stop'/>
<use f='linux-5.3.1/fs/lockd/svc.c' l='528' u='c' c='lockd_down'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='1640' u='c' c='__setup_irq'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='1647' u='c' c='__setup_irq'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='1787' u='c' c='__free_irq'/>
<use f='linux-5.3.1/kernel/irq/manage.c' l='1790' u='c' c='__free_irq'/>
<def f='linux-5.3.1/kernel/kthread.c' l='547' ll='565' type='int kthread_stop(struct task_struct * k)'/>
<dec f='linux-5.3.1/kernel/kthread.c' l='566' type='int kthread_stop(struct task_struct * )'/>
<use f='linux-5.3.1/kernel/kthread.c' l='566' c='kthread_stop'/>
<use f='linux-5.3.1/kernel/kthread.c' l='566' u='a'/>
<use f='linux-5.3.1/kernel/kthread.c' l='1187' u='c' c='kthread_destroy_worker'/>
<doc f='linux-5.3.1/kernel/kthread.c' l='532'>/**
 * kthread_stop - stop a thread created by kthread_create().
 * @k: thread created by kthread_create().
 *
 * Sets kthread_should_stop() for @k to return true, wakes it, and
 * waits for it to exit. This can also be called after kthread_create()
 * instead of calling wake_up_process(): the thread will exit without
 * calling threadfn().
 *
 * If threadfn() may call do_exit() itself, the caller must ensure
 * task_struct can&apos;t go away.
 *
 * Returns the result of threadfn(), or %-EINTR if wake_up_process()
 * was never called.
 */</doc>
<use f='linux-5.3.1/kernel/power/swap.c' l='859' u='c' c='save_image_lzo'/>
<use f='linux-5.3.1/kernel/power/swap.c' l='865' u='c' c='save_image_lzo'/>
<use f='linux-5.3.1/kernel/power/swap.c' l='1454' u='c' c='load_image_lzo'/>
<use f='linux-5.3.1/kernel/power/swap.c' l='1460' u='c' c='load_image_lzo'/>
<use f='linux-5.3.1/kernel/smpboot.c' l='275' u='c' c='smpboot_destroy_threads'/>
<use f='linux-5.3.1/kernel/workqueue.c' l='4356' u='c' c='destroy_workqueue'/>
<use f='linux-5.3.1/mm/compaction.c' l='2697' u='c' c='kcompactd_stop'/>
<use f='linux-5.3.1/mm/vmscan.c' l='4024' u='c' c='kswapd_stop'/>
<use f='linux-5.3.1/net/sunrpc/svc.c' l='811' u='c' c='svc_stop_kthreads'/>
