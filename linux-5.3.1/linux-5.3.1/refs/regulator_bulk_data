<def f='linux-5.3.1/include/linux/regulator/consumer.h' l='167' ll='173'/>
<use f='linux-5.3.1/include/linux/regulator/consumer.h' l='420' c='regulator_bulk_get'/>
<use f='linux-5.3.1/include/linux/regulator/consumer.h' l='426' c='devm_regulator_bulk_get'/>
<use f='linux-5.3.1/include/linux/regulator/consumer.h' l='432' c='regulator_bulk_enable'/>
<use f='linux-5.3.1/include/linux/regulator/consumer.h' l='438' c='regulator_bulk_disable'/>
<use f='linux-5.3.1/include/linux/regulator/consumer.h' l='444' c='regulator_bulk_force_disable'/>
<use f='linux-5.3.1/include/linux/regulator/consumer.h' l='450' c='regulator_bulk_free'/>
<size>24</size>
<doc f='linux-5.3.1/include/linux/regulator/consumer.h' l='155'>/**
 * struct regulator_bulk_data - Data used for bulk regulator operations.
 *
 * @supply:   The name of the supply.  Initialised by the user before
 *            using the bulk regulator APIs.
 * @consumer: The regulator consumer for the supply.  This will be managed
 *            by the bulk API.
 *
 * The regulator APIs provide a series of regulator_bulk_() API calls as
 * a convenience to consumers which require multiple supplies.  This
 * structure is used to manage data for these calls.
 */</doc>
<mbr r='regulator_bulk_data::supply' o='0' t='const char *'/>
<mbr r='regulator_bulk_data::consumer' o='64' t='struct regulator *'/>
<mbr r='regulator_bulk_data::ret' o='128' t='int'/>
