<dec f='linux/include/drm/drm_crtc_helper.h' l='75' type='bool drm_helper_hpd_irq_event(struct drm_device * dev)'/>
<def f='linux/drivers/gpu/drm/drm_probe_helper.c' l='760' ll='795' type='bool drm_helper_hpd_irq_event(struct drm_device * dev)'/>
<dec f='linux/drivers/gpu/drm/drm_probe_helper.c' l='796' type='bool drm_helper_hpd_irq_event(struct drm_device * )'/>
<use f='linux/drivers/gpu/drm/drm_probe_helper.c' l='796' c='drm_helper_hpd_irq_event'/>
<use f='linux/drivers/gpu/drm/drm_probe_helper.c' l='796' u='a'/>
<use f='linux/drivers/gpu/drm/drm_probe_helper.c' l='796' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_probe_helper.c' l='737'>/**
 * drm_helper_hpd_irq_event - hotplug processing
 * @dev: drm_device
 *
 * Drivers can use this helper function to run a detect cycle on all connectors
 * which have the DRM_CONNECTOR_POLL_HPD flag set in their &amp;polled member. All
 * other connectors are ignored, which is useful to avoid reprobing fixed
 * panels.
 *
 * This helper function is useful for drivers which can&apos;t or don&apos;t track hotplug
 * interrupts for each connector.
 *
 * Drivers which support hotplug interrupts for each connector individually and
 * which have a more fine-grained detect logic should bypass this code and
 * directly call drm_kms_helper_hotplug_event() in case the connector state
 * changed.
 *
 * This function must be called from process context with no mode
 * setting locks held.
 *
 * Note that a connector can be both polled and probed from the hotplug handler,
 * in case the hotplug interrupt is known to be unreliable.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_hotplug.c' l='568' u='c' c='i915_hpd_poll_init_work'/>
