<dec f='linux/include/linux/kthread.h' l='62' type='int kthread_park(struct task_struct * k)'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='2905' u='c' c='i915_gem_reset_prepare_engine'/>
<use f='linux/kernel/cpu.c' l='760' u='c' c='takedown_cpu'/>
<def f='linux/kernel/kthread.c' l='484' ll='500' type='int kthread_park(struct task_struct * k)'/>
<dec f='linux/kernel/kthread.c' l='501' type='int kthread_park(struct task_struct * )'/>
<use f='linux/kernel/kthread.c' l='501' c='kthread_park'/>
<use f='linux/kernel/kthread.c' l='501' u='a'/>
<use f='linux/kernel/kthread.c' l='501' u='a'/>
<doc f='linux/kernel/kthread.c' l='472'>/**
 * kthread_park - park a thread created by kthread_create().
 * @k: thread created by kthread_create().
 *
 * Sets kthread_should_park() for @k to return true, wakes it, and
 * waits for it to return. This can also be called after kthread_create()
 * instead of calling wake_up_process(): the thread will park without
 * calling threadfn().
 *
 * Returns 0 if the thread is parked, -ENOSYS if the thread exited.
 * If called by the kthread itself just the park bit is set.
 */</doc>
<use f='linux/kernel/smpboot.c' l='194' u='c' c='__smpboot_create_thread'/>
<use f='linux/kernel/smpboot.c' l='252' u='c' c='smpboot_park_thread'/>
<use f='linux/kernel/stop_machine.c' l='502' u='c' c='stop_machine_park'/>
