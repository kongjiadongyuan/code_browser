<def f='linux/include/drm/drm_atomic.h' l='539' ll='547' type='const struct drm_plane_state * __drm_atomic_get_current_plane_state(struct drm_atomic_state * state, struct drm_plane * plane)'/>
<doc f='linux/include/drm/drm_atomic.h' l='513'>/**
 * __drm_atomic_get_current_plane_state - get current plane state
 * @state: global atomic state object
 * @plane: plane to grab
 *
 * This function returns the plane state for the given plane, either from
 * @state, or if the plane isn&apos;t part of the atomic state update, from @plane.
 * This is useful in atomic check callbacks, when drivers need to peek at, but
 * not change, state of other planes, since it avoids threading an error code
 * back up the call chain.
 *
 * WARNING:
 *
 * Note that this function is in general unsafe since it doesn&apos;t check for the
 * required locking for access state structures. Drivers must ensure that it is
 * safe to access the returned state structure through other means. One common
 * example is when planes are fixed to a single CRTC, and the driver knows that
 * the CRTC lock is held already. In that case holding the CRTC lock gives a
 * read-lock on all planes connected to that CRTC. But if planes can be
 * reassigned things get more tricky. In that case it&apos;s better to use
 * drm_atomic_get_plane_state and wire up full error handling.
 *
 * Returns:
 *
 * Read-only pointer to the current plane state.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_pm.c' l='3050' macro='1' u='c' c='ilk_compute_pipe_wm'/>
<use f='linux/drivers/gpu/drm/i915/intel_pm.c' l='3940' macro='1' u='c' c='skl_check_pipe_max_pixel_rate'/>
<use f='linux/drivers/gpu/drm/i915/intel_pm.c' l='4052' macro='1' u='c' c='skl_get_total_relative_data_rate'/>
<use f='linux/drivers/gpu/drm/i915/intel_pm.c' l='4148' macro='1' u='c' c='skl_ddb_calc_min'/>
<use f='linux/drivers/gpu/drm/i915/intel_pm.c' l='4697' macro='1' u='c' c='skl_build_pipe_wm'/>
