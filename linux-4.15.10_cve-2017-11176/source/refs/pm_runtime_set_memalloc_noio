<dec f='linux/include/linux/pm_runtime.h' l='57' type='void pm_runtime_set_memalloc_noio(struct device * dev, bool enable)'/>
<use f='linux/block/genhd.c' l='586' u='c' c='register_disk'/>
<use f='linux/block/genhd.c' l='744' u='c' c='del_gendisk'/>
<def f='linux/drivers/base/power/runtime.c' l='195' ll='229' type='void pm_runtime_set_memalloc_noio(struct device * dev, bool enable)'/>
<dec f='linux/drivers/base/power/runtime.c' l='230' type='void pm_runtime_set_memalloc_noio(struct device * , bool )'/>
<use f='linux/drivers/base/power/runtime.c' l='230' c='pm_runtime_set_memalloc_noio'/>
<use f='linux/drivers/base/power/runtime.c' l='230' u='a'/>
<use f='linux/drivers/base/power/runtime.c' l='230' u='a'/>
<doc f='linux/drivers/base/power/runtime.c' l='167'>/*
 * pm_runtime_set_memalloc_noio - Set a device&apos;s memalloc_noio flag.
 * @dev: Device to handle.
 * @enable: True for setting the flag and False for clearing the flag.
 *
 * Set the flag for all devices in the path from the device to the
 * root device in the device tree if @enable is true, otherwise clear
 * the flag for devices in the path whose siblings don&apos;t set the flag.
 *
 * The function should only be called by block device, or network
 * device driver for solving the deadlock problem during runtime
 * resume/suspend:
 *
 *     If memory allocation with GFP_KERNEL is called inside runtime
 *     resume/suspend callback of any one of its ancestors(or the
 *     block device itself), the deadlock may be triggered inside the
 *     memory allocation since it might not complete until the block
 *     device becomes active and the involed page I/O finishes. The
 *     situation is pointed out first by Alan Stern. Network device
 *     are involved in iSCSI kind of situation.
 *
 * The lock of dev_hotplug_mutex is held in the function for handling
 * hotplug race because pm_runtime_set_memalloc_noio() may be called
 * in async probe().
 *
 * The function should be called between device_add() and device_del()
 * on the affected device(block/network device).
 */</doc>
<use f='linux/net/core/net-sysfs.c' l='1568' u='c' c='netdev_unregister_kobject'/>
<use f='linux/net/core/net-sysfs.c' l='1614' u='c' c='netdev_register_kobject'/>
