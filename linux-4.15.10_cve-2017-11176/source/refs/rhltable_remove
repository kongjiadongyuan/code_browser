<def f='linux/include/linux/rhashtable.h' l='1146' ll='1151' type='int rhltable_remove(struct rhltable * hlt, struct rhlist_head * list, const struct rhashtable_params params)'/>
<doc f='linux/include/linux/rhashtable.h' l='1131'>/**
 * rhltable_remove - remove object from hash list table
 * @hlt:	hash list table
 * @list:	pointer to hash list head inside object
 * @params:	hash table parameters
 *
 * Since the hash chain is single linked, the removal operation needs to
 * walk the bucket chain upon removal. The removal operation is thus
 * considerable slow if the hash table is not correctly sized.
 *
 * Will automatically shrink the table via rhashtable_expand() if the
 * shrink_decision function specified at rhashtable_init() returns true.
 *
 * Returns zero on success, -ENOENT if the entry could not be found.
 */</doc>
<use f='linux/net/ipv4/ipmr.c' l='1289' u='c' c='ipmr_mfc_delete'/>
<use f='linux/net/ipv4/ipmr.c' l='1396' u='c' c='mroute_clean_tables'/>
<use f='linux/net/mac80211/sta_info.c' l='82' u='c' c='sta_info_hash_del'/>
