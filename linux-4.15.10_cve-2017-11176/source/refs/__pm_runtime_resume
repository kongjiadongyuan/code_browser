<dec f='linux/include/linux/pm_runtime.h' l='41' type='int __pm_runtime_resume(struct device * dev, int rpmflags)'/>
<use f='linux/include/linux/pm_runtime.h' l='200' u='c' c='pm_runtime_resume'/>
<use f='linux/include/linux/pm_runtime.h' l='210' u='c' c='pm_request_resume'/>
<use f='linux/include/linux/pm_runtime.h' l='220' u='c' c='pm_runtime_get'/>
<use f='linux/include/linux/pm_runtime.h' l='225' u='c' c='pm_runtime_get_sync'/>
<def f='linux/drivers/base/power/runtime.c' l='1028' ll='1044' type='int __pm_runtime_resume(struct device * dev, int rpmflags)'/>
<dec f='linux/drivers/base/power/runtime.c' l='1045' type='int __pm_runtime_resume(struct device * , int )'/>
<use f='linux/drivers/base/power/runtime.c' l='1045' c='__pm_runtime_resume'/>
<use f='linux/drivers/base/power/runtime.c' l='1045' u='a'/>
<use f='linux/drivers/base/power/runtime.c' l='1045' u='a'/>
<doc f='linux/drivers/base/power/runtime.c' l='1017'>/**
 * __pm_runtime_resume - Entry point for runtime resume operations.
 * @dev: Device to resume.
 * @rpmflags: Flag bits.
 *
 * If the RPM_GET_PUT flag is set, increment the device&apos;s usage count.  Then
 * carry out a resume, either synchronous or asynchronous.
 *
 * This routine may be called in atomic context if the RPM_ASYNC flag is set,
 * or if pm_runtime_irq_safe() has been called.
 */</doc>
