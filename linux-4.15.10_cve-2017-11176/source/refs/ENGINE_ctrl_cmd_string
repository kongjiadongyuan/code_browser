<dec f='include/openssl/engine.h' l='454' type='int ENGINE_ctrl_cmd_string(ENGINE * e, const char * cmd_name, const char * arg, int cmd_optional)'/>
<use f='linux/scripts/extract-cert.c' l='133' u='c' c='main'/>
<doc f='include/openssl/engine.h' l='432'>/*
 * This function passes a command-name and argument to an ENGINE. The
 * cmd_name is converted to a command number and the control command is
 * called using &apos;arg&apos; as an argument (unless the ENGINE doesn&apos;t support such
 * a command, in which case no control command is called). The command is
 * checked for input flags, and if necessary the argument will be converted
 * to a numeric value. If cmd_optional is non-zero, then if the ENGINE
 * doesn&apos;t support the given cmd_name the return value will be success
 * anyway. This function is intended for applications to use so that users
 * (or config files) can supply engine-specific config data to the ENGINE at
 * run-time to control behaviour of specific engines. As such, it shouldn&apos;t
 * be used for calling ENGINE_ctrl() functions that return data, deal with
 * binary data, or that are otherwise supposed to be used directly through
 * ENGINE_ctrl() in application code. Any &quot;return&quot; data from an ENGINE_ctrl()
 * operation in this function will be lost - the return value is interpreted
 * as failure if the return value is zero, success otherwise, and this
 * function returns a boolean value as a result. In other words, vendors of
 * &apos;ENGINE&apos;-enabled devices should write ENGINE implementations with
 * parameterisations that work in this scheme, so that compliant ENGINE-based
 * applications can work consistently with the same configuration for the
 * same ENGINE-enabled devices, across applications.
 */</doc>
