<dec f='linux/include/net/netlink.h' l='249' type='int nla_parse(struct nlattr ** tb, int maxtype, const struct nlattr * head, int len, const struct nla_policy * policy, struct netlink_ext_ack * extack)'/>
<use f='linux/include/net/netlink.h' l='398' u='c' c='nlmsg_parse'/>
<use f='linux/include/net/netlink.h' l='765' u='c' c='nla_parse_nested'/>
<def f='linux/lib/nlattr.c' l='240' ll='273' type='int nla_parse(struct nlattr ** tb, int maxtype, const struct nlattr * head, int len, const struct nla_policy * policy, struct netlink_ext_ack * extack)'/>
<dec f='linux/lib/nlattr.c' l='274' type='int nla_parse(struct nlattr ** , int , const struct nlattr * , int , const struct nla_policy * , struct netlink_ext_ack * )'/>
<use f='linux/lib/nlattr.c' l='274' c='nla_parse'/>
<use f='linux/lib/nlattr.c' l='274' u='a'/>
<use f='linux/lib/nlattr.c' l='274' u='a'/>
<doc f='linux/lib/nlattr.c' l='225'>/**
 * nla_parse - Parse a stream of attributes into a tb buffer
 * @tb: destination array with maxtype+1 elements
 * @maxtype: maximum attribute type to be expected
 * @head: head of attribute stream
 * @len: length of attribute stream
 * @policy: validation policy
 *
 * Parses a stream of attributes and stores a pointer to each attribute in
 * the tb array accessible via the attribute type. Attributes with a type
 * exceeding maxtype will be silently ignored for backwards compatibility
 * reasons. policy may be set to NULL if no validation is required.
 *
 * Returns 0 on success or a negative error code.
 */</doc>
<use f='linux/net/core/rtnetlink.c' l='1798' u='c' c='rtnl_nla_parse_ifla'/>
<use f='linux/net/netfilter/nfnetlink.c' l='195' u='c' c='nfnetlink_rcv_msg'/>
<use f='linux/net/netfilter/nfnetlink.c' l='388' u='c' c='nfnetlink_rcv_batch'/>
<use f='linux/net/netfilter/nfnetlink.c' l='478' u='c' c='nfnetlink_rcv_skb_batch'/>
<use f='linux/net/sched/act_api.c' l='1155' u='c' c='find_dump_kind'/>
