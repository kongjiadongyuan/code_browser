<dec f='linux/include/linux/mm.h' l='1502' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux/include/linux/mm.h' l='1499'>/*
 * doesn&apos;t attempt to fault and will return short.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/i915_gem_userptr.c' l='644' u='c' c='i915_gem_userptr_get_pages'/>
<use f='linux/kernel/events/core.c' l='5982' u='c' c='perf_virt_to_phys'/>
<def f='linux/mm/gup.c' l='1755' ll='1790' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<doc f='linux/mm/gup.c' l='1751'>/*
 * Like get_user_pages_fast() except it&apos;s IRQ-safe in that it won&apos;t fall back to
 * the regular GUP. It will only return non-negative values.
 */</doc>
<def f='linux/mm/util.c' l='281' ll='285' type='int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page ** pages)'/>
<dec f='linux/mm/util.c' l='286' type='int __get_user_pages_fast(unsigned long , int , int , struct page ** )'/>
<use f='linux/mm/util.c' l='286' c='__get_user_pages_fast'/>
<use f='linux/mm/util.c' l='286' u='a'/>
<use f='linux/mm/util.c' l='286' u='a'/>
<doc f='linux/mm/util.c' l='275'>/*
 * Like get_user_pages_fast() except its IRQ-safe in that it won&apos;t fall
 * back to the regular GUP.
 * If the architecture not support this function, simply return with no
 * page pinned
 */</doc>
