<def f='linux/include/net/tcp.h' l='1970' ll='1974' type='void tcp_listendrop(const struct sock * sk)'/>
<doc f='linux/include/net/tcp.h' l='1963'>/*
 * TCP listen path runs lockless.
 * We forced &quot;struct sock&quot; to be const qualified to make sure
 * we don&apos;t modify one of its field by mistake.
 * Here, we increment sk_drops which is an atomic_t, so we can safely
 * make sock writable again.
 */</doc>
<use f='linux/net/ipv4/tcp_input.c' l='6328' u='c' c='tcp_conn_request'/>
<use f='linux/net/ipv4/tcp_ipv4.c' l='346' u='c' c='tcp_req_err'/>
<use f='linux/net/ipv4/tcp_ipv4.c' l='1323' u='c' c='tcp_v4_conn_request'/>
<use f='linux/net/ipv4/tcp_ipv4.c' l='1424' u='c' c='tcp_v4_syn_recv_sock'/>
<use f='linux/net/ipv6/tcp_ipv6.c' l='1026' u='c' c='tcp_v6_conn_request'/>
<use f='linux/net/ipv6/tcp_ipv6.c' l='1244' u='c' c='tcp_v6_syn_recv_sock'/>
