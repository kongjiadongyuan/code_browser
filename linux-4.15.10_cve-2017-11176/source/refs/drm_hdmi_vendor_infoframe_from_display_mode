<dec f='linux/include/drm/drm_edid.h' l='359' type='int drm_hdmi_vendor_infoframe_from_display_mode(struct hdmi_vendor_infoframe * frame, const struct drm_display_mode * mode)'/>
<def f='linux/drivers/gpu/drm/drm_edid.c' l='4942' ll='4972' type='int drm_hdmi_vendor_infoframe_from_display_mode(struct hdmi_vendor_infoframe * frame, const struct drm_display_mode * mode)'/>
<dec f='linux/drivers/gpu/drm/drm_edid.c' l='4973' type='int drm_hdmi_vendor_infoframe_from_display_mode(struct hdmi_vendor_infoframe * , const struct drm_display_mode * )'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='4973' c='drm_hdmi_vendor_infoframe_from_display_mode'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='4973' u='a'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='4973' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_edid.c' l='4930'>/**
 * drm_hdmi_vendor_infoframe_from_display_mode() - fill an HDMI infoframe with
 * data from a DRM display mode
 * @frame: HDMI vendor infoframe
 * @mode: DRM display mode
 *
 * Note that there&apos;s is a need to send HDMI vendor infoframes only when using a
 * 4k or stereoscopic 3D mode. So when giving any other mode as input this
 * function will return -EINVAL, error that can be safely ignored.
 *
 * Return: 0 on success or a negative error code on failure.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_hdmi.c' l='521' u='c' c='intel_hdmi_set_hdmi_infoframe'/>
