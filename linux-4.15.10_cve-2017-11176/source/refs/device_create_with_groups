<dec f='linux/include/linux/device.h' l='1205' type='struct device * device_create_with_groups(struct class * cls, struct device * parent, dev_t devt, void * drvdata, const struct attribute_group ** groups, const char * fmt)'/>
<def f='linux/drivers/base/core.c' l='2542' ll='2556' type='struct device * device_create_with_groups(struct class * class, struct device * parent, dev_t devt, void * drvdata, const struct attribute_group ** groups, const char * fmt)'/>
<dec f='linux/drivers/base/core.c' l='2557' type='struct device * device_create_with_groups(struct class * , struct device * , dev_t , void * , const struct attribute_group ** , const char * )'/>
<use f='linux/drivers/base/core.c' l='2557' c='device_create_with_groups'/>
<use f='linux/drivers/base/core.c' l='2557' u='a'/>
<use f='linux/drivers/base/core.c' l='2557' u='a'/>
<doc f='linux/drivers/base/core.c' l='2515'>/**
 * device_create_with_groups - creates a device and registers it with sysfs
 * @class: pointer to the struct class that this device should be registered to
 * @parent: pointer to the parent struct device of this new device, if any
 * @devt: the dev_t for the char device to be added
 * @drvdata: the data to be added to the device for callbacks
 * @groups: NULL-terminated list of attribute groups to be created
 * @fmt: string for the device&apos;s name
 *
 * This function can be used by char device classes.  A struct device
 * will be created in sysfs, registered to the specified class.
 * Additional attributes specified in the groups parameter will also
 * be created automatically.
 *
 * A &quot;dev&quot; file will be created, showing the dev_t for the device, if
 * the dev_t is not 0,0.
 * If a pointer to a parent struct device is passed in, the newly created
 * struct device will be a child of that device in sysfs.
 * The pointer to the struct device will be returned from the call.
 * Any further sysfs files that might be required can be created using this
 * pointer.
 *
 * Returns &amp;struct device pointer on success, or ERR_PTR() on error.
 *
 * Note: the struct class passed to this function must have previously
 * been created with a call to class_create().
 */</doc>
<use f='linux/drivers/char/misc.c' l='219' u='c' c='misc_register'/>
<use f='linux/drivers/gpu/drm/drm_sysfs.c' l='275' u='c' c='drm_sysfs_connector_add'/>
<use f='linux/drivers/leds/led-class.c' l='263' u='c' c='of_led_classdev_register'/>
<use f='linux/drivers/ptp/ptp_clock.c' l='253' u='c' c='ptp_clock_register'/>
<use f='linux/drivers/tty/tty_io.c' l='3318' u='c' c='tty_init'/>
<use f='linux/drivers/tty/vt/vt.c' l='3078' u='c' c='vty_init'/>
<use f='linux/drivers/tty/vt/vt.c' l='3621' u='c' c='do_register_con_driver'/>
<use f='linux/drivers/tty/vt/vt.c' l='3775' u='c' c='vtconsole_class_init'/>
