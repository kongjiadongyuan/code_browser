<dec f='linux/include/drm/drm_plane.h' l='565' type='int drm_plane_init(struct drm_device * dev, struct drm_plane * plane, uint32_t possible_crtcs, const struct drm_plane_funcs * funcs, const uint32_t * formats, unsigned int format_count, bool is_primary)'/>
<def f='linux/drivers/gpu/drm/drm_plane.c' l='312' ll='324' type='int drm_plane_init(struct drm_device * dev, struct drm_plane * plane, uint32_t possible_crtcs, const struct drm_plane_funcs * funcs, const uint32_t * formats, unsigned int format_count, bool is_primary)'/>
<dec f='linux/drivers/gpu/drm/drm_plane.c' l='325' type='int drm_plane_init(struct drm_device * , struct drm_plane * , uint32_t , const struct drm_plane_funcs * , const uint32_t * , unsigned int , bool )'/>
<use f='linux/drivers/gpu/drm/drm_plane.c' l='325' c='drm_plane_init'/>
<use f='linux/drivers/gpu/drm/drm_plane.c' l='325' u='a'/>
<use f='linux/drivers/gpu/drm/drm_plane.c' l='325' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_plane.c' l='295'>/**
 * drm_plane_init - Initialize a legacy plane
 * @dev: DRM device
 * @plane: plane object to init
 * @possible_crtcs: bitmask of possible CRTCs
 * @funcs: callbacks for the new plane
 * @formats: array of supported formats (DRM_FORMAT\_\*)
 * @format_count: number of elements in @formats
 * @is_primary: plane type (primary vs overlay)
 *
 * Legacy API to initialize a DRM plane.
 *
 * New drivers should call drm_universal_plane_init() instead.
 *
 * Returns:
 * Zero on success, error code on failure.
 */</doc>
