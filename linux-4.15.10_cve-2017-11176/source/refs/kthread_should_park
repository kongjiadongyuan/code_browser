<dec f='linux/include/linux/kthread.h' l='58' type='bool kthread_should_park()'/>
<use f='linux/drivers/gpu/drm/i915/intel_breadcrumbs.c' l='653' u='c' c='intel_breadcrumbs_signaler'/>
<use f='linux/drivers/md/md.c' l='7481' u='c' c='md_thread'/>
<use f='linux/drivers/md/md.c' l='7481' u='c' c='md_thread'/>
<use f='linux/drivers/md/md.c' l='7485' u='c' c='md_thread'/>
<def f='linux/kernel/kthread.c' l='116' ll='119' type='bool kthread_should_park()'/>
<dec f='linux/kernel/kthread.c' l='120' type='bool kthread_should_park()'/>
<use f='linux/kernel/kthread.c' l='120' c='kthread_should_park'/>
<use f='linux/kernel/kthread.c' l='120' u='a'/>
<use f='linux/kernel/kthread.c' l='120' u='a'/>
<doc f='linux/kernel/kthread.c' l='105'>/**
 * kthread_should_park - should this kthread park now?
 *
 * When someone calls kthread_park() on your kthread, it will be woken
 * and this will return true.  You should then do the necessary
 * cleanup and call kthread_parkme()
 *
 * Similar to kthread_should_stop(), but this keeps the thread alive
 * and in a park position. kthread_unpark() &quot;restarts&quot; the thread and
 * calls the thread function again.
 */</doc>
<use f='linux/kernel/smpboot.c' l='124' u='c' c='smpboot_thread_fn'/>
