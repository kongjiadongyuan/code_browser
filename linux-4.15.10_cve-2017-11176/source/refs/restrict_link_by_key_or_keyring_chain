<dec f='linux/include/crypto/public_key.h' l='63' type='int restrict_link_by_key_or_keyring_chain(struct key * trust_keyring, const struct key_type * type, const union key_payload * payload, struct key * trusted)'/>
<use f='linux/crypto/asymmetric_keys/asymmetric_type.c' l='514' u='r' c='asymmetric_lookup_restriction'/>
<def f='linux/crypto/asymmetric_keys/restrict.c' l='261' ll='268' type='int restrict_link_by_key_or_keyring_chain(struct key * dest_keyring, const struct key_type * type, const union key_payload * payload, struct key * trusted)'/>
<doc f='linux/crypto/asymmetric_keys/restrict.c' l='243'>/**
 * restrict_link_by_key_or_keyring_chain - Restrict additions to a ring of
 * public keys using the restrict_key information stored in the ring.
 * @dest_keyring: Keyring being linked to.
 * @type: The type of key being added.
 * @payload: The payload of the new key.
 * @trusted: A key or ring of keys that can be used to vouch for the new cert.
 *
 * Check the new certificate only against the key or keys passed in the data
 * parameter. If one of those is the signing key and validates the new
 * certificate, then mark the new certificate as being ok to link.
 *
 * Returns 0 if the new certificate was accepted, -ENOKEY if we
 * couldn&apos;t find a matching parent certificate in the trusted list,
 * -EKEYREJECTED if the signature check fails, -ENOPKG if the signature uses
 * unsupported crypto, or some other error if there is a matching certificate
 * but the signature check cannot be performed.
 */</doc>
