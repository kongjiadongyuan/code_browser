<dec f='linux/include/linux/refcount.h' l='100' type='bool refcount_dec_and_lock(refcount_t * r, spinlock_t * lock)'/>
<use f='linux/include/linux/kref.h' l='91' u='c' c='kref_put_lock'/>
<use f='linux/fs/nfs/client.c' l='272' u='c' c='nfs_put_client'/>
<use f='linux/fs/nfs/inode.c' l='839' u='c' c='nfs_put_lock_context'/>
<use f='linux/fs/nfs/inode.c' l='927' u='c' c='__put_nfs_open_context'/>
<use f='linux/fs/nfs/nfs4state.c' l='919' u='c' c='nfs4_put_lock_state'/>
<use f='linux/fs/notify/mark.c' l='213' u='c' c='fsnotify_put_mark'/>
<use f='linux/ipc/namespace.c' l='160' u='c' c='put_ipc_ns'/>
<def f='linux/lib/refcount.c' l='338' ll='350' type='bool refcount_dec_and_lock(refcount_t * r, spinlock_t * lock)'/>
<dec f='linux/lib/refcount.c' l='351' type='bool refcount_dec_and_lock(refcount_t * , spinlock_t * )'/>
<use f='linux/lib/refcount.c' l='351' c='refcount_dec_and_lock'/>
<use f='linux/lib/refcount.c' l='351' u='a'/>
<use f='linux/lib/refcount.c' l='351' u='a'/>
<doc f='linux/lib/refcount.c' l='322'>/**
 * refcount_dec_and_lock - return holding spinlock if able to decrement
 *                         refcount to 0
 * @r: the refcount
 * @lock: the spinlock to be locked
 *
 * Similar to atomic_dec_and_lock(), it will WARN on underflow and fail to
 * decrement when saturated at UINT_MAX.
 *
 * Provides release memory ordering, such that prior loads and stores are done
 * before, and provides a control dependency such that free() must come after.
 * See the comment on top.
 *
 * Return: true and hold spinlock if able to decrement refcount to 0, false
 *         otherwise
 */</doc>
<use f='linux/security/keys/key.c' l='125' u='c' c='key_user_put'/>
