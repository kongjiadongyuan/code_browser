<def f='linux/arch/x86/include/asm/msr.h' l='91' ll='101' type='unsigned long long __rdmsr(unsigned int msr)'/>
<use f='linux/arch/x86/include/asm/msr.h' l='115' u='c' c='native_read_msr'/>
<doc f='linux/arch/x86/include/asm/msr.h' l='84'>/*
 * __rdmsr() and __wrmsr() are the two primitives which are the bare minimum MSR
 * accessors and should not have any tracing or other functionality piggybacking
 * on them - those are *purely* for accessing MSRs and nothing more. So don&apos;t even
 * think of extending them - you will be slapped with a stinking trout or a frozen
 * shark will reach you, wherever you are! You&apos;ve been warned.
 */</doc>
<use f='linux/arch/x86/include/asm/microcode_intel.h' l='66' macro='1' u='c' c='intel_get_microcode_revision'/>
<use f='linux/arch/x86/kernel/cpu/microcode/amd.c' l='181' macro='1' u='c' c='__apply_microcode_amd'/>
<use f='linux/arch/x86/kernel/cpu/microcode/amd.c' l='224' macro='1' u='c' c='apply_microcode_early_amd'/>
<use f='linux/arch/x86/kernel/cpu/microcode/amd.c' l='305' macro='1' u='c' c='load_ucode_amd_ap'/>
<use f='linux/arch/x86/kernel/cpu/microcode/core.c' l='96' macro='1' u='c' c='amd_check_current_patch_level'/>
<use f='linux/arch/x86/kernel/cpu/microcode/intel.c' l='407' macro='1' u='c' c='collect_cpu_info_early'/>
