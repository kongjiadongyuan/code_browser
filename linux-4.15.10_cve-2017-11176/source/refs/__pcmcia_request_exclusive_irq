<dec f='linux/include/pcmcia/ds.h' l='210' type='int __pcmcia_request_exclusive_irq(struct pcmcia_device * p_dev, irq_handler_t handler)'/>
<use f='linux/include/pcmcia/ds.h' l='216' u='c' c='pcmcia_request_exclusive_irq'/>
<def f='linux/drivers/pcmcia/pcmcia_resource.c' l='726' ll='747' type='int __pcmcia_request_exclusive_irq(struct pcmcia_device * p_dev, irq_handler_t handler)'/>
<dec f='linux/drivers/pcmcia/pcmcia_resource.c' l='748' type='int __pcmcia_request_exclusive_irq(struct pcmcia_device * , irq_handler_t )'/>
<use f='linux/drivers/pcmcia/pcmcia_resource.c' l='748' c='__pcmcia_request_exclusive_irq'/>
<use f='linux/drivers/pcmcia/pcmcia_resource.c' l='748' u='a'/>
<use f='linux/drivers/pcmcia/pcmcia_resource.c' l='748' u='a'/>
<doc f='linux/drivers/pcmcia/pcmcia_resource.c' l='715'>/**
 * pcmcia_request_exclusive_irq() - attempt to request an exclusive IRQ first
 * @p_dev: the associated PCMCIA device
 * @handler: IRQ handler to register
 *
 * pcmcia_request_exclusive_irq() is a wrapper around request_irq() which
 * attempts first to request an exclusive IRQ. If it fails, it also accepts
 * a shared IRQ, but prints out a warning. PCMCIA drivers should allow for
 * IRQ sharing and either use request_irq directly (then they need to call
 * free_irq() themselves, too), or the pcmcia_request_irq() function.
 */</doc>
