<dec f='linux/include/linux/blkdev.h' l='1162' type='struct request_queue * blk_init_queue(request_fn_proc * , spinlock_t * )'/>
<def f='linux/block/blk-core.c' l='1018' ll='1021' type='struct request_queue * blk_init_queue(request_fn_proc * rfn, spinlock_t * lock)'/>
<dec f='linux/block/blk-core.c' l='1022' type='struct request_queue * blk_init_queue(request_fn_proc * , spinlock_t * )'/>
<use f='linux/block/blk-core.c' l='1022' c='blk_init_queue'/>
<use f='linux/block/blk-core.c' l='1022' u='a'/>
<use f='linux/block/blk-core.c' l='1022' u='a'/>
<doc f='linux/block/blk-core.c' l='985'>/**
 * blk_init_queue  - prepare a request queue for use with a block device
 * @rfn:  The function to be called to process requests that have been
 *        placed on the queue.
 * @lock: Request queue spin lock
 *
 * Description:
 *    If a block device wishes to use the standard request handling procedures,
 *    which sorts requests and coalesces adjacent requests, then it must
 *    call blk_init_queue().  The function @rfn will be called when there
 *    are requests on the queue that need to be processed.  If the device
 *    supports plugging, then @rfn may not be called immediately when requests
 *    are available on the queue, but may be called at some time later instead.
 *    Plugged queues are generally unplugged when a buffer belonging to one
 *    of the requests on the queue is needed, or due to memory pressure.
 *
 *    @rfn is not required, or even expected, to remove all requests off the
 *    queue, but only as many as it can handle at a time.  If it does leave
 *    requests on the queue, it is responsible for arranging that the requests
 *    get dealt with eventually.
 *
 *    The queue spin lock must be held while manipulating the requests on the
 *    request queue; this lock will be taken also from interrupt context, so irq
 *    disabling is needed for it.
 *
 *    Function returns a pointer to the initialized request queue, or %NULL if
 *    it didn&apos;t succeed.
 *
 * Note:
 *    blk_init_queue() must be paired with a blk_cleanup_queue() call
 *    when the block device is deactivated (such as at module unload).
 **/</doc>
