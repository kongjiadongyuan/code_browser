<dec f='linux/include/linux/pm_runtime.h' l='44' type='int __pm_runtime_set_status(struct device * dev, unsigned int status)'/>
<use f='linux/include/linux/pm_runtime.h' l='256' u='c' c='pm_runtime_set_active'/>
<use f='linux/include/linux/pm_runtime.h' l='261' u='c' c='pm_runtime_set_suspended'/>
<def f='linux/drivers/base/power/runtime.c' l='1088' ll='1146' type='int __pm_runtime_set_status(struct device * dev, unsigned int status)'/>
<dec f='linux/drivers/base/power/runtime.c' l='1147' type='int __pm_runtime_set_status(struct device * , unsigned int )'/>
<use f='linux/drivers/base/power/runtime.c' l='1147' c='__pm_runtime_set_status'/>
<use f='linux/drivers/base/power/runtime.c' l='1147' u='a'/>
<use f='linux/drivers/base/power/runtime.c' l='1147' u='a'/>
<doc f='linux/drivers/base/power/runtime.c' l='1071'>/**
 * __pm_runtime_set_status - Set runtime PM status of a device.
 * @dev: Device to handle.
 * @status: New runtime PM status of the device.
 *
 * If runtime PM of the device is disabled or its power.runtime_error field is
 * different from zero, the status may be changed either to RPM_ACTIVE, or to
 * RPM_SUSPENDED, as long as that reflects the actual state of the device.
 * However, if the device has a parent and the parent is not active, and the
 * parent&apos;s power.ignore_children flag is unset, the device&apos;s status cannot be
 * set to RPM_ACTIVE, so -EBUSY is returned in that case.
 *
 * If successful, __pm_runtime_set_status() clears the power.runtime_error field
 * and the device parent&apos;s counter of unsuspended children is modified to
 * reflect the new status.  If the new status is RPM_SUSPENDED, an idle
 * notification request for the parent is submitted.
 */</doc>
