<dec f='linux/security/selinux/include/audit.h' l='32' type='int selinux_audit_rule_init(u32 field, u32 op, char * rulestr, void ** rule)'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<use f='linux/security/selinux/hooks.c' l='6610'/>
<doc f='linux/security/selinux/include/audit.h' l='21'>/**
 *	selinux_audit_rule_init - alloc/init an selinux audit rule structure.
 *	@field: the field this rule refers to
 *	@op: the operater the rule uses
 *	@rulestr: the text &quot;target&quot; of the rule
 *	@rule: pointer to the new rule structure returned via this
 *
 *	Returns 0 if successful, -errno if not.  On success, the rule structure
 *	will be allocated internally.  The caller must free this structure with
 *	selinux_audit_rule_free() after use.
 */</doc>
<def f='linux/security/selinux/ss/services.c' l='3141' ll='3235' type='int selinux_audit_rule_init(u32 field, u32 op, char * rulestr, void ** vrule)'/>
