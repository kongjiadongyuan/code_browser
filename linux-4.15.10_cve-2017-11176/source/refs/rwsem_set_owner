<def f='linux/kernel/locking/rwsem.h' l='27' ll='30' type='void rwsem_set_owner(struct rw_semaphore * sem)'/>
<use f='linux/kernel/locking/rwsem-xadd.c' l='320' u='c' c='rwsem_try_write_lock'/>
<use f='linux/kernel/locking/rwsem-xadd.c' l='342' u='c' c='rwsem_try_write_lock_unqueued'/>
<doc f='linux/kernel/locking/rwsem.h' l='20'>/*
 * All writes to owner are protected by WRITE_ONCE() to make sure that
 * store tearing can&apos;t happen as optimistic spinners may read and use
 * the owner value concurrently without lock. Read from owner, however,
 * may not need READ_ONCE() as long as the pointer value is only used
 * for comparison and isn&apos;t being dereferenced.
 */</doc>
<use f='linux/kernel/locking/rwsem.c' l='73' u='c' c='down_write'/>
<use f='linux/kernel/locking/rwsem.c' l='91' u='c' c='down_write_killable'/>
<use f='linux/kernel/locking/rwsem.c' l='106' u='c' c='down_write_trylock'/>
