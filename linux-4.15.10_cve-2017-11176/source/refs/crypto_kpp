<def f='linux/include/crypto/kpp.h' l='47' ll='49'/>
<use f='linux/include/crypto/kpp.h' l='77'/>
<use f='linux/include/crypto/kpp.h' l='82'/>
<use f='linux/include/crypto/kpp.h' l='84'/>
<use f='linux/include/crypto/kpp.h' l='85'/>
<use f='linux/include/crypto/kpp.h' l='110' c='crypto_alloc_kpp'/>
<use f='linux/include/crypto/kpp.h' l='112' c='crypto_kpp_tfm'/>
<use f='linux/include/crypto/kpp.h' l='122' c='__crypto_kpp_tfm'/>
<use f='linux/include/crypto/kpp.h' l='124' c='__crypto_kpp_tfm'/>
<use f='linux/include/crypto/kpp.h' l='124' c='__crypto_kpp_tfm'/>
<use f='linux/include/crypto/kpp.h' l='124' c='__crypto_kpp_tfm'/>
<use f='linux/include/crypto/kpp.h' l='127' c='crypto_kpp_alg'/>
<use f='linux/include/crypto/kpp.h' l='132' c='crypto_kpp_reqsize'/>
<use f='linux/include/crypto/kpp.h' l='138' c='kpp_request_set_tfm'/>
<use f='linux/include/crypto/kpp.h' l='143' c='crypto_kpp_reqtfm'/>
<use f='linux/include/crypto/kpp.h' l='148' c='crypto_kpp_get_flags'/>
<use f='linux/include/crypto/kpp.h' l='153' c='crypto_kpp_set_flags'/>
<use f='linux/include/crypto/kpp.h' l='163' c='crypto_free_kpp'/>
<use f='linux/include/crypto/kpp.h' l='176' c='kpp_request_alloc'/>
<use f='linux/include/crypto/kpp.h' l='286' c='crypto_kpp_set_secret'/>
<use f='linux/include/crypto/kpp.h' l='309' c='crypto_kpp_generate_public_key'/>
<use f='linux/include/crypto/kpp.h' l='327' c='crypto_kpp_compute_shared_secret'/>
<use f='linux/include/crypto/kpp.h' l='343' c='crypto_kpp_maxsize'/>
<use f='linux/include/crypto/internal/kpp.h' l='26' c='kpp_tfm_ctx'/>
<use f='linux/include/crypto/internal/kpp.h' l='36' c='kpp_alg_name'/>
<use f='linux/crypto/kpp.c' l='60' c='crypto_kpp_exit_tfm'/>
<use f='linux/crypto/kpp.c' l='68' c='crypto_kpp_init_tfm'/>
<use f='linux/crypto/kpp.c' l='90'/>
<use f='linux/crypto/kpp.c' l='90'/>
<use f='linux/crypto/kpp.c' l='93' c='crypto_alloc_kpp'/>
<size>64</size>
<doc f='linux/include/crypto/kpp.h' l='41'>/**
 * struct crypto_kpp - user-instantiated object which encapsulate
 * algorithms and core processing logic
 *
 * @base:	Common crypto API algorithm data structure
 */</doc>
<mbr r='crypto_kpp::base' o='0' t='struct crypto_tfm'/>
