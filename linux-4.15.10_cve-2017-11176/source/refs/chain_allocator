<def f='linux/kernel/power/snapshot.c' l='260' ll='266'/>
<use f='linux/kernel/power/snapshot.c' l='268' c='chain_init'/>
<use f='linux/kernel/power/snapshot.c' l='277' c='chain_alloc'/>
<use f='linux/kernel/power/snapshot.c' l='405' c='alloc_rtree_node'/>
<use f='linux/kernel/power/snapshot.c' l='431' c='add_rtree_block'/>
<use f='linux/kernel/power/snapshot.c' l='502' c='create_zone_bm_rtree'/>
<use f='linux/kernel/power/snapshot.c' l='648' c='memory_bm_create'/>
<use f='linux/kernel/power/snapshot.c' l='2422' c='get_highmem_page_buffer'/>
<use f='linux/kernel/power/snapshot.c' l='2525' c='get_buffer'/>
<use f='linux/kernel/power/snapshot.c' l='2580' c='snapshot_write_next'/>
<size>24</size>
<doc f='linux/kernel/power/snapshot.c' l='248'>/*
 * struct chain_allocator is used for allocating small objects out of
 * a linked list of pages called &apos;the chain&apos;.
 *
 * The chain grows each time when there is no room for a new object in
 * the current page.  The allocated objects cannot be freed individually.
 * It is only possible to free them all at once, by freeing the entire
 * chain.
 *
 * NOTE: The chain allocator may be inefficient if the allocated objects
 * are not much smaller than PAGE_SIZE.
 */</doc>
