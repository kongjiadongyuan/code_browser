<dec f='linux/include/crypto/pkcs7.h' l='35' type='int pkcs7_validate_trust(struct pkcs7_message * pkcs7, struct key * trust_keyring)'/>
<use f='linux/certs/system_keyring.c' l='240' u='c' c='verify_pkcs7_signature'/>
<doc f='linux/include/crypto/pkcs7.h' l='32'>/*
 * pkcs7_trust.c
 */</doc>
<def f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='161' ll='190' type='int pkcs7_validate_trust(struct pkcs7_message * pkcs7, struct key * trust_keyring)'/>
<dec f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='191' type='int pkcs7_validate_trust(struct pkcs7_message * , struct key * )'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='191' c='pkcs7_validate_trust'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='191' u='a'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='191' u='a'/>
<doc f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='137'>/**
 * pkcs7_validate_trust - Validate PKCS#7 trust chain
 * @pkcs7: The PKCS#7 certificate to validate
 * @trust_keyring: Signing certificates to use as starting points
 *
 * Validate that the certificate chain inside the PKCS#7 message intersects
 * keys we already know and trust.
 *
 * Returns, in order of descending priority:
 *
 *  (*) -EKEYREJECTED if a signature failed to match for which we have a valid
 *	key, or:
 *
 *  (*) 0 if at least one signature chain intersects with the keys in the trust
 *	keyring, or:
 *
 *  (*) -ENOPKG if a suitable crypto module couldn&apos;t be found for a check on a
 *	chain.
 *
 *  (*) -ENOKEY if we couldn&apos;t find a match for any of the signature chains in
 *	the message.
 *
 * May also return -ENOMEM.
 */</doc>
