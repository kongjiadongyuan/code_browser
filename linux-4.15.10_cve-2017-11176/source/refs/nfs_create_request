<dec f='linux/include/linux/nfs_page.h' l='115' type='struct nfs_page * nfs_create_request(struct nfs_open_context * ctx, struct page * page, struct nfs_page * last, unsigned int offset, unsigned int count)'/>
<use f='linux/fs/nfs/direct.c' l='491' u='c' c='nfs_direct_read_schedule_iovec'/>
<use f='linux/fs/nfs/direct.c' l='896' u='c' c='nfs_direct_write_schedule_iovec'/>
<def f='linux/fs/nfs/pagelist.c' l='310' ll='349' type='struct nfs_page * nfs_create_request(struct nfs_open_context * ctx, struct page * page, struct nfs_page * last, unsigned int offset, unsigned int count)'/>
<use f='linux/fs/nfs/pagelist.c' l='1047' u='c' c='__nfs_pageio_add_request'/>
<use f='linux/fs/nfs/pagelist.c' l='1138' u='c' c='nfs_pageio_add_request'/>
<doc f='linux/fs/nfs/pagelist.c' l='298'>/**
 * nfs_create_request - Create an NFS read/write request.
 * @ctx: open context to use
 * @page: page to write
 * @last: last nfs request created for this page group or NULL if head
 * @offset: starting offset within the page for the write
 * @count: number of bytes to read/write
 *
 * The page must be locked by the caller. This makes sure we never
 * create two different requests for the same page.
 * User should ensure it is safe to sleep in this function.
 */</doc>
<use f='linux/fs/nfs/read.c' l='121' u='c' c='nfs_readpage_async'/>
<use f='linux/fs/nfs/read.c' l='368' u='c' c='readpage_async_filler'/>
<use f='linux/fs/nfs/write.c' l='1164' u='c' c='nfs_setup_write_request'/>
