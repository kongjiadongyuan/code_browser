<dec f='linux/include/linux/swap.h' l='465' type='int add_swap_count_continuation(swp_entry_t , gfp_t )'/>
<use f='linux/mm/memory.c' l='1113' u='c' c='copy_pte_range'/>
<use f='linux/mm/swapfile.c' l='3448' u='c' c='swap_duplicate'/>
<def f='linux/mm/swapfile.c' l='3507' ll='3607' type='int add_swap_count_continuation(swp_entry_t entry, gfp_t gfp_mask)'/>
<doc f='linux/mm/swapfile.c' l='3492'>/*
 * add_swap_count_continuation - called when a swap count is duplicated
 * beyond SWAP_MAP_MAX, it allocates a new page and links that to the entry&apos;s
 * page of the original vmalloc&apos;ed swap_map, to hold the continuation count
 * (for that entry and for its neighbouring PAGE_SIZE swap entries).  Called
 * again when count is duplicated beyond SWAP_MAP_MAX * SWAP_CONT_MAX, etc.
 *
 * These continuation pages are seldom referenced: the common paths all work
 * on the original swap_map, only referring to a continuation page when the
 * low &quot;digit&quot; of a count is incremented or decremented through SWAP_MAP_MAX.
 *
 * add_swap_count_continuation(, GFP_ATOMIC) can be called while holding
 * page table locks; if it fails, add_swap_count_continuation(, GFP_KERNEL)
 * can be called after dropping locks.
 */</doc>
