<dec f='linux/include/net/cfg80211.h' l='4565' type='const struct ieee80211_reg_rule * freq_reg_info(struct wiphy * wiphy, u32 center_freq)'/>
<doc f='linux/include/net/cfg80211.h' l='4547'>/**
 * freq_reg_info - get regulatory information for the given frequency
 * @wiphy: the wiphy for which we want to process this rule for
 * @center_freq: Frequency in KHz for which we want regulatory information for
 *
 * Use this function to get the regulatory rule for a specific frequency on
 * a given wireless device. If the device has a specific regulatory domain
 * it wants to follow we respect that unless a country IE has been received
 * and processed already.
 *
 * Return: A valid pointer, or, when an error occurs, for example if no rule
 * can be found, the return value is encoded using ERR_PTR(). Use IS_ERR() to
 * check and PTR_ERR() to obtain the numeric return value. The numeric return
 * value will be -ERANGE if we determine the given center_freq does not even
 * have a regulatory rule for a frequency range in the center_freq&apos;s band.
 * See freq_in_rule_band() for our current definition of a band -- this is
 * purely subjective and right now it&apos;s 802.11 specific.
 */</doc>
<def f='linux/net/wireless/reg.c' l='1450' ll='1454' type='const struct ieee80211_reg_rule * freq_reg_info(struct wiphy * wiphy, u32 center_freq)'/>
<dec f='linux/net/wireless/reg.c' l='1455' type='const struct ieee80211_reg_rule * freq_reg_info(struct wiphy * , u32 )'/>
<use f='linux/net/wireless/reg.c' l='1455' c='freq_reg_info'/>
<use f='linux/net/wireless/reg.c' l='1455' u='a'/>
<use f='linux/net/wireless/reg.c' l='1455' u='a'/>
<use f='linux/net/wireless/reg.c' l='1532' u='c' c='handle_channel'/>
