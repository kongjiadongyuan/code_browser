<dec f='linux/include/linux/pm_runtime.h' l='40' type='int __pm_runtime_suspend(struct device * dev, int rpmflags)'/>
<use f='linux/include/linux/pm_runtime.h' l='190' u='c' c='pm_runtime_suspend'/>
<use f='linux/include/linux/pm_runtime.h' l='195' u='c' c='pm_runtime_autosuspend'/>
<use f='linux/include/linux/pm_runtime.h' l='215' u='c' c='pm_request_autosuspend'/>
<use f='linux/include/linux/pm_runtime.h' l='235' u='c' c='pm_runtime_put_autosuspend'/>
<use f='linux/include/linux/pm_runtime.h' l='246' u='c' c='pm_runtime_put_sync_suspend'/>
<use f='linux/include/linux/pm_runtime.h' l='251' u='c' c='pm_runtime_put_sync_autosuspend'/>
<def f='linux/drivers/base/power/runtime.c' l='997' ll='1014' type='int __pm_runtime_suspend(struct device * dev, int rpmflags)'/>
<dec f='linux/drivers/base/power/runtime.c' l='1015' type='int __pm_runtime_suspend(struct device * , int )'/>
<use f='linux/drivers/base/power/runtime.c' l='1015' c='__pm_runtime_suspend'/>
<use f='linux/drivers/base/power/runtime.c' l='1015' u='a'/>
<use f='linux/drivers/base/power/runtime.c' l='1015' u='a'/>
<doc f='linux/drivers/base/power/runtime.c' l='985'>/**
 * __pm_runtime_suspend - Entry point for runtime put/suspend operations.
 * @dev: Device to suspend.
 * @rpmflags: Flag bits.
 *
 * If the RPM_GET_PUT flag is set, decrement the device&apos;s usage count and
 * return immediately if it is larger than zero.  Then carry out a suspend,
 * either synchronous or asynchronous.
 *
 * This routine may be called in atomic context if the RPM_ASYNC flag is set,
 * or if pm_runtime_irq_safe() has been called.
 */</doc>
