<dec f='linux/include/linux/dcache.h' l='231' type='void __d_drop(struct dentry * dentry)'/>
<def f='linux/fs/dcache.c' l='473' ll='494' type='void __d_drop(struct dentry * dentry)'/>
<dec f='linux/fs/dcache.c' l='495' type='void __d_drop(struct dentry * )'/>
<use f='linux/fs/dcache.c' l='495' c='__d_drop'/>
<use f='linux/fs/dcache.c' l='495' u='a'/>
<use f='linux/fs/dcache.c' l='495' u='a'/>
<use f='linux/fs/dcache.c' l='500' u='c' c='d_drop'/>
<use f='linux/fs/dcache.c' l='567' u='c' c='__dentry_kill'/>
<use f='linux/fs/dcache.c' l='1531' u='c' c='check_and_drop'/>
<use f='linux/fs/dcache.c' l='2373' u='c' c='d_delete'/>
<use f='linux/fs/dcache.c' l='2820' u='c' c='__d_move'/>
<use f='linux/fs/dcache.c' l='2821' u='c' c='__d_move'/>
<doc f='linux/fs/dcache.c' l='458'>/**
 * d_drop - drop a dentry
 * @dentry: dentry to drop
 *
 * d_drop() unhashes the entry from the parent dentry hashes, so that it won&apos;t
 * be found through a VFS lookup any more. Note that this is different from
 * deleting the dentry - d_delete will try to mark the dentry negative if
 * possible, giving a successful _negative_ lookup, while d_drop will
 * just make the cache lookup fail.
 *
 * d_drop() is used mainly for stuff that wants to invalidate a dentry for some
 * reason (NFS timeouts or autofs deletes).
 *
 * __d_drop requires dentry-&gt;d_lock.
 */</doc>
<use f='linux/fs/nfs/dir.c' l='1837' u='c' c='nfs_unlink'/>
