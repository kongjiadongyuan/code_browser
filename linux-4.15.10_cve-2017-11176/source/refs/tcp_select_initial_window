<dec f='linux/include/net/tcp.h' l='1279' type='void tcp_select_initial_window(const struct sock * sk, int __space, __u32 mss, __u32 * rcv_wnd, __u32 * window_clamp, int wscale_ok, __u8 * rcv_wscale, __u32 init_rcv_wnd)'/>
<doc f='linux/include/net/tcp.h' l='1278'>/* Determine a window scaling and initial window to offer. */</doc>
<use f='linux/net/ipv4/syncookies.c' l='388' u='c' c='cookie_v4_check'/>
<use f='linux/net/ipv4/tcp_minisocks.c' l='378' u='c' c='tcp_openreq_init_rwin'/>
<def f='linux/net/ipv4/tcp_output.c' l='191' ll='240' type='void tcp_select_initial_window(const struct sock * sk, int __space, __u32 mss, __u32 * rcv_wnd, __u32 * window_clamp, int wscale_ok, __u8 * rcv_wscale, __u32 init_rcv_wnd)'/>
<dec f='linux/net/ipv4/tcp_output.c' l='241' type='void tcp_select_initial_window(const struct sock * , int , __u32 , __u32 * , __u32 * , int , __u8 * , __u32 )'/>
<use f='linux/net/ipv4/tcp_output.c' l='241' c='tcp_select_initial_window'/>
<use f='linux/net/ipv4/tcp_output.c' l='241' u='a'/>
<use f='linux/net/ipv4/tcp_output.c' l='241' u='a'/>
<use f='linux/net/ipv4/tcp_output.c' l='3355' u='c' c='tcp_connect_init'/>
<doc f='linux/net/ipv4/tcp_output.c' l='184'>/* Determine a window scaling and initial window to offer.
 * Based on the assumption that the given amount of space
 * will be offered. Store the results in the tp structure.
 * NOTE: for smooth operation initial space offering should
 * be a multiple of mss if possible. We assume here that mss &gt;= 1.
 * This MUST be enforced by all callers.
 */</doc>
<use f='linux/net/ipv6/syncookies.c' l='247' u='c' c='cookie_v6_check'/>
