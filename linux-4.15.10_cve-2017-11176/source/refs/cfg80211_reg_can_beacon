<dec f='linux/include/net/cfg80211.h' l='5778' type='bool cfg80211_reg_can_beacon(struct wiphy * wiphy, struct cfg80211_chan_def * chandef, enum nl80211_iftype iftype)'/>
<doc f='linux/include/net/cfg80211.h' l='5769'>/**
 * cfg80211_reg_can_beacon - check if beaconing is allowed
 * @wiphy: the wiphy
 * @chandef: the channel definition
 * @iftype: interface type
 *
 * Return: %true if there is no secondary channel or the secondary channel(s)
 * can be used for beaconing (i.e. is not a radar channel etc.)
 */</doc>
<use f='linux/net/mac80211/ibss.c' l='269' u='c' c='__ieee80211_sta_join_ibss'/>
<use f='linux/net/mac80211/ibss.c' l='282' u='c' c='__ieee80211_sta_join_ibss'/>
<use f='linux/net/mac80211/ibss.c' l='861' u='c' c='ieee80211_ibss_process_chanswitch'/>
<use f='linux/net/mac80211/tx.c' l='2266' u='c' c='ieee80211_monitor_start_xmit'/>
<def f='linux/net/wireless/chan.c' l='944' ll='949' type='bool cfg80211_reg_can_beacon(struct wiphy * wiphy, struct cfg80211_chan_def * chandef, enum nl80211_iftype iftype)'/>
<dec f='linux/net/wireless/chan.c' l='950' type='bool cfg80211_reg_can_beacon(struct wiphy * , struct cfg80211_chan_def * , enum nl80211_iftype )'/>
<use f='linux/net/wireless/chan.c' l='950' c='cfg80211_reg_can_beacon'/>
<use f='linux/net/wireless/chan.c' l='950' u='a'/>
<use f='linux/net/wireless/chan.c' l='950' u='a'/>
<use f='linux/net/wireless/mesh.c' l='186' u='c' c='__cfg80211_join_mesh'/>
<use f='linux/net/wireless/nl80211.c' l='8557' u='c' c='nl80211_join_ibss'/>
