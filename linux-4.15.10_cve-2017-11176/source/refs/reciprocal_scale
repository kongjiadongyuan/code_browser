<def f='linux/include/linux/kernel.h' l='277' ll='280' type='u32 reciprocal_scale(u32 val, u32 ep_ro)'/>
<doc f='linux/include/linux/kernel.h' l='263'>/**
 * reciprocal_scale - &quot;scale&quot; a value into range [0, ep_ro)
 * @val: value
 * @ep_ro: right open interval endpoint
 *
 * Perform a &quot;reciprocal multiplication&quot; in order to &quot;scale&quot; a value into
 * range [0, @ep_ro), where the upper interval endpoint is right-open.
 * This is useful, e.g. for accessing a index of an array containing
 * @ep_ro elements, for example. Think of it as sort of modulus, only that
 * the result isn&apos;t that of modulo. ;) Note that if initial input is a
 * small value, then result will return 0.
 *
 * Return: a result based on @val in interval [0, @ep_ro).
 */</doc>
<use f='linux/net/core/dev.c' l='2595' u='c' c='__skb_tx_hash'/>
<use f='linux/net/core/dev.c' l='3350' u='c' c='get_xps_queue'/>
<use f='linux/net/core/dev.c' l='3733' u='c' c='get_rps_cpu'/>
<use f='linux/net/core/sock_reuseport.c' l='244' u='c' c='reuseport_select_sock'/>
<use f='linux/net/ipv4/inet_hashtables.c' l='242' u='c' c='__inet_lookup_listener'/>
<use f='linux/include/net/netfilter/nf_queue.h' l='106' u='c' c='nfqueue_hash'/>
<use f='linux/include/net/netfilter/nf_queue.h' l='110' u='c' c='nfqueue_hash'/>
<use f='linux/include/net/netfilter/nf_queue.h' l='114' u='c' c='nfqueue_hash'/>
<use f='linux/net/ipv4/udp.c' l='263' u='c' c='udp_lib_get_port'/>
<use f='linux/net/ipv4/udp.c' l='471' u='c' c='udp4_lib_lookup2'/>
<use f='linux/net/ipv4/udp.c' l='543' u='c' c='__udp4_lib_lookup'/>
<use f='linux/net/ipv6/inet6_hashtables.c' l='159' u='c' c='inet6_lookup_listener'/>
<use f='linux/net/ipv6/udp.c' l='211' u='c' c='udp6_lib_lookup2'/>
<use f='linux/net/ipv6/udp.c' l='284' u='c' c='__udp6_lib_lookup'/>
<use f='linux/include/net/codel_impl.h' l='97' u='c' c='codel_control_law'/>
<use f='linux/include/net/fq_impl.h' l='122' u='c' c='fq_flow_classify'/>
<use f='linux/net/netfilter/nf_conntrack_core.c' l='215' u='c' c='scale_hash'/>
<use f='linux/net/netfilter/nf_conntrack_core.c' l='222' u='c' c='__hash_conntrack'/>
<use f='linux/net/netfilter/nf_conntrack_core.c' l='539' u='c' c='____nf_conntrack_find'/>
<use f='linux/net/netfilter/nf_conntrack_core.c' l='945' u='c' c='early_drop'/>
<use f='linux/net/netfilter/nf_conntrack_expect.c' l='92' u='c' c='nf_ct_expect_dst_hash'/>
<use f='linux/net/netfilter/nf_nat_core.c' l='131' u='c' c='hash_by_src'/>
<use f='linux/net/netfilter/nf_nat_core.c' l='281' u='c' c='find_best_ips_proto'/>
<use f='linux/net/netfilter/nf_nat_core.c' l='281' u='c' c='find_best_ips_proto'/>
<use f='linux/net/netfilter/nf_nat_core.c' l='281' u='c' c='find_best_ips_proto'/>
<use f='linux/net/netfilter/nf_nat_core.c' l='281' u='c' c='find_best_ips_proto'/>
<use f='linux/net/netfilter/nf_nat_core.c' l='281' u='c' c='find_best_ips_proto'/>
<use f='linux/net/netfilter/nf_nat_core.c' l='281' u='c' c='find_best_ips_proto'/>
<use f='linux/net/packet/af_packet.c' l='1338' u='c' c='fanout_demux_hash'/>
