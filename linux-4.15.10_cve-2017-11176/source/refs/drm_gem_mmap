<dec f='linux/include/drm/drm_gem.h' l='202' type='int drm_gem_mmap(struct file * filp, struct vm_area_struct * vma)'/>
<def f='linux/drivers/gpu/drm/drm_gem.c' l='995' ll='1041' type='int drm_gem_mmap(struct file * filp, struct vm_area_struct * vma)'/>
<dec f='linux/drivers/gpu/drm/drm_gem.c' l='1042' type='int drm_gem_mmap(struct file * , struct vm_area_struct * )'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='1042' c='drm_gem_mmap'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='1042' u='a'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='1042' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_gem.c' l='980'>/**
 * drm_gem_mmap - memory map routine for GEM objects
 * @filp: DRM file pointer
 * @vma: VMA for the area to be mapped
 *
 * If a driver supports GEM object mapping, mmap calls on the DRM file
 * descriptor will end up here.
 *
 * Look up the GEM object based on the offset passed in (vma-&gt;vm_pgoff will
 * contain the fake offset we created when the GTT map ioctl was called on
 * the object) and map it with a call to drm_gem_mmap_obj().
 *
 * If the caller is not granted access to the buffer object, the mmap will fail
 * with EACCES. Please see the vma manager for more information.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/i915_drv.c' l='2705'/>
<use f='linux/drivers/gpu/drm/i915/i915_drv.c' l='2705'/>
