<dec f='linux/include/linux/module.h' l='565' type='void __module_put_and_exit(struct module * mod, long code)'/>
<use f='linux/crypto/algboss.c' l='92' macro='1' u='c' c='cryptomgr_probe'/>
<use f='linux/crypto/algboss.c' l='229' macro='1' u='c' c='cryptomgr_test'/>
<use f='linux/fs/nfs/callback.c' l='93' macro='1' u='c' c='nfs4_callback_svc'/>
<use f='linux/fs/nfs/nfs4state.c' l='2568' macro='1' u='c' c='nfs4_run_state_manager'/>
<def f='linux/kernel/module.c' l='357' ll='361' type='void __module_put_and_exit(struct module * mod, long code)'/>
<dec f='linux/kernel/module.c' l='362' type='void __module_put_and_exit(struct module * , long )'/>
<use f='linux/kernel/module.c' l='362' c='__module_put_and_exit'/>
<use f='linux/kernel/module.c' l='362' u='a'/>
<use f='linux/kernel/module.c' l='362' u='a'/>
<doc f='linux/kernel/module.c' l='353'>/*
 * A thread that wants to hold a reference to a module only while it
 * is running can call this to safely exit.  nfsd and lockd use this.
 */</doc>
