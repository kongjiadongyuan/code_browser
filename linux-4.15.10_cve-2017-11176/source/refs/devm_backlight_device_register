<dec f='linux/include/linux/backlight.h' l='136' type='struct backlight_device * devm_backlight_device_register(struct device * dev, const char * name, struct device * parent, void * devdata, const struct backlight_ops * ops, const struct backlight_properties * props)'/>
<def f='linux/drivers/video/backlight/backlight.c' l='509' ll='531' type='struct backlight_device * devm_backlight_device_register(struct device * dev, const char * name, struct device * parent, void * devdata, const struct backlight_ops * ops, const struct backlight_properties * props)'/>
<dec f='linux/drivers/video/backlight/backlight.c' l='532' type='struct backlight_device * devm_backlight_device_register(struct device * , const char * , struct device * , void * , const struct backlight_ops * , const struct backlight_properties * )'/>
<use f='linux/drivers/video/backlight/backlight.c' l='532' c='devm_backlight_device_register'/>
<use f='linux/drivers/video/backlight/backlight.c' l='532' u='a'/>
<use f='linux/drivers/video/backlight/backlight.c' l='532' u='a'/>
<doc f='linux/drivers/video/backlight/backlight.c' l='494'>/**
 * devm_backlight_device_register - resource managed backlight_device_register()
 * @dev: the device to register
 * @name: the name of the device
 * @parent: a pointer to the parent device
 * @devdata: an optional pointer to be stored for private driver use
 * @ops: the backlight operations structure
 * @props: the backlight properties
 *
 * @return a struct backlight on success, or an ERR_PTR on error
 *
 * Managed backlight_device_register(). The backlight_device returned
 * from this function are automatically freed on driver detach.
 * See backlight_device_register() for more information.
 */</doc>
<use f='linux/drivers/video/backlight/generic_bl.c' l='78' u='c' c='genericbl_probe'/>
