<dec f='linux/include/linux/connector.h' l='74' type='int cn_netlink_send_mult(struct cn_msg * msg, u16 len, u32 portid, u32 group, gfp_t gfp_mask)'/>
<def f='linux/drivers/connector/connector.c' l='73' ll='129' type='int cn_netlink_send_mult(struct cn_msg * msg, u16 len, u32 portid, u32 __group, gfp_t gfp_mask)'/>
<dec f='linux/drivers/connector/connector.c' l='130' type='int cn_netlink_send_mult(struct cn_msg * , u16 , u32 , u32 , gfp_t )'/>
<use f='linux/drivers/connector/connector.c' l='130' c='cn_netlink_send_mult'/>
<use f='linux/drivers/connector/connector.c' l='130' u='a'/>
<use f='linux/drivers/connector/connector.c' l='130' u='a'/>
<use f='linux/drivers/connector/connector.c' l='136' u='c' c='cn_netlink_send'/>
<doc f='linux/drivers/connector/connector.c' l='45'>/*
 * Sends mult (multiple) cn_msg at a time.
 *
 * msg-&gt;seq and msg-&gt;ack are used to determine message genealogy.
 * When someone sends message it puts there locally unique sequence
 * and random acknowledge numbers.  Sequence number may be copied into
 * nlmsghdr-&gt;nlmsg_seq too.
 *
 * Sequence number is incremented with each message to be sent.
 *
 * If we expect a reply to our message then the sequence number in
 * received message MUST be the same as in original message, and
 * acknowledge number MUST be the same + 1.
 *
 * If we receive a message and its sequence number is not equal to the
 * one we are expecting then it is a new message.
 *
 * If we receive a message and its sequence number is the same as one
 * we are expecting but it&apos;s acknowledgement number is not equal to
 * the acknowledgement number in the original message + 1, then it is
 * a new message.
 *
 * If msg-&gt;len != len, then additional cn_msg messages are expected following
 * the first msg.
 *
 * The message is sent to, the portid if given, the group if given, both if
 * both, or if both are zero then the group is looked up and sent there.
 */</doc>
