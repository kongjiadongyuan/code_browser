<dec f='linux/include/linux/pm_domain.h' l='295' type='void dev_pm_domain_detach(struct device * dev, bool power_off)'/>
<use f='linux/drivers/base/platform.c' l='580' u='c' c='platform_drv_probe'/>
<use f='linux/drivers/base/platform.c' l='608' u='c' c='platform_drv_remove'/>
<def f='linux/drivers/base/power/common.c' l='127' ll='131' type='void dev_pm_domain_detach(struct device * dev, bool power_off)'/>
<dec f='linux/drivers/base/power/common.c' l='132' type='void dev_pm_domain_detach(struct device * , bool )'/>
<use f='linux/drivers/base/power/common.c' l='132' c='dev_pm_domain_detach'/>
<use f='linux/drivers/base/power/common.c' l='132' u='a'/>
<use f='linux/drivers/base/power/common.c' l='132' u='a'/>
<doc f='linux/drivers/base/power/common.c' l='115'>/**
 * dev_pm_domain_detach - Detach a device from its PM domain.
 * @dev: Device to detach.
 * @power_off: Used to indicate whether we should power off the device.
 *
 * This functions will reverse the actions from dev_pm_domain_attach() and thus
 * try to detach the @dev from its PM domain. Typically it should be invoked
 * from subsystem level code during the remove phase.
 *
 * Callers must ensure proper synchronization of this function with power
 * management callbacks.
 */</doc>
<use f='linux/drivers/i2c/i2c-core-base.c' l='419' u='c' c='i2c_device_probe'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='441' u='c' c='i2c_device_remove'/>
