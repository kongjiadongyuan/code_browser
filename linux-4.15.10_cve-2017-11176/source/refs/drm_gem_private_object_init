<dec f='linux/include/drm/drm_gem.h' l='196' type='void drm_gem_private_object_init(struct drm_device * dev, struct drm_gem_object * obj, size_t size)'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='139' u='c' c='drm_gem_object_init'/>
<def f='linux/drivers/gpu/drm/drm_gem.c' l='161' ll='173' type='void drm_gem_private_object_init(struct drm_device * dev, struct drm_gem_object * obj, size_t size)'/>
<dec f='linux/drivers/gpu/drm/drm_gem.c' l='174' type='void drm_gem_private_object_init(struct drm_device * , struct drm_gem_object * , size_t )'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='174' c='drm_gem_private_object_init'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='174' u='a'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='174' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_gem.c' l='151'>/**
 * drm_gem_private_object_init - initialize an allocated private GEM object
 * @dev: drm_device the object should be initialized for
 * @obj: drm_gem_object to initialize
 * @size: object size
 *
 * Initialize an already allocated GEM object of the specified size with
 * no GEM provided backing store. Instead the caller is responsible for
 * backing the object and handling it.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='4391' u='c' c='i915_gem_object_create_shmem'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_dmabuf.c' l='321' u='c' c='i915_gem_prime_import'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_internal.c' l='195' u='c' c='i915_gem_object_create_internal'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_stolen.c' l='595' u='c' c='_i915_gem_object_create_stolen'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_userptr.c' l='797' u='c' c='i915_gem_userptr_ioctl'/>
