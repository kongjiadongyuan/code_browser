<dec f='linux/include/drm/drm_drv.h' l='505' type='int (*)(struct drm_file *, struct drm_device *, struct drm_mode_create_dumb *)'/>
<offset>2368</offset>
<doc f='linux/include/drm/drm_drv.h' l='484'>/**
	 * @dumb_create:
	 *
	 * This creates a new dumb buffer in the driver&apos;s backing storage manager (GEM,
	 * TTM or something else entirely) and returns the resulting buffer handle. This
	 * handle can then be wrapped up into a framebuffer modeset object.
	 *
	 * Note that userspace is not allowed to use such objects for render
	 * acceleration - drivers must create their own private ioctls for such a use
	 * case.
	 *
	 * Width, height and depth are specified in the &amp;drm_mode_create_dumb
	 * argument. The callback needs to fill the handle, pitch and size for
	 * the created buffer.
	 *
	 * Called by the user via ioctl.
	 *
	 * Returns:
	 *
	 * Zero on success, negative errno on failure.
	 */</doc>
<use f='linux/drivers/gpu/drm/drm_dumb_buffers.c' l='62' u='r' c='drm_mode_create_dumb_ioctl'/>
<use f='linux/drivers/gpu/drm/drm_dumb_buffers.c' l='91' u='r' c='drm_mode_create_dumb_ioctl'/>
<use f='linux/drivers/gpu/drm/drm_dumb_buffers.c' l='113' u='r' c='drm_mode_mmap_dumb_ioctl'/>
<use f='linux/drivers/gpu/drm/drm_dumb_buffers.c' l='130' u='r' c='drm_mode_destroy_dumb_ioctl'/>
<use f='linux/drivers/gpu/drm/drm_ioctl.c' l='255' u='r' c='drm_getcap'/>
<use f='linux/drivers/gpu/drm/i915/i915_drv.c' l='2798' u='w'/>
