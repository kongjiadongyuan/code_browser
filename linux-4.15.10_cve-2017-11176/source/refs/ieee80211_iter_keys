<dec f='linux/include/net/mac80211.h' l='5209' type='void ieee80211_iter_keys(struct ieee80211_hw * hw, struct ieee80211_vif * vif, void (*)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *, void *) iter, void * iter_data)'/>
<doc f='linux/include/net/mac80211.h' l='5191'>/**
 * ieee80211_iter_keys - iterate keys programmed into the device
 * @hw: pointer obtained from ieee80211_alloc_hw()
 * @vif: virtual interface to iterate, may be %NULL for all
 * @iter: iterator function that will be called for each key
 * @iter_data: custom data to pass to the iterator function
 *
 * This function can be used to iterate all the keys known to
 * mac80211, even those that weren&apos;t previously programmed into
 * the device. This is intended for use in WoWLAN if the device
 * needs reprogramming of the keys during suspend. Note that due
 * to locking reasons, it is also only safe to call this at few
 * spots since it must hold the RTNL and be able to sleep.
 *
 * The order in which the keys are iterated matches the order
 * in which they were originally installed and handed to the
 * set_key callback.
 */</doc>
<def f='linux/net/mac80211/key.c' l='762' ll='793' type='void ieee80211_iter_keys(struct ieee80211_hw * hw, struct ieee80211_vif * vif, void (*)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *, void *) iter, void * iter_data)'/>
<dec f='linux/net/mac80211/key.c' l='794' type='void ieee80211_iter_keys(struct ieee80211_hw * , struct ieee80211_vif * , void (*)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *, void *) , void * )'/>
<use f='linux/net/mac80211/key.c' l='794' c='ieee80211_iter_keys'/>
<use f='linux/net/mac80211/key.c' l='794' u='a'/>
<use f='linux/net/mac80211/key.c' l='794' u='a'/>
