<dec f='linux/include/linux/irqdomain.h' l='426' type='struct irq_domain * irq_domain_create_hierarchy(struct irq_domain * parent, unsigned int flags, unsigned int size, struct fwnode_handle * fwnode, const struct irq_domain_ops * ops, void * host_data)'/>
<use f='linux/include/linux/irqdomain.h' l='438' u='c' c='irq_domain_add_hierarchy'/>
<use f='linux/drivers/base/platform-msi.c' l='347' u='c' c='platform_msi_create_device_domain'/>
<def f='linux/kernel/irq/irqdomain.c' l='1126' ll='1145' type='struct irq_domain * irq_domain_create_hierarchy(struct irq_domain * parent, unsigned int flags, unsigned int size, struct fwnode_handle * fwnode, const struct irq_domain_ops * ops, void * host_data)'/>
<dec f='linux/kernel/irq/irqdomain.c' l='1146' type='struct irq_domain * irq_domain_create_hierarchy(struct irq_domain * , unsigned int , unsigned int , struct fwnode_handle * , const struct irq_domain_ops * , void * )'/>
<use f='linux/kernel/irq/irqdomain.c' l='1146' c='irq_domain_create_hierarchy'/>
<use f='linux/kernel/irq/irqdomain.c' l='1146' u='a'/>
<use f='linux/kernel/irq/irqdomain.c' l='1146' u='a'/>
<doc f='linux/kernel/irq/irqdomain.c' l='1111'>/**
 * irq_domain_create_hierarchy - Add a irqdomain into the hierarchy
 * @parent:	Parent irq domain to associate with the new domain
 * @flags:	Irq domain flags associated to the domain
 * @size:	Size of the domain. See below
 * @fwnode:	Optional fwnode of the interrupt controller
 * @ops:	Pointer to the interrupt domain callbacks
 * @host_data:	Controller private data pointer
 *
 * If @size is 0 a tree domain is created, otherwise a linear domain.
 *
 * If successful the parent is associated to the new domain and the
 * domain flags are set.
 * Returns pointer to IRQ domain, or NULL on failure.
 */</doc>
<use f='linux/kernel/irq/msi.c' l='278' u='c' c='msi_create_irq_domain'/>
