<dec f='linux/include/linux/mm.h' l='538' type='void * kvmalloc_node(size_t size, gfp_t flags, int node)'/>
<use f='linux/include/linux/mm.h' l='541' u='c' c='kvmalloc'/>
<use f='linux/include/linux/mm.h' l='545' u='c' c='kvzalloc_node'/>
<def f='linux/mm/util.c' l='372' ll='408' type='void * kvmalloc_node(size_t size, gfp_t flags, int node)'/>
<dec f='linux/mm/util.c' l='409' type='void * kvmalloc_node(size_t , gfp_t , int )'/>
<use f='linux/mm/util.c' l='409' c='kvmalloc_node'/>
<use f='linux/mm/util.c' l='409' u='a'/>
<use f='linux/mm/util.c' l='409' u='a'/>
<doc f='linux/mm/util.c' l='356'>/**
 * kvmalloc_node - attempt to allocate physically contiguous memory, but upon
 * failure, fall back to non-contiguous (vmalloc) allocation.
 * @size: size of the request.
 * @flags: gfp mask for the allocation - must be compatible (superset) with GFP_KERNEL.
 * @node: numa node to allocate from
 *
 * Uses kmalloc to get the memory but if the allocation fails then falls back
 * to the vmalloc allocator. Use kvfree for freeing the memory.
 *
 * Reclaim modifiers - __GFP_NORETRY and __GFP_NOFAIL are not supported.
 * __GFP_RETRY_MAYFAIL is supported, and it should be used only if kmalloc is
 * preferable to the vmalloc fallback, due to visible performance drawbacks.
 *
 * Any use of gfp flags outside of GFP_KERNEL should be consulted with mm people.
 */</doc>
<use f='linux/net/netfilter/x_tables.c' l='1140' u='c' c='xt_jumpstack_alloc'/>
