<dec f='linux/include/linux/idr.h' l='253' type='void ida_destroy(struct ida * ida)'/>
<use f='linux/drivers/dax/super.c' l='621' u='c' c='dax_fs_exit'/>
<use f='linux/drivers/gpu/drm/drm_connector.c' l='104' u='c' c='drm_connector_ida_destroy'/>
<use f='linux/drivers/gpu/drm/drm_mode_config.c' l='478' u='c' c='drm_mode_config_cleanup'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_context.c' l='557' u='c' c='i915_gem_contexts_fini'/>
<use f='linux/drivers/gpu/drm/i915/i915_guc_submission.c' l='1025' u='c' c='i915_guc_submission_fini'/>
<use f='linux/drivers/hid/hid-sony.c' l='2928' u='c' c='sony_exit'/>
<use f='linux/drivers/ptp/ptp_clock.c' l='390' u='c' c='ptp_exit'/>
<use f='linux/drivers/scsi/hosts.c' l='608' u='c' c='scsi_exit_hosts'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1355' u='c' c='thermal_zone_device_unregister'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1556' u='c' c='thermal_init'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1557' u='c' c='thermal_init'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1571' u='c' c='thermal_exit'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1572' u='c' c='thermal_exit'/>
<use f='linux/fs/devpts/inode.c' l='489' u='c' c='devpts_kill_sb'/>
<use f='linux/fs/nfs/client.c' l='924' u='c' c='nfs_free_server'/>
<use f='linux/fs/nfs/client.c' l='925' u='c' c='nfs_free_server'/>
<use f='linux/kernel/workqueue.c' l='3262' u='c' c='rcu_free_pool'/>
<def f='linux/lib/idr.c' l='404' ll='415' type='void ida_destroy(struct ida * ida)'/>
<dec f='linux/lib/idr.c' l='416' type='void ida_destroy(struct ida * )'/>
<use f='linux/lib/idr.c' l='416' c='ida_destroy'/>
<use f='linux/lib/idr.c' l='416' u='a'/>
<use f='linux/lib/idr.c' l='416' u='a'/>
<doc f='linux/lib/idr.c' l='395'>/**
 * ida_destroy - Free the contents of an ida
 * @ida: ida handle
 *
 * Calling this function releases all resources associated with an IDA.  When
 * this call returns, the IDA is empty and can be reused or freed.  The caller
 * should not allow ida_remove() or ida_get_new_above() to be called at the
 * same time.
 */</doc>
<use f='linux/net/sunrpc/clnt.c' l='341' u='c' c='rpc_cleanup_clids'/>
