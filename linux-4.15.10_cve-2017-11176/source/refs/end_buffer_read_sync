<dec f='linux/include/linux/buffer_head.h' l='163' type='void end_buffer_read_sync(struct buffer_head * bh, int uptodate)'/>
<def f='linux/fs/buffer.c' l='168' ll='172' type='void end_buffer_read_sync(struct buffer_head * bh, int uptodate)'/>
<dec f='linux/fs/buffer.c' l='173' type='void end_buffer_read_sync(struct buffer_head * , int )'/>
<use f='linux/fs/buffer.c' l='173' c='end_buffer_read_sync'/>
<use f='linux/fs/buffer.c' l='173' u='a'/>
<use f='linux/fs/buffer.c' l='173' u='a'/>
<use f='linux/fs/buffer.c' l='1196' u='r' c='__bread_slow'/>
<use f='linux/fs/buffer.c' l='3159' u='r' c='ll_rw_block'/>
<use f='linux/fs/buffer.c' l='3450' u='r' c='bh_submit_read'/>
<doc f='linux/fs/buffer.c' l='164'>/*
 * Default synchronous end-of-IO handler..  Just mark it up-to-date and
 * unlock the buffer. This is what ll_rw_block uses too.
 */</doc>
<use f='linux/fs/ext4/inode.c' l='4614' u='r' c='__ext4_get_inode_loc'/>
<use f='linux/fs/ext4/mmp.c' l='91' u='r' c='read_mmp_block'/>
