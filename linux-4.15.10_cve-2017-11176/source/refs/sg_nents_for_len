<dec f='linux/include/linux/scatterlist.h' l='252' type='int sg_nents_for_len(struct scatterlist * sg, u64 len)'/>
<use f='linux/crypto/rsa-pkcs1pad.c' l='200' u='c' c='pkcs1pad_encrypt_sign_complete'/>
<use f='linux/crypto/rsa-pkcs1pad.c' l='203' u='c' c='pkcs1pad_encrypt_sign_complete'/>
<use f='linux/crypto/rsa-pkcs1pad.c' l='333' u='c' c='pkcs1pad_decrypt_complete'/>
<use f='linux/crypto/rsa-pkcs1pad.c' l='500' u='c' c='pkcs1pad_verify_complete'/>
<use f='linux/lib/mpi/mpicoder.c' l='269' u='c' c='mpi_write_to_sgl'/>
<use f='linux/lib/mpi/mpicoder.c' l='340' u='c' c='mpi_read_raw_from_sgl'/>
<def f='linux/lib/scatterlist.c' l='73' ll='89' type='int sg_nents_for_len(struct scatterlist * sg, u64 len)'/>
<dec f='linux/lib/scatterlist.c' l='90' type='int sg_nents_for_len(struct scatterlist * , u64 )'/>
<use f='linux/lib/scatterlist.c' l='90' c='sg_nents_for_len'/>
<use f='linux/lib/scatterlist.c' l='90' u='a'/>
<use f='linux/lib/scatterlist.c' l='90' u='a'/>
<doc f='linux/lib/scatterlist.c' l='59'>/**
 * sg_nents_for_len - return total count of entries in scatterlist
 *                    needed to satisfy the supplied length
 * @sg:		The scatterlist
 * @len:	The total required length
 *
 * Description:
 * Determines the number of entries in sg that are required to meet
 * the supplied length, taking into acount chaining as well
 *
 * Returns:
 *   the number of sg entries needed, negative error on failure
 *
 **/</doc>
