<dec f='linux/include/linux/semaphore.h' l='42' type='int down_trylock(struct semaphore * sem)'/>
<use f='linux/drivers/firmware/efi/runtime-wrappers.c' l='191' u='c' c='virt_efi_set_variable_nonblocking'/>
<use f='linux/drivers/firmware/efi/runtime-wrappers.c' l='230' u='c' c='virt_efi_query_variable_info_nonblocking'/>
<use f='linux/drivers/firmware/efi/vars.c' l='693' u='c' c='efivar_entry_set_nonblocking'/>
<use f='linux/drivers/firmware/efi/vars.c' l='751' u='c' c='efivar_entry_set_safe'/>
<use f='linux/drivers/hid/hid-core.c' l='1559' u='c' c='hid_input_report'/>
<use f='linux/drivers/md/dm-region-hash.c' l='625' u='c' c='dm_rh_recovery_prepare'/>
<def f='linux/kernel/locking/semaphore.c' l='131' ll='143' type='int down_trylock(struct semaphore * sem)'/>
<dec f='linux/kernel/locking/semaphore.c' l='144' type='int down_trylock(struct semaphore * )'/>
<use f='linux/kernel/locking/semaphore.c' l='144' c='down_trylock'/>
<use f='linux/kernel/locking/semaphore.c' l='144' u='a'/>
<use f='linux/kernel/locking/semaphore.c' l='144' u='a'/>
<doc f='linux/kernel/locking/semaphore.c' l='118'>/**
 * down_trylock - try to acquire the semaphore, without waiting
 * @sem: the semaphore to be acquired
 *
 * Try to acquire the semaphore atomically.  Returns 0 if the semaphore has
 * been acquired successfully or 1 if it it cannot be acquired.
 *
 * NOTE: This return value is inverted from both spin_trylock and
 * mutex_trylock!  Be careful about this when converting code.
 *
 * Unlike mutex_trylock, this function can be used from interrupt context,
 * and the semaphore can be released by any task or interrupt.
 */</doc>
<use f='linux/kernel/printk/printk.c' l='228' u='c' c='__down_trylock_console_sem'/>
<use f='linux/net/core/netpoll.c' l='199' u='c' c='netpoll_poll_dev'/>
