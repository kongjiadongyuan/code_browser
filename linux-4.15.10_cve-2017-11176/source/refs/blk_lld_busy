<dec f='linux/include/linux/blkdev.h' l='960' type='int blk_lld_busy(struct request_queue * q)'/>
<def f='linux/block/blk-core.c' l='3309' ll='3315' type='int blk_lld_busy(struct request_queue * q)'/>
<dec f='linux/block/blk-core.c' l='3316' type='int blk_lld_busy(struct request_queue * )'/>
<use f='linux/block/blk-core.c' l='3316' c='blk_lld_busy'/>
<use f='linux/block/blk-core.c' l='3316' u='a'/>
<use f='linux/block/blk-core.c' l='3316' u='a'/>
<doc f='linux/block/blk-core.c' l='3290'>/**
 * blk_lld_busy - Check if underlying low-level drivers of a device are busy
 * @q : the queue of the device being checked
 *
 * Description:
 *    Check if underlying low-level drivers of a device are busy.
 *    If the drivers want to export their busy state, they must set own
 *    exporting function using blk_queue_lld_busy() first.
 *
 *    Basically, this function is used only by request stacking drivers
 *    to stop dispatching requests to underlying devices when underlying
 *    devices are busy.  This behavior helps more I/O merging on the queue
 *    of the request stacking driver and prevents I/O throughput regression
 *    on burst I/O load.
 *
 * Return:
 *    0 - Not busy (The request stacking driver should dispatch request)
 *    1 - Busy (The request stacking driver should stop dispatching request)
 */</doc>
