<dec f='linux/include/linux/netdevice.h' l='2436' type='void dev_add_pack(struct packet_type * pt)'/>
<def f='linux/net/core/dev.c' l='408' ll='415' type='void dev_add_pack(struct packet_type * pt)'/>
<dec f='linux/net/core/dev.c' l='416' type='void dev_add_pack(struct packet_type * )'/>
<use f='linux/net/core/dev.c' l='416' c='dev_add_pack'/>
<use f='linux/net/core/dev.c' l='416' u='a'/>
<use f='linux/net/core/dev.c' l='416' u='a'/>
<doc f='linux/net/core/dev.c' l='395'>/**
 *	dev_add_pack - add packet handler
 *	@pt: packet type declaration
 *
 *	Add a protocol handler to the networking stack. The passed &amp;packet_type
 *	is linked into kernel lists and may not be freed until it has been
 *	removed from the kernel lists.
 *
 *	This call does not sleep therefore it can not
 *	guarantee all CPU&apos;s that are in middle of receiving packets
 *	will see the new packet type (until the next received packet).
 */</doc>
<use f='linux/net/ipv4/af_inet.c' l='1926' u='c' c='inet_init'/>
<use f='linux/net/ipv4/arp.c' l='1295' u='c' c='arp_init'/>
<use f='linux/net/ipv4/ipconfig.c' l='487' u='c' c='ic_rarp_init'/>
<use f='linux/net/ipv4/ipconfig.c' l='786' u='c' c='ic_bootp_init'/>
<use f='linux/net/ipv6/af_inet6.c' l='745' u='c' c='ipv6_packet_init'/>
<use f='linux/net/packet/af_packet.c' l='343' u='c' c='register_prot_hook'/>
<use f='linux/net/packet/af_packet.c' l='1497' u='c' c='__fanout_link'/>
