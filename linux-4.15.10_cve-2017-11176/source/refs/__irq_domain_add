<dec f='linux/include/linux/irqdomain.h' l='247' type='struct irq_domain * __irq_domain_add(struct fwnode_handle * fwnode, int size, irq_hw_number_t hwirq_max, int direct_max, const struct irq_domain_ops * ops, void * host_data)'/>
<use f='linux/include/linux/irqdomain.h' l='319' u='c' c='irq_domain_add_linear'/>
<use f='linux/include/linux/irqdomain.h' l='326' u='c' c='irq_domain_add_nomap'/>
<use f='linux/include/linux/irqdomain.h' l='340' u='c' c='irq_domain_add_tree'/>
<use f='linux/include/linux/irqdomain.h' l='348' u='c' c='irq_domain_create_linear'/>
<use f='linux/include/linux/irqdomain.h' l='355' u='c' c='irq_domain_create_tree'/>
<def f='linux/kernel/irq/irqdomain.c' l='127' ll='228' type='struct irq_domain * __irq_domain_add(struct fwnode_handle * fwnode, int size, irq_hw_number_t hwirq_max, int direct_max, const struct irq_domain_ops * ops, void * host_data)'/>
<dec f='linux/kernel/irq/irqdomain.c' l='229' type='struct irq_domain * __irq_domain_add(struct fwnode_handle * , int , irq_hw_number_t , int , const struct irq_domain_ops * , void * )'/>
<use f='linux/kernel/irq/irqdomain.c' l='229' c='__irq_domain_add'/>
<use f='linux/kernel/irq/irqdomain.c' l='229' u='a'/>
<use f='linux/kernel/irq/irqdomain.c' l='229' u='a'/>
<use f='linux/kernel/irq/irqdomain.c' l='322' u='c' c='irq_domain_add_simple'/>
<use f='linux/kernel/irq/irqdomain.c' l='366' u='c' c='irq_domain_add_legacy'/>
<doc f='linux/kernel/irq/irqdomain.c' l='114'>/**
 * __irq_domain_add() - Allocate a new irq_domain data structure
 * @fwnode: firmware node for the interrupt controller
 * @size: Size of linear map; 0 for radix mapping only
 * @hwirq_max: Maximum number of interrupts supported by controller
 * @direct_max: Maximum value of direct maps; Use ~0 for no limit; 0 for no
 *              direct mapping
 * @ops: domain callbacks
 * @host_data: Controller private data pointer
 *
 * Allocates and initialize and irq_domain structure.
 * Returns pointer to IRQ domain, or NULL on failure.
 */</doc>
