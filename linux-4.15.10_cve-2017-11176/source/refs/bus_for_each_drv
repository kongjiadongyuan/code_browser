<dec f='linux/include/linux/device.h' l='172' type='int bus_for_each_drv(struct bus_type * bus, struct device_driver * start, void * data, int (*)(struct device_driver *, void *) fn)'/>
<def f='linux/drivers/base/bus.c' l='450' ll='466' type='int bus_for_each_drv(struct bus_type * bus, struct device_driver * start, void * data, int (*)(struct device_driver *, void *) fn)'/>
<dec f='linux/drivers/base/bus.c' l='467' type='int bus_for_each_drv(struct bus_type * , struct device_driver * , void * , int (*)(struct device_driver *, void *) )'/>
<use f='linux/drivers/base/bus.c' l='467' c='bus_for_each_drv'/>
<use f='linux/drivers/base/bus.c' l='467' u='a'/>
<use f='linux/drivers/base/bus.c' l='467' u='a'/>
<doc f='linux/drivers/base/bus.c' l='431'>/**
 * bus_for_each_drv - driver iterator
 * @bus: bus we&apos;re dealing with.
 * @start: driver to start iterating on.
 * @data: data to pass to the callback.
 * @fn: function to call for each driver.
 *
 * This is nearly identical to the device iterator above.
 * We iterate over each driver that belongs to @bus, and call
 * @fn for each. If @fn returns anything but 0, we break out
 * and return it. If @start is not NULL, we use it as the head
 * of the list.
 *
 * NOTE: we don&apos;t return the driver that returns a non-zero
 * value, nor do we leave the reference count incremented for that
 * driver. If the caller needs to know that info, it must set it
 * in the callback. It must also be sure to increment the refcount
 * so it doesn&apos;t disappear before returning to the caller.
 */</doc>
<use f='linux/drivers/base/dd.c' l='679' u='c' c='__device_attach_async_helper'/>
<use f='linux/drivers/base/dd.c' l='719' u='c' c='__device_attach'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='1309' u='c' c='i2c_register_adapter'/>
<use f='linux/drivers/i2c/i2c-core-base.c' l='1480' u='c' c='i2c_del_adapter'/>
