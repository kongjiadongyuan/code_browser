<dec f='linux/include/linux/timer.h' l='199' type='unsigned long __round_jiffies(unsigned long j, int cpu)'/>
<def f='linux/kernel/time/timer.c' l='313' ll='316' type='unsigned long __round_jiffies(unsigned long j, int cpu)'/>
<dec f='linux/kernel/time/timer.c' l='317' type='unsigned long __round_jiffies(unsigned long , int )'/>
<use f='linux/kernel/time/timer.c' l='317' c='__round_jiffies'/>
<use f='linux/kernel/time/timer.c' l='317' u='a'/>
<use f='linux/kernel/time/timer.c' l='317' u='a'/>
<doc f='linux/kernel/time/timer.c' l='293'>/**
 * __round_jiffies - function to round jiffies to a full second
 * @j: the time in (absolute) jiffies that should be rounded
 * @cpu: the processor number on which the timeout will happen
 *
 * __round_jiffies() rounds an absolute time in the future (in jiffies)
 * up or down to (approximately) full seconds. This is useful for timers
 * for which the exact time they fire does not matter too much, as long as
 * they fire approximately every X seconds.
 *
 * By rounding these timers to whole seconds, all such timers will fire
 * at the same time, rather than at various times spread out. The goal
 * of this is to have the CPU wake up less, which saves power.
 *
 * The exact rounding is skewed for each processor to avoid all
 * processors firing at the exact same time, which could lead
 * to lock contention or spurious cache line bouncing.
 *
 * The return value is the rounded version of the @j parameter.
 */</doc>
