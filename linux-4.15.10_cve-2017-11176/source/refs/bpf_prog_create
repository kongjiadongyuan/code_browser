<dec f='linux/include/linux/filter.h' l='695' type='int bpf_prog_create(struct bpf_prog ** pfp, struct sock_fprog_kern * fprog)'/>
<def f='linux/net/core/filter.c' l='1124' ll='1155' type='int bpf_prog_create(struct bpf_prog ** pfp, struct sock_fprog_kern * fprog)'/>
<dec f='linux/net/core/filter.c' l='1156' type='int bpf_prog_create(struct bpf_prog ** , struct sock_fprog_kern * )'/>
<use f='linux/net/core/filter.c' l='1156' c='bpf_prog_create'/>
<use f='linux/net/core/filter.c' l='1156' u='a'/>
<use f='linux/net/core/filter.c' l='1156' u='a'/>
<doc f='linux/net/core/filter.c' l='1114'>/**
 *	bpf_prog_create - create an unattached filter
 *	@pfp: the unattached filter that is created
 *	@fprog: the filter program
 *
 * Create a filter independent of any socket. We first run some
 * sanity checks on it to make sure it does not explode on us later.
 * If an error occurs or there is insufficient memory for the filter
 * a negative errno code is returned. On success the return is zero.
 */</doc>
<use f='linux/net/core/ptp_classifier.c' l='192' u='c' c='ptp_classifier_init'/>
