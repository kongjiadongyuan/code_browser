<dec f='linux/net/wireless/reg.h' l='174' type='void regulatory_propagate_dfs_state(struct wiphy * wiphy, struct cfg80211_chan_def * chandef, enum nl80211_dfs_state dfs_state, enum nl80211_radar_event event)'/>
<doc f='linux/net/wireless/reg.h' l='164'>/**
 * regulatory_propagate_dfs_state - Propagate DFS channel state to other wiphys
 * @wiphy - wiphy on which radar is detected and the event will be propagated
 *	to other available wiphys having the same DFS domain
 * @chandef - Channel definition of radar detected channel
 * @dfs_state - DFS channel state to be set
 * @event - Type of radar event which triggered this DFS state change
 *
 * This function should be called with rtnl lock held.
 */</doc>
<use f='linux/net/wireless/core.c' l='355' u='c' c='cfg80211_propagate_radar_detect_wk'/>
<use f='linux/net/wireless/core.c' l='371' u='c' c='cfg80211_propagate_cac_done_wk'/>
<use f='linux/net/wireless/mlme.c' l='819' u='c' c='cfg80211_dfs_channels_update_work'/>
<def f='linux/net/wireless/reg.c' l='3613' ll='3644' type='void regulatory_propagate_dfs_state(struct wiphy * wiphy, struct cfg80211_chan_def * chandef, enum nl80211_dfs_state dfs_state, enum nl80211_radar_event event)'/>
