<dec f='linux/include/linux/blkdev.h' l='990' type='void blk_run_queue_async(struct request_queue * q)'/>
<use f='linux/block/blk-core.c' l='267' u='c' c='blk_start_queue_async'/>
<def f='linux/block/blk-core.c' l='446' ll='453' type='void blk_run_queue_async(struct request_queue * q)'/>
<dec f='linux/block/blk-core.c' l='454' type='void blk_run_queue_async(struct request_queue * )'/>
<use f='linux/block/blk-core.c' l='454' c='blk_run_queue_async'/>
<use f='linux/block/blk-core.c' l='454' u='a'/>
<use f='linux/block/blk-core.c' l='454' u='a'/>
<use f='linux/block/blk-core.c' l='3500' u='c' c='queue_unplugged'/>
<doc f='linux/block/blk-core.c' l='433'>/**
 * blk_run_queue_async - run a single device queue in workqueue context
 * @q:	The queue to run
 *
 * Description:
 *    Tells kblockd to perform the equivalent of @blk_run_queue on behalf
 *    of us.
 *
 * Note:
 *    Since it is not allowed to run q-&gt;delay_work after blk_cleanup_queue()
 *    has canceled q-&gt;delay_work, callers must hold the queue lock to avoid
 *    race conditions between blk_cleanup_queue() and blk_run_queue_async().
 */</doc>
<use f='linux/block/blk-flush.c' l='273' u='c' c='flush_end_io'/>
<use f='linux/block/blk-flush.c' l='396' u='c' c='flush_data_end_io'/>
<use f='linux/drivers/md/dm-rq.c' l='199' u='c' c='rq_completed'/>
<use f='linux/drivers/md/dm-table.c' l='2010' u='c' c='dm_table_run_md_queue_async'/>
