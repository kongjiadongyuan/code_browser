<dec f='linux/include/linux/netdevice.h' l='3283' type='int netif_receive_skb(struct sk_buff * skb)'/>
<use f='linux/drivers/net/ethernet/intel/e100.c' l='2068' u='c' c='e100_rx_indicate'/>
<use f='linux/drivers/net/ethernet/marvell/sky2.c' l='2650' u='c' c='sky2_skb_rx'/>
<use f='linux/drivers/net/ethernet/realtek/8139too.c' l='2056' u='c' c='rtl8139_rx'/>
<def f='linux/net/core/dev.c' l='4649' ll='4654' type='int netif_receive_skb(struct sk_buff * skb)'/>
<dec f='linux/net/core/dev.c' l='4655' type='int netif_receive_skb(struct sk_buff * )'/>
<use f='linux/net/core/dev.c' l='4655' c='netif_receive_skb'/>
<use f='linux/net/core/dev.c' l='4655' u='a'/>
<use f='linux/net/core/dev.c' l='4655' u='a'/>
<doc f='linux/net/core/dev.c' l='4634'>/**
 *	netif_receive_skb - process receive buffer from network
 *	@skb: buffer to process
 *
 *	netif_receive_skb() is the main receive data processing function.
 *	It always succeeds. The buffer may be dropped during processing
 *	for congestion control or by the protocol layers.
 *
 *	This function may only be called from softirq context and interrupts
 *	should be enabled.
 *
 *	Return values (usually ignored):
 *	NET_RX_SUCCESS: no congestion
 *	NET_RX_DROP: packet was dropped
 */</doc>
<use f='linux/net/mac80211/rx.c' l='682' u='c' c='ieee80211_rx_monitor'/>
<use f='linux/net/mac80211/rx.c' l='2343' u='c' c='ieee80211_deliver_skb'/>
<use f='linux/net/mac80211/rx.c' l='3309' u='c' c='ieee80211_rx_cooked_monitor'/>
<use f='linux/net/mac80211/rx.c' l='3319' u='c' c='ieee80211_rx_cooked_monitor'/>
<use f='linux/net/mac80211/rx.c' l='4059' u='c' c='ieee80211_invoke_fast_rx'/>
