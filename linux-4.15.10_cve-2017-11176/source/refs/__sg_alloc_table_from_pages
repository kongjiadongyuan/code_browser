<dec f='linux/include/linux/scatterlist.h' l='271' type='int __sg_alloc_table_from_pages(struct sg_table * sgt, struct page ** pages, unsigned int n_pages, unsigned int offset, unsigned long size, unsigned int max_segment, gfp_t gfp_mask)'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_userptr.c' l='428' u='c' c='__i915_gem_userptr_alloc_pages'/>
<def f='linux/lib/scatterlist.c' l='393' ll='445' type='int __sg_alloc_table_from_pages(struct sg_table * sgt, struct page ** pages, unsigned int n_pages, unsigned int offset, unsigned long size, unsigned int max_segment, gfp_t gfp_mask)'/>
<dec f='linux/lib/scatterlist.c' l='446' type='int __sg_alloc_table_from_pages(struct sg_table * , struct page ** , unsigned int , unsigned int , unsigned long , unsigned int , gfp_t )'/>
<use f='linux/lib/scatterlist.c' l='446' c='__sg_alloc_table_from_pages'/>
<use f='linux/lib/scatterlist.c' l='446' u='a'/>
<use f='linux/lib/scatterlist.c' l='446' u='a'/>
<use f='linux/lib/scatterlist.c' l='472' u='c' c='sg_alloc_table_from_pages'/>
<doc f='linux/lib/scatterlist.c' l='372'>/**
 * __sg_alloc_table_from_pages - Allocate and initialize an sg table from
 *			         an array of pages
 * @sgt:	 The sg table header to use
 * @pages:	 Pointer to an array of page pointers
 * @n_pages:	 Number of pages in the pages array
 * @offset:      Offset from start of the first page to the start of a buffer
 * @size:        Number of valid bytes in the buffer (after offset)
 * @max_segment: Maximum size of a scatterlist node in bytes (page aligned)
 * @gfp_mask:	 GFP allocation mask
 *
 *  Description:
 *    Allocate and initialize an sg table from a list of pages. Contiguous
 *    ranges of the pages are squashed into a single scatterlist node up to the
 *    maximum size specified in @max_segment. An user may provide an offset at a
 *    start and a size of valid data in a buffer specified by the page array.
 *    The returned sg table is released by sg_free_table.
 *
 * Returns:
 *   0 on success, negative error on failure
 */</doc>
