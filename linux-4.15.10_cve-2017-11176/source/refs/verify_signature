<dec f='linux/include/crypto/public_key.h' l='68' type='int verify_signature(const struct key * key, const struct public_key_signature * sig)'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_trust.c' l='118' u='c' c='pkcs7_validate_trust_one'/>
<use f='linux/crypto/asymmetric_keys/restrict.c' l='110' u='c' c='restrict_link_by_signature'/>
<use f='linux/crypto/asymmetric_keys/restrict.c' l='210' u='c' c='key_or_keyring_common'/>
<def f='linux/crypto/asymmetric_keys/signature.c' l='46' ll='67' type='int verify_signature(const struct key * key, const struct public_key_signature * sig)'/>
<dec f='linux/crypto/asymmetric_keys/signature.c' l='68' type='int verify_signature(const struct key * , const struct public_key_signature * )'/>
<use f='linux/crypto/asymmetric_keys/signature.c' l='68' c='verify_signature'/>
<use f='linux/crypto/asymmetric_keys/signature.c' l='68' u='a'/>
<use f='linux/crypto/asymmetric_keys/signature.c' l='68' u='a'/>
<doc f='linux/crypto/asymmetric_keys/signature.c' l='39'>/**
 * verify_signature - Initiate the use of an asymmetric key to verify a signature
 * @key: The asymmetric key to verify against
 * @sig: The signature to check
 *
 * Returns 0 if successful or else an error.
 */</doc>
