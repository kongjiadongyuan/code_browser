<dec f='linux/include/linux/mm.h' l='1447' type='int try_to_release_page(struct page * page, gfp_t gfp_mask)'/>
<use f='linux/fs/buffer.c' l='1521' u='c' c='block_invalidatepage'/>
<use f='linux/fs/ext4/move_extent.c' l='343' u='c' c='move_extent_per_page'/>
<use f='linux/fs/ext4/move_extent.c' l='345' u='c' c='move_extent_per_page'/>
<use f='linux/fs/ext4/move_extent.c' l='364' u='c' c='move_extent_per_page'/>
<use f='linux/fs/ext4/move_extent.c' l='365' u='c' c='move_extent_per_page'/>
<use f='linux/fs/splice.c' l='69' u='c' c='page_cache_pipe_buf_steal'/>
<def f='linux/mm/filemap.c' l='3318' ll='3329' type='int try_to_release_page(struct page * page, gfp_t gfp_mask)'/>
<dec f='linux/mm/filemap.c' l='3331' type='int try_to_release_page(struct page * , gfp_t )'/>
<use f='linux/mm/filemap.c' l='3331' c='try_to_release_page'/>
<use f='linux/mm/filemap.c' l='3331' u='a'/>
<use f='linux/mm/filemap.c' l='3331' u='a'/>
<doc f='linux/mm/filemap.c' l='3301'>/**
 * try_to_release_page() - release old fs-specific metadata on a page
 *
 * @page: the page which the kernel is trying to free
 * @gfp_mask: memory allocation flags (and I/O mode)
 *
 * The address_space is to try to release any data against the page
 * (presumably at page-&gt;private).  If the release was successful, return &apos;1&apos;.
 * Otherwise return zero.
 *
 * This may also be called if PG_fscache is set on a page, indicating that the
 * page is known to the local caching routines.
 *
 * The @gfp_mask argument specifies whether I/O may be performed to release
 * this page (__GFP_IO), and whether the call may block (__GFP_RECLAIM &amp; __GFP_FS).
 *
 */</doc>
<use f='linux/mm/migrate.c' l='886' u='c' c='fallback_migrate_page'/>
<use f='linux/mm/truncate.c' l='218' u='c' c='invalidate_complete_page'/>
<use f='linux/mm/truncate.c' l='631' u='c' c='invalidate_complete_page2'/>
<use f='linux/mm/vmscan.c' l='1280' u='c' c='shrink_page_list'/>
<use f='linux/mm/vmscan.c' l='2024' u='c' c='shrink_active_list'/>
