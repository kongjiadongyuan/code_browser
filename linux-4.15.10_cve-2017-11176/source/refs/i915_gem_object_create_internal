<dec f='linux/drivers/gpu/drm/i915/i915_drv.h' l='3888' type='struct drm_i915_gem_object * i915_gem_object_create_internal(struct drm_i915_private * dev_priv, phys_addr_t size)'/>
<doc f='linux/drivers/gpu/drm/i915/i915_drv.h' l='3886'>/* i915_gem_internal.c */</doc>
<use f='linux/drivers/gpu/drm/i915/i915_gem_batch_pool.c' l='147' u='c' c='i915_gem_batch_pool_get'/>
<def f='linux/drivers/gpu/drm/i915/i915_gem_internal.c' l='178' ll='205' type='struct drm_i915_gem_object * i915_gem_object_create_internal(struct drm_i915_private * i915, phys_addr_t size)'/>
<doc f='linux/drivers/gpu/drm/i915/i915_gem_internal.c' l='167'>/**
 * Creates a new object that wraps some internal memory for private use.
 * This object is not backed by swappable storage, and as such its contents
 * are volatile and only valid whilst pinned. If the object is reaped by the
 * shrinker, its pages and data will be discarded. Equally, it is not a full
 * GEM object and so not valid for access from userspace. This makes it useful
 * for hardware interfaces like ringbuffers (which are pinned from the time
 * the request is written to the time the hardware stops accessing it), but
 * not for contexts (which need to be preserved when not active for later
 * reuse). Note that it is not cleared upon allocation.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/i915_gem_render_state.c' l='197' u='c' c='i915_gem_render_state_init'/>
<use f='linux/drivers/gpu/drm/i915/intel_engine_cs.c' l='449' u='c' c='intel_engine_create_scratch'/>
<use f='linux/drivers/gpu/drm/i915/intel_engine_cs.c' l='517' u='c' c='init_status_page'/>
<use f='linux/drivers/gpu/drm/i915/intel_ringbuffer.c' l='1292' u='c' c='intel_ring_create_vma'/>
