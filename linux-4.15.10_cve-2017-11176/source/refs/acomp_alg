<def f='linux/include/crypto/acompress.h' l='81' ll='89'/>
<use f='linux/include/crypto/acompress.h' l='120' c='__crypto_acomp_alg'/>
<use f='linux/include/crypto/acompress.h' l='122' c='__crypto_acomp_alg'/>
<use f='linux/include/crypto/acompress.h' l='122' c='__crypto_acomp_alg'/>
<use f='linux/include/crypto/acompress.h' l='122' c='__crypto_acomp_alg'/>
<use f='linux/include/crypto/acompress.h' l='130' c='crypto_acomp_alg'/>
<use f='linux/include/crypto/internal/acompress.h' l='67' c='crypto_register_acomp'/>
<use f='linux/include/crypto/internal/acompress.h' l='79' c='crypto_unregister_acomp'/>
<use f='linux/include/crypto/internal/acompress.h' l='81' c='crypto_register_acomps'/>
<use f='linux/include/crypto/internal/acompress.h' l='82' c='crypto_unregister_acomps'/>
<use f='linux/crypto/acompress.c' l='64' c='crypto_acomp_exit_tfm'/>
<use f='linux/crypto/acompress.c' l='72' c='crypto_acomp_init_tfm'/>
<use f='linux/crypto/acompress.c' l='151' c='crypto_register_acomp'/>
<use f='linux/crypto/acompress.c' l='163' c='crypto_unregister_acomp'/>
<use f='linux/crypto/acompress.c' l='169' c='crypto_register_acomps'/>
<use f='linux/crypto/acompress.c' l='189' c='crypto_unregister_acomps'/>
<size>464</size>
<doc f='linux/include/crypto/acompress.h' l='60'>/**
 * struct acomp_alg - asynchronous compression algorithm
 *
 * @compress:	Function performs a compress operation
 * @decompress:	Function performs a de-compress operation
 * @dst_free:	Frees destination buffer if allocated inside the algorithm
 * @init:	Initialize the cryptographic transformation object.
 *		This function is used to initialize the cryptographic
 *		transformation object. This function is called only once at
 *		the instantiation time, right after the transformation context
 *		was allocated. In case the cryptographic hardware has some
 *		special requirements which need to be handled by software, this
 *		function shall check for the precise requirement of the
 *		transformation and put any software fallbacks in place.
 * @exit:	Deinitialize the cryptographic transformation object. This is a
 *		counterpart to @init, used to remove various changes set in
 *		@init.
 *
 * @reqsize:	Context size for (de)compression requests
 * @base:	Common crypto API algorithm data structure
 */</doc>
<mbr r='acomp_alg::compress' o='0' t='int (*)(struct acomp_req *)'/>
<mbr r='acomp_alg::decompress' o='64' t='int (*)(struct acomp_req *)'/>
<mbr r='acomp_alg::dst_free' o='128' t='void (*)(struct scatterlist *)'/>
<mbr r='acomp_alg::init' o='192' t='int (*)(struct crypto_acomp *)'/>
<mbr r='acomp_alg::exit' o='256' t='void (*)(struct crypto_acomp *)'/>
<mbr r='acomp_alg::reqsize' o='320' t='unsigned int'/>
<mbr r='acomp_alg::base' o='384' t='struct crypto_alg'/>
