<dec f='linux/include/linux/pm_domain.h' l='294' type='int dev_pm_domain_attach(struct device * dev, bool power_on)'/>
<use f='linux/drivers/base/platform.c' l='575' u='c' c='platform_drv_probe'/>
<def f='linux/drivers/base/power/common.c' l='103' ll='112' type='int dev_pm_domain_attach(struct device * dev, bool power_on)'/>
<dec f='linux/drivers/base/power/common.c' l='113' type='int dev_pm_domain_attach(struct device * , bool )'/>
<use f='linux/drivers/base/power/common.c' l='113' c='dev_pm_domain_attach'/>
<use f='linux/drivers/base/power/common.c' l='113' u='a'/>
<use f='linux/drivers/base/power/common.c' l='113' u='a'/>
<doc f='linux/drivers/base/power/common.c' l='84'>/**
 * dev_pm_domain_attach - Attach a device to its PM domain.
 * @dev: Device to attach.
 * @power_on: Used to indicate whether we should power on the device.
 *
 * The @dev may only be attached to a single PM domain. By iterating through
 * the available alternatives we try to find a valid PM domain for the device.
 * As attachment succeeds, the -&gt;detach() callback in the struct dev_pm_domain
 * should be assigned by the corresponding attach function.
 *
 * This function should typically be invoked from subsystem level code during
 * the probe phase. Especially for those that holds devices which requires
 * power management through PM domains.
 *
 * Callers must ensure proper synchronization of this function with power
 * management callbacks.
 *
 * Returns 0 on successfully attached PM domain or negative error code.
 */</doc>
<use f='linux/drivers/i2c/i2c-core-base.c' l='397' u='c' c='i2c_device_probe'/>
