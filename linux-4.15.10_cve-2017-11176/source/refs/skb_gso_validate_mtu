<dec f='linux/include/linux/skbuff.h' l='3284' type='bool skb_gso_validate_mtu(const struct sk_buff * skb, unsigned int mtu)'/>
<def f='linux/net/core/skbuff.c' l='4921' ll='4941' type='bool skb_gso_validate_mtu(const struct sk_buff * skb, unsigned int mtu)'/>
<dec f='linux/net/core/skbuff.c' l='4942' type='bool skb_gso_validate_mtu(const struct sk_buff * , unsigned int )'/>
<use f='linux/net/core/skbuff.c' l='4942' c='skb_gso_validate_mtu'/>
<use f='linux/net/core/skbuff.c' l='4942' u='a'/>
<use f='linux/net/core/skbuff.c' l='4942' u='a'/>
<doc f='linux/net/core/skbuff.c' l='4912'>/**
 * skb_gso_validate_mtu - Return in case such skb fits a given MTU
 *
 * @skb: GSO skb
 * @mtu: MTU to validate against
 *
 * skb_gso_validate_mtu validates if a given skb will fit a wanted MTU
 * once split.
 */</doc>
<use f='linux/net/ipv4/ip_forward.c' l='58' u='c' c='ip_exceeds_mtu'/>
<use f='linux/net/ipv4/ip_output.c' l='251' u='c' c='ip_finish_output_gso'/>
<use f='linux/net/ipv6/ip6_output.c' l='406' u='c' c='ip6_pkt_too_big'/>
