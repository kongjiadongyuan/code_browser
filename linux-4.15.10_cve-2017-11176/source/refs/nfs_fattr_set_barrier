<dec f='linux/include/linux/nfs_fs.h' l='378' type='void nfs_fattr_set_barrier(struct nfs_fattr * fattr)'/>
<use f='linux/fs/nfs/inode.c' l='673' u='c' c='nfs_setattr_update_inode'/>
<def f='linux/fs/nfs/inode.c' l='1424' ll='1427' type='void nfs_fattr_set_barrier(struct nfs_fattr * fattr)'/>
<use f='linux/fs/nfs/inode.c' l='1611' u='c' c='nfs_post_op_update_inode'/>
<use f='linux/fs/nfs/inode.c' l='1684' u='c' c='nfs_post_op_update_inode_force_wcc'/>
<doc f='linux/fs/nfs/inode.c' l='1413'>/**
 * nfs_fattr_set_barrier
 * @fattr: attributes
 *
 * Used to set a barrier after an attribute was updated. This
 * barrier ensures that older attributes from RPC calls that may
 * have raced with our update cannot clobber these new values.
 * Note that you are still responsible for ensuring that other
 * operations which change the attribute on the server do not
 * collide.
 */</doc>
<use f='linux/fs/nfs/write.c' l='1503' u='c' c='nfs_writeback_check_extend'/>
