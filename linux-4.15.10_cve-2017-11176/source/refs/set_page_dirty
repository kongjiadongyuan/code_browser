<dec f='linux/include/linux/mm.h' l='1458' type='int set_page_dirty(struct page * page)'/>
<use f='linux/drivers/gpu/drm/drm_gem.c' l='609' u='c' c='drm_gem_put_pages'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='291' u='c' c='i915_gem_object_put_pages_phys'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='2245' u='c' c='i915_gem_object_put_pages_gtt'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='5472' u='c' c='i915_gem_object_get_dirty_page'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_fence_reg.c' l='763' u='c' c='i915_gem_object_do_bit_17_swizzle'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_userptr.c' l='688' u='c' c='i915_gem_userptr_put_pages'/>
<use f='linux/fs/buffer.c' l='2506' u='c' c='block_page_mkwrite'/>
<use f='linux/fs/buffer.c' l='2711' u='c' c='nobh_write_end'/>
<use f='linux/fs/buffer.c' l='2849' u='c' c='nobh_truncate_page'/>
<use f='linux/fs/iomap.c' l='478' u='c' c='iomap_page_mkwrite'/>
<use f='linux/fs/libfs.c' l='496' u='c' c='simple_write_end'/>
<use f='linux/fs/nfs/direct.c' l='416' u='c' c='nfs_direct_read_completion'/>
<use f='linux/mm/filemap.c' l='2719' u='c' c='filemap_page_mkwrite'/>
<use f='linux/mm/gup.c' l='167' u='c' c='follow_page_pte'/>
<use f='linux/mm/hugetlb.c' l='3369' u='c' c='__unmap_hugepage_range'/>
<use f='linux/mm/memory.c' l='1327' u='c' c='zap_pte_range'/>
<use f='linux/mm/memory.c' l='2383' u='c' c='fault_dirty_shared_page'/>
<def f='linux/mm/page-writeback.c' l='2542' ll='2572' type='int set_page_dirty(struct page * page)'/>
<dec f='linux/mm/page-writeback.c' l='2573' type='int set_page_dirty(struct page * )'/>
<use f='linux/mm/page-writeback.c' l='2573' c='set_page_dirty'/>
<use f='linux/mm/page-writeback.c' l='2573' u='a'/>
<use f='linux/mm/page-writeback.c' l='2573' u='a'/>
<use f='linux/mm/page-writeback.c' l='2590' u='c' c='set_page_dirty_lock'/>
<use f='linux/mm/page-writeback.c' l='2684' u='c' c='clear_page_dirty_for_io'/>
<doc f='linux/mm/page-writeback.c' l='2531'>/*
 * Dirty a page.
 *
 * For pages with a mapping this should be done under the page lock
 * for the benefit of asynchronous memory errors who prefer a consistent
 * dirty state. This rule can be broken in some special cases,
 * but should be better not to.
 *
 * If the mapping doesn&apos;t provide a set_page_dirty a_op, then
 * just fall through and assume that it wants buffer_heads.
 */</doc>
<use f='linux/mm/page_io.c' l='65' u='c' c='end_swap_bio_write'/>
<use f='linux/mm/page_io.c' l='318' u='c' c='__swap_writepage'/>
<use f='linux/mm/page_io.c' l='336' u='c' c='__swap_writepage'/>
<use f='linux/mm/rmap.c' l='1468' u='c' c='try_to_unmap_one'/>
<use f='linux/mm/shmem.c' l='865' u='c' c='shmem_undo_range'/>
<use f='linux/mm/shmem.c' l='875' u='c' c='shmem_undo_range'/>
<use f='linux/mm/shmem.c' l='1180' u='c' c='shmem_unuse_inode'/>
<use f='linux/mm/shmem.c' l='1350' u='c' c='shmem_writepage'/>
<use f='linux/mm/shmem.c' l='1724' u='c' c='shmem_getpage_gfp'/>
<use f='linux/mm/shmem.c' l='2402' u='c' c='shmem_write_end'/>
<use f='linux/mm/shmem.c' l='2455' u='c' c='shmem_file_read_iter'/>
<use f='linux/mm/shmem.c' l='2942' u='c' c='shmem_fallocate'/>
<use f='linux/mm/shmem.c' l='3243' u='c' c='shmem_symlink'/>
<use f='linux/mm/swap_state.c' l='252' u='c' c='add_to_swap'/>
<use f='linux/mm/truncate.c' l='884' u='c' c='pagecache_isize_extended'/>
