<dec f='linux/include/linux/buffer_head.h' l='190' type='struct buffer_head * __bread_gfp(struct block_device * , sector_t block, unsigned int size, gfp_t gfp)'/>
<use f='linux/include/linux/buffer_head.h' l='307' u='c' c='sb_bread'/>
<use f='linux/include/linux/buffer_head.h' l='313' u='c' c='sb_bread_unmovable'/>
<use f='linux/include/linux/buffer_head.h' l='396' u='c' c='__bread'/>
<def f='linux/fs/buffer.c' l='1372' ll='1381' type='struct buffer_head * __bread_gfp(struct block_device * bdev, sector_t block, unsigned int size, gfp_t gfp)'/>
<dec f='linux/fs/buffer.c' l='1382' type='struct buffer_head * __bread_gfp(struct block_device * , sector_t , unsigned int , gfp_t )'/>
<use f='linux/fs/buffer.c' l='1382' c='__bread_gfp'/>
<use f='linux/fs/buffer.c' l='1382' u='a'/>
<use f='linux/fs/buffer.c' l='1382' u='a'/>
<doc f='linux/fs/buffer.c' l='1360'>/**
 *  __bread_gfp() - reads a specified block and returns the bh
 *  @bdev: the block_device to read from
 *  @block: number of block
 *  @size: size (in bytes) to read
 *  @gfp: page allocation flag
 *
 *  Reads a specified block, and returns buffer head that contains it.
 *  The page cache can be allocated from non-movable area
 *  not to prevent page migration if you set gfp to zero.
 *  It returns NULL if the block was unreadable.
 */</doc>
