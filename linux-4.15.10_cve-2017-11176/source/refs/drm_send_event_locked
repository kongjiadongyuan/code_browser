<dec f='linux/include/drm/drm_file.h' l='378' type='void drm_send_event_locked(struct drm_device * dev, struct drm_pending_event * e)'/>
<def f='linux/drivers/gpu/drm/drm_file.c' l='699' ll='723' type='void drm_send_event_locked(struct drm_device * dev, struct drm_pending_event * e)'/>
<dec f='linux/drivers/gpu/drm/drm_file.c' l='724' type='void drm_send_event_locked(struct drm_device * , struct drm_pending_event * )'/>
<use f='linux/drivers/gpu/drm/drm_file.c' l='724' c='drm_send_event_locked'/>
<use f='linux/drivers/gpu/drm/drm_file.c' l='724' u='a'/>
<use f='linux/drivers/gpu/drm/drm_file.c' l='724' u='a'/>
<use f='linux/drivers/gpu/drm/drm_file.c' l='746' u='c' c='drm_send_event'/>
<doc f='linux/drivers/gpu/drm/drm_file.c' l='685'>/**
 * drm_send_event_locked - send DRM event to file descriptor
 * @dev: DRM device
 * @e: DRM event to deliver
 *
 * This function sends the event @e, initialized with drm_event_reserve_init(),
 * to its associated userspace DRM file. Callers must already hold
 * &amp;drm_device.event_lock, see drm_send_event() for the unlocked version.
 *
 * Note that the core will take care of unlinking and disarming events when the
 * corresponding DRM file is closed. Drivers need not worry about whether the
 * DRM file for this event still exists and can call this function upon
 * completion of the asynchronous work unconditionally.
 */</doc>
<use f='linux/drivers/gpu/drm/drm_vblank.c' l='828' u='c' c='send_vblank_event'/>
