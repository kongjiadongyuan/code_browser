<dec f='linux/drivers/gpu/drm/i915/intel_drv.h' l='1847' type='void intel_runtime_pm_get_noresume(struct drm_i915_private * dev_priv)'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_request.c' l='254' u='c' c='mark_busy'/>
<use f='linux/drivers/gpu/drm/i915/intel_pm.c' l='8192' u='c' c='intel_autoenable_gt_powersave'/>
<def f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='3200' ll='3209' type='void intel_runtime_pm_get_noresume(struct drm_i915_private * dev_priv)'/>
<doc f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='3183'>/**
 * intel_runtime_pm_get_noresume - grab a runtime pm reference
 * @dev_priv: i915 device instance
 *
 * This function grabs a device-level runtime pm reference (mostly used for GEM
 * code to ensure the GTT or GT is on).
 *
 * It will _not_ power up the device but instead only check that it&apos;s powered
 * on.  Therefore it is only valid to call this functions from contexts where
 * the device is known to be powered up and where trying to power it up would
 * result in hilarity and deadlocks. That pretty much means only the system
 * suspend/resume code where this is used to grab runtime pm references for
 * delayed setup down in work items.
 *
 * Any runtime pm reference obtained by this function must have a symmetric
 * call to intel_runtime_pm_put() to release the reference again.
 */</doc>
