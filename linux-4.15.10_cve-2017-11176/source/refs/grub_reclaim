<def f='linux/kernel/sched/deadline.c' l='1087' ll='1107' type='u64 grub_reclaim(u64 delta, struct rq * rq, struct sched_dl_entity * dl_se)'/>
<use f='linux/kernel/sched/deadline.c' l='1152' u='c' c='update_curr_dl'/>
<doc f='linux/kernel/sched/deadline.c' l='1068'>/*
 * This function implements the GRUB accounting rule:
 * according to the GRUB reclaiming algorithm, the runtime is
 * not decreased as &quot;dq = -dt&quot;, but as
 * &quot;dq = -max{u / Umax, (1 - Uinact - Uextra)} dt&quot;,
 * where u is the utilization of the task, Umax is the maximum reclaimable
 * utilization, Uinact is the (per-runqueue) inactive utilization, computed
 * as the difference between the &quot;total runqueue utilization&quot; and the
 * runqueue active utilization, and Uextra is the (per runqueue) extra
 * reclaimable utilization.
 * Since rq-&gt;dl.running_bw and rq-&gt;dl.this_bw contain utilizations
 * multiplied by 2^BW_SHIFT, the result has to be shifted right by
 * BW_SHIFT.
 * Since rq-&gt;dl.bw_ratio contains 1 / Umax multipled by 2^RATIO_SHIFT,
 * dl_bw is multiped by rq-&gt;dl.bw_ratio and shifted right by RATIO_SHIFT.
 * Since delta is a 64 bit variable, to have an overflow its value
 * should be larger than 2^(64 - 20 - 8), which is more than 64 seconds.
 * So, overflow is not an issue here.
 */</doc>
