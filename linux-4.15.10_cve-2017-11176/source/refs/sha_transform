<dec f='linux/include/linux/cryptohash.h' l='12' type='void sha_transform(__u32 * digest, const char * data, __u32 * W)'/>
<use f='linux/crypto/sha1_generic.c' l='42' u='c' c='sha1_generic_block_fn'/>
<use f='linux/drivers/char/random.c' l='1334' u='c' c='extract_buf'/>
<use f='linux/kernel/bpf/core.c' l='207' u='c' c='bpf_prog_calc_tag'/>
<def f='linux/lib/sha1.c' l='82' ll='187' type='void sha_transform(__u32 * digest, const char * data, __u32 * array)'/>
<dec f='linux/lib/sha1.c' l='188' type='void sha_transform(__u32 * , const char * , __u32 * )'/>
<use f='linux/lib/sha1.c' l='188' c='sha_transform'/>
<use f='linux/lib/sha1.c' l='188' u='a'/>
<use f='linux/lib/sha1.c' l='188' u='a'/>
<doc f='linux/lib/sha1.c' l='66'>/**
 * sha_transform - single block SHA1 transform
 *
 * @digest: 160 bit digest to update
 * @data:   512 bits of data to hash
 * @array:  16 words of workspace (see note)
 *
 * This function generates a SHA1 digest for a single 512-bit block.
 * Be warned, it does not handle padding and message digest, do not
 * confuse it with the full FIPS 180-1 digest algorithm for variable
 * length messages.
 *
 * Note: If the hash is security sensitive, the caller should be sure
 * to clear the workspace. This is left to the caller to avoid
 * unnecessary clears between chained hashing operations.
 */</doc>
<use f='linux/net/ipv6/addrconf.c' l='3156' u='c' c='ipv6_generate_stable_address'/>
