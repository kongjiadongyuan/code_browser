<dec f='linux/include/linux/kthread.h' l='182' type='bool kthread_queue_work(struct kthread_worker * worker, struct kthread_work * work)'/>
<use f='linux/drivers/block/loop.c' l='1708' u='c' c='loop_queue_rq'/>
<use f='linux/drivers/md/dm-rq.c' l='673' u='c' c='dm_old_request_fn'/>
<def f='linux/kernel/kthread.c' l='789' ll='802' type='bool kthread_queue_work(struct kthread_worker * worker, struct kthread_work * work)'/>
<dec f='linux/kernel/kthread.c' l='803' type='bool kthread_queue_work(struct kthread_worker * , struct kthread_work * )'/>
<use f='linux/kernel/kthread.c' l='803' c='kthread_queue_work'/>
<use f='linux/kernel/kthread.c' l='803' u='a'/>
<use f='linux/kernel/kthread.c' l='803' u='a'/>
<use f='linux/kernel/kthread.c' l='1135' u='c' c='kthread_flush_worker'/>
<doc f='linux/kernel/kthread.c' l='777'>/**
 * kthread_queue_work - queue a kthread_work
 * @worker: target kthread_worker
 * @work: kthread_work to queue
 *
 * Queue @work to work processor @task for async execution.  @task
 * must have been created with kthread_worker_create().  Returns %true
 * if @work was successfully queued, %false if it was already pending.
 *
 * Reinitialize the work if it needs to be used by another worker.
 * For example, when the worker was stopped and started again.
 */</doc>
