<dec f='linux/drivers/gpu/drm/i915/i915_drv.h' l='3778' type='int i915_gem_object_set_cache_level(struct drm_i915_gem_object * obj, enum i915_cache_level cache_level)'/>
<def f='linux/drivers/gpu/drm/i915/i915_gem.c' l='3672' ll='3782' type='int i915_gem_object_set_cache_level(struct drm_i915_gem_object * obj, enum i915_cache_level cache_level)'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='3867' u='c' c='i915_gem_set_caching_ioctl'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem.c' l='3904' u='c' c='i915_gem_object_pin_to_display_plane'/>
<doc f='linux/drivers/gpu/drm/i915/i915_gem.c' l='3657'>/**
 * Changes the cache-level of an object across all VMA.
 * @obj: object to act on
 * @cache_level: new cache level to set for the object
 *
 * After this function returns, the object will be in the new cache-level
 * across all GTT and the contents of the backing storage will be coherent,
 * with respect to the new cache-level. In order to keep the backing storage
 * coherent for all users, we only allow a single cache level to be set
 * globally on the object and prevent it from being changed whilst the
 * hardware is reading from the object. That is if the object is currently
 * on the scanout it will be set to uncached (or equivalent display
 * cache coherency) and all non-MOCS GPU access will also be uncached so
 * that all direct access to the scanout remains coherent.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/i915_perf.c' l='1453' u='c' c='alloc_oa_buffer'/>
<use f='linux/drivers/gpu/drm/i915/intel_engine_cs.c' l='523' u='c' c='init_status_page'/>
<use f='linux/drivers/gpu/drm/i915/intel_ringbuffer.c' l='1404' u='c' c='alloc_context_vma'/>
