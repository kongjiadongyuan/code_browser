<dec f='linux/include/drm/drm_atomic_helper.h' l='124' type='int drm_atomic_helper_resume(struct drm_device * dev, struct drm_atomic_state * state)'/>
<def f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3043' ll='3070' type='int drm_atomic_helper_resume(struct drm_device * dev, struct drm_atomic_state * state)'/>
<dec f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3071' type='int drm_atomic_helper_resume(struct drm_device * , struct drm_atomic_state * )'/>
<use f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3071' c='drm_atomic_helper_resume'/>
<use f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3071' u='a'/>
<use f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3071' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_atomic_helper.c' l='3027'>/**
 * drm_atomic_helper_resume - subsystem-level resume helper
 * @dev: DRM device
 * @state: atomic state to resume to
 *
 * Calls drm_mode_config_reset() to synchronize hardware and software states,
 * grabs all modeset locks and commits the atomic state object. This can be
 * used in conjunction with the drm_atomic_helper_suspend() helper to
 * implement suspend/resume for drivers that support atomic mode-setting.
 *
 * Returns:
 * 0 on success or a negative error code on failure.
 *
 * See also:
 * drm_atomic_helper_suspend()
 */</doc>
