<dec f='linux/include/linux/device.h' l='1166' type='struct device * __root_device_register(const char * name, struct module * owner)'/>
<doc f='linux/include/linux/device.h' l='1163'>/*
 * Root device objects for grouping under /sys/devices
 */</doc>
<def f='linux/drivers/base/core.c' l='2338' ll='2375' type='struct device * __root_device_register(const char * name, struct module * owner)'/>
<dec f='linux/drivers/base/core.c' l='2376' type='struct device * __root_device_register(const char * , struct module * )'/>
<use f='linux/drivers/base/core.c' l='2376' c='__root_device_register'/>
<use f='linux/drivers/base/core.c' l='2376' u='a'/>
<use f='linux/drivers/base/core.c' l='2376' u='a'/>
<doc f='linux/drivers/base/core.c' l='2316'>/**
 * __root_device_register - allocate and register a root device
 * @name: root device name
 * @owner: owner module of the root device, usually THIS_MODULE
 *
 * This function allocates a root device and registers it
 * using device_register(). In order to free the returned
 * device, use root_device_unregister().
 *
 * Root devices are dummy devices which allow other devices
 * to be grouped under /sys/devices. Use this function to
 * allocate a root device and then use it as the parent of
 * any device which should appear under /sys/devices/{name}
 *
 * The /sys/devices/{name} directory will also contain a
 * &apos;module&apos; symlink which points to the @owner directory
 * in sysfs.
 *
 * Returns &amp;struct device pointer on success, or ERR_PTR() on error.
 *
 * Note: You probably want to use root_device_register().
 */</doc>
