<dec f='linux/include/scsi/scsi_device.h' l='494' type='int scsi_internal_device_unblock_nowait(struct scsi_device * sdev, enum scsi_device_state new_state)'/>
<def f='linux/drivers/scsi/scsi_lib.c' l='3169' ll='3197' type='int scsi_internal_device_unblock_nowait(struct scsi_device * sdev, enum scsi_device_state new_state)'/>
<dec f='linux/drivers/scsi/scsi_lib.c' l='3198' type='int scsi_internal_device_unblock_nowait(struct scsi_device * , enum scsi_device_state )'/>
<use f='linux/drivers/scsi/scsi_lib.c' l='3198' c='scsi_internal_device_unblock_nowait'/>
<use f='linux/drivers/scsi/scsi_lib.c' l='3198' u='a'/>
<use f='linux/drivers/scsi/scsi_lib.c' l='3198' u='a'/>
<use f='linux/drivers/scsi/scsi_lib.c' l='3220' u='c' c='scsi_internal_device_unblock'/>
<doc f='linux/drivers/scsi/scsi_lib.c' l='3154'>/**
 * scsi_internal_device_unblock_nowait - resume a device after a block request
 * @sdev:	device to resume
 * @new_state:	state to set the device to after unblocking
 *
 * Restart the device queue for a previously suspended SCSI device. Does not
 * sleep.
 *
 * Returns zero if successful or a negative error code upon failure.
 *
 * Notes:
 * This routine transitions the device to the SDEV_RUNNING state or to one of
 * the offline states (which must be a legal transition) allowing the midlayer
 * to goose the queue for this device.
 */</doc>
