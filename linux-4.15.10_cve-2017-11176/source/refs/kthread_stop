<dec f='linux/include/linux/kthread.h' l='56' type='int kthread_stop(struct task_struct * k)'/>
<use f='linux/drivers/block/loop.c' l='835' u='c' c='loop_unprepare_queue'/>
<use f='linux/drivers/char/hw_random/core.c' l='165' u='c' c='hwrng_init'/>
<use f='linux/drivers/char/hw_random/core.c' l='524' u='c' c='hwrng_unregister'/>
<use f='linux/drivers/gpu/drm/i915/intel_breadcrumbs.c' l='850' u='c' c='intel_engine_fini_breadcrumbs'/>
<use f='linux/drivers/md/dm.c' l='1648' u='c' c='cleanup_mapped_device'/>
<use f='linux/drivers/md/md.c' l='7543' u='c' c='md_unregister_thread'/>
<use f='linux/drivers/pcmcia/cs.c' l='217' u='c' c='pcmcia_unregister_socket'/>
<use f='linux/drivers/scsi/hosts.c' l='327' u='c' c='scsi_host_dev_release'/>
<use f='linux/drivers/scsi/hosts.c' l='510' u='c' c='scsi_host_alloc'/>
<use f='linux/drivers/usb/storage/usb.c' l='815' u='c' c='usb_stor_release_resources'/>
<use f='linux/fs/ext4/super.c' l='942' u='c' c='ext4_put_super'/>
<use f='linux/fs/ext4/super.c' l='3191' u='c' c='ext4_destroy_lazyinit_thread'/>
<use f='linux/fs/ext4/super.c' l='4387' u='c' c='ext4_fill_super'/>
<use f='linux/fs/lockd/svc.c' l='522' u='c' c='lockd_down'/>
<use f='linux/kernel/irq/manage.c' l='1475' u='c' c='__setup_irq'/>
<use f='linux/kernel/irq/manage.c' l='1482' u='c' c='__setup_irq'/>
<use f='linux/kernel/irq/manage.c' l='1614' u='c' c='__free_irq'/>
<use f='linux/kernel/irq/manage.c' l='1617' u='c' c='__free_irq'/>
<def f='linux/kernel/kthread.c' l='518' ll='536' type='int kthread_stop(struct task_struct * k)'/>
<dec f='linux/kernel/kthread.c' l='537' type='int kthread_stop(struct task_struct * )'/>
<use f='linux/kernel/kthread.c' l='537' c='kthread_stop'/>
<use f='linux/kernel/kthread.c' l='537' u='a'/>
<use f='linux/kernel/kthread.c' l='537' u='a'/>
<use f='linux/kernel/kthread.c' l='1157' u='c' c='kthread_destroy_worker'/>
<doc f='linux/kernel/kthread.c' l='503'>/**
 * kthread_stop - stop a thread created by kthread_create().
 * @k: thread created by kthread_create().
 *
 * Sets kthread_should_stop() for @k to return true, wakes it, and
 * waits for it to exit. This can also be called after kthread_create()
 * instead of calling wake_up_process(): the thread will exit without
 * calling threadfn().
 *
 * If threadfn() may call do_exit() itself, the caller must ensure
 * task_struct can&apos;t go away.
 *
 * Returns the result of threadfn(), or %-EINTR if wake_up_process()
 * was never called.
 */</doc>
<use f='linux/kernel/power/swap.c' l='861' u='c' c='save_image_lzo'/>
<use f='linux/kernel/power/swap.c' l='867' u='c' c='save_image_lzo'/>
<use f='linux/kernel/power/swap.c' l='1457' u='c' c='load_image_lzo'/>
<use f='linux/kernel/power/swap.c' l='1463' u='c' c='load_image_lzo'/>
<use f='linux/kernel/smpboot.c' l='275' u='c' c='smpboot_destroy_threads'/>
<use f='linux/kernel/workqueue.c' l='4108' u='c' c='destroy_workqueue'/>
<use f='linux/mm/compaction.c' l='2103' u='c' c='kcompactd_stop'/>
<use f='linux/mm/vmscan.c' l='3747' u='c' c='kswapd_stop'/>
<use f='linux/net/sunrpc/svc.c' l='810' u='c' c='svc_stop_kthreads'/>
