<dec f='linux/include/drm/drm_gem_framebuffer_helper.h' l='21' type='struct drm_framebuffer * drm_gem_fb_create_with_funcs(struct drm_device * dev, struct drm_file * file, const struct drm_mode_fb_cmd2 * mode_cmd, const struct drm_framebuffer_funcs * funcs)'/>
<def f='linux/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='145' ll='195' type='struct drm_framebuffer * drm_gem_fb_create_with_funcs(struct drm_device * dev, struct drm_file * file, const struct drm_mode_fb_cmd2 * mode_cmd, const struct drm_framebuffer_funcs * funcs)'/>
<dec f='linux/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='196' type='struct drm_framebuffer * drm_gem_fb_create_with_funcs(struct drm_device * , struct drm_file * , const struct drm_mode_fb_cmd2 * , const struct drm_framebuffer_funcs * )'/>
<use f='linux/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='196' c='drm_gem_fb_create_with_funcs'/>
<use f='linux/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='196' u='a'/>
<use f='linux/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='196' u='a'/>
<use f='linux/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='229' u='c' c='drm_gem_fb_create'/>
<doc f='linux/drivers/gpu/drm/drm_gem_framebuffer_helper.c' l='128'>/**
 * drm_gem_fb_create_with_funcs() - Helper function for the
 *                                  &amp;drm_mode_config_funcs.fb_create
 *                                  callback
 * @dev: DRM device
 * @file: DRM file that holds the GEM handle(s) backing the framebuffer
 * @mode_cmd: Metadata from the userspace framebuffer creation request
 * @funcs: vtable to be used for the new framebuffer object
 *
 * This can be used to set &amp;drm_framebuffer_funcs for drivers that need the
 * &amp;drm_framebuffer_funcs.dirty callback. Use drm_gem_fb_create() if you don&apos;t
 * need to change &amp;drm_framebuffer_funcs.
 * The function does buffer size validation.
 *
 * Returns:
 * Pointer to a &amp;drm_framebuffer on success or an error pointer on failure.
 */</doc>
