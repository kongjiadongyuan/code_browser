<dec f='linux/include/sound/hdaudio.h' l='133' type='unsigned int snd_hdac_calc_stream_format(unsigned int rate, unsigned int channels, unsigned int format, unsigned int maxbps, unsigned short spdif_ctls)'/>
<def f='linux/sound/hda/hdac_device.c' l='738' ll='784' type='unsigned int snd_hdac_calc_stream_format(unsigned int rate, unsigned int channels, unsigned int format, unsigned int maxbps, unsigned short spdif_ctls)'/>
<dec f='linux/sound/hda/hdac_device.c' l='785' type='unsigned int snd_hdac_calc_stream_format(unsigned int , unsigned int , unsigned int , unsigned int , unsigned short )'/>
<use f='linux/sound/hda/hdac_device.c' l='785' c='snd_hdac_calc_stream_format'/>
<use f='linux/sound/hda/hdac_device.c' l='785' u='a'/>
<use f='linux/sound/hda/hdac_device.c' l='785' u='a'/>
<doc f='linux/sound/hda/hdac_device.c' l='726'>/**
 * snd_hdac_calc_stream_format - calculate the format bitset
 * @rate: the sample rate
 * @channels: the number of channels
 * @format: the PCM format (SNDRV_PCM_FORMAT_XXX)
 * @maxbps: the max. bps
 * @spdif_ctls: HD-audio SPDIF status bits (0 if irrelevant)
 *
 * Calculate the format bitset from the given rate, channels and th PCM format.
 *
 * Return zero if invalid.
 */</doc>
<use f='linux/sound/pci/hda/hda_controller.c' l='182' u='c' c='azx_pcm_prepare'/>
