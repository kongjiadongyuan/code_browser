<def f='include/x86_64-linux-gnu/bits/getopt_ext.h' l='50' ll='58'/>
<use f='include/x86_64-linux-gnu/bits/getopt_ext.h' l='68' c='getopt_long'/>
<use f='include/x86_64-linux-gnu/bits/getopt_ext.h' l='72' c='getopt_long_only'/>
<size>32</size>
<doc f='include/x86_64-linux-gnu/bits/getopt_ext.h' l='29'>/* Describe the long-named options requested by the application.
   The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector
   of &apos;struct option&apos; terminated by an element containing a name which is
   zero.

   The field &apos;has_arg&apos; is:
   no_argument		(or 0) if the option does not take an argument,
   required_argument	(or 1) if the option requires an argument,
   optional_argument 	(or 2) if the option takes an optional argument.

   If the field &apos;flag&apos; is not NULL, it points to a variable that is set
   to the value given in the field &apos;val&apos; when the option is found, but
   left unchanged if the option is not found.

   To have a long-named option do something other than set an &apos;int&apos; to
   a compiled-in constant, such as set a value from &apos;optarg&apos;, set the
   option&apos;s &apos;flag&apos; field to zero and its &apos;val&apos; field to a nonzero
   value (the equivalent single-letter option character, if there is
   one).  For long options that have a zero &apos;flag&apos; field, &apos;getopt&apos;
   returns the contents of the &apos;val&apos; field.  */</doc>
<mbr r='option::name' o='0' t='const char *'/>
<mbr r='option::has_arg' o='64' t='int'/>
<mbr r='option::flag' o='128' t='int *'/>
<mbr r='option::val' o='192' t='int'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='55'/>
<def f='linux/tools/lib/subcmd/parse-options.h' l='100' ll='115'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='114'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='173' c='parse_options'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='177' c='parse_options_subcommand'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='182' c='usage_with_options'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='185' c='usage_with_options_msg'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='208'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='213' c='parse_options_usage'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='219' c='parse_opt_abbrev_cb'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='220' c='parse_opt_approxidate_cb'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='221' c='parse_opt_verbosity_cb'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='238' c='set_option_flag'/>
<use f='linux/tools/lib/subcmd/parse-options.h' l='239' c='set_option_nobuild'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='20' c='opterror'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='38' c='optwarning'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='48' c='get_arg'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='70' c='get_value'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='324' c='parse_short_opt'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='343' c='parse_long_opt'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='346' c='parse_long_opt'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='346' c='parse_long_opt'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='455' c='check_typos'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='490' c='usage_with_options_internal'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='494' c='parse_options_step'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='611' c='parse_options_subcommand'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='665' c='parse_options'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='675' c='print_option_help'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='766' c='option__cmp'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='766' c='option__cmp'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='785' c='options__order'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='785' c='options__order'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='788' c='options__order'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='789' c='options__order'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='805' c='option__in_argv'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='837' c='usage_with_options_internal'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='840' c='usage_with_options_internal'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='883' c='usage_with_options'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='890' c='usage_with_options_msg'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='907' c='parse_options_usage'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='948' c='parse_opt_verbosity_cb'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='971' c='find_option'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='972' c='find_option'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='983' c='set_option_flag'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='986' c='set_option_flag'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='993' c='set_option_nobuild'/>
<use f='linux/tools/lib/subcmd/parse-options.c' l='998' c='set_option_nobuild'/>
<size>96</size>
<doc f='linux/tools/lib/subcmd/parse-options.h' l='57'>/*
 * `type`::
 *   holds the type of the option, you must have an OPTION_END last in your
 *   array.
 *
 * `short_name`::
 *   the character to use as a short option name, &apos;\0&apos; if none.
 *
 * `long_name`::
 *   the long option name, without the leading dashes, NULL if none.
 *
 * `value`::
 *   stores pointers to the values to be filled.
 *
 * `argh`::
 *   token to explain the kind of argument this option wants. Keep it
 *   homogenous across the repository.
 *
 * `help`::
 *   the short help associated to what the option does.
 *   Must never be NULL (except for OPTION_END).
 *   OPTION_GROUP uses this pointer to store the group header.
 *
 * `flags`::
 *   mask of parse_opt_option_flags.
 *   PARSE_OPT_OPTARG: says that the argument is optionnal (not for BOOLEANs)
 *   PARSE_OPT_NOARG: says that this option takes no argument, for CALLBACKs
 *   PARSE_OPT_NONEG: says that this option cannot be negated
 *   PARSE_OPT_HIDDEN this option is skipped in the default usage, showed in
 *                    the long one.
 *
 * `callback`::
 *   pointer to the callback to use for OPTION_CALLBACK.
 *
 * `defval`::
 *   default value to fill (*-&gt;value) with for PARSE_OPT_OPTARG.
 *   OPTION_{BIT,SET_UINT,SET_PTR} store the {mask,integer,pointer} to put in
 *   the value when met.
 *   CALLBACKS can use it like they want.
 *
 * `set`::
 *   whether an option was set by the user
 */</doc>
<mbr r='option::type' o='0' t='enum parse_opt_type'/>
<mbr r='option::short_name' o='32' t='int'/>
<mbr r='option::long_name' o='64' t='const char *'/>
<mbr r='option::value' o='128' t='void *'/>
<mbr r='option::argh' o='192' t='const char *'/>
<mbr r='option::help' o='256' t='const char *'/>
<mbr r='option::build_opt' o='320' t='const char *'/>
<mbr r='option::flags' o='384' t='int'/>
<mbr r='option::callback' o='448' t='parse_opt_cb *'/>
<mbr r='option::defval' o='512' t='intptr_t'/>
<mbr r='option::set' o='576' t='_Bool *'/>
<mbr r='option::data' o='640' t='void *'/>
<mbr r='option::parent' o='704' t='const struct option *'/>
<use f='linux/tools/objtool/builtin.h' l='22'/>
<use f='linux/tools/objtool/builtin-check.c' l='39'/>
<size>96</size>
