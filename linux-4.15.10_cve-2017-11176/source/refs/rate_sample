<def f='linux/include/net/tcp.h' l='945' ll='956'/>
<use f='linux/include/net/tcp.h' l='989'/>
<use f='linux/include/net/tcp.h' l='1056' c='tcp_rate_skb_delivered'/>
<use f='linux/include/net/tcp.h' l='1058' c='tcp_rate_gen'/>
<use f='linux/include/net/tcp.h' l='1879' c='tcp_rack_update_reo_wnd'/>
<size>48</size>
<doc f='linux/include/net/tcp.h' l='937'>/* A rate sample measures the number of (original/retransmitted) data
 * packets delivered &quot;delivered&quot; over an interval of time &quot;interval_us&quot;.
 * The tcp_rate.c code fills in the rate sample, and congestion
 * control modules that define a cong_control function to run at the end
 * of ACK processing can optionally chose to consult this sample when
 * setting cwnd and pacing rate.
 * A sample is invalid if &quot;delivered&quot; or &quot;interval_us&quot; is negative.
 */</doc>
<mbr r='rate_sample::prior_mstamp' o='0' t='u64'/>
<mbr r='rate_sample::prior_delivered' o='64' t='u32'/>
<mbr r='rate_sample::delivered' o='96' t='s32'/>
<mbr r='rate_sample::interval_us' o='128' t='long'/>
<mbr r='rate_sample::rtt_us' o='192' t='long'/>
<mbr r='rate_sample::losses' o='256' t='int'/>
<mbr r='rate_sample::acked_sacked' o='288' t='u32'/>
<mbr r='rate_sample::prior_in_flight' o='320' t='u32'/>
<mbr r='rate_sample::is_app_limited' o='352' t='bool'/>
<mbr r='rate_sample::is_retrans' o='360' t='bool'/>
<use f='linux/net/ipv4/tcp_input.c' l='1110'/>
<use f='linux/net/ipv4/tcp_input.c' l='2869' c='tcp_ack_update_rtt'/>
<use f='linux/net/ipv4/tcp_input.c' l='2914' c='tcp_synack_rtt_meas'/>
<use f='linux/net/ipv4/tcp_input.c' l='3246' c='tcp_cong_control'/>
<use f='linux/net/ipv4/tcp_input.c' l='3496' c='tcp_ack'/>
<size>48</size>
<use f='linux/net/ipv4/tcp_rate.c' l='76' c='tcp_rate_skb_delivered'/>
<use f='linux/net/ipv4/tcp_rate.c' l='109' c='tcp_rate_gen'/>
<size>48</size>
<use f='linux/net/ipv4/tcp_recovery.c' l='182' c='tcp_rack_update_reo_wnd'/>
<size>48</size>
