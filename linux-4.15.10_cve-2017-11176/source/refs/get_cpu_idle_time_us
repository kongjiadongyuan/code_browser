<dec f='linux/include/linux/tick.h' l='123' type='u64 get_cpu_idle_time_us(int cpu, u64 * last_update_time)'/>
<use f='linux/drivers/cpufreq/cpufreq.c' l='153' u='c' c='get_cpu_idle_time'/>
<use f='linux/drivers/cpufreq/cpufreq_ondemand.c' l='368' u='c' c='od_init'/>
<use f='linux/fs/proc/stat.c' l='53' u='c' c='get_idle_time'/>
<def f='linux/kernel/time/tick-sched.c' l='566' ll='590' type='u64 get_cpu_idle_time_us(int cpu, u64 * last_update_time)'/>
<dec f='linux/kernel/time/tick-sched.c' l='591' type='u64 get_cpu_idle_time_us(int , u64 * )'/>
<use f='linux/kernel/time/tick-sched.c' l='591' c='get_cpu_idle_time_us'/>
<use f='linux/kernel/time/tick-sched.c' l='591' u='a'/>
<use f='linux/kernel/time/tick-sched.c' l='591' u='a'/>
<doc f='linux/kernel/time/tick-sched.c' l='552'>/**
 * get_cpu_idle_time_us - get the total idle time of a CPU
 * @cpu: CPU number to query
 * @last_update_time: variable to store update time in. Do not update
 * counters if NULL.
 *
 * Return the cumulative idle time (since boot) for a given
 * CPU, in microseconds.
 *
 * This time is measured via accounting rather than sampling,
 * and is as accurate as ktime_get() is.
 *
 * This function returns -1 if NOHZ is not enabled.
 */</doc>
