<def f='linux/include/linux/timekeeper_internal.h' l='88' ll='132'/>
<use f='linux/include/linux/timekeeper_internal.h' l='136' c='update_vsyscall'/>
<use f='linux/arch/x86/entry/vsyscall/vsyscall_gtod.c' l='30' c='update_vsyscall'/>
<size>256</size>
<doc f='linux/include/linux/timekeeper_internal.h' l='45'>/**
 * struct timekeeper - Structure holding internal timekeeping values.
 * @tkr_mono:		The readout base structure for CLOCK_MONOTONIC
 * @tkr_raw:		The readout base structure for CLOCK_MONOTONIC_RAW
 * @xtime_sec:		Current CLOCK_REALTIME time in seconds
 * @ktime_sec:		Current CLOCK_MONOTONIC time in seconds
 * @wall_to_monotonic:	CLOCK_REALTIME to CLOCK_MONOTONIC offset
 * @offs_real:		Offset clock monotonic -&gt; clock realtime
 * @offs_boot:		Offset clock monotonic -&gt; clock boottime
 * @offs_tai:		Offset clock monotonic -&gt; clock tai
 * @tai_offset:		The current UTC to TAI offset in seconds
 * @clock_was_set_seq:	The sequence number of clock was set events
 * @cs_was_changed_seq:	The sequence number of clocksource change events
 * @next_leap_ktime:	CLOCK_MONOTONIC time value of a pending leap-second
 * @raw_sec:		CLOCK_MONOTONIC_RAW  time in seconds
 * @cycle_interval:	Number of clock cycles in one NTP interval
 * @xtime_interval:	Number of clock shifted nano seconds in one NTP
 *			interval.
 * @xtime_remainder:	Shifted nano seconds left over when rounding
 *			@cycle_interval
 * @raw_interval:	Shifted raw nano seconds accumulated per NTP interval.
 * @ntp_error:		Difference between accumulated time and NTP time in ntp
 *			shifted nano seconds.
 * @ntp_error_shift:	Shift conversion between clock shifted nano seconds and
 *			ntp shifted nano seconds.
 * @last_warning:	Warning ratelimiter (DEBUG_TIMEKEEPING)
 * @underflow_seen:	Underflow warning flag (DEBUG_TIMEKEEPING)
 * @overflow_seen:	Overflow warning flag (DEBUG_TIMEKEEPING)
 *
 * Note: For timespec(64) based interfaces wall_to_monotonic is what
 * we need to add to xtime (or xtime corrected for sub jiffie times)
 * to get to monotonic time.  Monotonic is pegged at zero at system
 * boot time, so wall_to_monotonic will be negative, however, we will
 * ALWAYS keep the tv_nsec part positive so we can use the usual
 * normalization.
 *
 * wall_to_monotonic is moved after resume from suspend for the
 * monotonic time not to jump. We need to add total_sleep_time to
 * wall_to_monotonic to get the real boot based time offset.
 *
 * wall_to_monotonic is no longer the boot time, getboottime must be
 * used instead.
 */</doc>
<mbr r='timekeeper::tkr_mono' o='0' t='struct tk_read_base'/>
<mbr r='timekeeper::tkr_raw' o='448' t='struct tk_read_base'/>
<mbr r='timekeeper::xtime_sec' o='896' t='u64'/>
<mbr r='timekeeper::ktime_sec' o='960' t='unsigned long'/>
<mbr r='timekeeper::wall_to_monotonic' o='1024' t='struct timespec'/>
<mbr r='timekeeper::offs_real' o='1152' t='ktime_t'/>
<mbr r='timekeeper::offs_boot' o='1216' t='ktime_t'/>
<mbr r='timekeeper::offs_tai' o='1280' t='ktime_t'/>
<mbr r='timekeeper::tai_offset' o='1344' t='s32'/>
<mbr r='timekeeper::clock_was_set_seq' o='1376' t='unsigned int'/>
<mbr r='timekeeper::cs_was_changed_seq' o='1408' t='u8'/>
<mbr r='timekeeper::next_leap_ktime' o='1472' t='ktime_t'/>
<mbr r='timekeeper::raw_sec' o='1536' t='u64'/>
<mbr r='timekeeper::cycle_interval' o='1600' t='u64'/>
<mbr r='timekeeper::xtime_interval' o='1664' t='u64'/>
<mbr r='timekeeper::xtime_remainder' o='1728' t='s64'/>
<mbr r='timekeeper::raw_interval' o='1792' t='u64'/>
<mbr r='timekeeper::ntp_tick' o='1856' t='u64'/>
<mbr r='timekeeper::ntp_error' o='1920' t='s64'/>
<mbr r='timekeeper::ntp_error_shift' o='1984' t='u32'/>
<mbr r='timekeeper::ntp_err_mult' o='2016' t='u32'/>
<use f='linux/kernel/time/timekeeping.c' l='43'/>
<use f='linux/kernel/time/timekeeping.c' l='47'/>
<use f='linux/kernel/time/timekeeping.c' l='88' c='tk_normalize_xtime'/>
<use f='linux/kernel/time/timekeeping.c' l='100' c='tk_xtime'/>
<use f='linux/kernel/time/timekeeping.c' l='109' c='tk_set_xtime'/>
<use f='linux/kernel/time/timekeeping.c' l='115' c='tk_xtime_add'/>
<use f='linux/kernel/time/timekeeping.c' l='122' c='tk_set_wall_to_mono'/>
<use f='linux/kernel/time/timekeeping.c' l='139' c='tk_update_sleep_time'/>
<use f='linux/kernel/time/timekeeping.c' l='247' c='timekeeping_check_update'/>
<use f='linux/kernel/time/timekeeping.c' l='275' c='tk_setup_internals'/>
<use f='linux/kernel/time/timekeeping.c' l='493' c='ktime_get_boot_fast_ns'/>
<use f='linux/kernel/time/timekeeping.c' l='543' c='halt_fast_timekeeper'/>
<use f='linux/kernel/time/timekeeping.c' l='562' c='update_pvclock_gtod'/>
<use f='linux/kernel/time/timekeeping.c' l='572' c='pvclock_gtod_register_notifier'/>
<use f='linux/kernel/time/timekeeping.c' l='605' c='tk_update_leap_state'/>
<use f='linux/kernel/time/timekeeping.c' l='616' c='tk_update_ktime_data'/>
<use f='linux/kernel/time/timekeeping.c' l='647' c='timekeeping_update'/>
<use f='linux/kernel/time/timekeeping.c' l='683' c='timekeeping_forward_now'/>
<use f='linux/kernel/time/timekeeping.c' l='715' c='__getnstimeofday64'/>
<use f='linux/kernel/time/timekeeping.c' l='754' c='ktime_get'/>
<use f='linux/kernel/time/timekeeping.c' l='774' c='ktime_get_resolution_ns'/>
<use f='linux/kernel/time/timekeeping.c' l='797' c='ktime_get_with_offset'/>
<use f='linux/kernel/time/timekeeping.c' l='841' c='ktime_get_raw'/>
<use f='linux/kernel/time/timekeeping.c' l='867' c='ktime_get_ts64'/>
<use f='linux/kernel/time/timekeeping.c' l='899' c='ktime_get_seconds'/>
<use f='linux/kernel/time/timekeeping.c' l='919' c='ktime_get_real_seconds'/>
<use f='linux/kernel/time/timekeeping.c' l='943' c='__ktime_get_real_seconds'/>
<use f='linux/kernel/time/timekeeping.c' l='954' c='ktime_get_snapshot'/>
<use f='linux/kernel/time/timekeeping.c' l='1023' c='adjust_historical_crosststamp'/>
<use f='linux/kernel/time/timekeeping.c' l='1111' c='get_device_system_crosststamp'/>
<use f='linux/kernel/time/timekeeping.c' l='1227' c='do_settimeofday64'/>
<use f='linux/kernel/time/timekeeping.c' l='1273' c='timekeeping_inject_offset'/>
<use f='linux/kernel/time/timekeeping.c' l='1347' c='__timekeeping_set_tai_offset'/>
<use f='linux/kernel/time/timekeeping.c' l='1360' c='change_clocksource'/>
<use f='linux/kernel/time/timekeeping.c' l='1402' c='timekeeping_notify'/>
<use f='linux/kernel/time/timekeeping.c' l='1419' c='getrawmonotonic64'/>
<use f='linux/kernel/time/timekeeping.c' l='1441' c='timekeeping_valid_for_hres'/>
<use f='linux/kernel/time/timekeeping.c' l='1460' c='timekeeping_max_deferment'/>
<use f='linux/kernel/time/timekeeping.c' l='1523' c='timekeeping_init'/>
<use f='linux/kernel/time/timekeeping.c' l='1578' c='__timekeeping_inject_sleeptime'/>
<use f='linux/kernel/time/timekeeping.c' l='1667' c='timekeeping_resume'/>
<use f='linux/kernel/time/timekeeping.c' l='1730' c='timekeeping_suspend'/>
<use f='linux/kernel/time/timekeeping.c' l='1800' c='timekeeping_apply_adjustment'/>
<use f='linux/kernel/time/timekeeping.c' l='1882' c='timekeeping_freqadjust'/>
<use f='linux/kernel/time/timekeeping.c' l='1944' c='timekeeping_adjust'/>
<use f='linux/kernel/time/timekeeping.c' l='1997' c='accumulate_nsecs_to_secs'/>
<use f='linux/kernel/time/timekeeping.c' l='2037' c='logarithmic_accumulation'/>
<use f='linux/kernel/time/timekeeping.c' l='2077' c='update_wall_time'/>
<use f='linux/kernel/time/timekeeping.c' l='2078' c='update_wall_time'/>
<use f='linux/kernel/time/timekeeping.c' l='2168' c='getboottime64'/>
<use f='linux/kernel/time/timekeeping.c' l='2177' c='get_seconds'/>
<use f='linux/kernel/time/timekeeping.c' l='2185' c='__current_kernel_time'/>
<use f='linux/kernel/time/timekeeping.c' l='2192' c='current_kernel_time64'/>
<use f='linux/kernel/time/timekeeping.c' l='2208' c='get_monotonic_coarse64'/>
<use f='linux/kernel/time/timekeeping.c' l='2251' c='ktime_get_update_offsets_now'/>
<use f='linux/kernel/time/timekeeping.c' l='2350' c='do_adjtimex'/>
<size>256</size>
