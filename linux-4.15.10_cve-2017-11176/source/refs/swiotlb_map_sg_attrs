<dec f='linux/include/linux/swiotlb.h' l='86' type='int swiotlb_map_sg_attrs(struct device * hwdev, struct scatterlist * sgl, int nelems, enum dma_data_direction dir, unsigned long attrs)'/>
<use f='linux/arch/x86/kernel/pci-swiotlb.c' l='59'/>
<use f='linux/arch/x86/kernel/pci-swiotlb.c' l='59'/>
<def f='linux/lib/swiotlb.c' l='979' ll='1012' type='int swiotlb_map_sg_attrs(struct device * hwdev, struct scatterlist * sgl, int nelems, enum dma_data_direction dir, unsigned long attrs)'/>
<dec f='linux/lib/swiotlb.c' l='1013' type='int swiotlb_map_sg_attrs(struct device * , struct scatterlist * , int , enum dma_data_direction , unsigned long )'/>
<use f='linux/lib/swiotlb.c' l='1013' c='swiotlb_map_sg_attrs'/>
<use f='linux/lib/swiotlb.c' l='1013' u='a'/>
<use f='linux/lib/swiotlb.c' l='1013' u='a'/>
<doc f='linux/lib/swiotlb.c' l='963'>/*
 * Map a set of buffers described by scatterlist in streaming mode for DMA.
 * This is the scatter-gather version of the above swiotlb_map_page
 * interface.  Here the scatter gather list elements are each tagged with the
 * appropriate dma address and length.  They are obtained via
 * sg_dma_{address,length}(SG).
 *
 * NOTE: An implementation may be able to use a smaller number of
 *       DMA address/length pairs than there are SG table elements.
 *       (for example via virtual mapping capabilities)
 *       The routine returns the number of addr/length pairs actually
 *       used, at most nents.
 *
 * Device ownership issues as mentioned above for swiotlb_map_page are the
 * same here.
 */</doc>
