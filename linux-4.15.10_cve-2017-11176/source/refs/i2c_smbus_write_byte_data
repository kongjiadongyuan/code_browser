<dec f='linux/include/linux/i2c.h' l='95' type='s32 i2c_smbus_write_byte_data(const struct i2c_client * client, u8 command, u8 value)'/>
<use f='linux/drivers/base/regmap/regmap-i2c.c' l='47' u='c' c='regmap_smbus_byte_reg_write'/>
<use f='linux/drivers/i2c/i2c-core-acpi.c' l='550' u='c' c='i2c_acpi_space_handler'/>
<def f='linux/drivers/i2c/i2c-core-smbus.c' l='150' ll='158' type='s32 i2c_smbus_write_byte_data(const struct i2c_client * client, u8 command, u8 value)'/>
<dec f='linux/drivers/i2c/i2c-core-smbus.c' l='159' type='s32 i2c_smbus_write_byte_data(const struct i2c_client * , u8 , u8 )'/>
<use f='linux/drivers/i2c/i2c-core-smbus.c' l='159' c='i2c_smbus_write_byte_data'/>
<use f='linux/drivers/i2c/i2c-core-smbus.c' l='159' u='a'/>
<use f='linux/drivers/i2c/i2c-core-smbus.c' l='159' u='a'/>
<doc f='linux/drivers/i2c/i2c-core-smbus.c' l='141'>/**
 * i2c_smbus_write_byte_data - SMBus &quot;write byte&quot; protocol
 * @client: Handle to slave device
 * @command: Byte interpreted by slave
 * @value: Byte being written
 *
 * This executes the SMBus &quot;write byte&quot; protocol, returning negative errno
 * else zero on success.
 */</doc>
