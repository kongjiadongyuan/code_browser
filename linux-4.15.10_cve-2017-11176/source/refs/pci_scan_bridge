<dec f='linux/include/linux/pci.h' l='1297' type='int pci_scan_bridge(struct pci_bus * bus, struct pci_dev * dev, int max, int pass)'/>
<def f='linux/drivers/pci/probe.c' l='1209' ll='1212' type='int pci_scan_bridge(struct pci_bus * bus, struct pci_dev * dev, int max, int pass)'/>
<dec f='linux/drivers/pci/probe.c' l='1213' type='int pci_scan_bridge(struct pci_bus * , struct pci_dev * , int , int )'/>
<use f='linux/drivers/pci/probe.c' l='1213' c='pci_scan_bridge'/>
<use f='linux/drivers/pci/probe.c' l='1213' u='a'/>
<use f='linux/drivers/pci/probe.c' l='1213' u='a'/>
<use f='linux/drivers/pci/probe.c' l='2882' u='c' c='pci_hp_add_bridge'/>
<doc f='linux/drivers/pci/probe.c' l='1192'>/*
 * pci_scan_bridge() - Scan buses behind a bridge
 * @bus: Parent bus the bridge is on
 * @dev: Bridge itself
 * @max: Starting subordinate number of buses behind this bridge
 * @pass: Either %0 (scan already configured bridges) or %1 (scan bridges
 *        that need to be reconfigured.
 *
 * If it&apos;s a bridge, configure it and scan the bus behind it.
 * For CardBus bridges, we don&apos;t scan behind as the devices will
 * be handled by the bridge driver itself.
 *
 * We need to process bridges in two passes -- first we scan those
 * already configured by the BIOS and after we are done with all of
 * them, we proceed to assigning numbers to the remaining buses in
 * order to avoid overlaps between old and new bus numbers.
 */</doc>
<use f='linux/drivers/pcmcia/cardbus.c' l='81' u='c' c='cb_alloc'/>
