<dec f='linux/include/linux/clocksource.h' l='208' type='int __clocksource_register_scale(struct clocksource * cs, u32 scale, u32 freq)'/>
<use f='linux/include/linux/clocksource.h' l='218' u='c' c='__clocksource_register'/>
<use f='linux/include/linux/clocksource.h' l='223' u='c' c='clocksource_register_hz'/>
<use f='linux/include/linux/clocksource.h' l='228' u='c' c='clocksource_register_khz'/>
<doc f='linux/include/linux/clocksource.h' l='203'>/*
 * Don&apos;t call __clocksource_register_scale directly, use
 * clocksource_register_hz/khz
 */</doc>
<def f='linux/kernel/time/clocksource.c' l='776' ll='790' type='int __clocksource_register_scale(struct clocksource * cs, u32 scale, u32 freq)'/>
<dec f='linux/kernel/time/clocksource.c' l='791' type='int __clocksource_register_scale(struct clocksource * , u32 , u32 )'/>
<use f='linux/kernel/time/clocksource.c' l='791' c='__clocksource_register_scale'/>
<use f='linux/kernel/time/clocksource.c' l='791' u='a'/>
<use f='linux/kernel/time/clocksource.c' l='791' u='a'/>
<doc f='linux/kernel/time/clocksource.c' l='765'>/**
 * __clocksource_register_scale - Used to install new clocksources
 * @cs:		clocksource to be registered
 * @scale:	Scale factor multiplied against freq to get clocksource hz
 * @freq:	clocksource frequency (cycles per second) divided by scale
 *
 * Returns -EBUSY if registration fails, zero otherwise.
 *
 * This *SHOULD NOT* be called directly! Please use the
 * clocksource_register_hz() or clocksource_register_khz helper functions.
 */</doc>
