<dec f='linux/include/asm-generic/pci_iomap.h' l='17' type='void * pci_iomap(struct pci_dev * dev, int bar, unsigned long max)'/>
<doc f='linux/include/asm-generic/pci_iomap.h' l='16'>/* Create a virtual mapping cookie for a PCI BAR (memory or IO) */</doc>
<use f='linux/drivers/ata/ata_piix.c' l='1302' u='c' c='piix_disable_ahci'/>
<use f='linux/drivers/gpu/drm/i915/i915_drv.c' l='974' u='c' c='i915_mmio_setup'/>
<use f='linux/drivers/net/ethernet/intel/e100.c' l='2893' u='c' c='e100_probe'/>
<use f='linux/drivers/net/ethernet/realtek/8139too.c' l='820' u='c' c='rtl8139_init_board'/>
<use f='linux/drivers/pci/quirks.c' l='3151' u='c' c='disable_igfx_irq'/>
<use f='linux/drivers/pci/quirks.c' l='3726' u='c' c='reset_ivb_igd'/>
<use f='linux/drivers/tty/serial/8250/8250_pci.c' l='1004' u='c' c='pci_endrun_init'/>
<use f='linux/drivers/tty/serial/8250/8250_pci.c' l='1036' u='c' c='pci_oxsemi_tornado_init'/>
<use f='linux/lib/devres.c' l='297' u='c' c='pcim_iomap'/>
<def f='linux/lib/pci_iomap.c' l='110' ll='113' type='void * pci_iomap(struct pci_dev * dev, int bar, unsigned long maxlen)'/>
<dec f='linux/lib/pci_iomap.c' l='114' type='void * pci_iomap(struct pci_dev * , int , unsigned long )'/>
<use f='linux/lib/pci_iomap.c' l='114' c='pci_iomap'/>
<use f='linux/lib/pci_iomap.c' l='114' u='a'/>
<use f='linux/lib/pci_iomap.c' l='114' u='a'/>
<doc f='linux/lib/pci_iomap.c' l='96'>/**
 * pci_iomap - create a virtual mapping cookie for a PCI BAR
 * @dev: PCI device that owns the BAR
 * @bar: BAR number
 * @maxlen: length of the memory to map
 *
 * Using this function you will get a __iomem address to your device BAR.
 * You can access it using ioread*() and iowrite*(). These functions hide
 * the details if this is a MMIO or PIO address space and will just do what
 * you expect from them in the correct way.
 *
 * @maxlen specifies the maximum length to map. If you want to get access to
 * the complete BAR without checking for its length first, pass %0 here.
 * */</doc>
