<dec f='linux/include/linux/idr.h' l='255' type='int ida_simple_get(struct ida * ida, unsigned int start, unsigned int end, gfp_t gfp_mask)'/>
<use f='linux/block/blk-core.c' l='896' u='c' c='blk_alloc_queue_node'/>
<use f='linux/drivers/base/platform-msi.c' l='230' u='c' c='platform_msi_alloc_priv_data'/>
<use f='linux/drivers/base/platform.c' l='385' u='c' c='platform_device_add'/>
<use f='linux/drivers/dax/super.c' l='467' u='c' c='alloc_dax'/>
<use f='linux/drivers/gpu/drm/drm_connector.c' l='207' u='c' c='drm_connector_init'/>
<use f='linux/drivers/gpu/drm/drm_connector.c' l='215' u='c' c='drm_connector_init'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_context.c' l='215' u='c' c='assign_hw_id'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_context.c' l='223' u='c' c='assign_hw_id'/>
<use f='linux/drivers/gpu/drm/i915/i915_guc_submission.c' l='782' u='c' c='guc_client_alloc'/>
<use f='linux/drivers/hid/hid-sony.c' l='2462' u='c' c='sony_set_device_id'/>
<use f='linux/drivers/hwmon/hwmon.c' l='560' u='c' c='__hwmon_device_register'/>
<use f='linux/drivers/input/input.c' l='2388' u='c' c='input_get_new_minor'/>
<use f='linux/drivers/input/input.c' l='2396' u='c' c='input_get_new_minor'/>
<use f='linux/drivers/iommu/iommu.c' l='349' u='c' c='iommu_group_alloc'/>
<use f='linux/drivers/nvmem/core.c' l='457' u='c' c='nvmem_register'/>
<use f='linux/drivers/ptp/ptp_clock.c' l='218' u='c' c='ptp_clock_register'/>
<use f='linux/drivers/rtc/class.c' l='203' u='c' c='rtc_device_get_id'/>
<use f='linux/drivers/rtc/class.c' l='209' u='c' c='rtc_device_get_id'/>
<use f='linux/drivers/scsi/hosts.c' l='406' u='c' c='scsi_host_alloc'/>
<use f='linux/drivers/thermal/thermal_core.c' l='724' u='c' c='thermal_zone_bind_cooling_device'/>
<use f='linux/drivers/thermal/thermal_core.c' l='961' u='c' c='__thermal_cooling_device_register'/>
<use f='linux/drivers/thermal/thermal_core.c' l='1211' u='c' c='thermal_zone_device_register'/>
<use f='linux/fs/nfs/nfs4state.c' l='858' u='c' c='nfs4_alloc_lock_state'/>
<use f='linux/fs/proc/generic.c' l='196' u='c' c='proc_alloc_inum'/>
<use f='linux/kernel/workqueue.c' l='1762' u='c' c='create_worker'/>
<def f='linux/lib/idr.c' l='433' ll='470' type='int ida_simple_get(struct ida * ida, unsigned int start, unsigned int end, gfp_t gfp_mask)'/>
<dec f='linux/lib/idr.c' l='471' type='int ida_simple_get(struct ida * , unsigned int , unsigned int , gfp_t )'/>
<use f='linux/lib/idr.c' l='471' c='ida_simple_get'/>
<use f='linux/lib/idr.c' l='471' u='a'/>
<use f='linux/lib/idr.c' l='471' u='a'/>
<doc f='linux/lib/idr.c' l='418'>/**
 * ida_simple_get - get a new id.
 * @ida: the (initialized) ida.
 * @start: the minimum id (inclusive, &lt; 0x8000000)
 * @end: the maximum id (exclusive, &lt; 0x8000000 or 0)
 * @gfp_mask: memory allocation flags
 *
 * Allocates an id in the range start &lt;= id &lt; end, or returns -ENOSPC.
 * On memory allocation failure, returns -ENOMEM.
 *
 * Compared to ida_get_new_above() this function does its own locking, and
 * should be used unless there are special requirements.
 *
 * Use ida_simple_remove() to get rid of an id.
 */</doc>
<use f='linux/net/sunrpc/clnt.c' l='348' u='c' c='rpc_alloc_clid'/>
