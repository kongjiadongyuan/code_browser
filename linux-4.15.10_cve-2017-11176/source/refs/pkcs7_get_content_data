<dec f='linux/include/crypto/pkcs7.h' l='28' type='int pkcs7_get_content_data(const struct pkcs7_message * pkcs7, const void ** _data, size_t * _datalen, size_t * _headerlen)'/>
<use f='linux/certs/system_keyring.c' l='250' u='c' c='verify_pkcs7_signature'/>
<def f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='189' ll='201' type='int pkcs7_get_content_data(const struct pkcs7_message * pkcs7, const void ** _data, size_t * _data_len, size_t * _headerlen)'/>
<dec f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='202' type='int pkcs7_get_content_data(const struct pkcs7_message * , const void ** , size_t * , size_t * )'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='202' c='pkcs7_get_content_data'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='202' u='a'/>
<use f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='202' u='a'/>
<doc f='linux/crypto/asymmetric_keys/pkcs7_parser.c' l='176'>/**
 * pkcs7_get_content_data - Get access to the PKCS#7 content
 * @pkcs7: The preparsed PKCS#7 message to access
 * @_data: Place to return a pointer to the data
 * @_data_len: Place to return the data length
 * @_headerlen: Size of ASN.1 header not included in _data
 *
 * Get access to the data content of the PKCS#7 message.  The size of the
 * header of the ASN.1 object that contains it is also provided and can be used
 * to adjust *_data and *_data_len to get the entire object.
 *
 * Returns -ENODATA if the data object was missing from the message.
 */</doc>
