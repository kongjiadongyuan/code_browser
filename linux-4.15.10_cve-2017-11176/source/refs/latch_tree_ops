<def f='linux/include/linux/rbtree_latch.h' l='63' ll='66'/>
<use f='linux/include/linux/rbtree_latch.h' l='145' c='latch_tree_insert'/>
<use f='linux/include/linux/rbtree_latch.h' l='172' c='latch_tree_erase'/>
<use f='linux/include/linux/rbtree_latch.h' l='200' c='latch_tree_find'/>
<size>16</size>
<doc f='linux/include/linux/rbtree_latch.h' l='48'>/**
 * latch_tree_ops - operators to define the tree order
 * @less: used for insertion; provides the (partial) order between two elements.
 * @comp: used for lookups; provides the order between the search key and an element.
 *
 * The operators are related like:
 *
 *	comp(a-&gt;key,b) &lt; 0  := less(a,b)
 *	comp(a-&gt;key,b) &gt; 0  := less(b,a)
 *	comp(a-&gt;key,b) == 0 := !less(a,b) &amp;&amp; !less(b,a)
 *
 * If these operators define a partial order on the elements we make no
 * guarantee on which of the elements matching the key is found. See
 * latch_tree_find().
 */</doc>
<mbr r='latch_tree_ops::less' o='0' t='bool (*)(struct latch_tree_node *, struct latch_tree_node *)'/>
<mbr r='latch_tree_ops::comp' o='64' t='int (*)(void *, struct latch_tree_node *)'/>
<use f='linux/kernel/module.c' l='149'/>
<size>16</size>
