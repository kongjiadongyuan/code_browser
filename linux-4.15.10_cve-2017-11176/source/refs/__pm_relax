<dec f='linux/include/linux/pm_wakeup.h' l='107' type='void __pm_relax(struct wakeup_source * ws)'/>
<use f='linux/drivers/base/power/wakeup.c' l='117' u='c' c='wakeup_source_drop'/>
<def f='linux/drivers/base/power/wakeup.c' l='685' ll='696' type='void __pm_relax(struct wakeup_source * ws)'/>
<dec f='linux/drivers/base/power/wakeup.c' l='697' type='void __pm_relax(struct wakeup_source * )'/>
<use f='linux/drivers/base/power/wakeup.c' l='697' c='__pm_relax'/>
<use f='linux/drivers/base/power/wakeup.c' l='697' u='a'/>
<use f='linux/drivers/base/power/wakeup.c' l='697' u='a'/>
<use f='linux/drivers/base/power/wakeup.c' l='713' u='c' c='pm_relax'/>
<doc f='linux/drivers/base/power/wakeup.c' l='676'>/**
 * __pm_relax - Notify the PM core that processing of a wakeup event has ended.
 * @ws: Wakeup source object associated with the source of the event.
 *
 * Call this function for wakeup events whose processing started with calling
 * __pm_stay_awake().
 *
 * It is safe to call it from interrupt context.
 */</doc>
<use f='linux/fs/eventpoll.c' l='729' u='c' c='ep_scan_ready_list'/>
<use f='linux/fs/eventpoll.c' l='915' u='c' c='ep_read_events_proc'/>
<use f='linux/fs/eventpoll.c' l='1652' u='c' c='ep_send_events_proc'/>
