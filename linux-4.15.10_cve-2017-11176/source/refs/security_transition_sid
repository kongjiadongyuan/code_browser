<dec f='linux/security/selinux/include/security.h' l='154' type='int security_transition_sid(u32 ssid, u32 tsid, u16 tclass, const struct qstr * qstr, u32 * out_sid)'/>
<use f='linux/security/selinux/hooks.c' l='854' u='c' c='selinux_set_mnt_opts'/>
<use f='linux/security/selinux/hooks.c' l='1625' u='c' c='inode_doinit_with_dentry'/>
<use f='linux/security/selinux/hooks.c' l='1886' u='c' c='selinux_determine_inode_label'/>
<use f='linux/security/selinux/hooks.c' l='2423' u='c' c='selinux_bprm_set_creds'/>
<use f='linux/security/selinux/hooks.c' l='4335' u='c' c='socket_sockcreate_sid'/>
<use f='linux/security/selinux/hooks.c' l='5628' u='c' c='selinux_msg_queue_msgsnd'/>
<def f='linux/security/selinux/ss/services.c' l='1761' ll='1766' type='int security_transition_sid(u32 ssid, u32 tsid, u16 tclass, const struct qstr * qstr, u32 * out_sid)'/>
<doc f='linux/security/selinux/ss/services.c' l='1748'>/**
 * security_transition_sid - Compute the SID for a new subject/object.
 * @ssid: source security identifier
 * @tsid: target security identifier
 * @tclass: target security class
 * @out_sid: security identifier for new subject/object
 *
 * Compute a SID to use for labeling a new subject or object in the
 * class @tclass based on a SID pair (@ssid, @tsid).
 * Return -%EINVAL if any of the parameters are invalid, -%ENOMEM
 * if insufficient memory is available, or %0 if the new SID was
 * computed successfully.
 */</doc>
