<dec f='linux/drivers/gpu/drm/i915/intel_dpll_mgr.h' l='274' type='struct intel_shared_dpll * intel_get_shared_dpll(struct intel_crtc * crtc, struct intel_crtc_state * state, struct intel_encoder * encoder)'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='8295' u='c' c='ironlake_crtc_compute_clock'/>
<use f='linux/drivers/gpu/drm/i915/intel_display.c' l='8911' u='c' c='haswell_crtc_compute_clock'/>
<def f='linux/drivers/gpu/drm/i915/intel_dpll_mgr.c' l='2476' ll='2488' type='struct intel_shared_dpll * intel_get_shared_dpll(struct intel_crtc * crtc, struct intel_crtc_state * crtc_state, struct intel_encoder * encoder)'/>
<doc f='linux/drivers/gpu/drm/i915/intel_dpll_mgr.c' l='2461'>/**
 * intel_get_shared_dpll - get a shared DPLL for CRTC and encoder combination
 * @crtc: CRTC
 * @crtc_state: atomic state for @crtc
 * @encoder: encoder
 *
 * Find an appropriate DPLL for the given CRTC and encoder combination. A
 * reference from the @crtc to the returned pll is registered in the atomic
 * state. That configuration is made effective by calling
 * intel_shared_dpll_swap_state(). The reference should be released by calling
 * intel_release_shared_dpll().
 *
 * Returns:
 * A shared DPLL to be used by @crtc and @encoder with the given @crtc_state.
 */</doc>
