<dec f='linux/include/net/cfg80211.h' l='5795' type='bool cfg80211_reg_can_beacon_relax(struct wiphy * wiphy, struct cfg80211_chan_def * chandef, enum nl80211_iftype iftype)'/>
<doc f='linux/include/net/cfg80211.h' l='5782'>/**
 * cfg80211_reg_can_beacon_relax - check if beaconing is allowed with relaxation
 * @wiphy: the wiphy
 * @chandef: the channel definition
 * @iftype: interface type
 *
 * Return: %true if there is no secondary channel or the secondary channel(s)
 * can be used for beaconing (i.e. is not a radar channel etc.). This version
 * also checks if IR-relaxation conditions apply, to allow beaconing under
 * more permissive conditions.
 *
 * Requires the RTNL to be held.
 */</doc>
<use f='linux/net/mac80211/tdls.c' l='86' u='c' c='ieee80211_tdls_add_subband'/>
<use f='linux/net/mac80211/tdls.c' l='340' u='c' c='ieee80211_tdls_chandef_vht_upgrade'/>
<use f='linux/net/mac80211/tdls.c' l='1857' u='c' c='ieee80211_process_tdls_channel_switch_req'/>
<def f='linux/net/wireless/chan.c' l='952' ll='970' type='bool cfg80211_reg_can_beacon_relax(struct wiphy * wiphy, struct cfg80211_chan_def * chandef, enum nl80211_iftype iftype)'/>
<dec f='linux/net/wireless/chan.c' l='971' type='bool cfg80211_reg_can_beacon_relax(struct wiphy * , struct cfg80211_chan_def * , enum nl80211_iftype )'/>
<use f='linux/net/wireless/chan.c' l='971' c='cfg80211_reg_can_beacon_relax'/>
<use f='linux/net/wireless/chan.c' l='971' u='a'/>
<use f='linux/net/wireless/chan.c' l='971' u='a'/>
<use f='linux/net/wireless/nl80211.c' l='2200' u='c' c='__nl80211_set_channel'/>
<use f='linux/net/wireless/nl80211.c' l='4053' u='c' c='nl80211_start_ap'/>
<use f='linux/net/wireless/nl80211.c' l='7709' u='c' c='nl80211_channel_switch'/>
<use f='linux/net/wireless/nl80211.c' l='12283' u='c' c='nl80211_tdls_channel_switch'/>
<use f='linux/net/wireless/reg.c' l='1984' u='c' c='reg_wdev_chan_valid'/>
