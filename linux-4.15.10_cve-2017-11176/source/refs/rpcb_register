<dec f='linux/include/linux/sunrpc/clnt.h' l='163' type='int rpcb_register(struct net * , u32 , u32 , int , unsigned short )'/>
<def f='linux/net/sunrpc/rpcb_clnt.c' l='445' ll='470' type='int rpcb_register(struct net * net, u32 prog, u32 vers, int prot, unsigned short port)'/>
<doc f='linux/net/sunrpc/rpcb_clnt.c' l='412'>/**
 * rpcb_register - set or unset a port registration with the local rpcbind svc
 * @net: target network namespace
 * @prog: RPC program number to bind
 * @vers: RPC version number to bind
 * @prot: transport protocol to register
 * @port: port value to register
 *
 * Returns zero if the registration request was dispatched successfully
 * and the rpcbind daemon returned success.  Otherwise, returns an errno
 * value that reflects the nature of the error (request could not be
 * dispatched, timed out, or rpcbind returned an error).
 *
 * RPC services invoke this function to advertise their contact
 * information via the system&apos;s rpcbind daemon.  RPC services
 * invoke this function once for each [program, version, transport]
 * tuple they wish to advertise.
 *
 * Callers may also unregister RPC services that are no longer
 * available by setting the passed-in port to zero.  This removes
 * all registered transports for [program, version] from the local
 * rpcbind database.
 *
 * This function uses rpcbind protocol version 2 to contact the
 * local rpcbind daemon.
 *
 * Registration works over both AF_INET and AF_INET6, and services
 * registered via this function are advertised as available for any
 * address.  If the local rpcbind daemon is listening on AF_INET6,
 * services registered via this function will be advertised on
 * IN6ADDR_ANY (ie available for all AF_INET and AF_INET6
 * addresses).
 */</doc>
<use f='linux/net/sunrpc/svc.c' l='913' u='c' c='__svc_rpcb_register4'/>
<use f='linux/net/sunrpc/svc.c' l='1083' u='c' c='__svc_unregister'/>
