<dec f='linux/include/linux/pm_wakeup.h' l='105' type='void __pm_stay_awake(struct wakeup_source * ws)'/>
<def f='linux/drivers/base/power/wakeup.c' l='568' ll='582' type='void __pm_stay_awake(struct wakeup_source * ws)'/>
<dec f='linux/drivers/base/power/wakeup.c' l='583' type='void __pm_stay_awake(struct wakeup_source * )'/>
<use f='linux/drivers/base/power/wakeup.c' l='583' c='__pm_stay_awake'/>
<use f='linux/drivers/base/power/wakeup.c' l='583' u='a'/>
<use f='linux/drivers/base/power/wakeup.c' l='583' u='a'/>
<use f='linux/drivers/base/power/wakeup.c' l='604' u='c' c='pm_stay_awake'/>
<doc f='linux/drivers/base/power/wakeup.c' l='562'>/**
 * __pm_stay_awake - Notify the PM core of a wakeup event.
 * @ws: Wakeup source object associated with the source of the event.
 *
 * It is safe to call this function from interrupt context.
 */</doc>
<use f='linux/fs/eventpoll.c' l='630' u='c' c='ep_pm_stay_awake'/>
<use f='linux/fs/eventpoll.c' l='646' u='c' c='ep_pm_stay_awake_rcu'/>
<use f='linux/fs/eventpoll.c' l='1159' u='c' c='ep_poll_callback'/>
<use f='linux/fs/eventpoll.c' l='1651' u='c' c='ep_send_events_proc'/>
