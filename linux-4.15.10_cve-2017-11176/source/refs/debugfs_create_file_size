<dec f='linux/include/linux/debugfs.h' l='68' type='struct dentry * debugfs_create_file_size(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops, loff_t file_size)'/>
<def f='linux/fs/debugfs/inode.c' l='475' ll='485' type='struct dentry * debugfs_create_file_size(const char * name, umode_t mode, struct dentry * parent, void * data, const struct file_operations * fops, loff_t file_size)'/>
<dec f='linux/fs/debugfs/inode.c' l='486' type='struct dentry * debugfs_create_file_size(const char * , umode_t , struct dentry * , void * , const struct file_operations * , loff_t )'/>
<use f='linux/fs/debugfs/inode.c' l='486' c='debugfs_create_file_size'/>
<use f='linux/fs/debugfs/inode.c' l='486' u='a'/>
<use f='linux/fs/debugfs/inode.c' l='486' u='a'/>
<doc f='linux/fs/debugfs/inode.c' l='448'>/**
 * debugfs_create_file_size - create a file in the debugfs filesystem
 * @name: a pointer to a string containing the name of the file to create.
 * @mode: the permission that the file should have.
 * @parent: a pointer to the parent dentry for this file.  This should be a
 *          directory dentry if set.  If this parameter is NULL, then the
 *          file will be created in the root of the debugfs filesystem.
 * @data: a pointer to something that the caller will want to get to later
 *        on.  The inode.i_private pointer will point to this value on
 *        the open() call.
 * @fops: a pointer to a struct file_operations that should be used for
 *        this file.
 * @file_size: initial file size
 *
 * This is the basic &quot;create a file&quot; function for debugfs.  It allows for a
 * wide range of flexibility in creating a file, or a directory (if you want
 * to create a directory, the debugfs_create_dir() function is
 * recommended to be used instead.)
 *
 * This function will return a pointer to a dentry if it succeeds.  This
 * pointer must be passed to the debugfs_remove() function when the file is
 * to be removed (no automatic cleanup happens if your module is unloaded,
 * you are responsible here.)  If an error occurs, %NULL will be returned.
 *
 * If debugfs is not enabled in the kernel, the value -%ENODEV will be
 * returned.
 */</doc>
