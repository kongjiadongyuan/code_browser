<dec f='linux/include/net/cfg80211.h' l='4843' type='void cfg80211_rx_mlme_mgmt(struct net_device * dev, const u8 * buf, size_t len)'/>
<doc f='linux/include/net/cfg80211.h' l='4824'>/**
 * cfg80211_rx_mlme_mgmt - notification of processed MLME management frame
 * @dev: network device
 * @buf: authentication frame (header + body)
 * @len: length of the frame data
 *
 * This function is called whenever an authentication, disassociation or
 * deauthentication frame has been received and processed in station mode.
 * After being asked to authenticate via cfg80211_ops::auth() the driver must
 * call either this function or cfg80211_auth_timeout().
 * After being asked to associate via cfg80211_ops::assoc() the driver must
 * call either this function or cfg80211_auth_timeout().
 * While connected, the driver must calls this for received and processed
 * disassociation and deauthentication frames. If the frame couldn&apos;t be used
 * because it was unprotected, the driver must call the function
 * cfg80211_rx_unprot_mlme_mgmt() instead.
 *
 * This function may sleep. The caller must hold the corresponding wdev&apos;s mutex.
 */</doc>
<use f='linux/net/mac80211/mlme.c' l='2376' u='c' c='ieee80211_report_disconnect'/>
<use f='linux/net/mac80211/mlme.c' l='2599' u='c' c='ieee80211_rx_mgmt_auth'/>
<use f='linux/net/mac80211/mlme.c' l='2642' u='c' c='ieee80211_rx_mgmt_auth'/>
<use f='linux/net/mac80211/mlme.c' l='2659' u='c' c='ieee80211_rx_mgmt_auth'/>
<use f='linux/net/mac80211/mlme.c' l='2760' u='c' c='ieee80211_rx_mgmt_deauth'/>
<def f='linux/net/wireless/mlme.c' l='108' ll='126' type='void cfg80211_rx_mlme_mgmt(struct net_device * dev, const u8 * buf, size_t len)'/>
<dec f='linux/net/wireless/mlme.c' l='127' type='void cfg80211_rx_mlme_mgmt(struct net_device * , const u8 * , size_t )'/>
<use f='linux/net/wireless/mlme.c' l='127' c='cfg80211_rx_mlme_mgmt'/>
<use f='linux/net/wireless/mlme.c' l='127' u='a'/>
<use f='linux/net/wireless/mlme.c' l='127' u='a'/>
