<def f='linux/include/net/cfg80211.h' l='3350' ll='3406'/>
<use f='linux/include/net/cfg80211.h' l='3721'/>
<use f='linux/include/net/cfg80211.h' l='6058' c='cfg80211_iter_combinations'/>
<size>24</size>
<doc f='linux/include/net/cfg80211.h' l='3291'>/**
 * struct ieee80211_iface_combination - possible interface combination
 *
 * With this structure the driver can describe which interface
 * combinations it supports concurrently.
 *
 * Examples:
 *
 * 1. Allow #STA &lt;= 1, #AP &lt;= 1, matching BI, channels = 1, 2 total:
 *
 *    .. code-block:: c
 *
 *	struct ieee80211_iface_limit limits1[] = {
 *		{ .max = 1, .types = BIT(NL80211_IFTYPE_STATION), },
 *		{ .max = 1, .types = BIT(NL80211_IFTYPE_AP}, },
 *	};
 *	struct ieee80211_iface_combination combination1 = {
 *		.limits = limits1,
 *		.n_limits = ARRAY_SIZE(limits1),
 *		.max_interfaces = 2,
 *		.beacon_int_infra_match = true,
 *	};
 *
 *
 * 2. Allow #{AP, P2P-GO} &lt;= 8, channels = 1, 8 total:
 *
 *    .. code-block:: c
 *
 *	struct ieee80211_iface_limit limits2[] = {
 *		{ .max = 8, .types = BIT(NL80211_IFTYPE_AP) |
 *				     BIT(NL80211_IFTYPE_P2P_GO), },
 *	};
 *	struct ieee80211_iface_combination combination2 = {
 *		.limits = limits2,
 *		.n_limits = ARRAY_SIZE(limits2),
 *		.max_interfaces = 8,
 *		.num_different_channels = 1,
 *	};
 *
 *
 * 3. Allow #STA &lt;= 1, #{P2P-client,P2P-GO} &lt;= 3 on two channels, 4 total.
 *
 *    This allows for an infrastructure connection and three P2P connections.
 *
 *    .. code-block:: c
 *
 *	struct ieee80211_iface_limit limits3[] = {
 *		{ .max = 1, .types = BIT(NL80211_IFTYPE_STATION), },
 *		{ .max = 3, .types = BIT(NL80211_IFTYPE_P2P_GO) |
 *				     BIT(NL80211_IFTYPE_P2P_CLIENT), },
 *	};
 *	struct ieee80211_iface_combination combination3 = {
 *		.limits = limits3,
 *		.n_limits = ARRAY_SIZE(limits3),
 *		.max_interfaces = 4,
 *		.num_different_channels = 2,
 *	};
 *
 */</doc>
<mbr r='ieee80211_iface_combination::limits' o='0' t='const struct ieee80211_iface_limit *'/>
<mbr r='ieee80211_iface_combination::num_different_channels' o='64' t='u32'/>
<mbr r='ieee80211_iface_combination::max_interfaces' o='96' t='u16'/>
<mbr r='ieee80211_iface_combination::n_limits' o='112' t='u8'/>
<mbr r='ieee80211_iface_combination::beacon_int_infra_match' o='120' t='bool'/>
<mbr r='ieee80211_iface_combination::radar_detect_widths' o='128' t='u8'/>
<mbr r='ieee80211_iface_combination::radar_detect_regions' o='136' t='u8'/>
<mbr r='ieee80211_iface_combination::beacon_int_min_gcd' o='160' t='u32'/>
<use f='linux/net/mac80211/main.c' l='842' c='ieee80211_register_hw'/>
<use f='linux/net/mac80211/main.c' l='860' c='ieee80211_register_hw'/>
<use f='linux/net/mac80211/main.c' l='942' c='ieee80211_register_hw'/>
<size>24</size>
<use f='linux/net/mac80211/util.c' l='3431' c='ieee80211_iter_max_chans'/>
<size>24</size>
<use f='linux/net/wireless/core.c' l='530' c='wiphy_verify_combinations'/>
<size>24</size>
<use f='linux/net/wireless/nl80211.c' l='1038' c='nl80211_put_iface_combinations'/>
<size>24</size>
<use f='linux/net/wireless/util.c' l='1552' c='cfg80211_iter_combinations'/>
<use f='linux/net/wireless/util.c' l='1593' c='cfg80211_iter_combinations'/>
<use f='linux/net/wireless/util.c' l='1660' c='cfg80211_iter_sum_ifcombs'/>
<size>24</size>
