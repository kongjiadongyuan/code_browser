<dec f='linux/include/linux/sched/cpufreq.h' l='22' type='void cpufreq_add_update_util_hook(int cpu, struct update_util_data * data, void (*)(struct update_util_data *, u64, unsigned int) func)'/>
<use f='linux/drivers/cpufreq/cpufreq_governor.c' l='339' u='c' c='gov_set_update_util'/>
<use f='linux/drivers/cpufreq/intel_pstate.c' l='1699' u='c' c='intel_pstate_set_update_util_hook'/>
<def f='linux/kernel/sched/cpufreq.c' l='34' ll='46' type='void cpufreq_add_update_util_hook(int cpu, struct update_util_data * data, void (*)(struct update_util_data *, u64, unsigned int) func)'/>
<dec f='linux/kernel/sched/cpufreq.c' l='47' type='void cpufreq_add_update_util_hook(int , struct update_util_data * , void (*)(struct update_util_data *, u64, unsigned int) )'/>
<use f='linux/kernel/sched/cpufreq.c' l='47' c='cpufreq_add_update_util_hook'/>
<use f='linux/kernel/sched/cpufreq.c' l='47' u='a'/>
<use f='linux/kernel/sched/cpufreq.c' l='47' u='a'/>
<doc f='linux/kernel/sched/cpufreq.c' l='16'>/**
 * cpufreq_add_update_util_hook - Populate the CPU&apos;s update_util_data pointer.
 * @cpu: The CPU to set the pointer for.
 * @data: New pointer value.
 * @func: Callback function to set for the CPU.
 *
 * Set and publish the update_util_data pointer for the given CPU.
 *
 * The update_util_data pointer of @cpu is set to @data and the callback
 * function pointer in the target struct update_util_data is set to @func.
 * That function will be called by cpufreq_update_util() from RCU-sched
 * read-side critical sections, so it must not sleep.  @data will always be
 * passed to it as the first argument which allows the function to get to the
 * target update_util_data structure and its container.
 *
 * The update_util_data pointer of @cpu must be NULL when this function is
 * called or it will WARN() and return with no effect.
 */</doc>
