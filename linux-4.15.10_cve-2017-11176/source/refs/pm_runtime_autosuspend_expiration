<dec f='linux/include/linux/pm_runtime.h' l='54' type='unsigned long pm_runtime_autosuspend_expiration(struct device * dev)'/>
<def f='linux/drivers/base/power/runtime.c' l='127' ll='159' type='unsigned long pm_runtime_autosuspend_expiration(struct device * dev)'/>
<dec f='linux/drivers/base/power/runtime.c' l='160' type='unsigned long pm_runtime_autosuspend_expiration(struct device * )'/>
<use f='linux/drivers/base/power/runtime.c' l='160' c='pm_runtime_autosuspend_expiration'/>
<use f='linux/drivers/base/power/runtime.c' l='160' u='a'/>
<use f='linux/drivers/base/power/runtime.c' l='160' u='a'/>
<use f='linux/drivers/base/power/runtime.c' l='518' u='c' c='rpm_suspend'/>
<use f='linux/drivers/base/power/runtime.c' l='650' u='c' c='rpm_suspend'/>
<doc f='linux/drivers/base/power/runtime.c' l='115'>/*
 * pm_runtime_autosuspend_expiration - Get a device&apos;s autosuspend-delay expiration time.
 * @dev: Device to handle.
 *
 * Compute the autosuspend-delay expiration time based on the device&apos;s
 * power.last_busy time.  If the delay has already expired or is disabled
 * (negative) or the power.use_autosuspend flag isn&apos;t set, return 0.
 * Otherwise return the expiration time in jiffies (adjusted to be nonzero).
 *
 * This function may be called either with or without dev-&gt;power.lock held.
 * Either way it can be racy, since power.last_busy may be updated at any time.
 */</doc>
