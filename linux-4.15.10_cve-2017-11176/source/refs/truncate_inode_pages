<dec f='linux/include/linux/mm.h' l='2272' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<doc f='linux/include/linux/mm.h' l='2271'>/* truncate.c */</doc>
<use f='linux/fs/block_dev.c' l='86' u='c' c='kill_bdev'/>
<use f='linux/fs/ext4/truncate.h' l='15' u='c' c='ext4_truncate_failed_write'/>
<use f='linux/fs/ext4/ioctl.c' l='122' u='c' c='swap_inode_boot_loader'/>
<use f='linux/fs/ext4/ioctl.c' l='123' u='c' c='swap_inode_boot_loader'/>
<use f='linux/fs/ext4/super.c' l='2508' u='c' c='ext4_orphan_cleanup'/>
<use f='linux/fs/quota/dquot.c' l='703' u='c' c='dquot_quota_sync'/>
<use f='linux/fs/quota/dquot.c' l='2261' u='c' c='dquot_disable'/>
<def f='linux/mm/truncate.c' l='480' ll='483' type='void truncate_inode_pages(struct address_space * mapping, loff_t lstart)'/>
<dec f='linux/mm/truncate.c' l='484' type='void truncate_inode_pages(struct address_space * , loff_t )'/>
<use f='linux/mm/truncate.c' l='484' c='truncate_inode_pages'/>
<use f='linux/mm/truncate.c' l='484' u='a'/>
<use f='linux/mm/truncate.c' l='484' u='a'/>
<use f='linux/mm/truncate.c' l='528' u='c' c='truncate_inode_pages_final'/>
<use f='linux/mm/truncate.c' l='810' u='c' c='truncate_pagecache'/>
<doc f='linux/mm/truncate.c' l='468'>/**
 * truncate_inode_pages - truncate *all* the pages from an offset
 * @mapping: mapping to truncate
 * @lstart: offset from which to truncate
 *
 * Called under (and serialised by) inode-&gt;i_mutex.
 *
 * Note: When this function returns, there can be a page in the process of
 * deletion (inside __delete_from_page_cache()) in the specified range.  Thus
 * mapping-&gt;nrpages can be non-zero when this function returns even after
 * truncation of the whole mapping.
 */</doc>
