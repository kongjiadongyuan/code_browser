<dec f='linux/include/crypto/internal/rsa.h' l='58' type='int rsa_parse_priv_key(struct rsa_key * rsa_key, const void * key, unsigned int key_len)'/>
<use f='linux/crypto/rsa.c' l='312' u='c' c='rsa_set_priv_key'/>
<def f='linux/crypto/rsa_helper.c' l='186' ll='190' type='int rsa_parse_priv_key(struct rsa_key * rsa_key, const void * key, unsigned int key_len)'/>
<dec f='linux/crypto/rsa_helper.c' l='191' type='int rsa_parse_priv_key(struct rsa_key * , const void * , unsigned int )'/>
<use f='linux/crypto/rsa_helper.c' l='191' c='rsa_parse_priv_key'/>
<use f='linux/crypto/rsa_helper.c' l='191' u='a'/>
<use f='linux/crypto/rsa_helper.c' l='191' u='a'/>
<doc f='linux/crypto/rsa_helper.c' l='174'>/**
 * rsa_parse_priv_key() - decodes the BER encoded buffer and stores in the
 *                        provided struct rsa_key, pointers to the raw key
 *                        as is, so that the caller can copy it or MPI parse it,
 *                        etc.
 *
 * @rsa_key:	struct rsa_key key representation
 * @key:	key in BER format
 * @key_len:	length of key
 *
 * Return:	0 on success or error code in case of error
 */</doc>
