<def f='linux/include/linux/fs.h' l='503' ll='506' type='int mapping_writably_mapped(struct address_space * mapping)'/>
<doc f='linux/include/linux/fs.h' l='494'>/*
 * Might pages of this file have been modified in userspace?
 * Note that i_mmap_writable counts all VM_SHARED vmas: do_mmap_pgoff
 * marks vma as VM_SHARED if it is shared, and the file was opened for
 * writing i.e. vma may be mprotected writable even if now readonly.
 *
 * If i_mmap_writable is negative, no new writable mappings are allowed. You
 * can only deny writable mappings, if none exists right now.
 */</doc>
<use f='linux/fs/iomap.c' l='194' u='c' c='iomap_write_actor'/>
<use f='linux/fs/locks.c' l='2261' u='c' c='fcntl_setlk'/>
<use f='linux/mm/filemap.c' l='2172' u='c' c='generic_file_buffered_read'/>
<use f='linux/mm/filemap.c' l='3144' u='c' c='generic_perform_write'/>
<use f='linux/mm/shmem.c' l='2482' u='c' c='shmem_file_read_iter'/>
