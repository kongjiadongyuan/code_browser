<def f='linux/include/drm/drm_debugfs_crc.h' l='52' ll='60'/>
<use f='linux/include/drm/drm_crtc.h' l='854'/>
<size>72</size>
<doc f='linux/include/drm/drm_debugfs_crc.h' l='41'>/**
 * struct drm_crtc_crc - data supporting CRC capture on a given CRTC
 * @lock: protects the fields in this struct
 * @source: name of the currently configured source of CRCs
 * @opened: whether userspace has opened the data file for reading
 * @entries: array of entries, with size of %DRM_CRC_ENTRIES_NR
 * @head: head of circular queue
 * @tail: tail of circular queue
 * @values_cnt: number of CRC values per entry, up to %DRM_MAX_CRC_NR
 * @wq: workqueue used to synchronize reading and writing
 */</doc>
<mbr r='drm_crtc_crc::lock' o='0' t='spinlock_t'/>
<mbr r='drm_crtc_crc::source' o='64' t='const char *'/>
<mbr r='drm_crtc_crc::opened' o='128' t='bool'/>
<mbr r='drm_crtc_crc::entries' o='192' t='struct drm_crtc_crc_entry *'/>
<mbr r='drm_crtc_crc::head' o='256' t='int'/>
<mbr r='drm_crtc_crc::tail' o='288' t='int'/>
<mbr r='drm_crtc_crc::values_cnt' o='320' t='size_t'/>
<mbr r='drm_crtc_crc::wq' o='384' t='wait_queue_head_t'/>
<use f='linux/drivers/gpu/drm/drm_debugfs_crc.c' l='88' c='crc_control_write'/>
<use f='linux/drivers/gpu/drm/drm_debugfs_crc.c' l='133' c='crtc_crc_data_count'/>
<use f='linux/drivers/gpu/drm/drm_debugfs_crc.c' l='139' c='crtc_crc_cleanup'/>
<use f='linux/drivers/gpu/drm/drm_debugfs_crc.c' l='152' c='crtc_crc_open'/>
<use f='linux/drivers/gpu/drm/drm_debugfs_crc.c' l='231' c='crtc_crc_release'/>
<use f='linux/drivers/gpu/drm/drm_debugfs_crc.c' l='254' c='crtc_crc_read'/>
<use f='linux/drivers/gpu/drm/drm_debugfs_crc.c' l='359' c='drm_crtc_add_crc_entry'/>
<size>72</size>
