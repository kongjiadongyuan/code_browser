<dec f='linux/arch/x86/include/asm/text-patching.h' l='37' type='void * text_poke(void * addr, const void * opcode, size_t len)'/>
<use f='linux/arch/x86/kernel/alternative.c' l='444' u='c' c='alternatives_smp_lock'/>
<use f='linux/arch/x86/kernel/alternative.c' l='460' u='c' c='alternatives_smp_unlock'/>
<def f='linux/arch/x86/kernel/alternative.c' l='689' ll='722' type='void * text_poke(void * addr, const void * opcode, size_t len)'/>
<use f='linux/arch/x86/kernel/alternative.c' l='794' u='c' c='text_poke_bp'/>
<use f='linux/arch/x86/kernel/alternative.c' l='800' u='c' c='text_poke_bp'/>
<use f='linux/arch/x86/kernel/alternative.c' l='812' u='c' c='text_poke_bp'/>
<doc f='linux/arch/x86/kernel/alternative.c' l='676'>/**
 * text_poke - Update instructions on a live kernel
 * @addr: address to modify
 * @opcode: source of the copy
 * @len: length to copy
 *
 * Only atomic text poke/set should be allowed when not doing early patching.
 * It means the size must be writable atomically and the address must be aligned
 * in a way that permits an atomic write. It also makes sure we fit on a single
 * page.
 *
 * Note: Must be called under text_mutex.
 */</doc>
<doc f='linux/arch/x86/include/asm/text-patching.h' l='23'>/*
 * Clear and restore the kernel write-protection flag on the local CPU.
 * Allows the kernel to edit read-only pages.
 * Side-effect: any interrupt handler running between save and restore will have
 * the ability to write to read-only pages.
 *
 * Warning:
 * Code patching in the UP case is safe if NMIs and MCE handlers are stopped and
 * no thread can be preempted in the instructions being modified (no iret to an
 * invalid instruction possible) or if the instructions are changed from a
 * consistent state to another consistent state atomically.
 * On the local CPU you need to be protected again NMI or MCE handlers seeing an
 * inconsistent instruction while you patch.
 */</doc>
<use f='linux/arch/x86/kernel/kprobes/core.c' l='472' u='c' c='arch_copy_kprobe'/>
<use f='linux/arch/x86/kernel/kprobes/core.c' l='502' u='c' c='arch_arm_kprobe'/>
<use f='linux/arch/x86/kernel/kprobes/core.c' l='507' u='c' c='arch_disarm_kprobe'/>
<use f='linux/arch/x86/kernel/kprobes/opt.c' l='416' u='c' c='arch_prepare_optimized_kprobe'/>
