<dec f='linux/arch/x86/include/asm/io.h' l='408' type='int arch_phys_wc_add(unsigned long base, unsigned long size)'/>
<def f='linux/arch/x86/kernel/cpu/mtrr/main.c' l='567' macro='1' type='int arch_phys_wc_add(unsigned long base, unsigned long size)'/>
<dec f='linux/arch/x86/kernel/cpu/mtrr/main.c' l='582' macro='1' type='int arch_phys_wc_add(unsigned long , unsigned long )'/>
<use f='linux/arch/x86/kernel/cpu/mtrr/main.c' l='582' macro='1' c='arch_phys_wc_add'/>
<use f='linux/arch/x86/kernel/cpu/mtrr/main.c' l='582' macro='1' u='a'/>
<use f='linux/arch/x86/kernel/cpu/mtrr/main.c' l='582' macro='1' u='a'/>
<doc f='linux/arch/x86/kernel/cpu/mtrr/main.c' l='552'>/**
 * arch_phys_wc_add - add a WC MTRR and handle errors if PAT is unavailable
 * @base: Physical base address
 * @size: Size of region
 *
 * If PAT is available, this does nothing.  If PAT is unavailable, it
 * attempts to add a WC MTRR covering size bytes starting at base and
 * logs an error if this fails.
 *
 * The called should provide a power of two size on an equivalent
 * power of two boundary.
 *
 * Drivers must store the return value to pass to mtrr_del_wc_if_needed,
 * but drivers should not try to interpret that return value.
 */</doc>
<use f='linux/drivers/gpu/drm/drm_bufs.c' l='209' macro='1' u='c' c='drm_addmap_core'/>
<use f='linux/drivers/gpu/drm/drm_pci.c' l='203' macro='1' u='c' c='drm_pci_agp_init'/>
<use f='linux/drivers/gpu/drm/i915/i915_gem_gtt.c' l='3537' macro='1' u='c' c='i915_ggtt_init_hw'/>
