<dec f='linux/include/net/cfg80211.h' l='4404' type='const u8 * cfg80211_find_ie_match(u8 eid, const u8 * ies, int len, const u8 * match, int match_len, int match_offset)'/>
<use f='linux/include/net/cfg80211.h' l='4425' u='c' c='cfg80211_find_ie'/>
<use f='linux/include/net/cfg80211.h' l='4445' u='c' c='cfg80211_find_ext_ie'/>
<doc f='linux/include/net/cfg80211.h' l='4380'>/**
 * cfg80211_find_ie_match - match information element and byte array in data
 *
 * @eid: element ID
 * @ies: data consisting of IEs
 * @len: length of data
 * @match: byte array to match
 * @match_len: number of bytes in the match array
 * @match_offset: offset in the IE where the byte array should match.
 *	If match_len is zero, this must also be set to zero.
 *	Otherwise this must be set to 2 or more, because the first
 *	byte is the element id, which is already compared to eid, and
 *	the second byte is the IE length.
 *
 * Return: %NULL if the element ID could not be found or if
 * the element is invalid (claims to be longer than the given
 * data) or if the byte array doesn&apos;t match, or a pointer to the first
 * byte of the requested element, that is the byte containing the
 * element ID.
 *
 * Note: There are no checks on the element length other than
 * having to fit into the given data and being large enough for the
 * byte array to match.
 */</doc>
<def f='linux/net/wireless/scan.c' l='483' ll='505' type='const u8 * cfg80211_find_ie_match(u8 eid, const u8 * ies, int len, const u8 * match, int match_len, int match_offset)'/>
<dec f='linux/net/wireless/scan.c' l='506' type='const u8 * cfg80211_find_ie_match(u8 , const u8 * , int , const u8 * , int , int )'/>
<use f='linux/net/wireless/scan.c' l='506' c='cfg80211_find_ie_match'/>
<use f='linux/net/wireless/scan.c' l='506' u='a'/>
<use f='linux/net/wireless/scan.c' l='506' u='a'/>
<use f='linux/net/wireless/scan.c' l='518' u='c' c='cfg80211_find_vendor_ie'/>
