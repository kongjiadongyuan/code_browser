<dec f='linux/include/linux/device.h' l='1197' type='struct device * device_create_vargs(struct class * cls, struct device * parent, dev_t devt, void * drvdata, const char * fmt, struct __va_list_tag * vargs)'/>
<doc f='linux/include/linux/device.h' l='1193'>/*
 * Easy functions for dynamically creating devices on the fly
 */</doc>
<def f='linux/drivers/base/core.c' l='2469' ll='2475' type='struct device * device_create_vargs(struct class * class, struct device * parent, dev_t devt, void * drvdata, const char * fmt, struct __va_list_tag * args)'/>
<dec f='linux/drivers/base/core.c' l='2476' type='struct device * device_create_vargs(struct class * , struct device * , dev_t , void * , const char * , struct __va_list_tag * )'/>
<use f='linux/drivers/base/core.c' l='2476' c='device_create_vargs'/>
<use f='linux/drivers/base/core.c' l='2476' u='a'/>
<use f='linux/drivers/base/core.c' l='2476' u='a'/>
<use f='linux/drivers/base/core.c' l='2509' u='c' c='device_create'/>
<doc f='linux/drivers/base/core.c' l='2444'>/**
 * device_create_vargs - creates a device and registers it with sysfs
 * @class: pointer to the struct class that this device should be registered to
 * @parent: pointer to the parent struct device of this new device, if any
 * @devt: the dev_t for the char device to be added
 * @drvdata: the data to be added to the device for callbacks
 * @fmt: string for the device&apos;s name
 * @args: va_list for the device&apos;s name
 *
 * This function can be used by char device classes.  A struct device
 * will be created in sysfs, registered to the specified class.
 *
 * A &quot;dev&quot; file will be created, showing the dev_t for the device, if
 * the dev_t is not 0,0.
 * If a pointer to a parent struct device is passed in, the newly created
 * struct device will be a child of that device in sysfs.
 * The pointer to the struct device will be returned from the call.
 * Any further sysfs files that might be required can be created using this
 * pointer.
 *
 * Returns &amp;struct device pointer on success, or ERR_PTR() on error.
 *
 * Note: the struct class passed to this function must have previously
 * been created with a call to class_create().
 */</doc>
<use f='linux/mm/backing-dev.c' l='881' u='c' c='bdi_register_va'/>
