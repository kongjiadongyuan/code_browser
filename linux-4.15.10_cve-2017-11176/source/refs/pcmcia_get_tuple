<dec f='linux/include/pcmcia/ds.h' l='172' type='size_t pcmcia_get_tuple(struct pcmcia_device * p_dev, cisdata_t code, u8 ** buf)'/>
<doc f='linux/include/pcmcia/ds.h' l='170'>/* get the very first CIS entry of type @code. Note that buf is pointer
 * to u8 *buf; and that you need to kfree(buf) afterwards. */</doc>
<def f='linux/drivers/pcmcia/pcmcia_cis.c' l='377' ll='389' type='size_t pcmcia_get_tuple(struct pcmcia_device * p_dev, cisdata_t code, unsigned char ** buf)'/>
<dec f='linux/drivers/pcmcia/pcmcia_cis.c' l='390' type='size_t pcmcia_get_tuple(struct pcmcia_device * , cisdata_t , u8 ** )'/>
<use f='linux/drivers/pcmcia/pcmcia_cis.c' l='390' c='pcmcia_get_tuple'/>
<use f='linux/drivers/pcmcia/pcmcia_cis.c' l='390' u='a'/>
<use f='linux/drivers/pcmcia/pcmcia_cis.c' l='390' u='a'/>
<doc f='linux/drivers/pcmcia/pcmcia_cis.c' l='367'>/**
 * pcmcia_get_tuple() - get first tuple from CIS
 * @p_dev:	the struct pcmcia_device which we need to loop for.
 * @code:	which CIS code shall we look for?
 * @buf:        pointer to store the buffer to.
 *
 * pcmcia_get_tuple() gets the content of the first CIS entry of type @code.
 * It returns the buffer length (or zero). The caller is responsible to free
 * the buffer passed in @buf.
 */</doc>
