<dec f='linux/include/linux/libata.h' l='1099' type='int sata_link_scr_lpm(struct ata_link * link, enum ata_lpm_policy policy, bool spm_wakeup)'/>
<use f='linux/drivers/ata/ata_piix.c' l='831' u='c' c='piix_sidpr_set_lpm'/>
<use f='linux/drivers/ata/libahci.c' l='767' u='c' c='ahci_set_lpm'/>
<use f='linux/drivers/ata/libahci.c' l='807' u='c' c='ahci_set_lpm'/>
<def f='linux/drivers/ata/libata-core.c' l='3949' ll='4002' type='int sata_link_scr_lpm(struct ata_link * link, enum ata_lpm_policy policy, bool spm_wakeup)'/>
<dec f='linux/drivers/ata/libata-core.c' l='7264' type='int sata_link_scr_lpm(struct ata_link * , enum ata_lpm_policy , bool )'/>
<use f='linux/drivers/ata/libata-core.c' l='7264' c='sata_link_scr_lpm'/>
<use f='linux/drivers/ata/libata-core.c' l='7264' u='a'/>
<use f='linux/drivers/ata/libata-core.c' l='7264' u='a'/>
<doc f='linux/drivers/ata/libata-core.c' l='3931'>/**
 *	sata_link_scr_lpm - manipulate SControl IPM and SPM fields
 *	@link: ATA link to manipulate SControl for
 *	@policy: LPM policy to configure
 *	@spm_wakeup: initiate LPM transition to active state
 *
 *	Manipulate the IPM field of the SControl register of @link
 *	according to @policy.  If @policy is ATA_LPM_MAX_POWER and
 *	@spm_wakeup is %true, the SPM field is manipulated to wake up
 *	the link.  This function also clears PHYRDY_CHG before
 *	returning.
 *
 *	LOCKING:
 *	EH context.
 *
 *	RETURNS:
 *	0 on success, -errno otherwise.
 */</doc>
<use f='linux/drivers/ata/libata-pmp.c' l='207' u='c' c='sata_pmp_set_lpm'/>
