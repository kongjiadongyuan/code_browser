<dec f='linux/include/drm/drm_edid.h' l='355' type='int drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe * frame, const struct drm_display_mode * mode, bool is_hdmi2_sink)'/>
<def f='linux/drivers/gpu/drm/drm_edid.c' l='4788' ll='4846' type='int drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe * frame, const struct drm_display_mode * mode, bool is_hdmi2_sink)'/>
<dec f='linux/drivers/gpu/drm/drm_edid.c' l='4847' type='int drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe * , const struct drm_display_mode * , bool )'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='4847' c='drm_hdmi_avi_infoframe_from_display_mode'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='4847' u='a'/>
<use f='linux/drivers/gpu/drm/drm_edid.c' l='4847' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_edid.c' l='4779'>/**
 * drm_hdmi_avi_infoframe_from_display_mode() - fill an HDMI AVI infoframe with
 *                                              data from a DRM display mode
 * @frame: HDMI AVI infoframe
 * @mode: DRM display mode
 * @is_hdmi2_sink: Sink is HDMI 2.0 compliant
 *
 * Return: 0 on success or a negative error code on failure.
 */</doc>
<use f='linux/drivers/gpu/drm/i915/intel_hdmi.c' l='473' u='c' c='intel_hdmi_set_avi_infoframe'/>
<use f='linux/drivers/gpu/drm/i915/intel_sdvo.c' l='1005' u='c' c='intel_sdvo_set_avi_infoframe'/>
