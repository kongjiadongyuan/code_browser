<dec f='linux/include/linux/regmap.h' l='853' type='int regmap_multi_reg_write(struct regmap * map, const struct reg_sequence * regs, int num_regs)'/>
<def f='linux/drivers/base/regmap/regmap.c' l='2279' ll='2291' type='int regmap_multi_reg_write(struct regmap * map, const struct reg_sequence * regs, int num_regs)'/>
<dec f='linux/drivers/base/regmap/regmap.c' l='2292' type='int regmap_multi_reg_write(struct regmap * , const struct reg_sequence * , int )'/>
<use f='linux/drivers/base/regmap/regmap.c' l='2292' c='regmap_multi_reg_write'/>
<use f='linux/drivers/base/regmap/regmap.c' l='2292' u='a'/>
<use f='linux/drivers/base/regmap/regmap.c' l='2292' u='a'/>
<doc f='linux/drivers/base/regmap/regmap.c' l='2260'>/**
 * regmap_multi_reg_write() - Write multiple registers to the device
 *
 * @map: Register map to write to
 * @regs: Array of structures containing register,value to be written
 * @num_regs: Number of registers to write
 *
 * Write multiple registers to the device where the set of register, value
 * pairs are supplied in any order, possibly not all in a single range.
 *
 * The &apos;normal&apos; block write mode will send ultimately send data on the
 * target bus as R,V1,V2,V3,..,Vn where successively higher registers are
 * addressed. However, this alternative block multi write mode will send
 * the data as R1,V1,R2,V2,..,Rn,Vn on the target bus. The target device
 * must of course support the mode.
 *
 * A value of zero will be returned on success, a negative errno will be
 * returned in error cases.
 */</doc>
