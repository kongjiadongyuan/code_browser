<dec f='linux/include/drm/drm_dp_mst_helper.h' l='626' type='struct drm_dp_mst_topology_state * drm_atomic_get_mst_topology_state(struct drm_atomic_state * state, struct drm_dp_mst_topology_mgr * mgr)'/>
<use f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='2620' u='c' c='drm_dp_atomic_find_vcpi_slots'/>
<use f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='2660' u='c' c='drm_dp_atomic_release_vcpi_slots'/>
<def f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='3141' ll='3148' type='struct drm_dp_mst_topology_state * drm_atomic_get_mst_topology_state(struct drm_atomic_state * state, struct drm_dp_mst_topology_mgr * mgr)'/>
<dec f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='3149' type='struct drm_dp_mst_topology_state * drm_atomic_get_mst_topology_state(struct drm_atomic_state * , struct drm_dp_mst_topology_mgr * )'/>
<use f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='3149' c='drm_atomic_get_mst_topology_state'/>
<use f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='3149' u='a'/>
<use f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='3149' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_dp_mst_topology.c' l='3126'>/**
 * drm_atomic_get_mst_topology_state: get MST topology state
 *
 * @state: global atomic state
 * @mgr: MST topology manager, also the private object in this case
 *
 * This function wraps drm_atomic_get_priv_obj_state() passing in the MST atomic
 * state vtable so that the private object state returned is that of a MST
 * topology object. Also, drm_atomic_get_private_obj_state() expects the caller
 * to care of the locking, so warn if don&apos;t hold the connection_mutex.
 *
 * RETURNS:
 *
 * The MST topology state or error pointer.
 */</doc>
