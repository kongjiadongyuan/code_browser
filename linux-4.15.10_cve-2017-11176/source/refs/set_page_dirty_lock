<dec f='linux/include/linux/mm.h' l='1459' type='int set_page_dirty_lock(struct page * page)'/>
<use f='linux/block/bio.c' l='1407' u='c' c='__bio_unmap_user'/>
<use f='linux/block/bio.c' l='1612' u='c' c='bio_set_pages_dirty'/>
<use f='linux/fs/block_dev.c' l='247' u='c' c='__blkdev_direct_IO_simple'/>
<use f='linux/fs/direct-io.c' l='538' u='c' c='dio_bio_complete'/>
<use f='linux/mm/memory.c' l='4430' u='c' c='__access_remote_vm'/>
<def f='linux/mm/page-writeback.c' l='2585' ll='2593' type='int set_page_dirty_lock(struct page * page)'/>
<dec f='linux/mm/page-writeback.c' l='2594' type='int set_page_dirty_lock(struct page * )'/>
<use f='linux/mm/page-writeback.c' l='2594' c='set_page_dirty_lock'/>
<use f='linux/mm/page-writeback.c' l='2594' u='a'/>
<use f='linux/mm/page-writeback.c' l='2594' u='a'/>
<doc f='linux/mm/page-writeback.c' l='2575'>/*
 * set_page_dirty() is racy if the caller has no reference against
 * page-&gt;mapping-&gt;host, and if the page is unlocked.  This is because another
 * CPU could truncate the page off the mapping and then free the mapping.
 *
 * Usually, the page _is_ locked, or the caller is a user-space process which
 * holds a reference on the inode by having an open file.
 *
 * In other cases, the page should be locked before running set_page_dirty().
 */</doc>
<use f='linux/mm/process_vm_access.c' l='51' u='c' c='process_vm_rw_pages'/>
