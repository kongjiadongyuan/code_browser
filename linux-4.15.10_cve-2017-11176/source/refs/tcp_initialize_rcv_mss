<dec f='linux/include/net/tcp.h' l='594' type='void tcp_initialize_rcv_mss(struct sock * sk)'/>
<def f='linux/net/ipv4/tcp_input.c' l='482' ll='492' type='void tcp_initialize_rcv_mss(struct sock * sk)'/>
<dec f='linux/net/ipv4/tcp_input.c' l='493' type='void tcp_initialize_rcv_mss(struct sock * )'/>
<use f='linux/net/ipv4/tcp_input.c' l='493' c='tcp_initialize_rcv_mss'/>
<use f='linux/net/ipv4/tcp_input.c' l='493' u='a'/>
<use f='linux/net/ipv4/tcp_input.c' l='493' u='a'/>
<use f='linux/net/ipv4/tcp_input.c' l='5658' u='c' c='tcp_rcv_synsent_state_process'/>
<use f='linux/net/ipv4/tcp_input.c' l='5752' u='c' c='tcp_rcv_synsent_state_process'/>
<use f='linux/net/ipv4/tcp_input.c' l='5921' u='c' c='tcp_rcv_state_process'/>
<doc f='linux/net/ipv4/tcp_input.c' l='475'>/* Initialize RCV_MSS value.
 * RCV_MSS is an our guess about MSS used by the peer.
 * We haven&apos;t any direct information about the MSS.
 * It&apos;s better to underestimate the RCV_MSS rather than overestimate.
 * Overestimations make us ACKing less frequently than needed.
 * Underestimations are more easy to detect and fix by tcp_measure_rcv_mss().
 */</doc>
<use f='linux/net/ipv4/tcp_ipv4.c' l='1389' u='c' c='tcp_v4_syn_recv_sock'/>
<use f='linux/net/ipv4/tcp_output.c' l='3344' u='c' c='tcp_connect_init'/>
<use f='linux/net/ipv6/tcp_ipv6.c' l='1195' u='c' c='tcp_v6_syn_recv_sock'/>
