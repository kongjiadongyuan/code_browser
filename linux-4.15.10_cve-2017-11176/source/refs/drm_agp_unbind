<dec f='linux/include/drm/drm_agpsupport.h' l='60' type='int drm_agp_unbind(struct drm_device * dev, struct drm_agp_binding * request)'/>
<def f='linux/drivers/gpu/drm/drm_agpsupport.c' l='271' ll='285' type='int drm_agp_unbind(struct drm_device * dev, struct drm_agp_binding * request)'/>
<dec f='linux/drivers/gpu/drm/drm_agpsupport.c' l='286' type='int drm_agp_unbind(struct drm_device * , struct drm_agp_binding * )'/>
<use f='linux/drivers/gpu/drm/drm_agpsupport.c' l='286' c='drm_agp_unbind'/>
<use f='linux/drivers/gpu/drm/drm_agpsupport.c' l='286' u='a'/>
<use f='linux/drivers/gpu/drm/drm_agpsupport.c' l='286' u='a'/>
<use f='linux/drivers/gpu/drm/drm_agpsupport.c' l='294' u='c' c='drm_agp_unbind_ioctl'/>
<doc f='linux/drivers/gpu/drm/drm_agpsupport.c' l='259'>/**
 * Unbind AGP memory from the GATT (ioctl).
 *
 * \param inode device inode.
 * \param file_priv DRM file private.
 * \param cmd command.
 * \param arg pointer to a drm_agp_binding structure.
 * \return zero on success or a negative number on failure.
 *
 * Verifies the AGP device is present and acquired, looks-up the AGP memory
 * entry and passes it to the unbind_agp() function.
 */</doc>
