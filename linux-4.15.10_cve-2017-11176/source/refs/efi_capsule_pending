<dec f='linux/include/linux/efi.h' l='1444' type='bool efi_capsule_pending(int * reset_type)'/>
<use f='linux/arch/x86/kernel/reboot.c' l='584' u='c' c='native_machine_emergency_restart'/>
<def f='linux/drivers/firmware/efi/capsule.c' l='52' ll='61' type='bool efi_capsule_pending(int * reset_type)'/>
<doc f='linux/drivers/firmware/efi/capsule.c' l='34'>/**
 * efi_capsule_pending - has a capsule been passed to the firmware?
 * @reset_type: store the type of EFI reset if capsule is pending
 *
 * To ensure that the registered capsule is processed correctly by the
 * firmware we need to perform a specific type of reset. If a capsule is
 * pending return the reset type in @reset_type.
 *
 * This function will race with callers of efi_capsule_update(), for
 * example, calling this function while somebody else is in
 * efi_capsule_update() but hasn&apos;t reached efi_capsue_update_locked()
 * will miss the updates to capsule_pending and efi_reset_type after
 * efi_capsule_update_locked() completes.
 *
 * A non-racy use is from platform reboot code because we use
 * system_state to ensure no capsules can be sent to the firmware once
 * we&apos;re at SYSTEM_RESTART. See efi_capsule_update_locked().
 */</doc>
<use f='linux/drivers/firmware/efi/reboot.c' l='37' u='c' c='efi_reboot'/>
