<dec f='linux/include/drm/drm_file.h' l='379' type='void drm_send_event(struct drm_device * dev, struct drm_pending_event * e)'/>
<def f='linux/drivers/gpu/drm/drm_file.c' l='741' ll='748' type='void drm_send_event(struct drm_device * dev, struct drm_pending_event * e)'/>
<dec f='linux/drivers/gpu/drm/drm_file.c' l='749' type='void drm_send_event(struct drm_device * , struct drm_pending_event * )'/>
<use f='linux/drivers/gpu/drm/drm_file.c' l='749' c='drm_send_event'/>
<use f='linux/drivers/gpu/drm/drm_file.c' l='749' u='a'/>
<use f='linux/drivers/gpu/drm/drm_file.c' l='749' u='a'/>
<doc f='linux/drivers/gpu/drm/drm_file.c' l='726'>/**
 * drm_send_event - send DRM event to file descriptor
 * @dev: DRM device
 * @e: DRM event to deliver
 *
 * This function sends the event @e, initialized with drm_event_reserve_init(),
 * to its associated userspace DRM file. This function acquires
 * &amp;drm_device.event_lock, see drm_send_event_locked() for callers which already
 * hold this lock.
 *
 * Note that the core will take care of unlinking and disarming events when the
 * corresponding DRM file is closed. Drivers need not worry about whether the
 * DRM file for this event still exists and can call this function upon
 * completion of the asynchronous work unconditionally.
 */</doc>
