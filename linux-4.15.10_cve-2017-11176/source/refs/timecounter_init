<dec f='linux/include/linux/timecounter.h' l='108' type='void timecounter_init(struct timecounter * tc, const struct cyclecounter * cc, u64 start_tstamp)'/>
<doc f='linux/include/linux/timecounter.h' l='98'>/**
 * timecounter_init - initialize a time counter
 * @tc:			Pointer to time counter which is to be initialized/reset
 * @cc:			A cycle counter, ready to be used.
 * @start_tstamp:	Arbitrary initial time stamp.
 *
 * After this call the current cycle register (roughly) corresponds to
 * the initial time stamp. Every call to timecounter_read() increments
 * the time stamp counter by the number of elapsed nanoseconds.
 */</doc>
<use f='linux/drivers/net/ethernet/intel/e1000e/netdev.c' l='3958' u='c' c='e1000e_systim_reset'/>
<use f='linux/drivers/net/ethernet/intel/e1000e/ptp.c' l='225' u='c' c='e1000e_phc_settime'/>
<def f='linux/kernel/time/timecounter.c' l='21' ll='30' type='void timecounter_init(struct timecounter * tc, const struct cyclecounter * cc, u64 start_tstamp)'/>
<dec f='linux/kernel/time/timecounter.c' l='31' type='void timecounter_init(struct timecounter * , const struct cyclecounter * , u64 )'/>
<use f='linux/kernel/time/timecounter.c' l='31' c='timecounter_init'/>
<use f='linux/kernel/time/timecounter.c' l='31' u='a'/>
<use f='linux/kernel/time/timecounter.c' l='31' u='a'/>
<use f='linux/sound/hda/hdac_stream.c' l='499' u='c' c='azx_timecounter_init'/>
