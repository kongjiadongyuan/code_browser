<def f='linux/include/linux/irqdomain.h' l='100' ll='125'/>
<use f='linux/include/linux/irqdomain.h' l='127'/>
<use f='linux/include/linux/irqdomain.h' l='160'/>
<use f='linux/include/linux/irqdomain.h' l='249' c='__irq_domain_add'/>
<use f='linux/include/linux/irqdomain.h' l='254' c='irq_domain_add_simple'/>
<use f='linux/include/linux/irqdomain.h' l='260' c='irq_domain_add_legacy'/>
<use f='linux/include/linux/irqdomain.h' l='316' c='irq_domain_add_linear'/>
<use f='linux/include/linux/irqdomain.h' l='323' c='irq_domain_add_nomap'/>
<use f='linux/include/linux/irqdomain.h' l='330' c='irq_domain_add_legacy_isa'/>
<use f='linux/include/linux/irqdomain.h' l='337' c='irq_domain_add_tree'/>
<use f='linux/include/linux/irqdomain.h' l='345' c='irq_domain_create_linear'/>
<use f='linux/include/linux/irqdomain.h' l='352' c='irq_domain_create_tree'/>
<use f='linux/include/linux/irqdomain.h' l='401'/>
<use f='linux/include/linux/irqdomain.h' l='429' c='irq_domain_create_hierarchy'/>
<use f='linux/include/linux/irqdomain.h' l='435' c='irq_domain_add_hierarchy'/>
<use f='linux/arch/x86/include/asm/irqdomain.h' l='36'/>
<use f='linux/arch/x86/include/asm/irqdomain.h' l='40'/>
<use f='linux/include/linux/msi.h' l='321' c='platform_msi_create_device_domain'/>
<size>80</size>
<doc f='linux/include/linux/irqdomain.h' l='85'>/**
 * struct irq_domain_ops - Methods for irq_domain objects
 * @match: Match an interrupt controller device node to a host, returns
 *         1 on a match
 * @map: Create or update a mapping between a virtual irq number and a hw
 *       irq number. This is called only once for a given mapping.
 * @unmap: Dispose of such a mapping
 * @xlate: Given a device tree node and interrupt specifier, decode
 *         the hardware irq number and linux irq type value.
 *
 * Functions below are provided by the driver and called whenever a new mapping
 * is created or an old mapping is disposed. The driver can then proceed to
 * whatever internal data structures management is required. It also needs
 * to setup the irq_desc when returning from map().
 */</doc>
<mbr r='irq_domain_ops::match' o='0' t='int (*)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token)'/>
<mbr r='irq_domain_ops::select' o='64' t='int (*)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token)'/>
<mbr r='irq_domain_ops::map' o='128' t='int (*)(struct irq_domain *, unsigned int, irq_hw_number_t)'/>
<mbr r='irq_domain_ops::unmap' o='192' t='void (*)(struct irq_domain *, unsigned int)'/>
<mbr r='irq_domain_ops::xlate' o='256' t='int (*)(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *)'/>
<mbr r='irq_domain_ops::alloc' o='320' t='int (*)(struct irq_domain *, unsigned int, unsigned int, void *)'/>
<mbr r='irq_domain_ops::free' o='384' t='void (*)(struct irq_domain *, unsigned int, unsigned int)'/>
<mbr r='irq_domain_ops::activate' o='448' t='int (*)(struct irq_domain *, struct irq_data *, bool)'/>
<mbr r='irq_domain_ops::deactivate' o='512' t='void (*)(struct irq_domain *, struct irq_data *)'/>
<mbr r='irq_domain_ops::translate' o='576' t='int (*)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *)'/>
<use f='linux/arch/x86/kernel/apic/io_apic.c' l='3014'/>
<size>80</size>
<use f='linux/arch/x86/kernel/apic/vector.c' l='620'/>
<size>80</size>
<use f='linux/drivers/base/platform-msi.c' l='335' c='platform_msi_create_device_domain'/>
<size>80</size>
<use f='linux/drivers/i2c/i2c-core-base.c' l='1182'/>
<size>80</size>
<use f='linux/kernel/irq/irqdomain.c' l='129' c='__irq_domain_add'/>
<use f='linux/kernel/irq/irqdomain.c' l='317' c='irq_domain_add_simple'/>
<use f='linux/kernel/irq/irqdomain.c' l='361' c='irq_domain_add_legacy'/>
<use f='linux/kernel/irq/irqdomain.c' l='1082'/>
<use f='linux/kernel/irq/irqdomain.c' l='1130' c='irq_domain_create_hierarchy'/>
<size>80</size>
<use f='linux/kernel/irq/msi.c' l='169'/>
<size>80</size>
