<dec f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='52' type='bool intel_display_power_well_is_enabled(struct drm_i915_private * dev_priv, enum i915_power_well_id power_well_id)'/>
<use f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='583' u='c' c='assert_can_enable_dc5'/>
<def f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='2076' ll='2086' type='bool intel_display_power_well_is_enabled(struct drm_i915_private * dev_priv, enum i915_power_well_id power_well_id)'/>
<doc f='linux/drivers/gpu/drm/i915/intel_runtime_pm.c' l='35'>/**
 * DOC: runtime pm
 *
 * The i915 driver supports dynamic enabling and disabling of entire hardware
 * blocks at runtime. This is especially important on the display side where
 * software is supposed to control many power gates manually on recent hardware,
 * since on the GT side a lot of the power management is done by the hardware.
 * But even there some manual control at the device level is required.
 *
 * Since i915 supports a diverse set of platforms with a unified codebase and
 * hardware engineers just love to shuffle functionality around between power
 * domains there&apos;s a sizeable amount of indirection required. This file provides
 * generic functions to the driver for grabbing and releasing references for
 * abstract power domains. It then maps those to the actual power wells
 * present for a given platform.
 */</doc>
