<dec f='linux/include/linux/input.h' l='362' type='int input_register_device(struct input_dev * )'/>
<use f='linux/drivers/acpi/acpi_video.c' l='1934' u='c' c='acpi_video_bus_add_notify_handler'/>
<use f='linux/drivers/acpi/button.c' l='542' u='c' c='acpi_button_add'/>
<use f='linux/drivers/hid/hid-input.c' l='1669' u='c' c='hidinput_connect'/>
<use f='linux/drivers/hid/hid-sony.c' l='1283' u='c' c='sony_register_touchpad'/>
<use f='linux/drivers/hid/hid-sony.c' l='1379' u='c' c='sony_register_sensors'/>
<use f='linux/drivers/input/input-polldev.c' l='323' u='c' c='input_register_polled_device'/>
<def f='linux/drivers/input/input.c' l='2079' ll='2173' type='int input_register_device(struct input_dev * dev)'/>
<dec f='linux/drivers/input/input.c' l='2174' type='int input_register_device(struct input_dev * )'/>
<use f='linux/drivers/input/input.c' l='2174' c='input_register_device'/>
<use f='linux/drivers/input/input.c' l='2174' u='a'/>
<use f='linux/drivers/input/input.c' l='2174' u='a'/>
<doc f='linux/drivers/input/input.c' l='2056'>/**
 * input_register_device - register device with input core
 * @dev: device to be registered
 *
 * This function registers device with input core. The device must be
 * allocated with input_allocate_device() and all it&apos;s capabilities
 * set up before registering.
 * If function fails the device must be freed with input_free_device().
 * Once device has been successfully registered it can be unregistered
 * with input_unregister_device(); input_free_device() should not be
 * called in this case.
 *
 * Note that this function is also used to register managed input devices
 * (ones allocated with devm_input_allocate_device()). Such managed input
 * devices need not be explicitly unregistered or freed, their tear down
 * is controlled by the devres infrastructure. It is also worth noting
 * that tear down of managed input devices is internally a 2-step process:
 * registered managed input device is first unregistered, but stays in
 * memory and can still handle input_event() calls (although events will
 * not be delivered anywhere). The freeing of managed input device will
 * happen later, when devres stack is unwound to the point where device
 * allocation was made.
 */</doc>
<use f='linux/drivers/input/keyboard/atkbd.c' l='1200' u='c' c='atkbd_connect'/>
<use f='linux/drivers/input/keyboard/atkbd.c' l='1383' u='c' c='atkbd_set_extra'/>
<use f='linux/drivers/input/keyboard/atkbd.c' l='1459' u='c' c='atkbd_set_scroll'/>
<use f='linux/drivers/input/keyboard/atkbd.c' l='1514' u='c' c='atkbd_set_set'/>
<use f='linux/drivers/input/keyboard/atkbd.c' l='1567' u='c' c='atkbd_set_softrepeat'/>
<use f='linux/drivers/input/keyboard/atkbd.c' l='1615' u='c' c='atkbd_set_softraw'/>
<use f='linux/drivers/input/mouse/alps.c' l='1457' u='c' c='alps_register_bare_ps2_mouse'/>
<use f='linux/drivers/input/mouse/alps.c' l='3094' u='c' c='alps_init'/>
<use f='linux/drivers/input/mouse/lifebook.c' l='302' u='c' c='lifebook_create_relative_device'/>
<use f='linux/drivers/input/mouse/psmouse-base.c' l='1600' u='c' c='psmouse_connect'/>
<use f='linux/drivers/input/mouse/psmouse-base.c' l='1933' u='c' c='psmouse_attr_set_protocol'/>
<use f='linux/drivers/macintosh/mac_hid.c' l='54' u='c' c='mac_hid_create_emumouse'/>
<use f='linux/drivers/platform/x86/eeepc-laptop.c' l='1207' u='c' c='eeepc_input_init'/>
<use f='linux/sound/core/jack.c' l='118' u='c' c='snd_jack_dev_register'/>
